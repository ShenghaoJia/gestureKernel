
/module/data/BUILD/GAP8_V2/GCC_RISCV/test:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc 000003e0  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00001038  1b0003e8  1b0003e8  000013e8  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00003000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000e66c  1c0000a0  1c0000a0  000030a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   00000050  1c00e70c  1c00e70c  0001170c  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c00e75c  1c00e75c  0001175c  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c00e768  1c00e768  00013044  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c00e768  1c00e768  00013044  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c00e768  1c00e768  00013044  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c00e768  1c00e768  00013044  2**0  CONTENTS
 10 .got          00000000  1c00e768  1c00e768  00013044  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c00e768  1c00e768  00013044  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c00e768  1c00e768  00013044  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c00e768  1c00e768  00013044  2**0  CONTENTS
 14 .rodata       000007c8  1c00e768  1c00e768  00011768  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         000003a0  1c00ef30  1c00ef30  00011f30  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          000003a0  1c00f2d0  1c00f2d0  000122d0  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c00f670  00013004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  00000028  1000001c  1c00f688  0001301c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000044  10000044  00013044  2**0  CONTENTS
 20 .debug_frame  0000c810  00000000  00000000  00013044  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   000da16f  00000000  00000000  0001f854  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 000105ee  00000000  00000000  000f99c3  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00067f7e  00000000  00000000  00109fb1  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00002158  00000000  00000000  00171f30  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 0000a1d0  00000000  00000000  00174088  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   000389b2  00000000  00000000  0017e258  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    000102d8  00000000  00000000  001b6c0a  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  001c6ee2  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  001c6efc  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b0003e8 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c00e70c l    d  .init_array	00000000 .init_array
1c00e75c l    d  .fini_array	00000000 .fini_array
1c00e768 l    d  .init	00000000 .init
1c00e768 l    d  .fini	00000000 .fini
1c00e768 l    d  .preinit_array	00000000 .preinit_array
1c00e768 l    d  .boot	00000000 .boot
1c00e768 l    d  .got	00000000 .got
1c00e768 l    d  .shbss	00000000 .shbss
1c00e768 l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c00e768 l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c00e768 l    d  .rodata	00000000 .rodata
1c00ef30 l    d  .data	00000000 .data
1c00f2d0 l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000044 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c00a284 l     F .text	0000001c __rt_event_enqueue
1c00a2a0 l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c00a2c0 l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c00b864 l     F .text	00000014 l2_memcpy
1c00b878 l     F .text	00000024 rt_event_enqueue
1c00b89c l     F .text	00000032 pi_task_wait_on.isra.4
1c00bb8e l     F .text	0000004a __pi_hyper_copy_exec
1c00bcf2 l     F .text	00000296 __pi_hyper_copy_misaligned
1c00bbd8 l     F .text	00000056 __pi_hyper_copy
1c00bca0 l     F .text	00000052 exec_pending_task
1c00bf88 l     F .text	0000009e __pi_hyper_copy_2d
1c00c064 l     F .text	0000002e __rt_hyper_init
1c00f3b8 l     O .bss	00000080 __pi_hyper_temp_buffer
1c00edb8 l     O .rodata	00000034 __hyper_pad
1c00f5ec l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c00f5f0 l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 udma-v2.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c00a0a4 l     F .text	0000007c __rt_fc_cluster_lock_req
1b000bf0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c00ceee l     F .text	0000000e __rt_io_end_of_flush
1c00cefc l     F .text	00000050 __rt_io_uart_wait_req
1c00cf4c l     F .text	00000042 __rt_do_putc_host
1c00cf8e l     F .text	0000005a __rt_io_start
1c00cfe8 l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c00d008 l     F .text	00000070 __rt_io_lock
1c00d078 l     F .text	00000034 __rt_putc_host_cluster_req
1c00d0ac l     F .text	00000070 __rt_io_unlock
1c00d11c l     F .text	000000da __rt_io_uart_flush.constprop.11
1c00d1f6 l     F .text	00000092 __rt_io_uart_wait_pending
1c00d288 l     F .text	00000028 __rt_io_stop
1c00d3f4 l     F .text	000000ac tfp_putc.isra.9
1c00f548 l     O .bss	00000080 __rt_io_event
1b000c0c l     O .stack	00000010 __rt_io_fc_lock
1c00f250 l     O .data	00000080 __rt_putc_host_buffer
1c00f600 l     O .bss	00000004 __rt_io_event_current
1c00f604 l     O .bss	00000004 __rt_io_pending_flush
1c00f608 l     O .bss	00000004 __rt_putc_host_buffer_index
1c00f60c l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 sched.o
1c00018a l       .text	00000000 __rt_handle_special_event
1c000184 l       .text	00000000 __rt_no_first
1c000186 l       .text	00000000 __rt_common
1c000188 l       .text	00000000 enqueue_end
1c0001ea l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c000226 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c000210 l       .text	00000000 __rt_cluster_pool_update_end
1c0001f8 l       .text	00000000 __rt_cluster_pool_update_loop
1c000200 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c000208 l       .text	00000000 __rt_cluster_pool_update_no_current
1c000244 l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c0002be l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c0003ae l       .text	00000000 __rt_udma_no_copy
1c000376 l       .text	00000000 repeat_transfer
1c0003c6 l       .text	00000000 handle_special_end
1c000322 l       .text	00000000 resume_after_special_end
1c000360 l       .text	00000000 checkTask
1c000336 l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c00035c l       .text	00000000 transfer_resume
1c000354 l       .text	00000000 hyper
1c000354 l       .text	00000000 fc_tcdm
1c000354 l       .text	00000000 dual
1c000376 l       .text	00000000 dmaCmd
1c00039e l       .text	00000000 not_last
1c00040e l       .text	00000000 i2c_step1
1c00042a l       .text	00000000 i2c_step2
1c0003d0 l       .text	00000000 spim_step3
1c0003ec l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c00047e l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c000484 l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c00049e l       .text	00000000 __rt_soc_evt_no_udma_channel
1c00050c l       .text	00000000 rtc_event_handler
1c0004ca l       .text	00000000 __rt_soc_evt_pwm
1c0004de l       .text	00000000 __rt_soc_evt_store
1c0004f2 l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 udma-v2_asm.o
1c000542 l       .text	00000000 __rt_udma_handle_pending
00000000 l    df *ABS*	00000000 hyperram-v1_asm.o
1c000594 l       .text	00000000 __rt_hyper_handle_copy_end
1c00054e l       .text	00000000 __rt_hyper_repeat_copy
1c000580 l       .text	00000000 __rt_hyper_repeat_copy_not_last
1c0005a6 l       .text	00000000 __rt_hyper_handle_emu_task
1c0005c0 l       .text	00000000 __rt_hyper_handle_pending_tasks
1c000622 l       .text	00000000 __rt_hyper_repeat_copy_not_last2
00000000 l    df *ABS*	00000000 gpio.o
1c000686 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixunsdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 model.c
1c0017d6 l     F .text	000000d8 cluster
1c00f2d0 l     O .bss	0000000c camera
1c00f130 l     O .data	00000001 value
00000000 l    df *ABS*	00000000 modelKernels.c
1c00f2dc l     O .bss	0000001c HyperFlash
1c00f2f8 l     O .bss	0000000c HyperRam
00000000 l    df *ABS*	00000000 CNN_Activation_SQ8.c
1c0052f8 l     F .text	0000012e KerReductIO_Compact_SQ8_1
00000000 l    df *ABS*	00000000 CNN_Bias_Linear_SQ8.c
00000000 l    df *ABS*	00000000 CNN_Conv_SQ8.c
1c005762 l     F .text	0000001a LastDefinedOutput
1c00577c l     F .text	00000120 KerConv3x3Stride1_Body_2Out_SQ8
1c00589c l     F .text	00000138 KerConv2x3from3x3Stride1_V_2Out_SQ8
1c0059d4 l     F .text	0000009a KerConv3x2from3x3Stride1_H_2Out_SQ8
1c005a6e l     F .text	000000fe KerConv3x3BorderStride1_2Out_SQ8
1c005b6c l     F .text	000000cc KerConv3x3Stride1_Body_SQ8
1c005c38 l     F .text	000000c8 KerConv2x3from3x3Stride1_V_SQ8
1c005d00 l     F .text	00000056 KerConv3x2from3x3Stride1_H_SQ8
1c005d56 l     F .text	000000f0 KerConv3x3BorderStride1_SQ8
1c005e46 l     F .text	000000d4 KerConv3x3Stride2_Body_SQ8
1c005f1a l     F .text	000000d2 KerConv2x3from3x3Stride2_V_SQ8
1c005fec l     F .text	0000005c KerConv3x2from3x3Stride2_H_SQ8
1c006048 l     F .text	000000f8 KerConv3x3BorderStride2_SQ8
00000000 l    df *ABS*	00000000 CNN_Pooling_SQ8.c
1c006520 l     F .text	0000001a LastDefinedOutput
1c00653a l     F .text	000003c8 KerMaxPool2x2Stride2_SQ8
1c006902 l     F .text	0000028e KerAvgPool2x2Stride2_SQ8
1c006b90 l     F .text	0000007c Ker_ActivationScale1_SQ8
1c006c0c l     F .text	00000220 Ker_Activation_SQ8
1c006e2c l     F .text	000000d8 KerParPoolActivation
00000000 l    df *ABS*	00000000 CNN_SoftMax_SQ8.c
10000020 l     O .l1cluster_g	00000020 Reduct.15734
1c00eae8 l     O .rodata	00000012 ExpCoeffLUT
1c00eafc l     O .rodata	00000018 FractionExpLUT
1c00eb14 l     O .rodata	00000018 IntegerExpLUT
00000000 l    df *ABS*	00000000 norm_transpose.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 fs.c
1c0073d4 l     F .text	00000032 pi_task_wait_on.isra.3
00000000 l    df *ABS*	00000000 read_fs.c
1c0074ba l     F .text	00000008 pi_flash_read_async
1c0074c2 l     F .text	0000003e __pi_read_fs_write
1c007500 l     F .text	00000010 __pi_read_fs_seek
1c007510 l     F .text	00000040 __pi_read_fs_direct_read_async
1c007550 l     F .text	00000018 __pi_read_fs_copy_async
1c007568 l     F .text	00000018 __pi_read_fs_copy_2d_async
1c007580 l     F .text	00000024 rt_event_enqueue
1c0075a4 l     F .text	00000038 __pi_fs_free
1c0075dc l     F .text	00000004 __pi_read_fs_unmount
1c0075e0 l     F .text	00000126 __pi_read_fs_open
1c007706 l     F .text	00000126 __pi_fs_mount_step
1c00782c l     F .text	0000004e __pi_read_fs_close
1c00787a l     F .text	00000098 __pi_read_fs_mount
1c007912 l     F .text	00000072 __pi_fs_read_cached
1c007a64 l     F .text	00000092 __pi_read_fs_try_read
1c007af6 l     F .text	00000040 __pi_read_fs_read_async
00000000 l    df *ABS*	00000000 host_fs.c
1c007b36 l     F .text	0000000c __pi_host_fs_mount
1c007b42 l     F .text	00000002 __pi_host_fs_unmount
1c007b44 l     F .text	00000024 rt_event_enqueue
1c007b68 l     F .text	00000006 __pi_host_fs_seek
1c007b6e l     F .text	0000007e __pi_host_fs_copy_2d_async
1c007bec l     F .text	00000028 __pi_host_fs_write_async
1c007c14 l     F .text	00000024 __pi_host_fs_read_async
1c007c38 l     F .text	00000042 __pi_host_fs_copy_async
1c007c7a l     F .text	00000002 __pi_host_fs_direct_read_async
1c007c7c l     F .text	0000001c __pi_host_fs_close
1c007c98 l     F .text	0000005c __pi_host_fs_open
1c00f304 l     O .bss	00000088 bsp_fs_data
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 himax.c
1c007d42 l     F .text	00000020 __himax_reg_write
1c007d62 l     F .text	0000003c __himax_init_regs
1c007d9e l     F .text	0000002a __himax_set_qqvga
1c007e46 l     F .text	00000022 __himax_standby
1c007e68 l     F .text	00000024 __himax_close
1c007e8c l     F .text	00000070 __himax_reset
1c008126 l     F .text	000000a6 __himax_control
1c00ef80 l     O .data	0000001c himax_api
1c00eb4c l     O .rodata	0000011c __himax_reg_init
00000000 l    df *ABS*	00000000 hyperflash.c
1c0081fa l     F .text	0000001c __rt_event_enqueue
1c008216 l     F .text	0000000e hyperflash_ioctl
1c008224 l     F .text	00000040 hyperflash_stall_task
1c008264 l     F .text	00000088 hyperflash_read_2d_async
1c0084de l     F .text	00000102 hyperflash_handle_pending_task
1c0082ec l     F .text	00000018 hyperflash_copy_2d_async
1c008304 l     F .text	0000000e hyperflash_set_reg_exec
1c008312 l     F .text	000000b0 hyperflash_erase_sector_async
1c008af8 l     F .text	00000052 hyperflash_check_erase
1c0083c2 l     F .text	000000a6 hyperflash_erase_chip_async
1c008468 l     F .text	00000076 hyperflash_read_async
1c008742 l     F .text	0000005c hyperflash_program_async
1c00863e l     F .text	00000054 hyperflash_reg_set_async
1c0085e0 l     F .text	0000005e hyperflash_reg_get_async
1c008692 l     F .text	000000b0 hyperflash_program_resume
1c008b4a l     F .text	00000050 hyperflash_check_program
1c00879e l     F .text	0000001a hyperflash_copy_async
1c0087b8 l     F .text	0000001e hyperflash_close
1c0087d6 l     F .text	00000090 hyperflash_open
1c008866 l     F .text	00000032 pi_task_wait_on.isra.3
1c008898 l     F .text	0000002a hyperflash_copy_2d
1c0088c2 l     F .text	00000022 hyperflash_erase_sector
1c0088e4 l     F .text	00000022 hyperflash_erase_chip
1c008906 l     F .text	00000022 hyperflash_read
1c008928 l     F .text	00000022 hyperflash_reg_get
1c00894a l     F .text	00000022 hyperflash_reg_set
1c00896c l     F .text	00000022 hyperflash_program
1c00898e l     F .text	0000002c hyperflash_copy
1c0089ba l     F .text	000000aa hyperflash_erase_resume
1c008a64 l     F .text	00000042 hyperflash_erase_async
1c008aa6 l     F .text	00000022 hyperflash_erase
1c008ac8 l     F .text	00000030 hyperflash_get_status_reg
1c00ef9c l     O .data	00000054 hyperflash_api
00000000 l    df *ABS*	00000000 hyperram.c
1c008bec l     F .text	00000012 hyperram_copy_2d_async
1c008bfe l     F .text	00000010 hyperram_copy_async
1c008c0e l     F .text	00000022 hyperram_close
1c008c30 l     F .text	0000009a hyperram_open
1c00eff0 l     O .data	00000018 hyperram_api
00000000 l    df *ABS*	00000000 ram.c
1c008ce4 l     F .text	00000070 __pi_ram_cluster_req
1c008d54 l     F .text	0000001e __pi_ram_cluster_req_done
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 flash_partition.c
00000000 l    df *ABS*	00000000 md5.c
1c0091d4 l     F .text	000008d6 body
00000000 l    df *ABS*	00000000 semihost.c
1c009cb0 l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 ai_deck.c
1c009d52 l     F .text	0000003c __bsp_init_pads
1c00f5e0 l     O .bss	00000004 __bsp_init_pads_done
00000000 l    df *ABS*	00000000 init.c
1c009dfa l     F .text	00000026 cluster_start
1c00e710 l     O .init_array	00000004 ctor_list
1c00e760 l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c00a8ee l     F .text	00000018 __rt_time_poweroff
1c00a906 l     F .text	00000018 __rt_time_poweron
1c00f5e4 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c00adae l     F .text	0000002c SetFllMultDivFactors
1c00adda l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00f138 l     O .data	00000007 SystemStateToSCUFastSeq
1c00f150 l     O .data	00000003 ToHWDCDC_Pos
1c00f160 l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c00b1fa l     F .text	00000062 __rt_init_cluster_data
1c00b25c l     F .text	00000064 __rt_cluster_init
1c00b2c0 l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c00b5a6 l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c00f38c l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c00f5e8 l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 cpi-v1.c
1c00c184 l     F .text	00000014 __rt_cpi_init
1c00f438 l     O .bss	00000020 __rt_cpi
00000000 l    df *ABS*	00000000 i2c-v2.c
1c00c198 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00c1be l     F .text	00000032 pi_task_wait_on.isra.3
1c00c4f4 l     F .text	00000050 __rt_i2c_init
1c00f164 l     O .data	00000088 __rt_i2c
00000000 l    df *ABS*	00000000 uart.c
1c00c544 l     F .text	000000c8 __pi_uart_flow_control_enable
1c00c60c l     F .text	0000004a __rt_uart_setup
1c00c656 l     F .text	00000022 __rt_uart_setfreq_after
1c00c678 l     F .text	00000090 __pi_uart_copy_enqueue_exec_flow_control
1c00c708 l     F .text	0000002e __pi_uart_copy_enqueue_exec.isra.14
1c00c736 l     F .text	00000084 __pi_uart_copy_enqueue
1c00c7ba l     F .text	00000042 __rt_uart_wait_tx_done.isra.17
1c00c7fc l     F .text	0000002c __rt_uart_setfreq_before
1c00c828 l     F .text	00000032 pi_task_wait_on.isra.20
1c00f1ec l     O .data	00000044 __rt_uart
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 pwm-v1.c
1c00cc64 l     F .text	00000028 __pos_pwm_init
1c00f458 l     O .bss	00000058 __pos_pwm
00000000 l    df *ABS*	00000000 gpio-v2.c
1c00f4b0 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 i2s-v1.c
1c00cdd0 l     F .text	00000034 __rt_i2s_resume
1c00ce04 l     F .text	0000002a __rt_i2s_setfreq_after
1c00ce2e l     F .text	0000002c __rt_i2s_setfreq_before
1c00f5f4 l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 i2c-v2.c
1c00f230 l     O .data	00000020 __rt_i2c
00000000 l    df *ABS*	00000000 spim-v2.c
1c00f5f8 l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c00d662 l     F .text	00000092 _to_x
1c00d6f4 l     F .text	00000020 _rlrshift
1c00d714 l     F .text	00000044 _ldiv5
1c00d758 l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 uart.c
1c00e268 l     F .text	00000024 __rt_uart_setup.isra.5
1c00e28c l     F .text	00000022 __rt_uart_setfreq_after
1c00e2ae l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c00e2f0 l     F .text	0000002c __rt_uart_setfreq_before
1c00e31c l     F .text	00000042 __rt_uart_cluster_req
1c00e35e l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00f5c8 l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c00e61a l       .text	00000000 __rt_slave_start
1c00e570 l       .text	00000000 __rt_master_event
1c00e584 l       .text	00000000 __rt_master_loop
1c00e574 l       .text	00000000 __rt_push_event_to_fc_retry
1c00e60c l       .text	00000000 __rt_push_event_to_fc_wait
1c00e5fe l       .text	00000000 __rt_master_sleep
1c00e58c l       .text	00000000 __rt_master_loop_update_next
1c00e5e0 l       .text	00000000 __rt_no_stack_check
1c00e5ec l       .text	00000000 __rt_master_no_slave_barrier
1c00e5fc l       .text	00000000 __rt_master_loop_no_slave
1c00e638 l       .text	00000000 __rt_fork_return
1c00e63c l       .text	00000000 __rt_wait_for_dispatch
1c00e652 l       .text	00000000 __rt_other_entry
1c00e64c l       .text	00000000 __rt_fork_entry
1c00e67a l       .text	00000000 __rt_no_stack_check_end
1c00e6ec l       .text	00000000 __rt_dma_2d_done
1c00e6aa l       .text	00000000 __rt_dma_2d_redo
1c00e6b2 l       .text	00000000 __rt_dma_2d_not_last
1c00e6d4 l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
1c00bc2e g     F .text	00000016 pi_hyper_read_async
1c00d516 g     F .text	00000006 putchar
1c00cb6c g     F .text	00000018 __rt_udma_channel_init
1c007de0 g     F .text	0000005c __himax_reg_get
1c00a9bc g     F .text	00000004 pi_time_wait_us
1c0073c6 g     F .text	0000000c pi_flash_open
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
00000350 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c00a8d0 g     F .text	0000000e pi_l2_malloc
1c00a216 g     F .text	00000038 __rt_fc_cluster_lock
1c00af70 g     F .text	000000a4 InitOneFll
1c00a8de g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c00f644 g     O .bss	00000004 __rt_cluster_tasks
1c00a3e8 g     F .text	00000022 __rt_bridge_send_notif
1c005622 g     F .text	00000140 KerParLinearLayer_SQ8
1c00a55a g     F .text	00000076 rt_event_alloc
00000338 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c00c026 g     F .text	00000018 pi_hyper_read_2d_async
1c009d16 g     F .text	0000001e semihost_write
1c00a630 g     F .text	00000064 __rt_event_execute
1c00a052 g     F .text	00000052 __rt_irq_init
1c00a718 g     F .text	00000048 rt_user_alloc
00000310 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c00b3f0 g     F .text	000000d8 pi_cluster_open
1c00d636 g     F .text	0000002c printf
1c00cb90 g     F .text	0000000e pi_pwm_conf_init
ffffffff g       *ABS*	00000000 pulp__L2
1c00a858 g     F .text	00000072 __rt_allocs_init
1c00f628 g     O .bss	00000004 __rt_alloc_l1
1c00b3ea g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c00ba96 g     F .text	000000a0 pi_hyper_close
1c00c09c g     F .text	0000006a pi_cpi_open
1c009fb4 g     F .text	0000004c rt_irq_set_handler
1c00f110 g     O .data	00000002 rec_digit
00000314 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
1c007418 g     F .text	0000002c pi_fs_mount
00000308 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c00b0de g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
1c008f5e g     F .text	0000000a pi_partition_get_flash_offset
1c009d8e g     F .text	00000018 bsp_hyperram_conf_init
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c00a7dc g     F .text	0000002e rt_free
1c008f6a g     F .text	00000004 pi_partition_table_load
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c00ad70 g     F .text	0000003e __rt_freq_init
1c009e20 g     F .text	00000168 __rt_init
00000001 g       *ABS*	00000000 __FC
1c00b1de g     F .text	00000012 __rt_fll_init
1c007e3c g     F .text	0000000a __himax_capture_async
1c00f12c g     O .data	00000004 model_L2_Memory
1b001420 g       .stack	00000000 __fc_tcdm_end
1c00cab6 g     F .text	00000058 rt_extern_alloc_init
1c00a4e6 g     F .text	00000034 __rt_bridge_init
1c0000ac g       .text	00000000 __rt_i2c_step1
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
1c002f30 g     F .text	00000bd2 S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu
0000032c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1c002394 g     F .text	00000b9c S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu
1c00ceb8 g     F .text	00000012 __rt_i2c_init
1c0018ae g     F .text	0000058a test_model
1c00e70c g       .text	00000000 _etext
0000030c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c00ef30 g       .data	00000000 sdata
1c009cf8 g     F .text	0000001e semihost_read
1c00c3c8 g     F .text	00000118 pi_i2c_open
00000001 g       *ABS*	00000000 __rt_nb_cluster
1c009dc0 g     F .text	00000010 bsp_hyperflash_open
1c008b9a g     F .text	00000028 pi_hyperflash_conf_init
1c008e1a g     F .text	00000052 extern_alloc_init
000003e0 g     O .data_tiny_fc	00000004 __rtc_handler
1c00a7ac g     F .text	00000030 rt_alloc
1c00e242 g     F .text	00000026 __rt_uart_cluster_req_done
1c009f88 g     F .text	00000028 __rt_deinit
1b000c08 g     O .stack	00000001 camera_isAwaked
1c000166 g       .text	00000000 __rt_event_enqueue
1c0000ee g       .text	00000000 __rt_i2c_handle_rx_copy
1c00a998 g     F .text	00000024 rt_time_wait_us
1c00d30a g     F .text	00000036 memcpy
1c000670 g       .text	00000000 __rt_gpio_handler
1c00029e g       .text	00000000 __rt_illegal_instr
1c00a82e g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c00c03e g     F .text	0000001a pi_hyper_write_2d_async
1c006f04 g     F .text	0000018e KerParPool2x2Stride2_ReLU_SQ8
1c00177e g     F .text	00000058 .hidden __floatsidf
1c00748a g     F .text	00000026 pi_fs_write
1c00caaa g     F .text	0000000c __rt_padframe_init
1c00e768 g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c000548 g       .text	00000000 __rt_hyper_handle_copy
1c009dea g     F .text	00000010 bsp_himax_open
1c00d4a0 g     F .text	0000002c puts
1c00c1f0 g     F .text	000000d4 pi_i2c_write_async
1c00f038  w    O .data	00000018 __rt_padframe_profiles
00000330 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
00000344 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c00a5ea g     F .text	00000022 rt_event_get_blocking
1c00f2d0 g       .bss	00000000 _bss_start
1c00f2d0 g       .data	00000000 edata
1c00a80a g     F .text	00000024 __rt_alloc_init_l1
1c00f11c  w    O .data	00000004 __rt_iodev_uart_baudrate
1c00172c g     F .text	00000052 .hidden __fixunsdfsi
1c0001cc g       .text	00000000 __rt_remote_enqueue_event
1c00f134 g     O .data	00000004 buff
1c00f140 g     O .data	00000010 PMUState
1c008dc0 g     F .text	0000005a pi_cl_ram_copy_2d
1c00ef30 g       .data	00000000 _sdata
1c00a6f0 g     F .text	00000008 pi_cl_send_task_to_fc
1c008bc2 g     F .text	0000001e hyperram_alloc
10000044 g       .l1cluster_g	00000000 __l1_end
1c0005e0 g       .text	00000000 __rt_hyper_handle_burst
1c00cb18 g     F .text	00000054 __rt_udma_copy_enqueue
1c00ab3e g     F .text	00000134 rt_periph_copy
1c00d3b8 g     F .text	0000003c __rt_putc_uart
1b0003e8 g     O .stack	00000800 __rt_fc_stack
1c008e6c g     F .text	00000008 extern_alloc_deinit
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c00c2e8 g     F .text	000000bc pi_i2c_read_async
1c000194 g       .text	00000000 __rt_bridge_enqueue_event
1c00d78c g     F .text	00000ab6 _prf
1c005426 g     F .text	0000009a KerParReduct_CC_SQ8
1c000cf4 g     F .text	000005fe .hidden __adddf3
10000044 g       .l1cluster_g	00000000 _libgomp_start
1c0009c6 g     F .text	0000032e .hidden __umoddi3
1c00aa4c g     F .text	000000f2 __rt_timer_handler
1c00c14e g     F .text	00000036 pi_cpi_capture_async
1c00f62c g     O .bss	00000004 __rt_alloc_l2
1c0051a4 g     F .text	00000154 modelCNN
1c00c3a4 g     F .text	00000024 pi_i2c_read
1b001420 g       .stack	00000000 stack
1c00068a g     F .text	0000033c .hidden __udivdi3
1c007efc g     F .text	00000158 __himax_open
1c008d7e g     F .text	00000042 pi_cl_ram_copy
1c00d5ba g     F .text	0000000a abort
1c00744c g     F .text	00000008 pi_fs_open
1c00a5d0 g     F .text	0000001a rt_event_get
1c00f638 g     O .bss	00000008 __rt_freq_domains
00000040 g       *ABS*	00000000 _l1_preload_size
1c000164 g       .text	00000000 _init
1c00c9c8 g     F .text	0000001a pi_uart_write_async
1c00c8d6 g     F .text	000000f2 pi_uart_open
1c000520 g       .text	00000000 __rt_udma_handle_copy
1c008ed2 g     F .text	0000008c extern_free
1c00f670 g       .bss	00000000 _bss_end
1c009168 g     F .text	0000006c flash_partition_find_first
1c00f018  w    O .data	00000010 __rt_padframe_hyper
1c00cb9e g     F .text	00000092 pi_pwm_open
1c00a3ca g     F .text	0000001e __rt_bridge_set_available
1c00e67c g       .text	00000000 __rt_dma_2d
1c00e500 g       .text	00000000 __rt_pe_start
1c00f634 g     O .bss	00000004 first_delayed
000003dc g     O .data_tiny_fc	00000004 __rt_rtc_init_done
1c00470a g     F .text	00000290 S5_SoftMax
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c0054c0 g     F .text	000000ae KerParReductIO_CC_SQ8
1c00b7c8 g     F .text	0000004a pi_cluster_send_task_to_cl
1c00b014 g     F .text	000000ca __rt_pmu_cluster_power_up
1b000c20 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c006384 g     F .text	0000019c KerParConv3x3Stride2_SQ8
1c00e394 g     F .text	0000008e __rt_uart_open
1c00bc7e g     F .text	00000022 pi_hyper_write
1c00c8bc g     F .text	0000001a pi_uart_conf_init
1c00a18e g     F .text	00000022 __rt_utils_init
1c00b6ce g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c007984 g     F .text	000000e0 __pi_fs_read
1c00f008  w    O .data	00000010 __rt_padframe_default
1c00d4cc g     F .text	0000001a fputc_locked
1c00c2c4 g     F .text	00000024 pi_i2c_write
1c007370 g     F .text	00000056 CNN_NormBW_offset_fps
1c007d00 g     F .text	00000040 pi_camera_capture
1c00e422 g     F .text	0000004e rt_uart_close
1c0000c2 g       .text	00000000 __rt_i2c_step2
1c00b936 g     F .text	00000160 pi_hyper_open
1c00a760 g     F .text	0000004c rt_user_free
1c00745c g     F .text	00000026 pi_fs_read
1c00e70c g       .init_array	00000000 __CTOR_LIST__
1c00ac72 g     F .text	00000056 __rt_periph_wait_event
1c00ad26 g     F .text	0000004a rt_freq_set_and_get
1c008cca g     F .text	0000001a pi_hyperram_conf_init
1c009cbe g     F .text	00000006 semihost_write0
1c00a000  w    F .text	00000002 illegal_insn_handler_c
0000033c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c00b4fa g     F .text	00000070 __rt_cluster_push_fc_event
1c00f5d8 g     O .bss	00000004 model_L3_Flash
00000320 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c00e500 g       .text	00000000 __cluster_text_start
1c00bc66 g     F .text	00000018 pi_hyper_write_async
1c000080 g       .vectors	00000000 _start
1c00bc44 g     F .text	00000022 pi_hyper_read
1c00a6f8 g     F .text	00000020 rt_user_alloc_init
1c00f610 g     O .bss	00000014 AT_GraphPerf
1c00f624 g     O .bss	00000004 model_L3_Memory
00000000 g       *ABS*	00000000 __rt_config
1c009aaa g     F .text	00000032 MD5_Init
00000334 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c0000a0 g       .text	00000000 __rt_i2c_handle_tx_copy
1c00d2c4 g     F .text	00000020 strncmp
1c00f670 g       .bss	00000000 _l1_preload_start_inL2
1c00a1b0 g     F .text	00000032 __rt_fc_lock
10000044 g       .l1cluster_g	00000000 __l1_heap_start
1c007d40 g     F .text	00000002 __camera_conf_init
1c00a542 g     F .text	00000018 __rt_wait_event_prepare_blocking
1c00a306 g     F .text	00000078 __rt_bridge_handle_notif
1c0004b6 g       .text	00000000 __rt_soc_evt_no_udma
10000040 g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
1c00cd4a g     F .text	00000050 pi_gpio_mask_configure
00000340 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c00a60c g     F .text	00000024 rt_event_push
1c00a40a g     F .text	00000022 __rt_bridge_clear_notif
1c009040 g     F .text	00000104 flash_partition_table_load
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c00f050 g     O .data	000000c0 __hal_debug_struct
1c007406 g     F .text	00000012 pi_fs_conf_init
1c00cb84 g     F .text	0000000c __rt_udma_channel_reg_data
1c009b78 g     F .text	00000138 MD5_Final
1c00a9c0 g     F .text	0000008c __rt_time_init
1c00b8fa g     F .text	0000002c __pi_hyper_pin_reset_settings
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c0000f8 g       .text	00000000 _entry
1c008f6e g     F .text	0000005e pi_partition_find_first
1c00a694 g     F .text	0000002c __rt_wait_event
1c0012f2 g     F .text	0000043a .hidden __muldf3
1c00b122 g     F .text	000000bc __rt_pmu_init
1c009db6 g     F .text	0000000a bsp_hyperflash_conf_init
1c007454 g     F .text	00000008 pi_fs_read_async
1c00cc30 g     F .text	00000034 pi_pwm_ioctl
1c00a002 g     F .text	00000050 __rt_handle_illegal_instr
1c00ca10 g     F .text	00000072 __pi_uart_init
1c00d2fa g     F .text	00000010 memset
1c00bb36 g     F .text	00000058 __pi_hyper_copy_aligned
1c001e38 g     F .text	0000001a main
00000354 g     O .data_tiny_fc	00000050 __rt_udma_channels
1c00b1f0 g     F .text	00000002 __rt_fll_deinit
1c0004fc g       .text	00000000 udma_event_handler_end
1c00f630 g     O .bss	00000004 __rt_alloc_fc_tcdm
1c00ceae g     F .text	0000000a __rt_himax_init
1c00f124 g     O .data	00000004 ResOut
1c00a24e g     F .text	00000036 __rt_fc_cluster_unlock
00000318 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c00d5c4 g     F .text	00000072 __rt_io_init
1c00f028  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c009da6 g     F .text	00000010 bsp_hyperram_open
1c00499a g     F .text	0000080a modelCNN_Construct
1c0073d2 g     F .text	00000002 __flash_conf_init
1c00f120  w    O .data	00000004 __rt_platform
1c00e75c g       .init_array	00000000 __CTOR_END__
1c00cd12 g     F .text	00000038 pi_gpio_pin_read
1c00ef30 g     O .data	00000028 __pi_read_fs_api
1c00b8ce g     F .text	0000002c __pi_hyper_pin_settings
1c00d2b0 g     F .text	00000014 strcmp
1000001c g     O .l1cluster_g	00000004 model_L1_Memory
1c009d4a g     F .text	00000008 semihost_exit
1c00e75c g       .fini_array	00000000 __DTOR_LIST__
1c00a51a g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c0000e0 g       .text	00000000 __rt_i2c_step3
1c000636 g       .text	00000000 pwm_event_handler
00000348 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c00d51c g     F .text	00000028 _prf_locked
00000000 g       *ABS*	00000000 __USE_UART
1c00c058 g     F .text	00000008 __rt_hyper_resume_emu_task
1c00ae90 g     F .text	000000e0 SetFllFrequency
1c006140 g     F .text	00000244 KerParConv3x3Stride1_SQ8
1c00b1f2 g     F .text	00000002 __rt_flls_constructor
1c00a91e g     F .text	0000007a rt_event_push_delayed
1c008054 g     F .text	000000d2 __himax_reopen
1c000164 g       .text	00000000 _fini
1c008e74 g     F .text	0000005e extern_alloc
1c009dd0 g     F .text	0000001a bsp_himax_conf_init
1c00a6c0 g     F .text	0000001a rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c00e7a4 g     O .rodata	00000100 .hidden __clz_tab
00000328 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c00065a g       .text	00000000 __pi_uart_handle_copy_asm
1c00e658 g       .text	00000000 __rt_set_slave_stack
1c00a6ee g     F .text	00000002 pi_task_push_delayed_us
1c00a8ca g     F .text	00000006 pi_cl_l1_malloc
1c00f114  w    O .data	00000004 __rt_fc_stack_size
1c008fcc g     F .text	00000074 flash_partition_table_verify
1c003b02 g     F .text	00000c08 S4_Linear_2x29x39x64
1c00044c g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
000003a8 g     O .data_tiny_fc	00000034 dev_rtc
1c007482 g     F .text	00000008 pi_fs_write_async
1c00ef58 g     O .data	00000028 __pi_host_fs_api
1c00d4e6 g     F .text	00000030 fputc
1c00cb0e g     F .text	0000000a rt_extern_alloc_deinit
1c00b846 g     F .text	0000001e pi_pad_init
1c0074b0 g     F .text	0000000a pi_fs_copy_async
1c001e52 g     F .text	00000542 S1_Op_input_1_formatter
1c000258 g       .text	00000000 __rt_call_external_c_function
1c00a1e2 g     F .text	00000034 __rt_fc_unlock
1c008d72 g     F .text	0000000c pi_ram_open
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c00cc8c g     F .text	00000086 __pi_gpio_handler
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c00a42c g     F .text	00000042 __rt_bridge_printf_flush
1c00b926 g     F .text	00000010 pi_hyper_conf_init
1c00f118  w    O .data	00000004 __rt_iodev
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c00f2d0 g       .data	00000000 _edata
00000000 g       *ABS*	00000000 __ZERO
1c00acc8 g     F .text	0000005e __rt_periph_init
1c008f68 g     F .text	00000002 pi_partition_table_free
1c00cedc g     F .text	00000012 __rt_spim_init
1c00a37e g     F .text	0000004c __rt_bridge_check_connection
1c00b5e2 g     F .text	00000090 rt_cluster_call
00000800 g       *ABS*	00000000 __rt_stack_size
1c00c85a g     F .text	00000062 __pi_uart_handle_copy
1c009fb0 g     F .text	00000004 pi_open_from_conf
ffffffff g       *ABS*	00000000 pulp__FC
1c00ce5a g     F .text	00000054 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c009144 g     F .text	00000024 flash_partition_table_free
1c00f648 g     O .bss	00000028 __rt_fc_cluster_data
1c00d544 g     F .text	00000076 exit
1c00c9e2 g     F .text	0000002e pi_uart_write
1c007dc8 g     F .text	00000018 __himax_reg_set
1c00a6da g     F .text	00000014 __rt_event_sched_init
0000034c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c00030c g       .text	00000000 udma_event_handler
1c00b4c8 g     F .text	00000032 pi_cluster_close
1c00c060 g     F .text	00000004 __rt_hyper_resume_copy
1c00c4e0 g     F .text	00000014 pi_i2c_conf_init
000003a4 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c007444 g     F .text	00000008 pi_fs_unmount
1c009d34 g     F .text	00000016 semihost_seek
1c00a15e g     F .text	00000030 __rt_cbsys_exec
0000ffbc g       .l1cluster_g	00000000 __l1_heap_size
1c00f128 g     O .data	00000004 Img_In
1c00ae00 g     F .text	00000090 __rt_pmu_cluster_power_down
0000031c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b000be8 g     O .stack	00000004 __rt_debug_config_trace
1c00556e g     F .text	000000b4 KerParSetBiasB32_SQ8
1c00f5dc  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c00f154 g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c00d2e4 g     F .text	00000016 strlen
1c00ca82 g     F .text	00000028 rt_padframe_set
1c009cf0 g     F .text	00000008 semihost_close
1c00b812 g     F .text	00000034 pi_pad_set_function
1c00f640 g     O .bss	00000004 __rt_wakeup_use_fast
1c0081cc g     F .text	0000002e pi_himax_conf_init
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c00d340 g     F .text	0000001a strchr
1c00a46e g     F .text	00000078 __rt_bridge_req_shutdown
1c00e384 g     F .text	00000010 rt_uart_conf_init
1c00cd9a g     F .text	00000036 pi_gpio_pin_configure
1c00e70c g       .text	00000000 __cluster_text_end
1c00e4a4 g     F .text	0000005c __rt_uart_init
1c00c106 g     F .text	00000048 pi_cpi_close
1c00f6b0 g       *ABS*	00000000 __l2_end
1c00b672 g     F .text	0000005c rt_cluster_mount
1c00ceca g     F .text	00000012 __rt_rtc_init
1c00e470 g     F .text	00000034 rt_uart_cluster_write
1c007cf4 g     F .text	0000000c pi_camera_open
1c008be0 g     F .text	0000000c hyperram_free
1c000098 g       .vectors	00000000 __rt_semihosting_call
1c009adc g     F .text	0000009c MD5_Update
1b000bec g     O .stack	00000004 __rt_debug_config
1c00b1f4 g     F .text	00000006 __rt_fll_set_freq
1c00a120 g     F .text	0000003e __rt_cbsys_add
1c00b56a g     F .text	0000003c __rt_cluster_new
1c00d35a g     F .text	0000005e __rt_putc_debug_bridge
1c007092 g     F .text	000002de KerParSoftMax_SQ8
1c00e70c g       .text	00000000 _endtext
00000324 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
1c009cc4 g     F .text	0000002c semihost_open
ffffffff g       *ABS*	00000000 pulp__L1FC
1c00c092 g     F .text	0000000a pi_cpi_conf_init
1c00f158 g     O .data	00000008 FllsFrequency
00000030 g     O .data_tiny_fc	00000280 periph_channels



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	0780006f          	j	1c0000f8 <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	21a0006f          	j	1c00029e <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	f050                	fsw	fa2,36(s0)
1c000092:	1c00                	addi	s0,sp,560

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <__rt_i2c_handle_tx_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_i2c_handle_tx_copy
__rt_i2c_handle_tx_copy:

  slli   x8, x10, 2
1c0000a0:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c0000a4:	35442403          	lw	s0,852(s0)

  lw  	x11, PI_I2C_T_PENDING_STEP(x8)
1c0000a8:	4c0c                	lw	a1,24(s0)
  jr    x11
1c0000aa:	8582                	jr	a1

1c0000ac <__rt_i2c_step1>:

  .global __rt_i2c_step1
__rt_i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x12, PI_I2C_T_PENDING_BASE(x8)
1c0000ac:	4450                	lw	a2,12(s0)
  lw          x10, PI_I2C_T_PENDING_DATA(x8)
1c0000ae:	4808                	lw	a0,16(s0)
  lw          x11, PI_I2C_T_PENDING_LENGTH(x8)
1c0000b0:	484c                	lw	a1,20(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0000b2:	c208                	sw	a0,0(a2)
  sw          x11, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0000b4:	c24c                	sw	a1,4(a2)
  lw          x11, PI_I2C_T_PENDING_NEXT_STEP(x8)
1c0000b6:	4c4c                	lw	a1,28(s0)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0000b8:	4541                	li	a0,16
  sw          x11, PI_I2C_T_PENDING_STEP(x8)
1c0000ba:	cc0c                	sw	a1,24(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0000bc:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0000be:	43e0006f          	j	1c0004fc <udma_event_handler_end>

1c0000c2 <__rt_i2c_step2>:

  .global __rt_i2c_step2
__rt_i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  la          x10, __rt_i2c_step3
1c0000c2:	00000517          	auipc	a0,0x0
1c0000c6:	01e50513          	addi	a0,a0,30 # 1c0000e0 <__rt_i2c_step3>
  sw          x10, PI_I2C_T_PENDING_STEP(x8)
1c0000ca:	cc08                	sw	a0,24(s0)
  
  lw          x12, PI_I2C_T_PENDING_BASE(x8)
1c0000cc:	4450                	lw	a2,12(s0)
  addi        x10, x8, PI_I2C_T_UDMA_STOP_CMD
1c0000ce:	02040513          	addi	a0,s0,32
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0000d2:	c208                	sw	a0,0(a2)
  li          x10, 1
1c0000d4:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0000d6:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0000d8:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0000da:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0000dc:	4200006f          	j	1c0004fc <udma_event_handler_end>

1c0000e0 <__rt_i2c_step3>:

  .global __rt_i2c_step3
__rt_i2c_step3:
  lw        x11, PI_I2C_T_PENDING_COPY(x8)
1c0000e0:	400c                	lw	a1,0(s0)
  sw        x0, PI_I2C_T_PENDING_COPY(x8)
1c0000e2:	00042023          	sw	zero,0(s0)
  //beqz      x11, __rt_hyper_handle_emu_task
  jal       x9, __rt_event_enqueue
1c0000e6:	080004ef          	jal	s1,1c000166 <__rt_event_enqueue>

  j           udma_event_handler_end
1c0000ea:	4120006f          	j	1c0004fc <udma_event_handler_end>

1c0000ee <__rt_i2c_handle_rx_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_i2c_handle_rx_copy
__rt_i2c_handle_rx_copy:

  slli   x8, x10, 2
1c0000ee:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c0000f2:	35442403          	lw	s0,852(s0)

  j      __rt_i2c_step3
1c0000f6:	b7ed                	j	1c0000e0 <__rt_i2c_step3>

1c0000f8 <_entry>:
  csrw    0x7A1, x0
1c0000f8:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c0000fc:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c000100:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c000104:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c000106:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c00010a:	00c50463          	beq	a0,a2,1c000112 <_entry+0x1a>
1c00010e:	3f20e06f          	j	1c00e500 <__cluster_text_start>
  la      t0, _bss_start
1c000112:	0000f297          	auipc	t0,0xf
1c000116:	1be28293          	addi	t0,t0,446 # 1c00f2d0 <_edata>
  la      t1, _bss_end
1c00011a:	0000f317          	auipc	t1,0xf
1c00011e:	55630313          	addi	t1,t1,1366 # 1c00f670 <_bss_end>
  sw      zero,0(t0)
1c000122:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c000126:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c000128:	fe62ede3          	bltu	t0,t1,1c000122 <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c00012c:	0000f517          	auipc	a0,0xf
1c000130:	fe850513          	addi	a0,a0,-24 # 1c00f114 <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c000134:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c000136:	ff000117          	auipc	sp,0xff000
1c00013a:	2b210113          	addi	sp,sp,690 # 1b0003e8 <__rt_fc_stack>
  add  x2, x2, a0
1c00013e:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c000140:	4e1090ef          	jal	ra,1c009e20 <__rt_init>
  addi  a0, x0, 0
1c000144:	00000513          	li	a0,0
  addi  a1, x0, 0
1c000148:	00000593          	li	a1,0
  la    t2, main
1c00014c:	00002397          	auipc	t2,0x2
1c000150:	cec38393          	addi	t2,t2,-788 # 1c001e38 <main>
  jalr  x1, t2
1c000154:	000380e7          	jalr	t2
  mv    s0, a0
1c000158:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c00015a:	62f090ef          	jal	ra,1c009f88 <__rt_deinit>
  mv   a0, s0
1c00015e:	8522                	mv	a0,s0
  jal  x1, exit
1c000160:	3e40d0ef          	jal	ra,1c00d544 <exit>

1c000164 <_fini>:
  ret
1c000164:	8082                	ret

1c000166 <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c000166:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c00016a:	02051063          	bnez	a0,1c00018a <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c00016e:	e4000517          	auipc	a0,0xe4000
1c000172:	eae50513          	addi	a0,a0,-338 # 1c <__rt_sched>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c000176:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c00017a:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c00017c:	c601                	beqz	a2,1c000184 <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c00017e:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c000180:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c000182:	a011                	j	1c000186 <__rt_common>

1c000184 <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c000184:	c10c                	sw	a1,0(a0)

1c000186 <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c000186:	c14c                	sw	a1,4(a0)

1c000188 <enqueue_end>:

enqueue_end:
  jr          x9
1c000188:	8482                	jr	s1

1c00018a <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c00018a:	5571                	li	a0,-4
  and     x11, x11, x10
1c00018c:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c00018e:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c000190:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c000192:	a0d9                	j	1c000258 <__rt_call_external_c_function>

1c000194 <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c000194:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000198:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00019c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c0001a0:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c0001a4:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c0001a8:	0000a617          	auipc	a2,0xa
1c0001ac:	15e60613          	addi	a2,a2,350 # 1c00a306 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c0001b0:	0a8004ef          	jal	s1,1c000258 <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c0001b4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c0001b8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c0001bc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c0001c0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c0001c4:	fec12603          	lw	a2,-20(sp)

    mret
1c0001c8:	30200073          	mret

1c0001cc <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c0001cc:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c0001d0:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c0001d4:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c0001d8:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c0001dc:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c0001e0:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c0001e2:	0000f497          	auipc	s1,0xf
1c0001e6:	46648493          	addi	s1,s1,1126 # 1c00f648 <__rt_fc_cluster_data>

1c0001ea <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001ea:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c0001ec:	02058d63          	beqz	a1,1c000226 <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c0001f0:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001f2:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c0001f4:	00050e63          	beqz	a0,1c000210 <__rt_cluster_pool_update_end>

1c0001f8 <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c0001f8:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c0001fa:	e219                	bnez	a2,1c000200 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001fc:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c0001fe:	fd6d                	bnez	a0,1c0001f8 <__rt_cluster_pool_update_loop>

1c000200 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c000200:	c501                	beqz	a0,1c000208 <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c000202:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c000204:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c000206:	a029                	j	1c000210 <__rt_cluster_pool_update_end>

1c000208 <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c000208:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c00020c:	0005a423          	sw	zero,8(a1)

1c000210 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000210:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c000212:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000214:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c000218:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c00021c:	00000497          	auipc	s1,0x0
1c000220:	00a48493          	addi	s1,s1,10 # 1c000226 <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c000224:	b789                	j	1c000166 <__rt_event_enqueue>

1c000226 <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c000226:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c000228:	00804e63          	bgtz	s0,1c000244 <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c00022c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c000230:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c000234:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c000238:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00023c:	fec12603          	lw	a2,-20(sp)

    mret
1c000240:	30200073          	mret

1c000244 <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c000244:	0000f497          	auipc	s1,0xf
1c000248:	40448493          	addi	s1,s1,1028 # 1c00f648 <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00024c:	02800593          	li	a1,40
    mul  a1, x8, a1
1c000250:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c000254:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c000256:	bf51                	j	1c0001ea <__rt_remote_enqueue_event_loop_cluster>

1c000258 <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c000258:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c00025a:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c00025c:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c00025e:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c000260:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c000262:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c000264:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c000266:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c000268:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c00026a:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c00026c:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c00026e:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000270:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c000272:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c000274:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c000276:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c000278:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c00027c:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c00027e:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000280:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c000282:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c000284:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c000286:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c000288:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c00028a:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c00028c:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c00028e:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c000290:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c000292:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c000294:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c000296:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000298:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c00029a:	6109                	addi	sp,sp,128

    jr   x9
1c00029c:	8482                	jr	s1

1c00029e <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c00029e:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c0002a2:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c0002a6:	0000a517          	auipc	a0,0xa
1c0002aa:	d5c50513          	addi	a0,a0,-676 # 1c00a002 <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c0002ae:	010000ef          	jal	ra,1c0002be <__rt_call_c_function>
    lw   ra, -4(sp)
1c0002b2:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c0002b6:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c0002ba:	30200073          	mret

1c0002be <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c0002be:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c0002c0:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c0002c2:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c0002c4:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c0002c6:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c0002c8:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c0002ca:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c0002cc:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c0002ce:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c0002d0:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c0002d2:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c0002d4:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c0002d6:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c0002d8:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c0002da:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c0002dc:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c0002de:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c0002e0:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c0002e2:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c0002e6:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c0002e8:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c0002ea:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c0002ec:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c0002ee:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c0002f0:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c0002f2:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c0002f4:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c0002f6:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c0002f8:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c0002fa:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c0002fc:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c0002fe:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c000300:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c000302:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c000304:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000306:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c000308:	6109                	addi	sp,sp,128

    jr   ra
1c00030a:	8082                	ret

1c00030c <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00030c:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c00030e:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c000310:	08040f63          	beqz	s0,1c0003ae <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c000314:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c000316:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c000318:	04061f63          	bnez	a2,1c000376 <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00031c:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c00031e:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c000320:	e15d                	bnez	a0,1c0003c6 <handle_special_end>

1c000322 <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c000322:	02058f63          	beqz	a1,1c000360 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c000326:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c000328:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c00032a:	c611                	beqz	a2,1c000336 <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c00032c:	00000497          	auipc	s1,0x0
1c000330:	00a48493          	addi	s1,s1,10 # 1c000336 <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c000334:	8602                	jr	a2

1c000336 <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000336:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c000338:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c00033a:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c00033c:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c00033e:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c000340:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c000342:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c000344:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c000346:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c000348:	00a4ca63          	blt	s1,a0,1c00035c <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c00034c:	0064a463          	p.beqimm	s1,6,1c000354 <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c000350:	0074a263          	p.beqimm	s1,7,1c000354 <dual>

1c000354 <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c000354:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c000356:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c00035a:	d088                	sw	a0,32(s1)

1c00035c <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c00035c:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00035e:	c608                	sw	a0,8(a2)

1c000360 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c000360:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c000362:	00000497          	auipc	s1,0x0
1c000366:	19a48493          	addi	s1,s1,410 # 1c0004fc <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c00036a:	00058463          	beqz	a1,1c000372 <checkTask+0x12>
1c00036e:	df9ff06f          	j	1c000166 <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c000372:	18a0006f          	j	1c0004fc <udma_event_handler_end>

1c000376 <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000376:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000378:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c00037a:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c00037e:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000380:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000382:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c000384:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c000386:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c000388:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c00038a:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c00038c:	00964963          	blt	a2,s1,1c00039e <not_last>
  mv      x12, x9
1c000390:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c000392:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c000396:	00061463          	bnez	a2,1c00039e <not_last>
1c00039a:	1620006f          	j	1c0004fc <udma_event_handler_end>

1c00039e <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00039e:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c0003a0:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0003a2:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0003a4:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c0003a6:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0003a8:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c0003aa:	1520006f          	j	1c0004fc <udma_event_handler_end>

1c0003ae <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c0003ae:	e4000497          	auipc	s1,0xe4000
1c0003b2:	f0248493          	addi	s1,s1,-254 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c0003b6:	4080                	lw	s0,0(s1)
  li      x11, 1
1c0003b8:	4585                	li	a1,1
  sll     x10, x11, x10
1c0003ba:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c0003be:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c0003c0:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c0003c2:	13a0006f          	j	1c0004fc <udma_event_handler_end>

1c0003c6 <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c0003c6:	04352463          	p.beqimm	a0,3,1c00040e <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c0003ca:	06452063          	p.beqimm	a0,4,1c00042a <i2c_step2>
#endif

  j           resume_after_special_end
1c0003ce:	bf91                	j	1c000322 <resume_after_special_end>

1c0003d0 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0003d0:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0003d2:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d4:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003d6:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d8:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003da:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c0003dc:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003de:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c0003e0:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003e2:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c0003e4:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003e6:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003e8:	1140006f          	j	1c0004fc <udma_event_handler_end>

1c0003ec <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c0003ec:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003f0:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003f2:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003f4:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c0003f6:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c0003f8:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c0003fc:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003fe:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c000400:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c000402:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c000404:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c000406:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000408:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c00040a:	0f20006f          	j	1c0004fc <udma_event_handler_end>

1c00040e <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c00040e:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c000410:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000412:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c000414:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000416:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000418:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00041a:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c00041c:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c00041e:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c000420:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c000422:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000424:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000426:	0d60006f          	j	1c0004fc <udma_event_handler_end>

1c00042a <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c00042a:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00042e:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c000430:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000432:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c000434:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c000436:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c00043a:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00043c:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c00043e:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c000440:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c000442:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c000444:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000446:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000448:	0b40006f          	j	1c0004fc <udma_event_handler_end>

1c00044c <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c00044c:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c00044e:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c000450:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c000452:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c000454:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c000456:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c000458:	00201437          	lui	s0,0x201
1c00045c:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c000460:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c000462:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c000466:	00204537          	lui	a0,0x204
1c00046a:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c00046e:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000470:	30802603          	lw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c000474:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c000478:	00653363          	p.bneimm	a0,6,1c00047e <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c00047c:	8602                	jr	a2

1c00047e <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c00047e:	00753363          	p.bneimm	a0,7,1c000484 <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c000482:	8602                	jr	a2

1c000484 <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c000484:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c000486:	00955c63          	ble	s1,a0,1c00049e <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c00048a:	e4000417          	auipc	s0,0xe4000
1c00048e:	ba640413          	addi	s0,s0,-1114 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c000492:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c000496:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c000498:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00049a:	4080                	lw	s0,0(s1)

  jr   x11
1c00049c:	8582                	jr	a1

1c00049e <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c00049e:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c0004a0:	00955b63          	ble	s1,a0,1c0004b6 <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c0004a4:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c0004a8:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c0004ac:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c0004b0:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c0004b4:	8602                	jr	a2

1c0004b6 <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c0004b6:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c0004ba:	00951463          	bne	a0,s1,1c0004c2 <__rt_soc_evt_no_udma+0xc>
1c0004be:	1b20006f          	j	1c000670 <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c0004c2:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c0004c6:	04a48363          	beq	s1,a0,1c00050c <rtc_event_handler>

1c0004ca <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c0004ca:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c0004cc:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c0004d0:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c0004d2:	0095c663          	blt	a1,s1,1c0004de <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c0004d6:	0004c463          	bltz	s1,1c0004de <__rt_soc_evt_store>
  j pwm_event_handler
1c0004da:	15c0006f          	j	1c000636 <pwm_event_handler>

1c0004de <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c0004de:	e4000497          	auipc	s1,0xe4000
1c0004e2:	dd248493          	addi	s1,s1,-558 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c0004e6:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c0004ea:	00b54463          	blt	a0,a1,1c0004f2 <socevents_set>
  addi    x9, x9, 4
1c0004ee:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c0004f0:	1501                	addi	a0,a0,-32

1c0004f2 <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c0004f2:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c0004f4:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c0004f8:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c0004fa:	a009                	j	1c0004fc <udma_event_handler_end>

1c0004fc <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c0004fc:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c0004fe:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c000500:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c000502:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c000504:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c000506:	6109                	addi	sp,sp,128
  mret
1c000508:	30200073          	mret

1c00050c <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c00050c:	e4000597          	auipc	a1,0xe4000
1c000510:	ed45a583          	lw	a1,-300(a1) # 3e0 <__rtc_handler>
  la    x9, udma_event_handler_end
1c000514:	00000497          	auipc	s1,0x0
1c000518:	fe848493          	addi	s1,s1,-24 # 1c0004fc <udma_event_handler_end>
  j   __rt_event_enqueue
1c00051c:	c4bff06f          	j	1c000166 <__rt_event_enqueue>

1c000520 <__rt_udma_handle_copy>:

  // x9: channel, x10: event, x8,x11,x12:temp
  .global __rt_udma_handle_copy
__rt_udma_handle_copy:

  slli   x8, x10, 2
1c000520:	00251413          	slli	s0,a0,0x2
  lw     x8, %tiny(__rt_udma_channels)(x8)
1c000524:	35442403          	lw	s0,852(s0)

  // First update all the queues
  lw     x12, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c000528:	4050                	lw	a2,4(s0)
  lw     x11, RT_UDMA_CHANNEL_T_PENDINGS_0(x8)
1c00052a:	400c                	lw	a1,0(s0)
  lw     x9, RT_UDMA_CHANNEL_T_PENDINGS_FIRST(x8)
1c00052c:	4404                	lw	s1,8(s0)
  sw     x12, RT_UDMA_CHANNEL_T_PENDINGS_0(x8)
1c00052e:	c010                	sw	a2,0(s0)


  bnez   x9, __rt_udma_handle_pending
1c000530:	e889                	bnez	s1,1c000542 <__rt_udma_handle_pending>

  sw     x0, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c000532:	00042223          	sw	zero,4(s0)
  la     x9, udma_event_handler_end
1c000536:	00000497          	auipc	s1,0x0
1c00053a:	fc648493          	addi	s1,s1,-58 # 1c0004fc <udma_event_handler_end>
  j      __rt_event_enqueue
1c00053e:	c29ff06f          	j	1c000166 <__rt_event_enqueue>

1c000542 <__rt_udma_handle_pending>:




__rt_udma_handle_pending:
  sw     x9, RT_UDMA_CHANNEL_T_PENDINGS_1(x8)
1c000542:	c044                	sw	s1,4(s0)
  lw     x11, PI_TASK_T_NEXT(x9)
1c000544:	4ccc                	lw	a1,28(s1)
  sw     x11, RT_UDMA_CHANNEL_T_PENDINGS_FIRST(x8)
1c000546:	c40c                	sw	a1,8(s0)

1c000548 <__rt_hyper_handle_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  lw    x12, 0(x8)
#else
  lw    x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c000548:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beqz      x12, __rt_hyper_handle_copy_end
1c00054c:	c621                	beqz	a2,1c000594 <__rt_hyper_handle_copy_end>

1c00054e <__rt_hyper_repeat_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c00054e:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000552:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c000556:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c00055a:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c00055c:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c00055e:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000562:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000566:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c00056a:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c00056c:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last
1c00056e:	00964963          	blt	a2,s1,1c000580 <__rt_hyper_repeat_copy_not_last>
  mv        x12, x9
1c000572:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000574:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c000578:	00061463          	bnez	a2,1c000580 <__rt_hyper_repeat_copy_not_last>
1c00057c:	f81ff06f          	j	1c0004fc <udma_event_handler_end>

1c000580 <__rt_hyper_repeat_copy_not_last>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000580:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000584:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c000588:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00058a:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00058c:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c00058e:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000590:	f6dff06f          	j	1c0004fc <udma_event_handler_end>

1c000594 <__rt_hyper_handle_copy_end>:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_end_task
  lw        x11, 0(x8)
  sw        x0, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_end_task)(x0)
1c000594:	32002583          	lw	a1,800(zero) # 320 <__rt_hyper_end_task>
  sw        x0, %tiny(__rt_hyper_end_task)(x0)
1c000598:	32002023          	sw	zero,800(zero) # 320 <__rt_hyper_end_task>
#endif
  beqz      x11, __rt_hyper_handle_emu_task
1c00059c:	c589                	beqz	a1,1c0005a6 <__rt_hyper_handle_emu_task>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_current_task
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_current_task)(x0)
1c00059e:	32002223          	sw	zero,804(zero) # 324 <__rt_hyper_current_task>
#endif
  jal       x9, __rt_event_enqueue
1c0005a2:	bc5ff4ef          	jal	s1,1c000166 <__rt_event_enqueue>

1c0005a6 <__rt_hyper_handle_emu_task>:
__rt_hyper_handle_emu_task:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_emu_task
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_emu_task)(x0)
1c0005a6:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
#endif
  beqz      x10, __rt_hyper_handle_pending_tasks
1c0005aa:	c919                	beqz	a0,1c0005c0 <__rt_hyper_handle_pending_tasks>

  la      x12, __rt_hyper_resume_emu_task
1c0005ac:	0000c617          	auipc	a2,0xc
1c0005b0:	aac60613          	addi	a2,a2,-1364 # 1c00c058 <__rt_hyper_resume_emu_task>
  la        x9, udma_event_handler_end
1c0005b4:	00000497          	auipc	s1,0x0
1c0005b8:	f4848493          	addi	s1,s1,-184 # 1c0004fc <udma_event_handler_end>
  j         __rt_call_external_c_function
1c0005bc:	c9dff06f          	j	1c000258 <__rt_call_external_c_function>

1c0005c0 <__rt_hyper_handle_pending_tasks>:
__rt_hyper_handle_pending_tasks:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_tasks
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_tasks)(x0)
1c0005c0:	34002503          	lw	a0,832(zero) # 340 <__rt_hyper_pending_tasks>
#endif
  beqz      x10, udma_event_handler_end
1c0005c4:	00051463          	bnez	a0,1c0005cc <__rt_hyper_handle_pending_tasks+0xc>
1c0005c8:	f35ff06f          	j	1c0004fc <udma_event_handler_end>

  la      x12, __rt_hyper_resume_copy
1c0005cc:	0000c617          	auipc	a2,0xc
1c0005d0:	a9460613          	addi	a2,a2,-1388 # 1c00c060 <__rt_hyper_resume_copy>
  la        x9, udma_event_handler_end
1c0005d4:	00000497          	auipc	s1,0x0
1c0005d8:	f2848493          	addi	s1,s1,-216 # 1c0004fc <udma_event_handler_end>
  j         __rt_call_external_c_function
1c0005dc:	c7dff06f          	j	1c000258 <__rt_call_external_c_function>

1c0005e0 <__rt_hyper_handle_burst>:
  la        x8, __rt_hyper_pending_repeat
  lw        x12, 0(x8)
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c0005e0:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>

  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c0005e4:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0005e8:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0005ec:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c0005f0:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0005f2:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0005f4:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0005f8:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0005fc:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c000600:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c000602:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last2
1c000604:	00964f63          	blt	a2,s1,1c000622 <__rt_hyper_repeat_copy_not_last2>

  la        x12, __rt_hyper_handle_copy
1c000608:	00000617          	auipc	a2,0x0
1c00060c:	f4060613          	addi	a2,a2,-192 # 1c000548 <__rt_hyper_handle_copy>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_udma_handle
  sw        x12, 0(x8)
#else
  sw        x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000610:	30c02423          	sw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif

  mv        x12, x9
1c000614:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000616:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c00061a:	00061463          	bnez	a2,1c000622 <__rt_hyper_repeat_copy_not_last2>
1c00061e:	edfff06f          	j	1c0004fc <udma_event_handler_end>

1c000622 <__rt_hyper_repeat_copy_not_last2>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000622:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000626:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c00062a:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00062c:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00062e:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c000630:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000632:	ecbff06f          	j	1c0004fc <udma_event_handler_end>

1c000636 <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c000636:	e4000517          	auipc	a0,0xe4000
1c00063a:	d6e50513          	addi	a0,a0,-658 # 3a4 <pwmEventsStatus>
  addi  x11, x0, 1
1c00063e:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c000642:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c000644:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c000648:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c00064a:	002044b7          	lui	s1,0x204
1c00064e:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c000652:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c000654:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c000656:	ea7ff06f          	j	1c0004fc <udma_event_handler_end>

1c00065a <__pi_uart_handle_copy_asm>:
  .extern __pi_uart_handle_copy
  .global __pi_uart_handle_copy_asm
__pi_uart_handle_copy_asm:

//  mv        x11, x10
  mv        x11, x8
1c00065a:	85a2                	mv	a1,s0
  la        x12, __pi_uart_handle_copy
1c00065c:	0000c617          	auipc	a2,0xc
1c000660:	1fe60613          	addi	a2,a2,510 # 1c00c85a <__pi_uart_handle_copy>
  la        x9, udma_event_handler_end
1c000664:	00000497          	auipc	s1,0x0
1c000668:	e9848493          	addi	s1,s1,-360 # 1c0004fc <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00066c:	bedff06f          	j	1c000258 <__rt_call_external_c_function>

1c000670 <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c000670:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c000672:	0000c617          	auipc	a2,0xc
1c000676:	61a60613          	addi	a2,a2,1562 # 1c00cc8c <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c00067a:	00000497          	auipc	s1,0x0
1c00067e:	00c48493          	addi	s1,s1,12 # 1c000686 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c000682:	bd7ff06f          	j	1c000258 <__rt_call_external_c_function>

1c000686 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c000686:	e77ff06f          	j	1c0004fc <udma_event_handler_end>

1c00068a <__udivdi3>:
1c00068a:	87b2                	mv	a5,a2
1c00068c:	8736                	mv	a4,a3
1c00068e:	88aa                	mv	a7,a0
1c000690:	882e                	mv	a6,a1
1c000692:	1e069d63          	bnez	a3,1c00088c <__udivdi3+0x202>
1c000696:	1c00e337          	lui	t1,0x1c00e
1c00069a:	7a430313          	addi	t1,t1,1956 # 1c00e7a4 <__clz_tab>
1c00069e:	0ac5fd63          	bleu	a2,a1,1c000758 <__udivdi3+0xce>
1c0006a2:	6741                	lui	a4,0x10
1c0006a4:	0ae67363          	bleu	a4,a2,1c00074a <__udivdi3+0xc0>
1c0006a8:	0ff00693          	li	a3,255
1c0006ac:	00c6b6b3          	sltu	a3,a3,a2
1c0006b0:	068e                	slli	a3,a3,0x3
1c0006b2:	00d65733          	srl	a4,a2,a3
1c0006b6:	933a                	add	t1,t1,a4
1c0006b8:	00034703          	lbu	a4,0(t1)
1c0006bc:	02000313          	li	t1,32
1c0006c0:	96ba                	add	a3,a3,a4
1c0006c2:	40d30333          	sub	t1,t1,a3
1c0006c6:	00030c63          	beqz	t1,1c0006de <__udivdi3+0x54>
1c0006ca:	00659733          	sll	a4,a1,t1
1c0006ce:	00d556b3          	srl	a3,a0,a3
1c0006d2:	006617b3          	sll	a5,a2,t1
1c0006d6:	00e6e833          	or	a6,a3,a4
1c0006da:	006518b3          	sll	a7,a0,t1
1c0006de:	0107d513          	srli	a0,a5,0x10
1c0006e2:	02a85733          	divu	a4,a6,a0
1c0006e6:	1007d5b3          	p.exthz	a1,a5
1c0006ea:	0108d693          	srli	a3,a7,0x10
1c0006ee:	02a87633          	remu	a2,a6,a0
1c0006f2:	02e58833          	mul	a6,a1,a4
1c0006f6:	0642                	slli	a2,a2,0x10
1c0006f8:	8ed1                	or	a3,a3,a2
1c0006fa:	863a                	mv	a2,a4
1c0006fc:	0106fc63          	bleu	a6,a3,1c000714 <__udivdi3+0x8a>
1c000700:	96be                	add	a3,a3,a5
1c000702:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x43>
1c000706:	00f6e763          	bltu	a3,a5,1c000714 <__udivdi3+0x8a>
1c00070a:	0106f563          	bleu	a6,a3,1c000714 <__udivdi3+0x8a>
1c00070e:	ffe70613          	addi	a2,a4,-2
1c000712:	96be                	add	a3,a3,a5
1c000714:	410686b3          	sub	a3,a3,a6
1c000718:	02a6f833          	remu	a6,a3,a0
1c00071c:	02a6d6b3          	divu	a3,a3,a0
1c000720:	df0828b3          	p.insert	a7,a6,15,16
1c000724:	02d58733          	mul	a4,a1,a3
1c000728:	8536                	mv	a0,a3
1c00072a:	00e8fb63          	bleu	a4,a7,1c000740 <__udivdi3+0xb6>
1c00072e:	98be                	add	a7,a7,a5
1c000730:	fff68513          	addi	a0,a3,-1
1c000734:	00f8e663          	bltu	a7,a5,1c000740 <__udivdi3+0xb6>
1c000738:	00e8f463          	bleu	a4,a7,1c000740 <__udivdi3+0xb6>
1c00073c:	ffe68513          	addi	a0,a3,-2
1c000740:	01061793          	slli	a5,a2,0x10
1c000744:	8fc9                	or	a5,a5,a0
1c000746:	4801                	li	a6,0
1c000748:	a06d                	j	1c0007f2 <__udivdi3+0x168>
1c00074a:	01000737          	lui	a4,0x1000
1c00074e:	46c1                	li	a3,16
1c000750:	f6e661e3          	bltu	a2,a4,1c0006b2 <__udivdi3+0x28>
1c000754:	46e1                	li	a3,24
1c000756:	bfb1                	j	1c0006b2 <__udivdi3+0x28>
1c000758:	e601                	bnez	a2,1c000760 <__udivdi3+0xd6>
1c00075a:	4685                	li	a3,1
1c00075c:	02c6d7b3          	divu	a5,a3,a2
1c000760:	66c1                	lui	a3,0x10
1c000762:	08d7fb63          	bleu	a3,a5,1c0007f8 <__udivdi3+0x16e>
1c000766:	0ff00693          	li	a3,255
1c00076a:	00f6f363          	bleu	a5,a3,1c000770 <__udivdi3+0xe6>
1c00076e:	4721                	li	a4,8
1c000770:	00e7d6b3          	srl	a3,a5,a4
1c000774:	9336                	add	t1,t1,a3
1c000776:	00034683          	lbu	a3,0(t1)
1c00077a:	02000613          	li	a2,32
1c00077e:	96ba                	add	a3,a3,a4
1c000780:	8e15                	sub	a2,a2,a3
1c000782:	e251                	bnez	a2,1c000806 <__udivdi3+0x17c>
1c000784:	40f58733          	sub	a4,a1,a5
1c000788:	4805                	li	a6,1
1c00078a:	0107d513          	srli	a0,a5,0x10
1c00078e:	1007d5b3          	p.exthz	a1,a5
1c000792:	0108d693          	srli	a3,a7,0x10
1c000796:	02a77633          	remu	a2,a4,a0
1c00079a:	02a75733          	divu	a4,a4,a0
1c00079e:	0642                	slli	a2,a2,0x10
1c0007a0:	8ed1                	or	a3,a3,a2
1c0007a2:	02e58333          	mul	t1,a1,a4
1c0007a6:	863a                	mv	a2,a4
1c0007a8:	0066fc63          	bleu	t1,a3,1c0007c0 <__udivdi3+0x136>
1c0007ac:	96be                	add	a3,a3,a5
1c0007ae:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c0007b2:	00f6e763          	bltu	a3,a5,1c0007c0 <__udivdi3+0x136>
1c0007b6:	0066f563          	bleu	t1,a3,1c0007c0 <__udivdi3+0x136>
1c0007ba:	ffe70613          	addi	a2,a4,-2
1c0007be:	96be                	add	a3,a3,a5
1c0007c0:	406686b3          	sub	a3,a3,t1
1c0007c4:	02a6f333          	remu	t1,a3,a0
1c0007c8:	02a6d6b3          	divu	a3,a3,a0
1c0007cc:	df0328b3          	p.insert	a7,t1,15,16
1c0007d0:	02d58733          	mul	a4,a1,a3
1c0007d4:	8536                	mv	a0,a3
1c0007d6:	00e8fb63          	bleu	a4,a7,1c0007ec <__udivdi3+0x162>
1c0007da:	98be                	add	a7,a7,a5
1c0007dc:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x43>
1c0007e0:	00f8e663          	bltu	a7,a5,1c0007ec <__udivdi3+0x162>
1c0007e4:	00e8f463          	bleu	a4,a7,1c0007ec <__udivdi3+0x162>
1c0007e8:	ffe68513          	addi	a0,a3,-2
1c0007ec:	01061793          	slli	a5,a2,0x10
1c0007f0:	8fc9                	or	a5,a5,a0
1c0007f2:	853e                	mv	a0,a5
1c0007f4:	85c2                	mv	a1,a6
1c0007f6:	8082                	ret
1c0007f8:	010006b7          	lui	a3,0x1000
1c0007fc:	4741                	li	a4,16
1c0007fe:	f6d7e9e3          	bltu	a5,a3,1c000770 <__udivdi3+0xe6>
1c000802:	4761                	li	a4,24
1c000804:	b7b5                	j	1c000770 <__udivdi3+0xe6>
1c000806:	00c797b3          	sll	a5,a5,a2
1c00080a:	00d5d333          	srl	t1,a1,a3
1c00080e:	0107de13          	srli	t3,a5,0x10
1c000812:	00c59733          	sll	a4,a1,a2
1c000816:	00c518b3          	sll	a7,a0,a2
1c00081a:	00d555b3          	srl	a1,a0,a3
1c00081e:	03c35533          	divu	a0,t1,t3
1c000822:	8dd9                	or	a1,a1,a4
1c000824:	1007d733          	p.exthz	a4,a5
1c000828:	0105d693          	srli	a3,a1,0x10
1c00082c:	03c37633          	remu	a2,t1,t3
1c000830:	882a                	mv	a6,a0
1c000832:	02a70333          	mul	t1,a4,a0
1c000836:	0642                	slli	a2,a2,0x10
1c000838:	8ed1                	or	a3,a3,a2
1c00083a:	0066fc63          	bleu	t1,a3,1c000852 <__udivdi3+0x1c8>
1c00083e:	96be                	add	a3,a3,a5
1c000840:	fff50813          	addi	a6,a0,-1
1c000844:	00f6e763          	bltu	a3,a5,1c000852 <__udivdi3+0x1c8>
1c000848:	0066f563          	bleu	t1,a3,1c000852 <__udivdi3+0x1c8>
1c00084c:	ffe50813          	addi	a6,a0,-2
1c000850:	96be                	add	a3,a3,a5
1c000852:	406686b3          	sub	a3,a3,t1
1c000856:	03c6f633          	remu	a2,a3,t3
1c00085a:	03c6d6b3          	divu	a3,a3,t3
1c00085e:	df0625b3          	p.insert	a1,a2,15,16
1c000862:	02d70733          	mul	a4,a4,a3
1c000866:	8636                	mv	a2,a3
1c000868:	00e5fc63          	bleu	a4,a1,1c000880 <__udivdi3+0x1f6>
1c00086c:	95be                	add	a1,a1,a5
1c00086e:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c000872:	00f5e763          	bltu	a1,a5,1c000880 <__udivdi3+0x1f6>
1c000876:	00e5f563          	bleu	a4,a1,1c000880 <__udivdi3+0x1f6>
1c00087a:	ffe68613          	addi	a2,a3,-2
1c00087e:	95be                	add	a1,a1,a5
1c000880:	0842                	slli	a6,a6,0x10
1c000882:	40e58733          	sub	a4,a1,a4
1c000886:	00c86833          	or	a6,a6,a2
1c00088a:	b701                	j	1c00078a <__udivdi3+0x100>
1c00088c:	12d5ea63          	bltu	a1,a3,1c0009c0 <__udivdi3+0x336>
1c000890:	67c1                	lui	a5,0x10
1c000892:	02f6fd63          	bleu	a5,a3,1c0008cc <__udivdi3+0x242>
1c000896:	0ff00793          	li	a5,255
1c00089a:	00d7b8b3          	sltu	a7,a5,a3
1c00089e:	088e                	slli	a7,a7,0x3
1c0008a0:	1c00e737          	lui	a4,0x1c00e
1c0008a4:	0116d7b3          	srl	a5,a3,a7
1c0008a8:	7a470713          	addi	a4,a4,1956 # 1c00e7a4 <__clz_tab>
1c0008ac:	97ba                	add	a5,a5,a4
1c0008ae:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c0008b2:	02000813          	li	a6,32
1c0008b6:	97c6                	add	a5,a5,a7
1c0008b8:	40f80833          	sub	a6,a6,a5
1c0008bc:	00081f63          	bnez	a6,1c0008da <__udivdi3+0x250>
1c0008c0:	4785                	li	a5,1
1c0008c2:	f2b6e8e3          	bltu	a3,a1,1c0007f2 <__udivdi3+0x168>
1c0008c6:	04a637b3          	p.sletu	a5,a2,a0
1c0008ca:	b725                	j	1c0007f2 <__udivdi3+0x168>
1c0008cc:	010007b7          	lui	a5,0x1000
1c0008d0:	48c1                	li	a7,16
1c0008d2:	fcf6e7e3          	bltu	a3,a5,1c0008a0 <__udivdi3+0x216>
1c0008d6:	48e1                	li	a7,24
1c0008d8:	b7e1                	j	1c0008a0 <__udivdi3+0x216>
1c0008da:	00f658b3          	srl	a7,a2,a5
1c0008de:	010696b3          	sll	a3,a3,a6
1c0008e2:	00d8e6b3          	or	a3,a7,a3
1c0008e6:	00f5d333          	srl	t1,a1,a5
1c0008ea:	0106de13          	srli	t3,a3,0x10
1c0008ee:	00f55733          	srl	a4,a0,a5
1c0008f2:	03c377b3          	remu	a5,t1,t3
1c0008f6:	1006d8b3          	p.exthz	a7,a3
1c0008fa:	010595b3          	sll	a1,a1,a6
1c0008fe:	8f4d                	or	a4,a4,a1
1c000900:	01075593          	srli	a1,a4,0x10
1c000904:	01061633          	sll	a2,a2,a6
1c000908:	03c35333          	divu	t1,t1,t3
1c00090c:	07c2                	slli	a5,a5,0x10
1c00090e:	8ddd                	or	a1,a1,a5
1c000910:	02688eb3          	mul	t4,a7,t1
1c000914:	879a                	mv	a5,t1
1c000916:	01d5fc63          	bleu	t4,a1,1c00092e <__udivdi3+0x2a4>
1c00091a:	95b6                	add	a1,a1,a3
1c00091c:	fff30793          	addi	a5,t1,-1
1c000920:	00d5e763          	bltu	a1,a3,1c00092e <__udivdi3+0x2a4>
1c000924:	01d5f563          	bleu	t4,a1,1c00092e <__udivdi3+0x2a4>
1c000928:	ffe30793          	addi	a5,t1,-2
1c00092c:	95b6                	add	a1,a1,a3
1c00092e:	41d585b3          	sub	a1,a1,t4
1c000932:	03c5f333          	remu	t1,a1,t3
1c000936:	03c5d5b3          	divu	a1,a1,t3
1c00093a:	df032733          	p.insert	a4,t1,15,16
1c00093e:	02b888b3          	mul	a7,a7,a1
1c000942:	832e                	mv	t1,a1
1c000944:	01177c63          	bleu	a7,a4,1c00095c <__udivdi3+0x2d2>
1c000948:	9736                	add	a4,a4,a3
1c00094a:	fff58313          	addi	t1,a1,-1
1c00094e:	00d76763          	bltu	a4,a3,1c00095c <__udivdi3+0x2d2>
1c000952:	01177563          	bleu	a7,a4,1c00095c <__udivdi3+0x2d2>
1c000956:	ffe58313          	addi	t1,a1,-2
1c00095a:	9736                	add	a4,a4,a3
1c00095c:	07c2                	slli	a5,a5,0x10
1c00095e:	6e41                	lui	t3,0x10
1c000960:	0067e7b3          	or	a5,a5,t1
1c000964:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x43>
1c000968:	00b7f6b3          	and	a3,a5,a1
1c00096c:	41170733          	sub	a4,a4,a7
1c000970:	8df1                	and	a1,a1,a2
1c000972:	0107d893          	srli	a7,a5,0x10
1c000976:	02b68333          	mul	t1,a3,a1
1c00097a:	8241                	srli	a2,a2,0x10
1c00097c:	02b885b3          	mul	a1,a7,a1
1c000980:	8eae                	mv	t4,a1
1c000982:	42c68eb3          	p.mac	t4,a3,a2
1c000986:	01035693          	srli	a3,t1,0x10
1c00098a:	96f6                	add	a3,a3,t4
1c00098c:	02c888b3          	mul	a7,a7,a2
1c000990:	00b6f363          	bleu	a1,a3,1c000996 <__udivdi3+0x30c>
1c000994:	98f2                	add	a7,a7,t3
1c000996:	0106d613          	srli	a2,a3,0x10
1c00099a:	98b2                	add	a7,a7,a2
1c00099c:	03176063          	bltu	a4,a7,1c0009bc <__udivdi3+0x332>
1c0009a0:	db1713e3          	bne	a4,a7,1c000746 <__udivdi3+0xbc>
1c0009a4:	6741                	lui	a4,0x10
1c0009a6:	177d                	addi	a4,a4,-1
1c0009a8:	8ef9                	and	a3,a3,a4
1c0009aa:	06c2                	slli	a3,a3,0x10
1c0009ac:	00e37333          	and	t1,t1,a4
1c0009b0:	01051533          	sll	a0,a0,a6
1c0009b4:	969a                	add	a3,a3,t1
1c0009b6:	4801                	li	a6,0
1c0009b8:	e2d57de3          	bleu	a3,a0,1c0007f2 <__udivdi3+0x168>
1c0009bc:	17fd                	addi	a5,a5,-1
1c0009be:	b361                	j	1c000746 <__udivdi3+0xbc>
1c0009c0:	4801                	li	a6,0
1c0009c2:	4781                	li	a5,0
1c0009c4:	b53d                	j	1c0007f2 <__udivdi3+0x168>

1c0009c6 <__umoddi3>:
1c0009c6:	88b2                	mv	a7,a2
1c0009c8:	8736                	mv	a4,a3
1c0009ca:	87aa                	mv	a5,a0
1c0009cc:	882e                	mv	a6,a1
1c0009ce:	1a069963          	bnez	a3,1c000b80 <__umoddi3+0x1ba>
1c0009d2:	1c00e6b7          	lui	a3,0x1c00e
1c0009d6:	7a468693          	addi	a3,a3,1956 # 1c00e7a4 <__clz_tab>
1c0009da:	0ac5f463          	bleu	a2,a1,1c000a82 <__umoddi3+0xbc>
1c0009de:	6341                	lui	t1,0x10
1c0009e0:	08667a63          	bleu	t1,a2,1c000a74 <__umoddi3+0xae>
1c0009e4:	0ff00313          	li	t1,255
1c0009e8:	00c37363          	bleu	a2,t1,1c0009ee <__umoddi3+0x28>
1c0009ec:	4721                	li	a4,8
1c0009ee:	00e65333          	srl	t1,a2,a4
1c0009f2:	969a                	add	a3,a3,t1
1c0009f4:	0006c683          	lbu	a3,0(a3)
1c0009f8:	02000313          	li	t1,32
1c0009fc:	9736                	add	a4,a4,a3
1c0009fe:	40e30333          	sub	t1,t1,a4
1c000a02:	00030c63          	beqz	t1,1c000a1a <__umoddi3+0x54>
1c000a06:	006595b3          	sll	a1,a1,t1
1c000a0a:	00e55733          	srl	a4,a0,a4
1c000a0e:	006618b3          	sll	a7,a2,t1
1c000a12:	00b76833          	or	a6,a4,a1
1c000a16:	006517b3          	sll	a5,a0,t1
1c000a1a:	0108d613          	srli	a2,a7,0x10
1c000a1e:	02c87733          	remu	a4,a6,a2
1c000a22:	1008d533          	p.exthz	a0,a7
1c000a26:	0107d693          	srli	a3,a5,0x10
1c000a2a:	02c85833          	divu	a6,a6,a2
1c000a2e:	0742                	slli	a4,a4,0x10
1c000a30:	8ed9                	or	a3,a3,a4
1c000a32:	03050833          	mul	a6,a0,a6
1c000a36:	0106f863          	bleu	a6,a3,1c000a46 <__umoddi3+0x80>
1c000a3a:	96c6                	add	a3,a3,a7
1c000a3c:	0116e563          	bltu	a3,a7,1c000a46 <__umoddi3+0x80>
1c000a40:	0106f363          	bleu	a6,a3,1c000a46 <__umoddi3+0x80>
1c000a44:	96c6                	add	a3,a3,a7
1c000a46:	410686b3          	sub	a3,a3,a6
1c000a4a:	02c6f733          	remu	a4,a3,a2
1c000a4e:	02c6d6b3          	divu	a3,a3,a2
1c000a52:	df0727b3          	p.insert	a5,a4,15,16
1c000a56:	02d506b3          	mul	a3,a0,a3
1c000a5a:	00d7f863          	bleu	a3,a5,1c000a6a <__umoddi3+0xa4>
1c000a5e:	97c6                	add	a5,a5,a7
1c000a60:	0117e563          	bltu	a5,a7,1c000a6a <__umoddi3+0xa4>
1c000a64:	00d7f363          	bleu	a3,a5,1c000a6a <__umoddi3+0xa4>
1c000a68:	97c6                	add	a5,a5,a7
1c000a6a:	8f95                	sub	a5,a5,a3
1c000a6c:	0067d533          	srl	a0,a5,t1
1c000a70:	4581                	li	a1,0
1c000a72:	8082                	ret
1c000a74:	01000337          	lui	t1,0x1000
1c000a78:	4741                	li	a4,16
1c000a7a:	f6666ae3          	bltu	a2,t1,1c0009ee <__umoddi3+0x28>
1c000a7e:	4761                	li	a4,24
1c000a80:	b7bd                	j	1c0009ee <__umoddi3+0x28>
1c000a82:	e601                	bnez	a2,1c000a8a <__umoddi3+0xc4>
1c000a84:	4605                	li	a2,1
1c000a86:	031658b3          	divu	a7,a2,a7
1c000a8a:	6641                	lui	a2,0x10
1c000a8c:	06c8ff63          	bleu	a2,a7,1c000b0a <__umoddi3+0x144>
1c000a90:	0ff00613          	li	a2,255
1c000a94:	01167363          	bleu	a7,a2,1c000a9a <__umoddi3+0xd4>
1c000a98:	4721                	li	a4,8
1c000a9a:	00e8d633          	srl	a2,a7,a4
1c000a9e:	96b2                	add	a3,a3,a2
1c000aa0:	0006c603          	lbu	a2,0(a3)
1c000aa4:	02000313          	li	t1,32
1c000aa8:	963a                	add	a2,a2,a4
1c000aaa:	40c30333          	sub	t1,t1,a2
1c000aae:	06031563          	bnez	t1,1c000b18 <__umoddi3+0x152>
1c000ab2:	411585b3          	sub	a1,a1,a7
1c000ab6:	0108d713          	srli	a4,a7,0x10
1c000aba:	1008d533          	p.exthz	a0,a7
1c000abe:	0107d613          	srli	a2,a5,0x10
1c000ac2:	02e5f6b3          	remu	a3,a1,a4
1c000ac6:	02e5d5b3          	divu	a1,a1,a4
1c000aca:	06c2                	slli	a3,a3,0x10
1c000acc:	8ed1                	or	a3,a3,a2
1c000ace:	02b505b3          	mul	a1,a0,a1
1c000ad2:	00b6f863          	bleu	a1,a3,1c000ae2 <__umoddi3+0x11c>
1c000ad6:	96c6                	add	a3,a3,a7
1c000ad8:	0116e563          	bltu	a3,a7,1c000ae2 <__umoddi3+0x11c>
1c000adc:	00b6f363          	bleu	a1,a3,1c000ae2 <__umoddi3+0x11c>
1c000ae0:	96c6                	add	a3,a3,a7
1c000ae2:	40b685b3          	sub	a1,a3,a1
1c000ae6:	02e5f6b3          	remu	a3,a1,a4
1c000aea:	02e5d5b3          	divu	a1,a1,a4
1c000aee:	df06a7b3          	p.insert	a5,a3,15,16
1c000af2:	02b505b3          	mul	a1,a0,a1
1c000af6:	00b7f863          	bleu	a1,a5,1c000b06 <__umoddi3+0x140>
1c000afa:	97c6                	add	a5,a5,a7
1c000afc:	0117e563          	bltu	a5,a7,1c000b06 <__umoddi3+0x140>
1c000b00:	00b7f363          	bleu	a1,a5,1c000b06 <__umoddi3+0x140>
1c000b04:	97c6                	add	a5,a5,a7
1c000b06:	8f8d                	sub	a5,a5,a1
1c000b08:	b795                	j	1c000a6c <__umoddi3+0xa6>
1c000b0a:	01000637          	lui	a2,0x1000
1c000b0e:	4741                	li	a4,16
1c000b10:	f8c8e5e3          	bltu	a7,a2,1c000a9a <__umoddi3+0xd4>
1c000b14:	4761                	li	a4,24
1c000b16:	b751                	j	1c000a9a <__umoddi3+0xd4>
1c000b18:	006898b3          	sll	a7,a7,t1
1c000b1c:	00c5d733          	srl	a4,a1,a2
1c000b20:	006517b3          	sll	a5,a0,t1
1c000b24:	00c55633          	srl	a2,a0,a2
1c000b28:	006595b3          	sll	a1,a1,t1
1c000b2c:	0108d513          	srli	a0,a7,0x10
1c000b30:	8dd1                	or	a1,a1,a2
1c000b32:	02a77633          	remu	a2,a4,a0
1c000b36:	1008d833          	p.exthz	a6,a7
1c000b3a:	0105d693          	srli	a3,a1,0x10
1c000b3e:	02a75733          	divu	a4,a4,a0
1c000b42:	0642                	slli	a2,a2,0x10
1c000b44:	8ed1                	or	a3,a3,a2
1c000b46:	02e80733          	mul	a4,a6,a4
1c000b4a:	00e6f863          	bleu	a4,a3,1c000b5a <__umoddi3+0x194>
1c000b4e:	96c6                	add	a3,a3,a7
1c000b50:	0116e563          	bltu	a3,a7,1c000b5a <__umoddi3+0x194>
1c000b54:	00e6f363          	bleu	a4,a3,1c000b5a <__umoddi3+0x194>
1c000b58:	96c6                	add	a3,a3,a7
1c000b5a:	8e99                	sub	a3,a3,a4
1c000b5c:	02a6f733          	remu	a4,a3,a0
1c000b60:	02a6d6b3          	divu	a3,a3,a0
1c000b64:	df0725b3          	p.insert	a1,a4,15,16
1c000b68:	02d806b3          	mul	a3,a6,a3
1c000b6c:	00d5f863          	bleu	a3,a1,1c000b7c <__umoddi3+0x1b6>
1c000b70:	95c6                	add	a1,a1,a7
1c000b72:	0115e563          	bltu	a1,a7,1c000b7c <__umoddi3+0x1b6>
1c000b76:	00d5f363          	bleu	a3,a1,1c000b7c <__umoddi3+0x1b6>
1c000b7a:	95c6                	add	a1,a1,a7
1c000b7c:	8d95                	sub	a1,a1,a3
1c000b7e:	bf25                	j	1c000ab6 <__umoddi3+0xf0>
1c000b80:	eed5e9e3          	bltu	a1,a3,1c000a72 <__umoddi3+0xac>
1c000b84:	6741                	lui	a4,0x10
1c000b86:	04e6f563          	bleu	a4,a3,1c000bd0 <__umoddi3+0x20a>
1c000b8a:	0ff00e93          	li	t4,255
1c000b8e:	00deb733          	sltu	a4,t4,a3
1c000b92:	070e                	slli	a4,a4,0x3
1c000b94:	1c00e337          	lui	t1,0x1c00e
1c000b98:	00e6d8b3          	srl	a7,a3,a4
1c000b9c:	7a430313          	addi	t1,t1,1956 # 1c00e7a4 <__clz_tab>
1c000ba0:	989a                	add	a7,a7,t1
1c000ba2:	0008ce83          	lbu	t4,0(a7)
1c000ba6:	02000e13          	li	t3,32
1c000baa:	9eba                	add	t4,t4,a4
1c000bac:	41de0e33          	sub	t3,t3,t4
1c000bb0:	020e1763          	bnez	t3,1c000bde <__umoddi3+0x218>
1c000bb4:	00b6e463          	bltu	a3,a1,1c000bbc <__umoddi3+0x1f6>
1c000bb8:	00c56963          	bltu	a0,a2,1c000bca <__umoddi3+0x204>
1c000bbc:	40c507b3          	sub	a5,a0,a2
1c000bc0:	8d95                	sub	a1,a1,a3
1c000bc2:	00f53533          	sltu	a0,a0,a5
1c000bc6:	40a58833          	sub	a6,a1,a0
1c000bca:	853e                	mv	a0,a5
1c000bcc:	85c2                	mv	a1,a6
1c000bce:	b555                	j	1c000a72 <__umoddi3+0xac>
1c000bd0:	010008b7          	lui	a7,0x1000
1c000bd4:	4741                	li	a4,16
1c000bd6:	fb16efe3          	bltu	a3,a7,1c000b94 <__umoddi3+0x1ce>
1c000bda:	4761                	li	a4,24
1c000bdc:	bf65                	j	1c000b94 <__umoddi3+0x1ce>
1c000bde:	01d65733          	srl	a4,a2,t4
1c000be2:	01c696b3          	sll	a3,a3,t3
1c000be6:	8ed9                	or	a3,a3,a4
1c000be8:	01d5d7b3          	srl	a5,a1,t4
1c000bec:	0106d813          	srli	a6,a3,0x10
1c000bf0:	0307f333          	remu	t1,a5,a6
1c000bf4:	1006d733          	p.exthz	a4,a3
1c000bf8:	01d558b3          	srl	a7,a0,t4
1c000bfc:	01c595b3          	sll	a1,a1,t3
1c000c00:	00b8e5b3          	or	a1,a7,a1
1c000c04:	0105d893          	srli	a7,a1,0x10
1c000c08:	01c61633          	sll	a2,a2,t3
1c000c0c:	01c51533          	sll	a0,a0,t3
1c000c10:	0307d7b3          	divu	a5,a5,a6
1c000c14:	0342                	slli	t1,t1,0x10
1c000c16:	011368b3          	or	a7,t1,a7
1c000c1a:	02f70f33          	mul	t5,a4,a5
1c000c1e:	833e                	mv	t1,a5
1c000c20:	01e8fc63          	bleu	t5,a7,1c000c38 <__umoddi3+0x272>
1c000c24:	98b6                	add	a7,a7,a3
1c000c26:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c000c2a:	00d8e763          	bltu	a7,a3,1c000c38 <__umoddi3+0x272>
1c000c2e:	01e8f563          	bleu	t5,a7,1c000c38 <__umoddi3+0x272>
1c000c32:	ffe78313          	addi	t1,a5,-2
1c000c36:	98b6                	add	a7,a7,a3
1c000c38:	41e888b3          	sub	a7,a7,t5
1c000c3c:	0308f7b3          	remu	a5,a7,a6
1c000c40:	0308d8b3          	divu	a7,a7,a6
1c000c44:	df07a5b3          	p.insert	a1,a5,15,16
1c000c48:	03170733          	mul	a4,a4,a7
1c000c4c:	87c6                	mv	a5,a7
1c000c4e:	00e5fc63          	bleu	a4,a1,1c000c66 <__umoddi3+0x2a0>
1c000c52:	95b6                	add	a1,a1,a3
1c000c54:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c000c58:	00d5e763          	bltu	a1,a3,1c000c66 <__umoddi3+0x2a0>
1c000c5c:	00e5f563          	bleu	a4,a1,1c000c66 <__umoddi3+0x2a0>
1c000c60:	ffe88793          	addi	a5,a7,-2
1c000c64:	95b6                	add	a1,a1,a3
1c000c66:	0342                	slli	t1,t1,0x10
1c000c68:	6f41                	lui	t5,0x10
1c000c6a:	00f36333          	or	t1,t1,a5
1c000c6e:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x43>
1c000c72:	00f37833          	and	a6,t1,a5
1c000c76:	01035313          	srli	t1,t1,0x10
1c000c7a:	8ff1                	and	a5,a5,a2
1c000c7c:	02f808b3          	mul	a7,a6,a5
1c000c80:	8d99                	sub	a1,a1,a4
1c000c82:	01065713          	srli	a4,a2,0x10
1c000c86:	02f307b3          	mul	a5,t1,a5
1c000c8a:	8fbe                	mv	t6,a5
1c000c8c:	42e80fb3          	p.mac	t6,a6,a4
1c000c90:	0108d813          	srli	a6,a7,0x10
1c000c94:	987e                	add	a6,a6,t6
1c000c96:	02e30333          	mul	t1,t1,a4
1c000c9a:	00f87363          	bleu	a5,a6,1c000ca0 <__umoddi3+0x2da>
1c000c9e:	937a                	add	t1,t1,t5
1c000ca0:	01085713          	srli	a4,a6,0x10
1c000ca4:	933a                	add	t1,t1,a4
1c000ca6:	6741                	lui	a4,0x10
1c000ca8:	177d                	addi	a4,a4,-1
1c000caa:	00e87833          	and	a6,a6,a4
1c000cae:	0842                	slli	a6,a6,0x10
1c000cb0:	00e8f733          	and	a4,a7,a4
1c000cb4:	9742                	add	a4,a4,a6
1c000cb6:	0065e663          	bltu	a1,t1,1c000cc2 <__umoddi3+0x2fc>
1c000cba:	00659d63          	bne	a1,t1,1c000cd4 <__umoddi3+0x30e>
1c000cbe:	00e57b63          	bleu	a4,a0,1c000cd4 <__umoddi3+0x30e>
1c000cc2:	40c70633          	sub	a2,a4,a2
1c000cc6:	00c73733          	sltu	a4,a4,a2
1c000cca:	40d30333          	sub	t1,t1,a3
1c000cce:	40e30333          	sub	t1,t1,a4
1c000cd2:	8732                	mv	a4,a2
1c000cd4:	40e50733          	sub	a4,a0,a4
1c000cd8:	00e53533          	sltu	a0,a0,a4
1c000cdc:	406585b3          	sub	a1,a1,t1
1c000ce0:	8d89                	sub	a1,a1,a0
1c000ce2:	01d597b3          	sll	a5,a1,t4
1c000ce6:	01c75733          	srl	a4,a4,t3
1c000cea:	00e7e533          	or	a0,a5,a4
1c000cee:	01c5d5b3          	srl	a1,a1,t3
1c000cf2:	b341                	j	1c000a72 <__umoddi3+0xac>

1c000cf4 <__adddf3>:
1c000cf4:	e6059733          	p.extractu	a4,a1,19,0
1c000cf8:	070e                	slli	a4,a4,0x3
1c000cfa:	01d55793          	srli	a5,a0,0x1d
1c000cfe:	e6069833          	p.extractu	a6,a3,19,0
1c000d02:	d5459e33          	p.extractu	t3,a1,10,20
1c000d06:	080e                	slli	a6,a6,0x3
1c000d08:	01d65893          	srli	a7,a2,0x1d
1c000d0c:	8fd9                	or	a5,a5,a4
1c000d0e:	81fd                	srli	a1,a1,0x1f
1c000d10:	d5469733          	p.extractu	a4,a3,10,20
1c000d14:	82fd                	srli	a3,a3,0x1f
1c000d16:	0108eeb3          	or	t4,a7,a6
1c000d1a:	050e                	slli	a0,a0,0x3
1c000d1c:	060e                	slli	a2,a2,0x3
1c000d1e:	40ee0833          	sub	a6,t3,a4
1c000d22:	2ad59563          	bne	a1,a3,1c000fcc <__adddf3+0x2d8>
1c000d26:	15005463          	blez	a6,1c000e6e <__adddf3+0x17a>
1c000d2a:	e369                	bnez	a4,1c000dec <__adddf3+0xf8>
1c000d2c:	00cee733          	or	a4,t4,a2
1c000d30:	e325                	bnez	a4,1c000d90 <__adddf3+0x9c>
1c000d32:	7ff00693          	li	a3,2047
1c000d36:	8742                	mv	a4,a6
1c000d38:	22d81d63          	bne	a6,a3,1c000f72 <__adddf3+0x27e>
1c000d3c:	00a7e6b3          	or	a3,a5,a0
1c000d40:	22069963          	bnez	a3,1c000f72 <__adddf3+0x27e>
1c000d44:	4781                	li	a5,0
1c000d46:	4501                	li	a0,0
1c000d48:	00879693          	slli	a3,a5,0x8
1c000d4c:	0006d963          	bgez	a3,1c000d5e <__adddf3+0x6a>
1c000d50:	0705                	addi	a4,a4,1
1c000d52:	7ff00693          	li	a3,2047
1c000d56:	58d70b63          	beq	a4,a3,1c0012ec <__adddf3+0x5f8>
1c000d5a:	c177b7b3          	p.bclr	a5,a5,0,23
1c000d5e:	01d79693          	slli	a3,a5,0x1d
1c000d62:	810d                	srli	a0,a0,0x3
1c000d64:	8d55                	or	a0,a0,a3
1c000d66:	7ff00693          	li	a3,2047
1c000d6a:	838d                	srli	a5,a5,0x3
1c000d6c:	00d71963          	bne	a4,a3,1c000d7e <__adddf3+0x8a>
1c000d70:	8d5d                	or	a0,a0,a5
1c000d72:	4781                	li	a5,0
1c000d74:	c509                	beqz	a0,1c000d7e <__adddf3+0x8a>
1c000d76:	000807b7          	lui	a5,0x80
1c000d7a:	4501                	li	a0,0
1c000d7c:	4581                	li	a1,0
1c000d7e:	4681                	li	a3,0
1c000d80:	e607a6b3          	p.insert	a3,a5,19,0
1c000d84:	d54726b3          	p.insert	a3,a4,10,20
1c000d88:	c1f5a6b3          	p.insert	a3,a1,0,31
1c000d8c:	85b6                	mv	a1,a3
1c000d8e:	8082                	ret
1c000d90:	fff80893          	addi	a7,a6,-1
1c000d94:	04089163          	bnez	a7,1c000dd6 <__adddf3+0xe2>
1c000d98:	962a                	add	a2,a2,a0
1c000d9a:	00a63533          	sltu	a0,a2,a0
1c000d9e:	01d78833          	add	a6,a5,t4
1c000da2:	00a807b3          	add	a5,a6,a0
1c000da6:	4705                	li	a4,1
1c000da8:	8532                	mv	a0,a2
1c000daa:	00879893          	slli	a7,a5,0x8
1c000dae:	1c08d263          	bgez	a7,1c000f72 <__adddf3+0x27e>
1c000db2:	0705                	addi	a4,a4,1
1c000db4:	7ff00693          	li	a3,2047
1c000db8:	f8d706e3          	beq	a4,a3,1c000d44 <__adddf3+0x50>
1c000dbc:	c177b633          	p.bclr	a2,a5,0,23
1c000dc0:	00155693          	srli	a3,a0,0x1
1c000dc4:	fc153533          	p.bclr	a0,a0,30,1
1c000dc8:	01f61793          	slli	a5,a2,0x1f
1c000dcc:	8d55                	or	a0,a0,a3
1c000dce:	8d5d                	or	a0,a0,a5
1c000dd0:	00165793          	srli	a5,a2,0x1
1c000dd4:	aa79                	j	1c000f72 <__adddf3+0x27e>
1c000dd6:	7ff00713          	li	a4,2047
1c000dda:	02e81063          	bne	a6,a4,1c000dfa <__adddf3+0x106>
1c000dde:	00a7e733          	or	a4,a5,a0
1c000de2:	4e070563          	beqz	a4,1c0012cc <__adddf3+0x5d8>
1c000de6:	7ff00713          	li	a4,2047
1c000dea:	a261                	j	1c000f72 <__adddf3+0x27e>
1c000dec:	7ff00713          	li	a4,2047
1c000df0:	feee07e3          	beq	t3,a4,1c000dde <__adddf3+0xea>
1c000df4:	c17eceb3          	p.bset	t4,t4,0,23
1c000df8:	88c2                	mv	a7,a6
1c000dfa:	03800713          	li	a4,56
1c000dfe:	07174363          	blt	a4,a7,1c000e64 <__adddf3+0x170>
1c000e02:	477d                	li	a4,31
1c000e04:	03174c63          	blt	a4,a7,1c000e3c <__adddf3+0x148>
1c000e08:	02000713          	li	a4,32
1c000e0c:	41170733          	sub	a4,a4,a7
1c000e10:	011656b3          	srl	a3,a2,a7
1c000e14:	00ee9833          	sll	a6,t4,a4
1c000e18:	00e61633          	sll	a2,a2,a4
1c000e1c:	00d86833          	or	a6,a6,a3
1c000e20:	00c03633          	snez	a2,a2
1c000e24:	00c86833          	or	a6,a6,a2
1c000e28:	011ed8b3          	srl	a7,t4,a7
1c000e2c:	982a                	add	a6,a6,a0
1c000e2e:	98be                	add	a7,a7,a5
1c000e30:	00a837b3          	sltu	a5,a6,a0
1c000e34:	97c6                	add	a5,a5,a7
1c000e36:	8542                	mv	a0,a6
1c000e38:	8772                	mv	a4,t3
1c000e3a:	bf85                	j	1c000daa <__adddf3+0xb6>
1c000e3c:	02000713          	li	a4,32
1c000e40:	011ed833          	srl	a6,t4,a7
1c000e44:	4681                	li	a3,0
1c000e46:	00e88863          	beq	a7,a4,1c000e56 <__adddf3+0x162>
1c000e4a:	04000693          	li	a3,64
1c000e4e:	411688b3          	sub	a7,a3,a7
1c000e52:	011e96b3          	sll	a3,t4,a7
1c000e56:	8e55                	or	a2,a2,a3
1c000e58:	00c03633          	snez	a2,a2
1c000e5c:	00c86833          	or	a6,a6,a2
1c000e60:	4881                	li	a7,0
1c000e62:	b7e9                	j	1c000e2c <__adddf3+0x138>
1c000e64:	00cee833          	or	a6,t4,a2
1c000e68:	01003833          	snez	a6,a6
1c000e6c:	bfd5                	j	1c000e60 <__adddf3+0x16c>
1c000e6e:	0c080263          	beqz	a6,1c000f32 <__adddf3+0x23e>
1c000e72:	060e1f63          	bnez	t3,1c000ef0 <__adddf3+0x1fc>
1c000e76:	00a7e6b3          	or	a3,a5,a0
1c000e7a:	ee89                	bnez	a3,1c000e94 <__adddf3+0x1a0>
1c000e7c:	7ff00793          	li	a5,2047
1c000e80:	00f71763          	bne	a4,a5,1c000e8e <__adddf3+0x19a>
1c000e84:	00cee533          	or	a0,t4,a2
1c000e88:	4781                	li	a5,0
1c000e8a:	ea050fe3          	beqz	a0,1c000d48 <__adddf3+0x54>
1c000e8e:	87f6                	mv	a5,t4
1c000e90:	8532                	mv	a0,a2
1c000e92:	a0c5                	j	1c000f72 <__adddf3+0x27e>
1c000e94:	01f83a63          	p.bneimm	a6,-1,1c000ea8 <__adddf3+0x1b4>
1c000e98:	9532                	add	a0,a0,a2
1c000e9a:	01d78833          	add	a6,a5,t4
1c000e9e:	00c53633          	sltu	a2,a0,a2
1c000ea2:	00c807b3          	add	a5,a6,a2
1c000ea6:	b711                	j	1c000daa <__adddf3+0xb6>
1c000ea8:	7ff00693          	li	a3,2047
1c000eac:	fff84813          	not	a6,a6
1c000eb0:	fcd70ae3          	beq	a4,a3,1c000e84 <__adddf3+0x190>
1c000eb4:	03800693          	li	a3,56
1c000eb8:	0706c963          	blt	a3,a6,1c000f2a <__adddf3+0x236>
1c000ebc:	46fd                	li	a3,31
1c000ebe:	0506c263          	blt	a3,a6,1c000f02 <__adddf3+0x20e>
1c000ec2:	02000893          	li	a7,32
1c000ec6:	410888b3          	sub	a7,a7,a6
1c000eca:	01055333          	srl	t1,a0,a6
1c000ece:	011796b3          	sll	a3,a5,a7
1c000ed2:	01151533          	sll	a0,a0,a7
1c000ed6:	0066e6b3          	or	a3,a3,t1
1c000eda:	00a03533          	snez	a0,a0
1c000ede:	8d55                	or	a0,a0,a3
1c000ee0:	0107d833          	srl	a6,a5,a6
1c000ee4:	9532                	add	a0,a0,a2
1c000ee6:	9876                	add	a6,a6,t4
1c000ee8:	00c537b3          	sltu	a5,a0,a2
1c000eec:	97c2                	add	a5,a5,a6
1c000eee:	bd75                	j	1c000daa <__adddf3+0xb6>
1c000ef0:	7ff00693          	li	a3,2047
1c000ef4:	f8d708e3          	beq	a4,a3,1c000e84 <__adddf3+0x190>
1c000ef8:	41000833          	neg	a6,a6
1c000efc:	c177c7b3          	p.bset	a5,a5,0,23
1c000f00:	bf55                	j	1c000eb4 <__adddf3+0x1c0>
1c000f02:	02000313          	li	t1,32
1c000f06:	0107d6b3          	srl	a3,a5,a6
1c000f0a:	4881                	li	a7,0
1c000f0c:	00680863          	beq	a6,t1,1c000f1c <__adddf3+0x228>
1c000f10:	04000893          	li	a7,64
1c000f14:	41088833          	sub	a6,a7,a6
1c000f18:	010798b3          	sll	a7,a5,a6
1c000f1c:	00a8e533          	or	a0,a7,a0
1c000f20:	00a03533          	snez	a0,a0
1c000f24:	8d55                	or	a0,a0,a3
1c000f26:	4801                	li	a6,0
1c000f28:	bf75                	j	1c000ee4 <__adddf3+0x1f0>
1c000f2a:	8d5d                	or	a0,a0,a5
1c000f2c:	00a03533          	snez	a0,a0
1c000f30:	bfdd                	j	1c000f26 <__adddf3+0x232>
1c000f32:	001e0713          	addi	a4,t3,1
1c000f36:	e8b73833          	p.bclr	a6,a4,20,11
1c000f3a:	4685                	li	a3,1
1c000f3c:	0706c763          	blt	a3,a6,1c000faa <__adddf3+0x2b6>
1c000f40:	00a7e733          	or	a4,a5,a0
1c000f44:	040e1663          	bnez	t3,1c000f90 <__adddf3+0x29c>
1c000f48:	36070c63          	beqz	a4,1c0012c0 <__adddf3+0x5cc>
1c000f4c:	00cee6b3          	or	a3,t4,a2
1c000f50:	4701                	li	a4,0
1c000f52:	c285                	beqz	a3,1c000f72 <__adddf3+0x27e>
1c000f54:	962a                	add	a2,a2,a0
1c000f56:	00a63533          	sltu	a0,a2,a0
1c000f5a:	01d78833          	add	a6,a5,t4
1c000f5e:	00a807b3          	add	a5,a6,a0
1c000f62:	00879693          	slli	a3,a5,0x8
1c000f66:	8532                	mv	a0,a2
1c000f68:	0006d563          	bgez	a3,1c000f72 <__adddf3+0x27e>
1c000f6c:	c177b7b3          	p.bclr	a5,a5,0,23
1c000f70:	4705                	li	a4,1
1c000f72:	f83536b3          	p.bclr	a3,a0,28,3
1c000f76:	dc0689e3          	beqz	a3,1c000d48 <__adddf3+0x54>
1c000f7a:	f64536b3          	p.bclr	a3,a0,27,4
1c000f7e:	dc46a5e3          	p.beqimm	a3,4,1c000d48 <__adddf3+0x54>
1c000f82:	00450693          	addi	a3,a0,4
1c000f86:	00a6b533          	sltu	a0,a3,a0
1c000f8a:	97aa                	add	a5,a5,a0
1c000f8c:	8536                	mv	a0,a3
1c000f8e:	bb6d                	j	1c000d48 <__adddf3+0x54>
1c000f90:	32070b63          	beqz	a4,1c0012c6 <__adddf3+0x5d2>
1c000f94:	00cee833          	or	a6,t4,a2
1c000f98:	e40807e3          	beqz	a6,1c000de6 <__adddf3+0xf2>
1c000f9c:	004007b7          	lui	a5,0x400
1c000fa0:	4501                	li	a0,0
1c000fa2:	7ff00713          	li	a4,2047
1c000fa6:	4581                	li	a1,0
1c000fa8:	b345                	j	1c000d48 <__adddf3+0x54>
1c000faa:	7ff00693          	li	a3,2047
1c000fae:	d8d70be3          	beq	a4,a3,1c000d44 <__adddf3+0x50>
1c000fb2:	962a                	add	a2,a2,a0
1c000fb4:	01d78833          	add	a6,a5,t4
1c000fb8:	00a637b3          	sltu	a5,a2,a0
1c000fbc:	983e                	add	a6,a6,a5
1c000fbe:	01f81513          	slli	a0,a6,0x1f
1c000fc2:	8205                	srli	a2,a2,0x1
1c000fc4:	8d51                	or	a0,a0,a2
1c000fc6:	00185793          	srli	a5,a6,0x1
1c000fca:	b765                	j	1c000f72 <__adddf3+0x27e>
1c000fcc:	0d005563          	blez	a6,1c001096 <__adddf3+0x3a2>
1c000fd0:	e351                	bnez	a4,1c001054 <__adddf3+0x360>
1c000fd2:	00cee733          	or	a4,t4,a2
1c000fd6:	d4070ee3          	beqz	a4,1c000d32 <__adddf3+0x3e>
1c000fda:	fff80693          	addi	a3,a6,-1
1c000fde:	e685                	bnez	a3,1c001006 <__adddf3+0x312>
1c000fe0:	40c50633          	sub	a2,a0,a2
1c000fe4:	00c53533          	sltu	a0,a0,a2
1c000fe8:	41d78833          	sub	a6,a5,t4
1c000fec:	40a807b3          	sub	a5,a6,a0
1c000ff0:	4705                	li	a4,1
1c000ff2:	8532                	mv	a0,a2
1c000ff4:	00879893          	slli	a7,a5,0x8
1c000ff8:	f608dde3          	bgez	a7,1c000f72 <__adddf3+0x27e>
1c000ffc:	d177b333          	p.bclr	t1,a5,8,23
1c001000:	8f2a                	mv	t5,a0
1c001002:	8e3a                	mv	t3,a4
1c001004:	a411                	j	1c001208 <__adddf3+0x514>
1c001006:	7ff00713          	li	a4,2047
1c00100a:	dce80ae3          	beq	a6,a4,1c000dde <__adddf3+0xea>
1c00100e:	03800713          	li	a4,56
1c001012:	06d74d63          	blt	a4,a3,1c00108c <__adddf3+0x398>
1c001016:	477d                	li	a4,31
1c001018:	04d74663          	blt	a4,a3,1c001064 <__adddf3+0x370>
1c00101c:	02000713          	li	a4,32
1c001020:	8f15                	sub	a4,a4,a3
1c001022:	00d658b3          	srl	a7,a2,a3
1c001026:	00ee9833          	sll	a6,t4,a4
1c00102a:	00e61633          	sll	a2,a2,a4
1c00102e:	01186833          	or	a6,a6,a7
1c001032:	00c03633          	snez	a2,a2
1c001036:	00c86833          	or	a6,a6,a2
1c00103a:	00ded6b3          	srl	a3,t4,a3
1c00103e:	41050833          	sub	a6,a0,a6
1c001042:	40d786b3          	sub	a3,a5,a3
1c001046:	010537b3          	sltu	a5,a0,a6
1c00104a:	40f687b3          	sub	a5,a3,a5
1c00104e:	8542                	mv	a0,a6
1c001050:	8772                	mv	a4,t3
1c001052:	b74d                	j	1c000ff4 <__adddf3+0x300>
1c001054:	7ff00713          	li	a4,2047
1c001058:	d8ee03e3          	beq	t3,a4,1c000dde <__adddf3+0xea>
1c00105c:	c17eceb3          	p.bset	t4,t4,0,23
1c001060:	86c2                	mv	a3,a6
1c001062:	b775                	j	1c00100e <__adddf3+0x31a>
1c001064:	02000893          	li	a7,32
1c001068:	00ded833          	srl	a6,t4,a3
1c00106c:	4701                	li	a4,0
1c00106e:	01168863          	beq	a3,a7,1c00107e <__adddf3+0x38a>
1c001072:	04000713          	li	a4,64
1c001076:	40d706b3          	sub	a3,a4,a3
1c00107a:	00de9733          	sll	a4,t4,a3
1c00107e:	8e59                	or	a2,a2,a4
1c001080:	00c03633          	snez	a2,a2
1c001084:	00c86833          	or	a6,a6,a2
1c001088:	4681                	li	a3,0
1c00108a:	bf55                	j	1c00103e <__adddf3+0x34a>
1c00108c:	00cee833          	or	a6,t4,a2
1c001090:	01003833          	snez	a6,a6
1c001094:	bfd5                	j	1c001088 <__adddf3+0x394>
1c001096:	0c080663          	beqz	a6,1c001162 <__adddf3+0x46e>
1c00109a:	080e1363          	bnez	t3,1c001120 <__adddf3+0x42c>
1c00109e:	00a7e5b3          	or	a1,a5,a0
1c0010a2:	ed81                	bnez	a1,1c0010ba <__adddf3+0x3c6>
1c0010a4:	7ff00793          	li	a5,2047
1c0010a8:	00f71663          	bne	a4,a5,1c0010b4 <__adddf3+0x3c0>
1c0010ac:	00cee533          	or	a0,t4,a2
1c0010b0:	22050363          	beqz	a0,1c0012d6 <__adddf3+0x5e2>
1c0010b4:	87f6                	mv	a5,t4
1c0010b6:	8532                	mv	a0,a2
1c0010b8:	a8c9                	j	1c00118a <__adddf3+0x496>
1c0010ba:	01f83c63          	p.bneimm	a6,-1,1c0010d2 <__adddf3+0x3de>
1c0010be:	40a60533          	sub	a0,a2,a0
1c0010c2:	40fe8833          	sub	a6,t4,a5
1c0010c6:	00a63633          	sltu	a2,a2,a0
1c0010ca:	40c807b3          	sub	a5,a6,a2
1c0010ce:	85b6                	mv	a1,a3
1c0010d0:	b715                	j	1c000ff4 <__adddf3+0x300>
1c0010d2:	7ff00593          	li	a1,2047
1c0010d6:	fff84813          	not	a6,a6
1c0010da:	fcb709e3          	beq	a4,a1,1c0010ac <__adddf3+0x3b8>
1c0010de:	03800593          	li	a1,56
1c0010e2:	0705cc63          	blt	a1,a6,1c00115a <__adddf3+0x466>
1c0010e6:	45fd                	li	a1,31
1c0010e8:	0505c563          	blt	a1,a6,1c001132 <__adddf3+0x43e>
1c0010ec:	02000893          	li	a7,32
1c0010f0:	410888b3          	sub	a7,a7,a6
1c0010f4:	01055333          	srl	t1,a0,a6
1c0010f8:	011795b3          	sll	a1,a5,a7
1c0010fc:	01151533          	sll	a0,a0,a7
1c001100:	0065e5b3          	or	a1,a1,t1
1c001104:	00a03533          	snez	a0,a0
1c001108:	8d4d                	or	a0,a0,a1
1c00110a:	0107d833          	srl	a6,a5,a6
1c00110e:	40a60533          	sub	a0,a2,a0
1c001112:	410e8833          	sub	a6,t4,a6
1c001116:	00a637b3          	sltu	a5,a2,a0
1c00111a:	40f807b3          	sub	a5,a6,a5
1c00111e:	bf45                	j	1c0010ce <__adddf3+0x3da>
1c001120:	7ff00593          	li	a1,2047
1c001124:	f8b704e3          	beq	a4,a1,1c0010ac <__adddf3+0x3b8>
1c001128:	41000833          	neg	a6,a6
1c00112c:	c177c7b3          	p.bset	a5,a5,0,23
1c001130:	b77d                	j	1c0010de <__adddf3+0x3ea>
1c001132:	02000313          	li	t1,32
1c001136:	0107d5b3          	srl	a1,a5,a6
1c00113a:	4881                	li	a7,0
1c00113c:	00680863          	beq	a6,t1,1c00114c <__adddf3+0x458>
1c001140:	04000893          	li	a7,64
1c001144:	41088833          	sub	a6,a7,a6
1c001148:	010798b3          	sll	a7,a5,a6
1c00114c:	00a8e533          	or	a0,a7,a0
1c001150:	00a03533          	snez	a0,a0
1c001154:	8d4d                	or	a0,a0,a1
1c001156:	4801                	li	a6,0
1c001158:	bf5d                	j	1c00110e <__adddf3+0x41a>
1c00115a:	8d5d                	or	a0,a0,a5
1c00115c:	00a03533          	snez	a0,a0
1c001160:	bfdd                	j	1c001156 <__adddf3+0x462>
1c001162:	001e0713          	addi	a4,t3,1
1c001166:	e8b73733          	p.bclr	a4,a4,20,11
1c00116a:	4805                	li	a6,1
1c00116c:	06e84963          	blt	a6,a4,1c0011de <__adddf3+0x4ea>
1c001170:	00a7e833          	or	a6,a5,a0
1c001174:	00cee733          	or	a4,t4,a2
1c001178:	040e1863          	bnez	t3,1c0011c8 <__adddf3+0x4d4>
1c00117c:	00081963          	bnez	a6,1c00118e <__adddf3+0x49a>
1c001180:	14070e63          	beqz	a4,1c0012dc <__adddf3+0x5e8>
1c001184:	87f6                	mv	a5,t4
1c001186:	8532                	mv	a0,a2
1c001188:	4701                	li	a4,0
1c00118a:	85b6                	mv	a1,a3
1c00118c:	b3dd                	j	1c000f72 <__adddf3+0x27e>
1c00118e:	cb1d                	beqz	a4,1c0011c4 <__adddf3+0x4d0>
1c001190:	40c50833          	sub	a6,a0,a2
1c001194:	010538b3          	sltu	a7,a0,a6
1c001198:	41d78733          	sub	a4,a5,t4
1c00119c:	41170733          	sub	a4,a4,a7
1c0011a0:	00871893          	slli	a7,a4,0x8
1c0011a4:	0008db63          	bgez	a7,1c0011ba <__adddf3+0x4c6>
1c0011a8:	40a60533          	sub	a0,a2,a0
1c0011ac:	40fe8833          	sub	a6,t4,a5
1c0011b0:	00a63633          	sltu	a2,a2,a0
1c0011b4:	40c807b3          	sub	a5,a6,a2
1c0011b8:	bfc1                	j	1c001188 <__adddf3+0x494>
1c0011ba:	00e86533          	or	a0,a6,a4
1c0011be:	c94d                	beqz	a0,1c001270 <__adddf3+0x57c>
1c0011c0:	87ba                	mv	a5,a4
1c0011c2:	8542                	mv	a0,a6
1c0011c4:	4701                	li	a4,0
1c0011c6:	b375                	j	1c000f72 <__adddf3+0x27e>
1c0011c8:	00081863          	bnez	a6,1c0011d8 <__adddf3+0x4e4>
1c0011cc:	10070c63          	beqz	a4,1c0012e4 <__adddf3+0x5f0>
1c0011d0:	87f6                	mv	a5,t4
1c0011d2:	8532                	mv	a0,a2
1c0011d4:	85b6                	mv	a1,a3
1c0011d6:	b901                	j	1c000de6 <__adddf3+0xf2>
1c0011d8:	c00707e3          	beqz	a4,1c000de6 <__adddf3+0xf2>
1c0011dc:	b3c1                	j	1c000f9c <__adddf3+0x2a8>
1c0011de:	40c50f33          	sub	t5,a0,a2
1c0011e2:	41d78333          	sub	t1,a5,t4
1c0011e6:	01e53833          	sltu	a6,a0,t5
1c0011ea:	41030333          	sub	t1,t1,a6
1c0011ee:	00831713          	slli	a4,t1,0x8
1c0011f2:	06075c63          	bgez	a4,1c00126a <__adddf3+0x576>
1c0011f6:	40a60f33          	sub	t5,a2,a0
1c0011fa:	40fe8833          	sub	a6,t4,a5
1c0011fe:	01e637b3          	sltu	a5,a2,t5
1c001202:	40f80333          	sub	t1,a6,a5
1c001206:	85b6                	mv	a1,a3
1c001208:	06030663          	beqz	t1,1c001274 <__adddf3+0x580>
1c00120c:	100316b3          	p.fl1	a3,t1
1c001210:	47fd                	li	a5,31
1c001212:	40d786b3          	sub	a3,a5,a3
1c001216:	ff868713          	addi	a4,a3,-8
1c00121a:	47fd                	li	a5,31
1c00121c:	06e7c463          	blt	a5,a4,1c001284 <__adddf3+0x590>
1c001220:	02000793          	li	a5,32
1c001224:	8f99                	sub	a5,a5,a4
1c001226:	00e31333          	sll	t1,t1,a4
1c00122a:	00ff57b3          	srl	a5,t5,a5
1c00122e:	0067e7b3          	or	a5,a5,t1
1c001232:	00ef1533          	sll	a0,t5,a4
1c001236:	09c74063          	blt	a4,t3,1c0012b6 <__adddf3+0x5c2>
1c00123a:	41c70733          	sub	a4,a4,t3
1c00123e:	00170613          	addi	a2,a4,1 # 10001 <__L1Cl+0x1>
1c001242:	46fd                	li	a3,31
1c001244:	04c6c663          	blt	a3,a2,1c001290 <__adddf3+0x59c>
1c001248:	02000713          	li	a4,32
1c00124c:	8f11                	sub	a4,a4,a2
1c00124e:	00e796b3          	sll	a3,a5,a4
1c001252:	00c55833          	srl	a6,a0,a2
1c001256:	00e51533          	sll	a0,a0,a4
1c00125a:	0106e6b3          	or	a3,a3,a6
1c00125e:	00a03533          	snez	a0,a0
1c001262:	8d55                	or	a0,a0,a3
1c001264:	00c7d7b3          	srl	a5,a5,a2
1c001268:	bfb1                	j	1c0011c4 <__adddf3+0x4d0>
1c00126a:	006f6533          	or	a0,t5,t1
1c00126e:	fd49                	bnez	a0,1c001208 <__adddf3+0x514>
1c001270:	4781                	li	a5,0
1c001272:	a0bd                	j	1c0012e0 <__adddf3+0x5ec>
1c001274:	100f16b3          	p.fl1	a3,t5
1c001278:	47fd                	li	a5,31
1c00127a:	40d786b3          	sub	a3,a5,a3
1c00127e:	02068693          	addi	a3,a3,32
1c001282:	bf51                	j	1c001216 <__adddf3+0x522>
1c001284:	fd868793          	addi	a5,a3,-40
1c001288:	00ff17b3          	sll	a5,t5,a5
1c00128c:	4501                	li	a0,0
1c00128e:	b765                	j	1c001236 <__adddf3+0x542>
1c001290:	1705                	addi	a4,a4,-31
1c001292:	02000813          	li	a6,32
1c001296:	00e7d733          	srl	a4,a5,a4
1c00129a:	4681                	li	a3,0
1c00129c:	01060763          	beq	a2,a6,1c0012aa <__adddf3+0x5b6>
1c0012a0:	04000693          	li	a3,64
1c0012a4:	8e91                	sub	a3,a3,a2
1c0012a6:	00d796b3          	sll	a3,a5,a3
1c0012aa:	8d55                	or	a0,a0,a3
1c0012ac:	00a03533          	snez	a0,a0
1c0012b0:	8d59                	or	a0,a0,a4
1c0012b2:	4781                	li	a5,0
1c0012b4:	bf01                	j	1c0011c4 <__adddf3+0x4d0>
1c0012b6:	40ee0733          	sub	a4,t3,a4
1c0012ba:	c177b7b3          	p.bclr	a5,a5,0,23
1c0012be:	b955                	j	1c000f72 <__adddf3+0x27e>
1c0012c0:	87f6                	mv	a5,t4
1c0012c2:	8532                	mv	a0,a2
1c0012c4:	b701                	j	1c0011c4 <__adddf3+0x4d0>
1c0012c6:	87f6                	mv	a5,t4
1c0012c8:	8532                	mv	a0,a2
1c0012ca:	be31                	j	1c000de6 <__adddf3+0xf2>
1c0012cc:	4781                	li	a5,0
1c0012ce:	4501                	li	a0,0
1c0012d0:	7ff00713          	li	a4,2047
1c0012d4:	bc95                	j	1c000d48 <__adddf3+0x54>
1c0012d6:	4781                	li	a5,0
1c0012d8:	85b6                	mv	a1,a3
1c0012da:	b4bd                	j	1c000d48 <__adddf3+0x54>
1c0012dc:	4781                	li	a5,0
1c0012de:	4501                	li	a0,0
1c0012e0:	4701                	li	a4,0
1c0012e2:	b1d1                	j	1c000fa6 <__adddf3+0x2b2>
1c0012e4:	4501                	li	a0,0
1c0012e6:	004007b7          	lui	a5,0x400
1c0012ea:	b965                	j	1c000fa2 <__adddf3+0x2ae>
1c0012ec:	4781                	li	a5,0
1c0012ee:	4501                	li	a0,0
1c0012f0:	b4bd                	j	1c000d5e <__adddf3+0x6a>

1c0012f2 <__muldf3>:
1c0012f2:	1101                	addi	sp,sp,-32
1c0012f4:	d5459333          	p.extractu	t1,a1,10,20
1c0012f8:	ce22                	sw	s0,28(sp)
1c0012fa:	cc26                	sw	s1,24(sp)
1c0012fc:	ca4a                	sw	s2,20(sp)
1c0012fe:	c84e                	sw	s3,16(sp)
1c001300:	c652                	sw	s4,12(sp)
1c001302:	e60597b3          	p.extractu	a5,a1,19,0
1c001306:	81fd                	srli	a1,a1,0x1f
1c001308:	06030e63          	beqz	t1,1c001384 <__muldf3+0x92>
1c00130c:	7ff00713          	li	a4,2047
1c001310:	0ce30963          	beq	t1,a4,1c0013e2 <__muldf3+0xf0>
1c001314:	078e                	slli	a5,a5,0x3
1c001316:	c177c7b3          	p.bset	a5,a5,0,23
1c00131a:	01d55813          	srli	a6,a0,0x1d
1c00131e:	00f86833          	or	a6,a6,a5
1c001322:	00351e93          	slli	t4,a0,0x3
1c001326:	c0130313          	addi	t1,t1,-1023
1c00132a:	4f01                	li	t5,0
1c00132c:	d54698b3          	p.extractu	a7,a3,10,20
1c001330:	e6069533          	p.extractu	a0,a3,19,0
1c001334:	8732                	mv	a4,a2
1c001336:	82fd                	srli	a3,a3,0x1f
1c001338:	0c088863          	beqz	a7,1c001408 <__muldf3+0x116>
1c00133c:	7ff00793          	li	a5,2047
1c001340:	12f88163          	beq	a7,a5,1c001462 <__muldf3+0x170>
1c001344:	050e                	slli	a0,a0,0x3
1c001346:	01d65793          	srli	a5,a2,0x1d
1c00134a:	c1754533          	p.bset	a0,a0,0,23
1c00134e:	00361713          	slli	a4,a2,0x3
1c001352:	8fc9                	or	a5,a5,a0
1c001354:	c0188613          	addi	a2,a7,-1023
1c001358:	4e01                	li	t3,0
1c00135a:	9332                	add	t1,t1,a2
1c00135c:	002f1613          	slli	a2,t5,0x2
1c001360:	01c66633          	or	a2,a2,t3
1c001364:	167d                	addi	a2,a2,-1
1c001366:	4fb9                	li	t6,14
1c001368:	00d5c533          	xor	a0,a1,a3
1c00136c:	00130893          	addi	a7,t1,1
1c001370:	10cfea63          	bltu	t6,a2,1c001484 <__muldf3+0x192>
1c001374:	1c00e337          	lui	t1,0x1c00e
1c001378:	060a                	slli	a2,a2,0x2
1c00137a:	76830313          	addi	t1,t1,1896 # 1c00e768 <__DTOR_END__>
1c00137e:	20c37603          	p.lw	a2,a2(t1)
1c001382:	8602                	jr	a2
1c001384:	00a7e833          	or	a6,a5,a0
1c001388:	06080763          	beqz	a6,1c0013f6 <__muldf3+0x104>
1c00138c:	cf8d                	beqz	a5,1c0013c6 <__muldf3+0xd4>
1c00138e:	10079733          	p.fl1	a4,a5
1c001392:	487d                	li	a6,31
1c001394:	40e80733          	sub	a4,a6,a4
1c001398:	ff570893          	addi	a7,a4,-11
1c00139c:	4871                	li	a6,28
1c00139e:	03184c63          	blt	a6,a7,1c0013d6 <__muldf3+0xe4>
1c0013a2:	4875                	li	a6,29
1c0013a4:	ff870e93          	addi	t4,a4,-8
1c0013a8:	41180833          	sub	a6,a6,a7
1c0013ac:	01d797b3          	sll	a5,a5,t4
1c0013b0:	01055833          	srl	a6,a0,a6
1c0013b4:	00f86833          	or	a6,a6,a5
1c0013b8:	01d51eb3          	sll	t4,a0,t4
1c0013bc:	c0d00313          	li	t1,-1011
1c0013c0:	40e30333          	sub	t1,t1,a4
1c0013c4:	b79d                	j	1c00132a <__muldf3+0x38>
1c0013c6:	477d                	li	a4,31
1c0013c8:	10051333          	p.fl1	t1,a0
1c0013cc:	40670333          	sub	t1,a4,t1
1c0013d0:	02030713          	addi	a4,t1,32
1c0013d4:	b7d1                	j	1c001398 <__muldf3+0xa6>
1c0013d6:	fd870813          	addi	a6,a4,-40
1c0013da:	01051833          	sll	a6,a0,a6
1c0013de:	4e81                	li	t4,0
1c0013e0:	bff1                	j	1c0013bc <__muldf3+0xca>
1c0013e2:	00a7e833          	or	a6,a5,a0
1c0013e6:	00080c63          	beqz	a6,1c0013fe <__muldf3+0x10c>
1c0013ea:	8eaa                	mv	t4,a0
1c0013ec:	883e                	mv	a6,a5
1c0013ee:	7ff00313          	li	t1,2047
1c0013f2:	4f0d                	li	t5,3
1c0013f4:	bf25                	j	1c00132c <__muldf3+0x3a>
1c0013f6:	4e81                	li	t4,0
1c0013f8:	4301                	li	t1,0
1c0013fa:	4f05                	li	t5,1
1c0013fc:	bf05                	j	1c00132c <__muldf3+0x3a>
1c0013fe:	4e81                	li	t4,0
1c001400:	7ff00313          	li	t1,2047
1c001404:	4f09                	li	t5,2
1c001406:	b71d                	j	1c00132c <__muldf3+0x3a>
1c001408:	00c567b3          	or	a5,a0,a2
1c00140c:	c3bd                	beqz	a5,1c001472 <__muldf3+0x180>
1c00140e:	cd05                	beqz	a0,1c001446 <__muldf3+0x154>
1c001410:	100518b3          	p.fl1	a7,a0
1c001414:	47fd                	li	a5,31
1c001416:	411788b3          	sub	a7,a5,a7
1c00141a:	ff588e13          	addi	t3,a7,-11
1c00141e:	47f1                	li	a5,28
1c001420:	03c7cb63          	blt	a5,t3,1c001456 <__muldf3+0x164>
1c001424:	47f5                	li	a5,29
1c001426:	ff888713          	addi	a4,a7,-8
1c00142a:	41c787b3          	sub	a5,a5,t3
1c00142e:	00e51533          	sll	a0,a0,a4
1c001432:	00f657b3          	srl	a5,a2,a5
1c001436:	8fc9                	or	a5,a5,a0
1c001438:	00e61733          	sll	a4,a2,a4
1c00143c:	c0d00613          	li	a2,-1011
1c001440:	41160633          	sub	a2,a2,a7
1c001444:	bf11                	j	1c001358 <__muldf3+0x66>
1c001446:	100618b3          	p.fl1	a7,a2
1c00144a:	47fd                	li	a5,31
1c00144c:	411788b3          	sub	a7,a5,a7
1c001450:	02088893          	addi	a7,a7,32
1c001454:	b7d9                	j	1c00141a <__muldf3+0x128>
1c001456:	fd888793          	addi	a5,a7,-40
1c00145a:	00f617b3          	sll	a5,a2,a5
1c00145e:	4701                	li	a4,0
1c001460:	bff1                	j	1c00143c <__muldf3+0x14a>
1c001462:	00c567b3          	or	a5,a0,a2
1c001466:	cb91                	beqz	a5,1c00147a <__muldf3+0x188>
1c001468:	87aa                	mv	a5,a0
1c00146a:	7ff00613          	li	a2,2047
1c00146e:	4e0d                	li	t3,3
1c001470:	b5ed                	j	1c00135a <__muldf3+0x68>
1c001472:	4701                	li	a4,0
1c001474:	4601                	li	a2,0
1c001476:	4e05                	li	t3,1
1c001478:	b5cd                	j	1c00135a <__muldf3+0x68>
1c00147a:	4701                	li	a4,0
1c00147c:	7ff00613          	li	a2,2047
1c001480:	4e09                	li	t3,2
1c001482:	bde1                	j	1c00135a <__muldf3+0x68>
1c001484:	6e41                	lui	t3,0x10
1c001486:	fffe0293          	addi	t0,t3,-1 # ffff <__l1_heap_size+0x43>
1c00148a:	010ed693          	srli	a3,t4,0x10
1c00148e:	01075913          	srli	s2,a4,0x10
1c001492:	00577733          	and	a4,a4,t0
1c001496:	02e68fb3          	mul	t6,a3,a4
1c00149a:	005ef633          	and	a2,t4,t0
1c00149e:	02e60f33          	mul	t5,a2,a4
1c0014a2:	8efe                	mv	t4,t6
1c0014a4:	42c90eb3          	p.mac	t4,s2,a2
1c0014a8:	010f5593          	srli	a1,t5,0x10
1c0014ac:	95f6                	add	a1,a1,t4
1c0014ae:	032684b3          	mul	s1,a3,s2
1c0014b2:	01f5f363          	bleu	t6,a1,1c0014b8 <__muldf3+0x1c6>
1c0014b6:	94f2                	add	s1,s1,t3
1c0014b8:	0105de13          	srli	t3,a1,0x10
1c0014bc:	0055f5b3          	and	a1,a1,t0
1c0014c0:	005f7f33          	and	t5,t5,t0
1c0014c4:	05c2                	slli	a1,a1,0x10
1c0014c6:	0057f2b3          	and	t0,a5,t0
1c0014ca:	01e58eb3          	add	t4,a1,t5
1c0014ce:	0107d393          	srli	t2,a5,0x10
1c0014d2:	02568f33          	mul	t5,a3,t0
1c0014d6:	85fa                	mv	a1,t5
1c0014d8:	02c287b3          	mul	a5,t0,a2
1c0014dc:	42c385b3          	p.mac	a1,t2,a2
1c0014e0:	862e                	mv	a2,a1
1c0014e2:	0107d593          	srli	a1,a5,0x10
1c0014e6:	95b2                	add	a1,a1,a2
1c0014e8:	027686b3          	mul	a3,a3,t2
1c0014ec:	01e5f463          	bleu	t5,a1,1c0014f4 <__muldf3+0x202>
1c0014f0:	6641                	lui	a2,0x10
1c0014f2:	96b2                	add	a3,a3,a2
1c0014f4:	6441                	lui	s0,0x10
1c0014f6:	fff40f93          	addi	t6,s0,-1 # ffff <__l1_heap_size+0x43>
1c0014fa:	0105d613          	srli	a2,a1,0x10
1c0014fe:	01085f13          	srli	t5,a6,0x10
1c001502:	01f5f5b3          	and	a1,a1,t6
1c001506:	9636                	add	a2,a2,a3
1c001508:	01f7f6b3          	and	a3,a5,t6
1c00150c:	01f87fb3          	and	t6,a6,t6
1c001510:	02ef89b3          	mul	s3,t6,a4
1c001514:	05c2                	slli	a1,a1,0x10
1c001516:	96ae                	add	a3,a3,a1
1c001518:	00de0a33          	add	s4,t3,a3
1c00151c:	02ef0733          	mul	a4,t5,a4
1c001520:	0109de13          	srli	t3,s3,0x10
1c001524:	883a                	mv	a6,a4
1c001526:	43f90833          	p.mac	a6,s2,t6
1c00152a:	9e42                	add	t3,t3,a6
1c00152c:	03e907b3          	mul	a5,s2,t5
1c001530:	00ee7363          	bleu	a4,t3,1c001536 <__muldf3+0x244>
1c001534:	97a2                	add	a5,a5,s0
1c001536:	010e5413          	srli	s0,t3,0x10
1c00153a:	6741                	lui	a4,0x10
1c00153c:	943e                	add	s0,s0,a5
1c00153e:	fff70793          	addi	a5,a4,-1 # ffff <__l1_heap_size+0x43>
1c001542:	00fe7833          	and	a6,t3,a5
1c001546:	00f9f9b3          	and	s3,s3,a5
1c00154a:	0842                	slli	a6,a6,0x10
1c00154c:	025f8933          	mul	s2,t6,t0
1c001550:	984e                	add	a6,a6,s3
1c001552:	025f02b3          	mul	t0,t5,t0
1c001556:	8796                	mv	a5,t0
1c001558:	43f387b3          	p.mac	a5,t2,t6
1c00155c:	03e38f33          	mul	t5,t2,t5
1c001560:	01095393          	srli	t2,s2,0x10
1c001564:	93be                	add	t2,t2,a5
1c001566:	0053f363          	bleu	t0,t2,1c00156c <__muldf3+0x27a>
1c00156a:	9f3a                	add	t5,t5,a4
1c00156c:	01448e33          	add	t3,s1,s4
1c001570:	00de3733          	sltu	a4,t3,a3
1c001574:	66c1                	lui	a3,0x10
1c001576:	16fd                	addi	a3,a3,-1
1c001578:	00d3f5b3          	and	a1,t2,a3
1c00157c:	05c2                	slli	a1,a1,0x10
1c00157e:	00d976b3          	and	a3,s2,a3
1c001582:	95b6                	add	a1,a1,a3
1c001584:	00c586b3          	add	a3,a1,a2
1c001588:	00e687b3          	add	a5,a3,a4
1c00158c:	00c6b6b3          	sltu	a3,a3,a2
1c001590:	8636                	mv	a2,a3
1c001592:	00e7b6b3          	sltu	a3,a5,a4
1c001596:	9e42                	add	t3,t3,a6
1c001598:	8ed1                	or	a3,a3,a2
1c00159a:	008785b3          	add	a1,a5,s0
1c00159e:	010e3833          	sltu	a6,t3,a6
1c0015a2:	0103d793          	srli	a5,t2,0x10
1c0015a6:	0ff6f693          	andi	a3,a3,255
1c0015aa:	01058fb3          	add	t6,a1,a6
1c0015ae:	96be                	add	a3,a3,a5
1c0015b0:	0085b7b3          	sltu	a5,a1,s0
1c0015b4:	85be                	mv	a1,a5
1c0015b6:	010fb7b3          	sltu	a5,t6,a6
1c0015ba:	8fcd                	or	a5,a5,a1
1c0015bc:	0ff7f793          	andi	a5,a5,255
1c0015c0:	97b6                	add	a5,a5,a3
1c0015c2:	97fa                	add	a5,a5,t5
1c0015c4:	017fd713          	srli	a4,t6,0x17
1c0015c8:	07a6                	slli	a5,a5,0x9
1c0015ca:	8fd9                	or	a5,a5,a4
1c0015cc:	009e1713          	slli	a4,t3,0x9
1c0015d0:	01d76733          	or	a4,a4,t4
1c0015d4:	00e03733          	snez	a4,a4
1c0015d8:	017e5e13          	srli	t3,t3,0x17
1c0015dc:	01c76733          	or	a4,a4,t3
1c0015e0:	0fa6                	slli	t6,t6,0x9
1c0015e2:	00779693          	slli	a3,a5,0x7
1c0015e6:	01f76733          	or	a4,a4,t6
1c0015ea:	0806dd63          	bgez	a3,1c001684 <__muldf3+0x392>
1c0015ee:	00175693          	srli	a3,a4,0x1
1c0015f2:	fc173733          	p.bclr	a4,a4,30,1
1c0015f6:	8f55                	or	a4,a4,a3
1c0015f8:	01f79693          	slli	a3,a5,0x1f
1c0015fc:	8f55                	or	a4,a4,a3
1c0015fe:	8385                	srli	a5,a5,0x1
1c001600:	3ff88613          	addi	a2,a7,1023
1c001604:	08c05263          	blez	a2,1c001688 <__muldf3+0x396>
1c001608:	f83736b3          	p.bclr	a3,a4,28,3
1c00160c:	ca99                	beqz	a3,1c001622 <__muldf3+0x330>
1c00160e:	f64736b3          	p.bclr	a3,a4,27,4
1c001612:	0046a863          	p.beqimm	a3,4,1c001622 <__muldf3+0x330>
1c001616:	00470693          	addi	a3,a4,4
1c00161a:	00e6b733          	sltu	a4,a3,a4
1c00161e:	97ba                	add	a5,a5,a4
1c001620:	8736                	mv	a4,a3
1c001622:	00779593          	slli	a1,a5,0x7
1c001626:	0005d663          	bgez	a1,1c001632 <__muldf3+0x340>
1c00162a:	c187b7b3          	p.bclr	a5,a5,0,24
1c00162e:	40088613          	addi	a2,a7,1024
1c001632:	7fe00693          	li	a3,2046
1c001636:	0ec6c263          	blt	a3,a2,1c00171a <__muldf3+0x428>
1c00163a:	00375693          	srli	a3,a4,0x3
1c00163e:	01d79713          	slli	a4,a5,0x1d
1c001642:	8f55                	or	a4,a4,a3
1c001644:	838d                	srli	a5,a5,0x3
1c001646:	4681                	li	a3,0
1c001648:	4472                	lw	s0,28(sp)
1c00164a:	e607a6b3          	p.insert	a3,a5,19,0
1c00164e:	d54626b3          	p.insert	a3,a2,10,20
1c001652:	c1f526b3          	p.insert	a3,a0,0,31
1c001656:	44e2                	lw	s1,24(sp)
1c001658:	4952                	lw	s2,20(sp)
1c00165a:	49c2                	lw	s3,16(sp)
1c00165c:	4a32                	lw	s4,12(sp)
1c00165e:	853a                	mv	a0,a4
1c001660:	85b6                	mv	a1,a3
1c001662:	6105                	addi	sp,sp,32
1c001664:	8082                	ret
1c001666:	852e                	mv	a0,a1
1c001668:	87c2                	mv	a5,a6
1c00166a:	8776                	mv	a4,t4
1c00166c:	8e7a                	mv	t3,t5
1c00166e:	0a2e2663          	p.beqimm	t3,2,1c00171a <__muldf3+0x428>
1c001672:	083e2d63          	p.beqimm	t3,3,1c00170c <__muldf3+0x41a>
1c001676:	f81e35e3          	p.bneimm	t3,1,1c001600 <__muldf3+0x30e>
1c00167a:	4781                	li	a5,0
1c00167c:	4701                	li	a4,0
1c00167e:	a095                	j	1c0016e2 <__muldf3+0x3f0>
1c001680:	8536                	mv	a0,a3
1c001682:	b7f5                	j	1c00166e <__muldf3+0x37c>
1c001684:	889a                	mv	a7,t1
1c001686:	bfad                	j	1c001600 <__muldf3+0x30e>
1c001688:	4585                	li	a1,1
1c00168a:	8d91                	sub	a1,a1,a2
1c00168c:	03800693          	li	a3,56
1c001690:	feb6c5e3          	blt	a3,a1,1c00167a <__muldf3+0x388>
1c001694:	46fd                	li	a3,31
1c001696:	04b6c863          	blt	a3,a1,1c0016e6 <__muldf3+0x3f4>
1c00169a:	41e88893          	addi	a7,a7,1054
1c00169e:	011796b3          	sll	a3,a5,a7
1c0016a2:	00b75633          	srl	a2,a4,a1
1c0016a6:	01171733          	sll	a4,a4,a7
1c0016aa:	8ed1                	or	a3,a3,a2
1c0016ac:	00e03733          	snez	a4,a4
1c0016b0:	8f55                	or	a4,a4,a3
1c0016b2:	00b7d7b3          	srl	a5,a5,a1
1c0016b6:	f83736b3          	p.bclr	a3,a4,28,3
1c0016ba:	ca99                	beqz	a3,1c0016d0 <__muldf3+0x3de>
1c0016bc:	f64736b3          	p.bclr	a3,a4,27,4
1c0016c0:	0046a863          	p.beqimm	a3,4,1c0016d0 <__muldf3+0x3de>
1c0016c4:	00470693          	addi	a3,a4,4
1c0016c8:	00e6b733          	sltu	a4,a3,a4
1c0016cc:	97ba                	add	a5,a5,a4
1c0016ce:	8736                	mv	a4,a3
1c0016d0:	00879693          	slli	a3,a5,0x8
1c0016d4:	0406c863          	bltz	a3,1c001724 <__muldf3+0x432>
1c0016d8:	01d79693          	slli	a3,a5,0x1d
1c0016dc:	830d                	srli	a4,a4,0x3
1c0016de:	8f55                	or	a4,a4,a3
1c0016e0:	838d                	srli	a5,a5,0x3
1c0016e2:	4601                	li	a2,0
1c0016e4:	b78d                	j	1c001646 <__muldf3+0x354>
1c0016e6:	5685                	li	a3,-31
1c0016e8:	8e91                	sub	a3,a3,a2
1c0016ea:	02000813          	li	a6,32
1c0016ee:	00d7d6b3          	srl	a3,a5,a3
1c0016f2:	4601                	li	a2,0
1c0016f4:	01058663          	beq	a1,a6,1c001700 <__muldf3+0x40e>
1c0016f8:	43e88893          	addi	a7,a7,1086
1c0016fc:	01179633          	sll	a2,a5,a7
1c001700:	8f51                	or	a4,a4,a2
1c001702:	00e03733          	snez	a4,a4
1c001706:	8f55                	or	a4,a4,a3
1c001708:	4781                	li	a5,0
1c00170a:	b775                	j	1c0016b6 <__muldf3+0x3c4>
1c00170c:	000807b7          	lui	a5,0x80
1c001710:	4701                	li	a4,0
1c001712:	7ff00613          	li	a2,2047
1c001716:	4501                	li	a0,0
1c001718:	b73d                	j	1c001646 <__muldf3+0x354>
1c00171a:	4781                	li	a5,0
1c00171c:	4701                	li	a4,0
1c00171e:	7ff00613          	li	a2,2047
1c001722:	b715                	j	1c001646 <__muldf3+0x354>
1c001724:	4781                	li	a5,0
1c001726:	4701                	li	a4,0
1c001728:	4605                	li	a2,1
1c00172a:	bf31                	j	1c001646 <__muldf3+0x354>

1c00172c <__fixunsdfsi>:
1c00172c:	d5459733          	p.extractu	a4,a1,10,20
1c001730:	3fe00693          	li	a3,1022
1c001734:	862a                	mv	a2,a0
1c001736:	e60597b3          	p.extractu	a5,a1,19,0
1c00173a:	4501                	li	a0,0
1c00173c:	81fd                	srli	a1,a1,0x1f
1c00173e:	02e6df63          	ble	a4,a3,1c00177c <__fixunsdfsi+0x50>
1c001742:	e591                	bnez	a1,1c00174e <__fixunsdfsi+0x22>
1c001744:	41e00693          	li	a3,1054
1c001748:	557d                	li	a0,-1
1c00174a:	00e6d363          	ble	a4,a3,1c001750 <__fixunsdfsi+0x24>
1c00174e:	8082                	ret
1c001750:	43300693          	li	a3,1075
1c001754:	8e99                	sub	a3,a3,a4
1c001756:	45fd                	li	a1,31
1c001758:	c147c7b3          	p.bset	a5,a5,0,20
1c00175c:	00d5ca63          	blt	a1,a3,1c001770 <__fixunsdfsi+0x44>
1c001760:	bed70713          	addi	a4,a4,-1043
1c001764:	00e797b3          	sll	a5,a5,a4
1c001768:	00d65533          	srl	a0,a2,a3
1c00176c:	8d5d                	or	a0,a0,a5
1c00176e:	8082                	ret
1c001770:	41300513          	li	a0,1043
1c001774:	8d19                	sub	a0,a0,a4
1c001776:	00a7d533          	srl	a0,a5,a0
1c00177a:	8082                	ret
1c00177c:	8082                	ret

1c00177e <__floatsidf>:
1c00177e:	c539                	beqz	a0,1c0017cc <__floatsidf+0x4e>
1c001780:	01f55613          	srli	a2,a0,0x1f
1c001784:	00055463          	bgez	a0,1c00178c <__floatsidf+0xe>
1c001788:	40a00533          	neg	a0,a0
1c00178c:	477d                	li	a4,31
1c00178e:	100517b3          	p.fl1	a5,a0
1c001792:	40f707b3          	sub	a5,a4,a5
1c001796:	41e00693          	li	a3,1054
1c00179a:	4729                	li	a4,10
1c00179c:	8e9d                	sub	a3,a3,a5
1c00179e:	02f74263          	blt	a4,a5,1c0017c2 <__floatsidf+0x44>
1c0017a2:	472d                	li	a4,11
1c0017a4:	8f1d                	sub	a4,a4,a5
1c0017a6:	07d5                	addi	a5,a5,21
1c0017a8:	00e55733          	srl	a4,a0,a4
1c0017ac:	00f51533          	sll	a0,a0,a5
1c0017b0:	4781                	li	a5,0
1c0017b2:	e60727b3          	p.insert	a5,a4,19,0
1c0017b6:	d546a7b3          	p.insert	a5,a3,10,20
1c0017ba:	c1f627b3          	p.insert	a5,a2,0,31
1c0017be:	85be                	mv	a1,a5
1c0017c0:	8082                	ret
1c0017c2:	17d5                	addi	a5,a5,-11
1c0017c4:	00f51733          	sll	a4,a0,a5
1c0017c8:	4501                	li	a0,0
1c0017ca:	b7dd                	j	1c0017b0 <__floatsidf+0x32>
1c0017cc:	4701                	li	a4,0
1c0017ce:	4501                	li	a0,0
1c0017d0:	4681                	li	a3,0
1c0017d2:	4601                	li	a2,0
1c0017d4:	bff1                	j	1c0017b0 <__floatsidf+0x32>

1c0017d6 <cluster>:
                

            }
        }
    }
}
1c0017d6:	1141                	addi	sp,sp,-16
1c0017d8:	c606                	sw	ra,12(sp)
1c0017da:	c422                	sw	s0,8(sp)
1c0017dc:	c226                	sw	s1,4(sp)
1c0017de:	1c00f437          	lui	s0,0x1c00f
1c0017e2:	12440413          	addi	s0,s0,292 # 1c00f124 <ResOut>
1c0017e6:	400c                	lw	a1,0(s0)
1c0017e8:	4048                	lw	a0,4(s0)
1c0017ea:	1bb030ef          	jal	ra,1c0051a4 <modelCNN>
1c0017ee:	1c00f7b7          	lui	a5,0x1c00f
1c0017f2:	10079823          	sh	zero,272(a5) # 1c00f110 <rec_digit>
1c0017f6:	401c                	lw	a5,0(s0)
1c0017f8:	00079483          	lh	s1,0(a5)
1c0017fc:	8626                	mv	a2,s1
1c0017fe:	4581                	li	a1,0
1c001800:	1c00f537          	lui	a0,0x1c00f
1c001804:	8a450513          	addi	a0,a0,-1884 # 1c00e8a4 <__clz_tab+0x100>
1c001808:	62f0b0ef          	jal	ra,1c00d636 <printf>
1c00180c:	401c                	lw	a5,0(s0)
1c00180e:	00079703          	lh	a4,0(a5)
1c001812:	00e4d763          	ble	a4,s1,1c001820 <cluster+0x4a>
1c001816:	1c00f6b7          	lui	a3,0x1c00f
1c00181a:	10069823          	sh	zero,272(a3) # 1c00f110 <rec_digit>
1c00181e:	84ba                	mv	s1,a4
1c001820:	00279603          	lh	a2,2(a5)
1c001824:	4585                	li	a1,1
1c001826:	1c00f537          	lui	a0,0x1c00f
1c00182a:	8a450513          	addi	a0,a0,-1884 # 1c00e8a4 <__clz_tab+0x100>
1c00182e:	6090b0ef          	jal	ra,1c00d636 <printf>
1c001832:	1c00f7b7          	lui	a5,0x1c00f
1c001836:	1247a783          	lw	a5,292(a5) # 1c00f124 <ResOut>
1c00183a:	00279783          	lh	a5,2(a5)
1c00183e:	00f4d763          	ble	a5,s1,1c00184c <cluster+0x76>
1c001842:	1c00f7b7          	lui	a5,0x1c00f
1c001846:	4705                	li	a4,1
1c001848:	10e79823          	sh	a4,272(a5) # 1c00f110 <rec_digit>
1c00184c:	4529                	li	a0,10
1c00184e:	4c90b0ef          	jal	ra,1c00d516 <putchar>
1c001852:	1c00f7b7          	lui	a5,0x1c00f
1c001856:	11079783          	lh	a5,272(a5) # 1c00f110 <rec_digit>
1c00185a:	cf85                	beqz	a5,1c001892 <cluster+0xbc>
1c00185c:	1c00f7b7          	lui	a5,0x1c00f
1c001860:	11079783          	lh	a5,272(a5) # 1c00f110 <rec_digit>
1c001864:	0217ae63          	p.beqimm	a5,1,1c0018a0 <cluster+0xca>
1c001868:	1c00f7b7          	lui	a5,0x1c00f
1c00186c:	11079583          	lh	a1,272(a5) # 1c00f110 <rec_digit>
1c001870:	00158713          	addi	a4,a1,1
1c001874:	1c00f7b7          	lui	a5,0x1c00f
1c001878:	12e78823          	sb	a4,304(a5) # 1c00f130 <value>
1c00187c:	1c00f537          	lui	a0,0x1c00f
1c001880:	8dc50513          	addi	a0,a0,-1828 # 1c00e8dc <__clz_tab+0x138>
1c001884:	5b30b0ef          	jal	ra,1c00d636 <printf>
1c001888:	40b2                	lw	ra,12(sp)
1c00188a:	4422                	lw	s0,8(sp)
1c00188c:	4492                	lw	s1,4(sp)
1c00188e:	0141                	addi	sp,sp,16
1c001890:	8082                	ret
1c001892:	1c00f537          	lui	a0,0x1c00f
1c001896:	8b450513          	addi	a0,a0,-1868 # 1c00e8b4 <__clz_tab+0x110>
1c00189a:	4070b0ef          	jal	ra,1c00d4a0 <puts>
1c00189e:	bf7d                	j	1c00185c <cluster+0x86>
1c0018a0:	1c00f537          	lui	a0,0x1c00f
1c0018a4:	8c850513          	addi	a0,a0,-1848 # 1c00e8c8 <__clz_tab+0x124>
1c0018a8:	3f90b0ef          	jal	ra,1c00d4a0 <puts>
1c0018ac:	bf75                	j	1c001868 <cluster+0x92>

1c0018ae <test_model>:
    return 0;
}


int test_model(void)
{
1c0018ae:	716d                	addi	sp,sp,-272
1c0018b0:	10112623          	sw	ra,268(sp)
1c0018b4:	10812423          	sw	s0,264(sp)
1c0018b8:	10912223          	sw	s1,260(sp)
1c0018bc:	11212023          	sw	s2,256(sp)
1c0018c0:	dfce                	sw	s3,252(sp)
1c0018c2:	ddd2                	sw	s4,248(sp)
1c0018c4:	dbd6                	sw	s5,244(sp)
1c0018c6:	d9da                	sw	s6,240(sp)
1c0018c8:	d7de                	sw	s7,236(sp)
1c0018ca:	d5e2                	sw	s8,232(sp)
1c0018cc:	d3e6                	sw	s9,228(sp)
1c0018ce:	d1ea                	sw	s10,224(sp)
1c0018d0:	cfee                	sw	s11,220(sp)
    printf("Entering main controller\n");
1c0018d2:	1c00f537          	lui	a0,0x1c00f
1c0018d6:	91c50513          	addi	a0,a0,-1764 # 1c00e91c <__clz_tab+0x178>
1c0018da:	3c70b0ef          	jal	ra,1c00d4a0 <puts>
    printf("Reading image\n");
1c0018de:	1c00f537          	lui	a0,0x1c00f
1c0018e2:	93850513          	addi	a0,a0,-1736 # 1c00e938 <__clz_tab+0x194>
1c0018e6:	3bb0b0ef          	jal	ra,1c00d4a0 <puts>
    //Reading Image from Bridge
    /*------------------- Allocate Image Buffer ------------------------*/
    printf("Going to alloc the image buffer!\n");
1c0018ea:	1c00f537          	lui	a0,0x1c00f
1c0018ee:	94850513          	addi	a0,a0,-1720 # 1c00e948 <__clz_tab+0x1a4>
1c0018f2:	3af0b0ef          	jal	ra,1c00d4a0 <puts>
    // Img_In 保存图像数据，为其分配图片字节数的资源
    Img_In = (unsigned char *) AT_L2_ALLOC(0, AT_INPUT_SIZE_BYTES);
1c0018f6:	64cd                	lui	s1,0x13
1c0018f8:	4d048513          	addi	a0,s1,1232 # 134d0 <__L1Cl+0x34d0>
1c0018fc:	7d5080ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c001900:	1c00f437          	lui	s0,0x1c00f
1c001904:	12440413          	addi	s0,s0,292 # 1c00f124 <ResOut>
1c001908:	c048                	sw	a0,4(s0)
    printf("%d\n",AT_INPUT_SIZE_BYTES);
1c00190a:	4d048593          	addi	a1,s1,1232
1c00190e:	1c00f537          	lui	a0,0x1c00f
1c001912:	8e850513          	addi	a0,a0,-1816 # 1c00e8e8 <__clz_tab+0x144>
1c001916:	5210b0ef          	jal	ra,1c00d636 <printf>
    //class_num (short int *) AT_L2_ALLOC(0,sizeof(short int));
    if(Img_In==NULL) {
1c00191a:	405c                	lw	a5,4(s0)
1c00191c:	eb91                	bnez	a5,1c001930 <test_model+0x82>
      printf("Image buffer alloc Error!\n");
1c00191e:	1c00f537          	lui	a0,0x1c00f
1c001922:	96c50513          	addi	a0,a0,-1684 # 1c00e96c <__clz_tab+0x1c8>
1c001926:	37b0b0ef          	jal	ra,1c00d4a0 <puts>
      pmsis_exit(-1);
1c00192a:	557d                	li	a0,-1
1c00192c:	4190b0ef          	jal	ra,1c00d544 <exit>
    printf("Opening Himax camera\n");
1c001930:	1c00f537          	lui	a0,0x1c00f
1c001934:	98850513          	addi	a0,a0,-1656 # 1c00e988 <__clz_tab+0x1e4>
1c001938:	3690b0ef          	jal	ra,1c00d4a0 <puts>
    pi_himax_conf_init(&cam_conf);
1c00193c:	0088                	addi	a0,sp,64
1c00193e:	08f060ef          	jal	ra,1c0081cc <pi_himax_conf_init>
    cam_conf.format = PI_CAMERA_QVGA;
1c001942:	4785                	li	a5,1
1c001944:	cabe                	sw	a5,84(sp)
    pi_open_from_conf(device, &cam_conf);
1c001946:	1c00f437          	lui	s0,0x1c00f
1c00194a:	008c                	addi	a1,sp,64
1c00194c:	2d040513          	addi	a0,s0,720 # 1c00f2d0 <_edata>
1c001950:	660080ef          	jal	ra,1c009fb0 <pi_open_from_conf>
    if (pi_camera_open(device))
1c001954:	2d040513          	addi	a0,s0,720
1c001958:	39c060ef          	jal	ra,1c007cf4 <pi_camera_open>
1c00195c:	e12d                	bnez	a0,1c0019be <test_model+0x110>
};

static inline int32_t pi_camera_control(struct pi_device *device, pi_camera_cmd_e cmd, void *arg)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  return api->control(device, cmd, arg);
1c00195e:	2d040493          	addi	s1,s0,720
1c001962:	409c                	lw	a5,0(s1)
1c001964:	479c                	lw	a5,8(a5)
1c001966:	4601                	li	a2,0
1c001968:	4589                	li	a1,2
1c00196a:	2d040513          	addi	a0,s0,720
1c00196e:	9782                	jalr	a5
    uint8_t set_value = 3;
1c001970:	478d                	li	a5,3
1c001972:	02f10f23          	sb	a5,62(sp)
}

static inline int32_t pi_camera_reg_set(struct pi_device *device, uint32_t addr, uint8_t *value)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  return api->reg_set(device, addr, value);
1c001976:	409c                	lw	a5,0(s1)
1c001978:	4bdc                	lw	a5,20(a5)
1c00197a:	03e10613          	addi	a2,sp,62
1c00197e:	10100593          	li	a1,257
1c001982:	2d040513          	addi	a0,s0,720
1c001986:	9782                	jalr	a5
    pi_time_wait_us(1000000);
1c001988:	000f4537          	lui	a0,0xf4
1c00198c:	24050513          	addi	a0,a0,576 # f4240 <__L2+0x74240>
1c001990:	02c090ef          	jal	ra,1c00a9bc <pi_time_wait_us>
}

static inline int32_t pi_camera_reg_get(struct pi_device *device, uint32_t addr, uint8_t *value)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  return api->reg_get(device, addr, value);
1c001994:	409c                	lw	a5,0(s1)
1c001996:	4b9c                	lw	a5,16(a5)
1c001998:	03f10613          	addi	a2,sp,63
1c00199c:	10100593          	li	a1,257
1c0019a0:	2d040513          	addi	a0,s0,720
1c0019a4:	9782                	jalr	a5
    if (set_value!=reg_value)
1c0019a6:	03e14703          	lbu	a4,62(sp)
1c0019aa:	03f14783          	lbu	a5,63(sp)
1c0019ae:	02f70163          	beq	a4,a5,1c0019d0 <test_model+0x122>
        printf("Failed to rotate camera image\n");
1c0019b2:	1c00f537          	lui	a0,0x1c00f
1c0019b6:	9a050513          	addi	a0,a0,-1632 # 1c00e9a0 <__clz_tab+0x1fc>
1c0019ba:	2e70b0ef          	jal	ra,1c00d4a0 <puts>
    } 
    // 打开摄像头
    if (open_camera(&camera))
    {
        printf("Failed to open camera\n");
1c0019be:	1c00f537          	lui	a0,0x1c00f
1c0019c2:	ab050513          	addi	a0,a0,-1360 # 1c00eab0 <__clz_tab+0x30c>
1c0019c6:	2db0b0ef          	jal	ra,1c00d4a0 <puts>
        pmsis_exit(-1);
1c0019ca:	557d                	li	a0,-1
1c0019cc:	3790b0ef          	jal	ra,1c00d544 <exit>
  return api->control(device, cmd, arg);
1c0019d0:	1c00f437          	lui	s0,0x1c00f
1c0019d4:	2d040493          	addi	s1,s0,720 # 1c00f2d0 <_edata>
1c0019d8:	409c                	lw	a5,0(s1)
1c0019da:	479c                	lw	a5,8(a5)
1c0019dc:	4601                	li	a2,0
1c0019de:	458d                	li	a1,3
1c0019e0:	2d040513          	addi	a0,s0,720
1c0019e4:	9782                	jalr	a5
1c0019e6:	409c                	lw	a5,0(s1)
1c0019e8:	479c                	lw	a5,8(a5)
1c0019ea:	4601                	li	a2,0
1c0019ec:	459d                	li	a1,7
1c0019ee:	2d040513          	addi	a0,s0,720
1c0019f2:	9782                	jalr	a5
    }
    
    // 调试QVGA模式
    uint8_t set_value = 0;
    uint8_t reg_value = 0;
1c0019f4:	0c010723          	sb	zero,206(sp)

    #ifdef QVGA_MODE
    set_value=1;
1c0019f8:	4785                	li	a5,1
1c0019fa:	0cf107a3          	sb	a5,207(sp)
  return api->reg_set(device, addr, value);
1c0019fe:	409c                	lw	a5,0(s1)
1c001a00:	4bdc                	lw	a5,20(a5)
1c001a02:	0cf10613          	addi	a2,sp,207
1c001a06:	690d                	lui	s2,0x3
1c001a08:	01090593          	addi	a1,s2,16 # 3010 <__rt_stack_size+0x2810>
1c001a0c:	2d040513          	addi	a0,s0,720
1c001a10:	9782                	jalr	a5
  return api->reg_get(device, addr, value);
1c001a12:	409c                	lw	a5,0(s1)
1c001a14:	4b9c                	lw	a5,16(a5)
1c001a16:	0ce10613          	addi	a2,sp,206
1c001a1a:	01090593          	addi	a1,s2,16
1c001a1e:	2d040513          	addi	a0,s0,720
1c001a22:	9782                	jalr	a5
    pi_camera_reg_set(&camera, QVGA_WIN_EN, &set_value);
    pi_camera_reg_get(&camera, QVGA_WIN_EN, &reg_value);
    printf("qvga window enabled %d\n",reg_value);
1c001a24:	0ce14583          	lbu	a1,206(sp)
1c001a28:	1c00f537          	lui	a0,0x1c00f
1c001a2c:	9c050513          	addi	a0,a0,-1600 # 1c00e9c0 <__clz_tab+0x21c>
1c001a30:	4070b0ef          	jal	ra,1c00d636 <printf>
    #endif
    
    // 测试同步拍摄
    set_value=0;                                                                                                                                          
1c001a34:	0c0107a3          	sb	zero,207(sp)
  return api->reg_set(device, addr, value);
1c001a38:	409c                	lw	a5,0(s1)
1c001a3a:	4bdc                	lw	a5,20(a5)
1c001a3c:	0cf10613          	addi	a2,sp,207
1c001a40:	6905                	lui	s2,0x1
1c001a42:	01290593          	addi	a1,s2,18 # 1012 <__rt_stack_size+0x812>
1c001a46:	2d040513          	addi	a0,s0,720
1c001a4a:	9782                	jalr	a5
  return api->reg_get(device, addr, value);
1c001a4c:	409c                	lw	a5,0(s1)
1c001a4e:	4b9c                	lw	a5,16(a5)
1c001a50:	0ce10613          	addi	a2,sp,206
1c001a54:	01290593          	addi	a1,s2,18
1c001a58:	2d040513          	addi	a0,s0,720
1c001a5c:	9782                	jalr	a5
    pi_camera_reg_set(&camera, VSYNC_HSYNC_PIXEL_SHIFT_EN, &set_value);
    pi_camera_reg_get(&camera, VSYNC_HSYNC_PIXEL_SHIFT_EN, &reg_value);
    printf("vsync hsync pixel shift enabled %d\n",reg_value);
1c001a5e:	0ce14583          	lbu	a1,206(sp)
1c001a62:	1c00f537          	lui	a0,0x1c00f
1c001a66:	9d850513          	addi	a0,a0,-1576 # 1c00e9d8 <__clz_tab+0x234>
1c001a6a:	3cd0b0ef          	jal	ra,1c00d636 <printf>
    
    // 分配拍摄缓存
    buff = (unsigned char *) AT_L2_ALLOC(0, BUFF_SIZE);
1c001a6e:	654d                	lui	a0,0x13
1c001a70:	4d050513          	addi	a0,a0,1232 # 134d0 <__L1Cl+0x34d0>
1c001a74:	65d080ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c001a78:	1c00f7b7          	lui	a5,0x1c00f
1c001a7c:	12a7aa23          	sw	a0,308(a5) # 1c00f134 <buff>
    if (buff == NULL){ return -1;}
1c001a80:	38050863          	beqz	a0,1c001e10 <test_model+0x562>
    
    // 配置uart
    struct pi_uart_conf conf;
    struct pi_device device;
    pi_uart_conf_init(&conf);
1c001a84:	0188                	addi	a0,sp,192
1c001a86:	6370a0ef          	jal	ra,1c00c8bc <pi_uart_conf_init>
    conf.baudrate_bps =115200;
1c001a8a:	67f1                	lui	a5,0x1c
1c001a8c:	20078793          	addi	a5,a5,512 # 1c200 <__L1Cl+0xc200>
1c001a90:	c1be                	sw	a5,192(sp)
    pi_open_from_conf(&device, &conf);
1c001a92:	018c                	addi	a1,sp,192
1c001a94:	1948                	addi	a0,sp,180
1c001a96:	51a080ef          	jal	ra,1c009fb0 <pi_open_from_conf>
    printf("[UART] Open\n");
1c001a9a:	1c00f537          	lui	a0,0x1c00f
1c001a9e:	9fc50513          	addi	a0,a0,-1540 # 1c00e9fc <__clz_tab+0x258>
1c001aa2:	1ff0b0ef          	jal	ra,1c00d4a0 <puts>
    if (pi_uart_open(&device))
1c001aa6:	1948                	addi	a0,sp,180
1c001aa8:	62f0a0ef          	jal	ra,1c00c8d6 <pi_uart_open>
1c001aac:	c911                	beqz	a0,1c001ac0 <test_model+0x212>
    {
    	printf("[UART] open failed !\n");
1c001aae:	1c00f537          	lui	a0,0x1c00f
1c001ab2:	a0850513          	addi	a0,a0,-1528 # 1c00ea08 <__clz_tab+0x264>
1c001ab6:	1eb0b0ef          	jal	ra,1c00d4a0 <puts>
    	pmsis_exit(-1);
1c001aba:	557d                	li	a0,-1
1c001abc:	2890b0ef          	jal	ra,1c00d544 <exit>
    }

    pi_uart_open(&device);
1c001ac0:	1948                	addi	a0,sp,180
1c001ac2:	6150a0ef          	jal	ra,1c00c8d6 <pi_uart_open>
    
    // 配置和打开cluster
    struct pi_device cluster_dev;
    struct pi_cluster_conf cl_conf;
    cl_conf.id = 0;
1c001ac6:	cb02                	sw	zero,148(sp)
    pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c001ac8:	090c                	addi	a1,sp,144
1c001aca:	1128                	addi	a0,sp,168
1c001acc:	4e4080ef          	jal	ra,1c009fb0 <pi_open_from_conf>
    if (pi_cluster_open(&cluster_dev))
1c001ad0:	1128                	addi	a0,sp,168
1c001ad2:	11f090ef          	jal	ra,1c00b3f0 <pi_cluster_open>
1c001ad6:	c911                	beqz	a0,1c001aea <test_model+0x23c>
    {
        printf("Cluster open failed !\n");
1c001ad8:	1c00f537          	lui	a0,0x1c00f
1c001adc:	a2050513          	addi	a0,a0,-1504 # 1c00ea20 <__clz_tab+0x27c>
1c001ae0:	1c10b0ef          	jal	ra,1c00d4a0 <puts>
        pmsis_exit(-4);
1c001ae4:	5571                	li	a0,-4
1c001ae6:	25f0b0ef          	jal	ra,1c00d544 <exit>
    }

    // 为识别结果分配空间
    ResOut = (short int *) AT_L2_ALLOC(0, CLASS_NUM * sizeof(short int));
1c001aea:	4511                	li	a0,4
1c001aec:	5e5080ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c001af0:	1c00f7b7          	lui	a5,0x1c00f
1c001af4:	12a7a223          	sw	a0,292(a5) # 1c00f124 <ResOut>
    if (ResOut == NULL)
1c001af8:	e919                	bnez	a0,1c001b0e <test_model+0x260>
    {
        printf("Failed to allocate Memory for Result (%d bytes)\n", CLASS_NUM *sizeof(short int));
1c001afa:	4591                	li	a1,4
1c001afc:	1c00f537          	lui	a0,0x1c00f
1c001b00:	a3850513          	addi	a0,a0,-1480 # 1c00ea38 <__clz_tab+0x294>
1c001b04:	3330b0ef          	jal	ra,1c00d636 <printf>
        pmsis_exit(-3);
1c001b08:	5575                	li	a0,-3
1c001b0a:	23b0b0ef          	jal	ra,1c00d544 <exit>
    }

    

    printf("Constructor\n");
1c001b0e:	1c00f537          	lui	a0,0x1c00f
1c001b12:	a6c50513          	addi	a0,a0,-1428 # 1c00ea6c <__clz_tab+0x2c8>
1c001b16:	18b0b0ef          	jal	ra,1c00d4a0 <puts>
    // IMPORTANT - MUST BE CALLED AFTER THE CLUSTER IS SWITCHED ON!!!!
    // 构造CNN
    if (modelCNN_Construct())
1c001b1a:	681020ef          	jal	ra,1c00499a <modelCNN_Construct>
1c001b1e:	d62a                	sw	a0,44(sp)
1c001b20:	c911                	beqz	a0,1c001b34 <test_model+0x286>
    {
        printf("Graph constructor exited with an error\n");
1c001b22:	1c00f537          	lui	a0,0x1c00f
1c001b26:	a7850513          	addi	a0,a0,-1416 # 1c00ea78 <__clz_tab+0x2d4>
1c001b2a:	1770b0ef          	jal	ra,1c00d4a0 <puts>
        pmsis_exit(-5);
1c001b2e:	556d                	li	a0,-5
1c001b30:	2150b0ef          	jal	ra,1c00d544 <exit>
    }

																												
    printf("Call cluster\n");
1c001b34:	1c00f537          	lui	a0,0x1c00f
1c001b38:	aa050513          	addi	a0,a0,-1376 # 1c00eaa0 <__clz_tab+0x2fc>
1c001b3c:	1650b0ef          	jal	ra,1c00d4a0 <puts>
    struct pi_cluster_task task = {0};
1c001b40:	d482                	sw	zero,104(sp)
1c001b42:	d682                	sw	zero,108(sp)
1c001b44:	dc82                	sw	zero,120(sp)
1c001b46:	de82                	sw	zero,124(sp)
1c001b48:	c102                	sw	zero,128(sp)
1c001b4a:	c302                	sw	zero,132(sp)
1c001b4c:	c502                	sw	zero,136(sp)
1c001b4e:	c702                	sw	zero,140(sp)
    task.entry = cluster;
1c001b50:	1c0017b7          	lui	a5,0x1c001
1c001b54:	7d678793          	addi	a5,a5,2006 # 1c0017d6 <cluster>
1c001b58:	d2be                	sw	a5,100(sp)
    task.arg = NULL;
    task.stack_size = (unsigned int) STACK_SIZE;
1c001b5a:	6785                	lui	a5,0x1
1c001b5c:	fbc78793          	addi	a5,a5,-68 # fbc <__rt_stack_size+0x7bc>
1c001b60:	d8be                	sw	a5,112(sp)
    task.slave_stack_size = (unsigned int) SLAVE_STACK_SIZE;
1c001b62:	40000793          	li	a5,1024
1c001b66:	dabe                	sw	a5,116(sp)
            if (x == 0 || y == 0 || x == width-1 || y == height-1)
1c001b68:	14300a93          	li	s5,323
                    output[idx] = 0.33*red + 0.33*green + 0.33*blue;
1c001b6c:	1c00f7b7          	lui	a5,0x1c00f
1c001b70:	8f078a13          	addi	s4,a5,-1808 # 1c00e8f0 <__clz_tab+0x14c>
1c001b74:	8c52                	mv	s8,s4
1c001b76:	ac11                	j	1c001d8a <test_model+0x4dc>
                    output[idx] = 0;
1c001b78:	00048023          	sb	zero,0(s1)
        for (int x = 0; x < width ; x++)
1c001b7c:	0405                	addi	s0,s0,1
1c001b7e:	0485                	addi	s1,s1,1
1c001b80:	0a05                	addi	s4,s4,1
1c001b82:	1b940063          	beq	s0,s9,1c001d22 <test_model+0x474>
            if (x == 0 || y == 0 || x == width-1 || y == height-1)
1c001b86:	d86d                	beqz	s0,1c001b78 <test_model+0x2ca>
1c001b88:	fe0b08e3          	beqz	s6,1c001b78 <test_model+0x2ca>
1c001b8c:	ff5406e3          	beq	s0,s5,1c001b78 <test_model+0x2ca>
1c001b90:	0f300613          	li	a2,243
1c001b94:	fecb02e3          	beq	s6,a2,1c001b78 <test_model+0x2ca>
                if ((x + x_shift) % 2 == 0 && (y + y_shift) % 2 == 0) //R
1c001b98:	86a2                	mv	a3,s0
1c001b9a:	fc143633          	p.bclr	a2,s0,30,1
1c001b9e:	016467b3          	or	a5,s0,s6
1c001ba2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001ba6:	cbb5                	beqz	a5,1c001c1a <test_model+0x36c>
                else if ((x + x_shift) % 2 == 1 && (y + y_shift) % 2 == 0) //G2
1c001ba8:	01f45713          	srli	a4,s0,0x1f
1c001bac:	00e407b3          	add	a5,s0,a4
1c001bb0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001bb4:	8f99                	sub	a5,a5,a4
1c001bb6:	0a17ad63          	p.beqimm	a5,1,1c001c70 <test_model+0x3c2>
                else if ((x + x_shift) % 2 == 0 && (y + y_shift) % 2 == 1) //G1
1c001bba:	24060463          	beqz	a2,1c001e02 <test_model+0x554>
                    green = 0;
1c001bbe:	4901                	li	s2,0
                    blue = 0;
1c001bc0:	4b81                	li	s7,0
                    red = 0;
1c001bc2:	4501                	li	a0,0
                    output[idx] = 0.33*red + 0.33*green + 0.33*blue;
1c001bc4:	3e6d                	jal	1c00177e <__floatsidf>
1c001bc6:	000c2603          	lw	a2,0(s8)
1c001bca:	004c2683          	lw	a3,4(s8)
1c001bce:	f24ff0ef          	jal	ra,1c0012f2 <__muldf3>
1c001bd2:	c42a                	sw	a0,8(sp)
1c001bd4:	c62e                	sw	a1,12(sp)
1c001bd6:	854a                	mv	a0,s2
1c001bd8:	365d                	jal	1c00177e <__floatsidf>
1c001bda:	000c2603          	lw	a2,0(s8)
1c001bde:	004c2683          	lw	a3,4(s8)
1c001be2:	f10ff0ef          	jal	ra,1c0012f2 <__muldf3>
1c001be6:	862a                	mv	a2,a0
1c001be8:	86ae                	mv	a3,a1
1c001bea:	4522                	lw	a0,8(sp)
1c001bec:	45b2                	lw	a1,12(sp)
1c001bee:	906ff0ef          	jal	ra,1c000cf4 <__adddf3>
1c001bf2:	c42a                	sw	a0,8(sp)
1c001bf4:	c62e                	sw	a1,12(sp)
1c001bf6:	855e                	mv	a0,s7
1c001bf8:	3659                	jal	1c00177e <__floatsidf>
1c001bfa:	000c2603          	lw	a2,0(s8)
1c001bfe:	004c2683          	lw	a3,4(s8)
1c001c02:	ef0ff0ef          	jal	ra,1c0012f2 <__muldf3>
1c001c06:	862a                	mv	a2,a0
1c001c08:	86ae                	mv	a3,a1
1c001c0a:	4522                	lw	a0,8(sp)
1c001c0c:	45b2                	lw	a1,12(sp)
1c001c0e:	8e6ff0ef          	jal	ra,1c000cf4 <__adddf3>
1c001c12:	3e29                	jal	1c00172c <__fixunsdfsi>
1c001c14:	00a48023          	sb	a0,0(s1)
1c001c18:	b795                	j	1c001b7c <test_model+0x2ce>
                    red = input[idx];
1c001c1a:	001a4503          	lbu	a0,1(s4)
1c001c1e:	46e2                	lw	a3,24(sp)
1c001c20:	40da07b3          	sub	a5,s4,a3
                    blue = (input[idxr[0]] + input[idxr[2]] + input[idxr[4]] + input[idxr[6]]) / 4;
1c001c24:	4672                	lw	a2,28(sp)
1c001c26:	00c78733          	add	a4,a5,a2
1c001c2a:	00074b83          	lbu	s7,0(a4)
1c001c2e:	5682                	lw	a3,32(sp)
1c001c30:	97b6                	add	a5,a5,a3
1c001c32:	0007c783          	lbu	a5,0(a5)
1c001c36:	9bbe                	add	s7,s7,a5
1c001c38:	008d0733          	add	a4,s10,s0
1c001c3c:	00174783          	lbu	a5,1(a4)
1c001c40:	9bbe                	add	s7,s7,a5
1c001c42:	008d87b3          	add	a5,s11,s0
1c001c46:	0017c683          	lbu	a3,1(a5)
1c001c4a:	84dbabdb          	p.addun	s7,s7,a3,2
1c001c4e:	0ffbfb93          	andi	s7,s7,255
                    green = (input[idxr[1]] + input[idxr[3]] + input[idxr[5]] + input[idxr[7]]) / 4;
1c001c52:	000a4903          	lbu	s2,0(s4)
1c001c56:	00074703          	lbu	a4,0(a4)
1c001c5a:	993a                	add	s2,s2,a4
1c001c5c:	002a4703          	lbu	a4,2(s4)
1c001c60:	993a                	add	s2,s2,a4
1c001c62:	0007c783          	lbu	a5,0(a5)
1c001c66:	84f9295b          	p.addun	s2,s2,a5,2
1c001c6a:	0ff97913          	andi	s2,s2,255
1c001c6e:	bf99                	j	1c001bc4 <test_model+0x316>
                else if ((x + x_shift) % 2 == 1 && (y + y_shift) % 2 == 0) //G2
1c001c70:	5712                	lw	a4,36(sp)
1c001c72:	18071663          	bnez	a4,1c001dfe <test_model+0x550>
                    red = (input[idxr[1]] + input[idxr[5]]) / 2;
1c001c76:	000a4783          	lbu	a5,0(s4)
1c001c7a:	002a4503          	lbu	a0,2(s4)
1c001c7e:	82a7a55b          	p.addun	a0,a5,a0,1
                    blue = (input[idxr[3]] + input[idxr[7]]) / 2;
1c001c82:	008d07b3          	add	a5,s10,s0
1c001c86:	0007cb83          	lbu	s7,0(a5)
1c001c8a:	008d86b3          	add	a3,s11,s0
1c001c8e:	0006c783          	lbu	a5,0(a3)
1c001c92:	82fbabdb          	p.addun	s7,s7,a5,1
                    green = input[idx];
1c001c96:	001a4903          	lbu	s2,1(s4)
1c001c9a:	b72d                	j	1c001bc4 <test_model+0x316>
                    red = (input[idxr[3]] + input[idxr[7]]) / 2;
1c001c9c:	00dd07b3          	add	a5,s10,a3
1c001ca0:	0007c783          	lbu	a5,0(a5)
1c001ca4:	96ee                	add	a3,a3,s11
1c001ca6:	0006c503          	lbu	a0,0(a3)
1c001caa:	82a7a55b          	p.addun	a0,a5,a0,1
                    blue = (input[idxr[1]] + input[idxr[5]]) / 2;
1c001cae:	000a4b83          	lbu	s7,0(s4)
1c001cb2:	002a4783          	lbu	a5,2(s4)
1c001cb6:	82fbabdb          	p.addun	s7,s7,a5,1
                    green = input[idx];
1c001cba:	001a4903          	lbu	s2,1(s4)
1c001cbe:	b719                	j	1c001bc4 <test_model+0x316>
                else if ((x + x_shift) % 2 == 1 && (y + y_shift) % 2 == 1) //B
1c001cc0:	4652                	lw	a2,20(sp)
1c001cc2:	04163c63          	p.bneimm	a2,1,1c001d1a <test_model+0x46c>
1c001cc6:	4762                	lw	a4,24(sp)
1c001cc8:	40ea07b3          	sub	a5,s4,a4
                    red = (input[idxr[0]] + input[idxr[2]] + input[idxr[4]] + input[idxr[6]]) / 4;
1c001ccc:	4672                	lw	a2,28(sp)
1c001cce:	00c78733          	add	a4,a5,a2
1c001cd2:	00074503          	lbu	a0,0(a4)
1c001cd6:	5702                	lw	a4,32(sp)
1c001cd8:	97ba                	add	a5,a5,a4
1c001cda:	0007c783          	lbu	a5,0(a5)
1c001cde:	953e                	add	a0,a0,a5
1c001ce0:	00dd07b3          	add	a5,s10,a3
1c001ce4:	0017c703          	lbu	a4,1(a5)
1c001ce8:	953a                	add	a0,a0,a4
1c001cea:	96ee                	add	a3,a3,s11
1c001cec:	0016c703          	lbu	a4,1(a3)
1c001cf0:	84e5255b          	p.addun	a0,a0,a4,2
1c001cf4:	0ff57513          	andi	a0,a0,255
                    blue = input[idx];
1c001cf8:	001a4b83          	lbu	s7,1(s4)
                    green = (input[idxr[1]] + input[idxr[3]] + input[idxr[5]] + input[idxr[7]]) / 4;
1c001cfc:	000a4903          	lbu	s2,0(s4)
1c001d00:	0007c783          	lbu	a5,0(a5)
1c001d04:	993e                	add	s2,s2,a5
1c001d06:	002a4783          	lbu	a5,2(s4)
1c001d0a:	993e                	add	s2,s2,a5
1c001d0c:	0006c783          	lbu	a5,0(a3)
1c001d10:	84f9295b          	p.addun	s2,s2,a5,2
1c001d14:	0ff97913          	andi	s2,s2,255
1c001d18:	b575                	j	1c001bc4 <test_model+0x316>
                    green = 0;
1c001d1a:	4901                	li	s2,0
                    blue = 0;
1c001d1c:	4b81                	li	s7,0
                    red = 0;
1c001d1e:	4501                	li	a0,0
1c001d20:	b555                	j	1c001bc4 <test_model+0x316>
    for (int y = 0; y < height ; y++)
1c001d22:	0b05                	addi	s6,s6,1
1c001d24:	144d0d13          	addi	s10,s10,324
1c001d28:	144d8913          	addi	s2,s11,324
1c001d2c:	14498993          	addi	s3,s3,324
1c001d30:	0f400793          	li	a5,244
1c001d34:	02fb0f63          	beq	s6,a5,1c001d72 <test_model+0x4c4>
                else if ((x + x_shift) % 2 == 1 && (y + y_shift) % 2 == 1) //B
1c001d38:	01fb5713          	srli	a4,s6,0x1f
1c001d3c:	00eb07b3          	add	a5,s6,a4
1c001d40:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001d44:	8f99                	sub	a5,a5,a4
1c001d46:	ca3e                	sw	a5,20(sp)
1c001d48:	ebbd0a13          	addi	s4,s10,-325
1c001d4c:	84ce                	mv	s1,s3
        for (int x = 0; x < width ; x++)
1c001d4e:	5432                	lw	s0,44(sp)
                if ((x + x_shift) % 2 == 0 && (y + y_shift) % 2 == 0) //R
1c001d50:	fc1b3633          	p.bclr	a2,s6,30,1
1c001d54:	d232                	sw	a2,36(sp)
1c001d56:	56a2                	lw	a3,40(sp)
1c001d58:	40d986b3          	sub	a3,s3,a3
1c001d5c:	cc36                	sw	a3,24(sp)
                    red = (input[idxr[0]] + input[idxr[2]] + input[idxr[4]] + input[idxr[6]]) / 4;
1c001d5e:	4742                	lw	a4,16(sp)
1c001d60:	40e90733          	sub	a4,s2,a4
1c001d64:	ce3a                	sw	a4,28(sp)
1c001d66:	47c2                	lw	a5,16(sp)
1c001d68:	40fd07b3          	sub	a5,s10,a5
1c001d6c:	d03e                	sw	a5,32(sp)
1c001d6e:	8dca                	mv	s11,s2
1c001d70:	bd19                	j	1c001b86 <test_model+0x2d8>
            pi_camera_capture(&camera, buff, BUFF_SIZE);
            pi_camera_control(&camera, PI_CAMERA_CMD_STOP, 0);
            //转换彩色图片
        demosaicking(buff, Img_In, AT_INPUT_WIDTH, AT_INPUT_HEIGHT, 1);
            // cluster执行任务
            pi_cluster_send_task_to_cl(&cluster_dev, &task);
1c001d72:	10cc                	addi	a1,sp,100
1c001d74:	1128                	addi	a0,sp,168
1c001d76:	253090ef          	jal	ra,1c00b7c8 <pi_cluster_send_task_to_cl>
    	    // 写入uart
            pi_uart_write(&device, &value, 1);
1c001d7a:	4605                	li	a2,1
1c001d7c:	1c00f5b7          	lui	a1,0x1c00f
1c001d80:	13058593          	addi	a1,a1,304 # 1c00f130 <value>
1c001d84:	1948                	addi	a0,sp,180
1c001d86:	45d0a0ef          	jal	ra,1c00c9e2 <pi_uart_write>
  return api->control(device, cmd, arg);
1c001d8a:	1c00f637          	lui	a2,0x1c00f
1c001d8e:	2d060413          	addi	s0,a2,720 # 1c00f2d0 <_edata>
1c001d92:	401c                	lw	a5,0(s0)
1c001d94:	479c                	lw	a5,8(a5)
1c001d96:	4601                	li	a2,0
1c001d98:	4589                	li	a1,2
1c001d9a:	1c00f6b7          	lui	a3,0x1c00f
1c001d9e:	2d068513          	addi	a0,a3,720 # 1c00f2d0 <_edata>
1c001da2:	9782                	jalr	a5
            pi_camera_capture(&camera, buff, BUFF_SIZE);
1c001da4:	664d                	lui	a2,0x13
1c001da6:	4d060613          	addi	a2,a2,1232 # 134d0 <__L1Cl+0x34d0>
1c001daa:	1c00f737          	lui	a4,0x1c00f
1c001dae:	13070713          	addi	a4,a4,304 # 1c00f130 <value>
1c001db2:	434c                	lw	a1,4(a4)
1c001db4:	1c00f7b7          	lui	a5,0x1c00f
1c001db8:	2d078513          	addi	a0,a5,720 # 1c00f2d0 <_edata>
1c001dbc:	745050ef          	jal	ra,1c007d00 <pi_camera_capture>
1c001dc0:	401c                	lw	a5,0(s0)
1c001dc2:	479c                	lw	a5,8(a5)
1c001dc4:	4601                	li	a2,0
1c001dc6:	458d                	li	a1,3
1c001dc8:	1c00f6b7          	lui	a3,0x1c00f
1c001dcc:	2d068513          	addi	a0,a3,720 # 1c00f2d0 <_edata>
1c001dd0:	9782                	jalr	a5
        demosaicking(buff, Img_In, AT_INPUT_WIDTH, AT_INPUT_HEIGHT, 1);
1c001dd2:	1c00f737          	lui	a4,0x1c00f
1c001dd6:	13070713          	addi	a4,a4,304 # 1c00f130 <value>
1c001dda:	4358                	lw	a4,4(a4)
1c001ddc:	c83a                	sw	a4,16(sp)
1c001dde:	14470d13          	addi	s10,a4,324
1c001de2:	ebc70b93          	addi	s7,a4,-324
1c001de6:	1c00f7b7          	lui	a5,0x1c00f
1c001dea:	12478793          	addi	a5,a5,292 # 1c00f124 <ResOut>
1c001dee:	43dc                	lw	a5,4(a5)
1c001df0:	d43e                	sw	a5,40(sp)
1c001df2:	89be                	mv	s3,a5
    for (int y = 0; y < height ; y++)
1c001df4:	5b32                	lw	s6,44(sp)
        for (int x = 0; x < width ; x++)
1c001df6:	14400c93          	li	s9,324
1c001dfa:	895e                	mv	s2,s7
1c001dfc:	bf35                	j	1c001d38 <test_model+0x48a>
                else if ((x + x_shift) % 2 == 0 && (y + y_shift) % 2 == 1) //G1
1c001dfe:	ec0611e3          	bnez	a2,1c001cc0 <test_model+0x412>
1c001e02:	47d2                	lw	a5,20(sp)
1c001e04:	e817ace3          	p.beqimm	a5,1,1c001c9c <test_model+0x3ee>
                    green = 0;
1c001e08:	4901                	li	s2,0
                    blue = 0;
1c001e0a:	4b81                	li	s7,0
                    red = 0;
1c001e0c:	4501                	li	a0,0
1c001e0e:	bb5d                	j	1c001bc4 <test_model+0x316>
    
    printf("Ended\n");

    pmsis_exit(0);
    return 0;
}
1c001e10:	557d                	li	a0,-1
1c001e12:	10c12083          	lw	ra,268(sp)
1c001e16:	10812403          	lw	s0,264(sp)
1c001e1a:	10412483          	lw	s1,260(sp)
1c001e1e:	10012903          	lw	s2,256(sp)
1c001e22:	59fe                	lw	s3,252(sp)
1c001e24:	5a6e                	lw	s4,248(sp)
1c001e26:	5ade                	lw	s5,244(sp)
1c001e28:	5b4e                	lw	s6,240(sp)
1c001e2a:	5bbe                	lw	s7,236(sp)
1c001e2c:	5c2e                	lw	s8,232(sp)
1c001e2e:	5c9e                	lw	s9,228(sp)
1c001e30:	5d0e                	lw	s10,224(sp)
1c001e32:	4dfe                	lw	s11,220(sp)
1c001e34:	6151                	addi	sp,sp,272
1c001e36:	8082                	ret

1c001e38 <main>:

int main()
{
1c001e38:	1141                	addi	sp,sp,-16
1c001e3a:	c606                	sw	ra,12(sp)
    printf("\n\n\t *** NNTOOL model Example ***\n\n");
1c001e3c:	1c00f537          	lui	a0,0x1c00f
1c001e40:	8f850513          	addi	a0,a0,-1800 # 1c00e8f8 <__clz_tab+0x154>
1c001e44:	65c0b0ef          	jal	ra,1c00d4a0 <puts>
{
}

static inline int pmsis_kickoff(void *arg)
{
  ((void (*)())arg)();
1c001e48:	349d                	jal	1c0018ae <test_model>
    return pmsis_kickoff((void *) test_model);
}
1c001e4a:	557d                	li	a0,-1
1c001e4c:	40b2                	lw	ra,12(sp)
1c001e4e:	0141                	addi	sp,sp,16
1c001e50:	8082                	ret

1c001e52 <S1_Op_input_1_formatter>:
	AT_L2_FREE(0, model_L2_Memory, 176198);
	AT_L1_FREE(0, model_L1_Memory, 48776);
	AT_HYPERRAM_CLOSE(&HyperRam);
	AT_HYPERFLASH_FS_CLOSE(&HyperFlash);
	return 0;
}
1c001e52:	714d                	addi	sp,sp,-336
1c001e54:	14112623          	sw	ra,332(sp)
1c001e58:	14812423          	sw	s0,328(sp)
1c001e5c:	14912223          	sw	s1,324(sp)
1c001e60:	15212023          	sw	s2,320(sp)
1c001e64:	13312e23          	sw	s3,316(sp)
1c001e68:	13412c23          	sw	s4,312(sp)
1c001e6c:	13512a23          	sw	s5,308(sp)
1c001e70:	13612823          	sw	s6,304(sp)
1c001e74:	13712623          	sw	s7,300(sp)
1c001e78:	13812423          	sw	s8,296(sp)
1c001e7c:	13912223          	sw	s9,292(sp)
1c001e80:	13a12023          	sw	s10,288(sp)
1c001e84:	11b12e23          	sw	s11,284(sp)
1c001e88:	cc2e                	sw	a1,24(sp)
1c001e8a:	14400793          	li	a5,324
1c001e8e:	d43e                	sw	a5,40(sp)
1c001e90:	ce2a                	sw	a0,28(sp)
1c001e92:	100007b7          	lui	a5,0x10000
1c001e96:	01c7a603          	lw	a2,28(a5) # 1000001c <model_L1_Memory>
1c001e9a:	300476f3          	csrrci	a3,mstatus,8
1c001e9e:	00204737          	lui	a4,0x204
1c001ea2:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c001ea6:	698d                	lui	s3,0x3
1c001ea8:	ed498993          	addi	s3,s3,-300 # 2ed4 <__rt_stack_size+0x26d4>
1c001eac:	000307b7          	lui	a5,0x30
1c001eb0:	de09a7b3          	p.insert	a5,s3,15,0
1c001eb4:	c137c7b3          	p.bset	a5,a5,0,19
1c001eb8:	c157c7b3          	p.bset	a5,a5,0,21
1c001ebc:	002045b7          	lui	a1,0x204
1c001ec0:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c001ec4:	002047b7          	lui	a5,0x204
1c001ec8:	40c7a023          	sw	a2,1024(a5) # 204400 <__L2+0x184400>
1c001ecc:	40a7a023          	sw	a0,1024(a5)
1c001ed0:	d9ba                	sw	a4,240(sp)
1c001ed2:	10012023          	sw	zero,256(sp)
1c001ed6:	30069073          	csrw	mstatus,a3
1c001eda:	4a81                	li	s5,0
1c001edc:	c602                	sw	zero,12(sp)
1c001ede:	4b81                	li	s7,0
1c001ee0:	4901                	li	s2,0
1c001ee2:	8a4e                	mv	s4,s3
1c001ee4:	00204437          	lui	s0,0x204
1c001ee8:	10000cb7          	lui	s9,0x10000
1c001eec:	20040d13          	addi	s10,s0,512 # 204200 <__L2+0x184200>
1c001ef0:	1c00fdb7          	lui	s11,0x1c00f
1c001ef4:	6795                	lui	a5,0x5
1c001ef6:	ba078793          	addi	a5,a5,-1120 # 4ba0 <__rt_stack_size+0x43a0>
1c001efa:	c83e                	sw	a5,16(sp)
1c001efc:	ac7d                	j	1c0021ba <S1_Op_input_1_formatter+0x368>
1c001efe:	c45e                	sw	s7,8(sp)
1c001f00:	4b01                	li	s6,0
1c001f02:	a4e1                	j	1c0021ca <S1_Op_input_1_formatter+0x378>
1c001f04:	6b09                	lui	s6,0x2
1c001f06:	bd8b0b13          	addi	s6,s6,-1064 # 1bd8 <__rt_stack_size+0x13d8>
1c001f0a:	a4c1                	j	1c0021ca <S1_Op_input_1_formatter+0x378>
1c001f0c:	300476f3          	csrrci	a3,mstatus,8
1c001f10:	40442783          	lw	a5,1028(s0)
1c001f14:	574e                	lw	a4,240(sp)
1c001f16:	40e7d7b3          	sra	a5,a5,a4
1c001f1a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001f1e:	c78d                	beqz	a5,1c001f48 <S1_Op_input_1_formatter+0xf6>
1c001f20:	10000613          	li	a2,256
1c001f24:	30069073          	csrw	mstatus,a3
1c001f28:	00c42423          	sw	a2,8(s0)
1c001f2c:	03c46783          	p.elw	a5,60(s0)
1c001f30:	00c42223          	sw	a2,4(s0)
1c001f34:	300476f3          	csrrci	a3,mstatus,8
1c001f38:	40442783          	lw	a5,1028(s0)
1c001f3c:	574e                	lw	a4,240(sp)
1c001f3e:	40e7d7b3          	sra	a5,a5,a4
1c001f42:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001f46:	fff9                	bnez	a5,1c001f24 <S1_Op_input_1_formatter+0xd2>
1c001f48:	4785                	li	a5,1
1c001f4a:	00e79733          	sll	a4,a5,a4
1c001f4e:	40e42223          	sw	a4,1028(s0)
1c001f52:	30069073          	csrw	mstatus,a3
1c001f56:	080b1f63          	bnez	s6,1c001ff4 <S1_Op_input_1_formatter+0x1a2>
1c001f5a:	01cca783          	lw	a5,28(s9) # 1000001c <model_L1_Memory>
1c001f5e:	01f95713          	srli	a4,s2,0x1f
1c001f62:	00e904b3          	add	s1,s2,a4
1c001f66:	fc14b4b3          	p.bclr	s1,s1,30,1
1c001f6a:	8c99                	sub	s1,s1,a4
1c001f6c:	034484b3          	mul	s1,s1,s4
1c001f70:	00978733          	add	a4,a5,s1
1c001f74:	d03a                	sw	a4,32(sp)
1c001f76:	6819                	lui	a6,0x6
1c001f78:	da880813          	addi	a6,a6,-600 # 5da8 <__rt_stack_size+0x55a8>
1c001f7c:	01048c33          	add	s8,s1,a6
1c001f80:	97e2                	add	a5,a5,s8
1c001f82:	d23e                	sw	a5,36(sp)
1c001f84:	12692c63          	p.beqimm	s2,6,1c0020bc <S1_Op_input_1_formatter+0x26a>
1c001f88:	02500793          	li	a5,37
1c001f8c:	d63e                	sw	a5,44(sp)
1c001f8e:	0ff00793          	li	a5,255
1c001f92:	08f42223          	sw	a5,132(s0)
1c001f96:	00fd2023          	sw	a5,0(s10)
1c001f9a:	00204537          	lui	a0,0x204
1c001f9e:	20050513          	addi	a0,a0,512 # 204200 <__L2+0x184200>
1c001fa2:	00f52623          	sw	a5,12(a0)
1c001fa6:	1c007737          	lui	a4,0x1c007
1c001faa:	37070713          	addi	a4,a4,880 # 1c007370 <CNN_NormBW_offset_fps>
1c001fae:	08e42023          	sw	a4,128(s0)
1c001fb2:	1008                	addi	a0,sp,32
1c001fb4:	08a42023          	sw	a0,128(s0)
1c001fb8:	3b8050ef          	jal	ra,1c007370 <CNN_NormBW_offset_fps>
1c001fbc:	01cd6783          	p.elw	a5,28(s10)
1c001fc0:	100a9063          	bnez	s5,1c0020c0 <S1_Op_input_1_formatter+0x26e>
1c001fc4:	4732                	lw	a4,12(sp)
1c001fc6:	18070f63          	beqz	a4,1c002164 <S1_Op_input_1_formatter+0x312>
1c001fca:	0cc14783          	lbu	a5,204(sp)
1c001fce:	0ff7f793          	andi	a5,a5,255
1c001fd2:	18079963          	bnez	a5,1c002164 <S1_Op_input_1_formatter+0x312>
1c001fd6:	4709                	li	a4,2
1c001fd8:	00e42423          	sw	a4,8(s0)
1c001fdc:	03c46783          	p.elw	a5,60(s0)
1c001fe0:	00e42223          	sw	a4,4(s0)
1c001fe4:	0cc14783          	lbu	a5,204(sp)
1c001fe8:	0ff7f793          	andi	a5,a5,255
1c001fec:	d7f5                	beqz	a5,1c001fd8 <S1_Op_input_1_formatter+0x186>
1c001fee:	160a8b63          	beqz	s5,1c002164 <S1_Op_input_1_formatter+0x312>
1c001ff2:	aa35                	j	1c00212e <S1_Op_input_1_formatter+0x2dc>
1c001ff4:	4772                	lw	a4,28(sp)
1c001ff6:	47a2                	lw	a5,8(sp)
1c001ff8:	00f706b3          	add	a3,a4,a5
1c001ffc:	00190793          	addi	a5,s2,1
1c002000:	01f7d713          	srli	a4,a5,0x1f
1c002004:	97ba                	add	a5,a5,a4
1c002006:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00200a:	8f99                	sub	a5,a5,a4
1c00200c:	01cca703          	lw	a4,28(s9)
1c002010:	43478733          	p.mac	a4,a5,s4
1c002014:	30047673          	csrrci	a2,mstatus,8
1c002018:	020b4863          	bltz	s6,1c002048 <S1_Op_input_1_formatter+0x1f6>
1c00201c:	40042583          	lw	a1,1024(s0)
1c002020:	000307b7          	lui	a5,0x30
1c002024:	de0b27b3          	p.insert	a5,s6,15,0
1c002028:	c137c7b3          	p.bset	a5,a5,0,19
1c00202c:	c157c7b3          	p.bset	a5,a5,0,21
1c002030:	40f42023          	sw	a5,1024(s0)
1c002034:	40e42023          	sw	a4,1024(s0)
1c002038:	40d42023          	sw	a3,1024(s0)
1c00203c:	d9ae                	sw	a1,240(sp)
1c00203e:	10012023          	sw	zero,256(sp)
1c002042:	30061073          	csrw	mstatus,a2
1c002046:	bf11                	j	1c001f5a <S1_Op_input_1_formatter+0x108>
1c002048:	67a1                	lui	a5,0x8
1c00204a:	003305b7          	lui	a1,0x330
1c00204e:	dbae                	sw	a1,244(sp)
1c002050:	10e12223          	sw	a4,260(sp)
1c002054:	10d12423          	sw	a3,264(sp)
1c002058:	ddda                	sw	s6,248(sp)
1c00205a:	dfbe                	sw	a5,252(sp)
1c00205c:	10f12023          	sw	a5,256(sp)
1c002060:	57fd                	li	a5,-1
1c002062:	d9be                	sw	a5,240(sp)
1c002064:	10012623          	sw	zero,268(sp)
1c002068:	01402783          	lw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00206c:	cb89                	beqz	a5,1c00207e <S1_Op_input_1_formatter+0x22c>
1c00206e:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002072:	1998                	addi	a4,sp,240
1c002074:	cfd8                	sw	a4,28(a5)
1c002076:	199c                	addi	a5,sp,240
1c002078:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00207c:	b7d9                	j	1c002042 <S1_Op_input_1_formatter+0x1f0>
1c00207e:	65a1                	lui	a1,0x8
1c002080:	04bb57b3          	p.minu	a5,s6,a1
1c002084:	00f70533          	add	a0,a4,a5
1c002088:	10a12223          	sw	a0,260(sp)
1c00208c:	95b6                	add	a1,a1,a3
1c00208e:	10b12423          	sw	a1,264(sp)
1c002092:	40fb07b3          	sub	a5,s6,a5
1c002096:	ddbe                	sw	a5,248(sp)
1c002098:	40042783          	lw	a5,1024(s0)
1c00209c:	d9be                	sw	a5,240(sp)
1c00209e:	003387b7          	lui	a5,0x338
1c0020a2:	40f42023          	sw	a5,1024(s0)
1c0020a6:	40e42023          	sw	a4,1024(s0)
1c0020aa:	40d42023          	sw	a3,1024(s0)
1c0020ae:	10012783          	lw	a5,256(sp)
1c0020b2:	d3f1                	beqz	a5,1c002076 <S1_Op_input_1_formatter+0x224>
1c0020b4:	199c                	addi	a5,sp,240
1c0020b6:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0020ba:	bf75                	j	1c002076 <S1_Op_input_1_formatter+0x224>
1c0020bc:	47d9                	li	a5,22
1c0020be:	b5f9                	j	1c001f8c <S1_Op_input_1_formatter+0x13a>
1c0020c0:	578e                	lw	a5,224(sp)
1c0020c2:	cf91                	beqz	a5,1c0020de <S1_Op_input_1_formatter+0x28c>
1c0020c4:	572e                	lw	a4,232(sp)
1c0020c6:	02000793          	li	a5,32
1c0020ca:	cf39                	beqz	a4,1c002128 <S1_Op_input_1_formatter+0x2d6>
1c0020cc:	00f42423          	sw	a5,8(s0)
1c0020d0:	03c46703          	p.elw	a4,60(s0)
1c0020d4:	00f42223          	sw	a5,4(s0)
1c0020d8:	572e                	lw	a4,232(sp)
1c0020da:	fb6d                	bnez	a4,1c0020cc <S1_Op_input_1_formatter+0x27a>
1c0020dc:	a0b1                	j	1c002128 <S1_Op_input_1_formatter+0x2d6>
1c0020de:	300476f3          	csrrci	a3,mstatus,8
1c0020e2:	40442783          	lw	a5,1028(s0)
1c0020e6:	474e                	lw	a4,208(sp)
1c0020e8:	40e7d7b3          	sra	a5,a5,a4
1c0020ec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0020f0:	c78d                	beqz	a5,1c00211a <S1_Op_input_1_formatter+0x2c8>
1c0020f2:	10000613          	li	a2,256
1c0020f6:	30069073          	csrw	mstatus,a3
1c0020fa:	00c42423          	sw	a2,8(s0)
1c0020fe:	03c46783          	p.elw	a5,60(s0)
1c002102:	00c42223          	sw	a2,4(s0)
1c002106:	300476f3          	csrrci	a3,mstatus,8
1c00210a:	40442783          	lw	a5,1028(s0)
1c00210e:	474e                	lw	a4,208(sp)
1c002110:	40e7d7b3          	sra	a5,a5,a4
1c002114:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002118:	fff9                	bnez	a5,1c0020f6 <S1_Op_input_1_formatter+0x2a4>
1c00211a:	4785                	li	a5,1
1c00211c:	00e79733          	sll	a4,a5,a4
1c002120:	40e42223          	sw	a4,1028(s0)
1c002124:	30069073          	csrw	mstatus,a3
1c002128:	47b2                	lw	a5,12(sp)
1c00212a:	24079e63          	bnez	a5,1c002386 <S1_Op_input_1_formatter+0x534>
1c00212e:	fff90793          	addi	a5,s2,-1
1c002132:	01f7d713          	srli	a4,a5,0x1f
1c002136:	97ba                	add	a5,a5,a4
1c002138:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00213c:	8f99                	sub	a5,a5,a4
1c00213e:	4642                	lw	a2,16(sp)
1c002140:	43478633          	p.mac	a2,a5,s4
1c002144:	12cda583          	lw	a1,300(s11) # 1c00f12c <model_L2_Memory>
1c002148:	181c                	addi	a5,sp,48
1c00214a:	4701                	li	a4,0
1c00214c:	86d6                	mv	a3,s5
1c00214e:	962e                	add	a2,a2,a1
1c002150:	4862                	lw	a6,24(sp)
1c002152:	4552                	lw	a0,20(sp)
1c002154:	00a805b3          	add	a1,a6,a0
1c002158:	1c00f537          	lui	a0,0x1c00f
1c00215c:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c002160:	41f060ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c002164:	12cda783          	lw	a5,300(s11)
1c002168:	94be                	add	s1,s1,a5
1c00216a:	47c2                	lw	a5,16(sp)
1c00216c:	00f48733          	add	a4,s1,a5
1c002170:	01cca783          	lw	a5,28(s9)
1c002174:	9c3e                	add	s8,s8,a5
1c002176:	300476f3          	csrrci	a3,mstatus,8
1c00217a:	01099813          	slli	a6,s3,0x10
1c00217e:	06084a63          	bltz	a6,1c0021f2 <S1_Op_input_1_formatter+0x3a0>
1c002182:	40042603          	lw	a2,1024(s0)
1c002186:	000207b7          	lui	a5,0x20
1c00218a:	de09a7b3          	p.insert	a5,s3,15,0
1c00218e:	c137c7b3          	p.bset	a5,a5,0,19
1c002192:	c157c7b3          	p.bset	a5,a5,0,21
1c002196:	40f42023          	sw	a5,1024(s0)
1c00219a:	41842023          	sw	s8,1024(s0)
1c00219e:	40e42023          	sw	a4,1024(s0)
1c0021a2:	c9b2                	sw	a2,208(sp)
1c0021a4:	d182                	sw	zero,224(sp)
1c0021a6:	30069073          	csrw	mstatus,a3
1c0021aa:	0905                	addi	s2,s2,1
1c0021ac:	ca5e                	sw	s7,20(sp)
1c0021ae:	c656                	sw	s5,12(sp)
1c0021b0:	0a792763          	p.beqimm	s2,7,1c00225e <S1_Op_input_1_formatter+0x40c>
1c0021b4:	8ace                	mv	s5,s3
1c0021b6:	89da                	mv	s3,s6
1c0021b8:	4ba2                	lw	s7,8(sp)
1c0021ba:	d46922e3          	p.beqimm	s2,6,1c001efe <S1_Op_input_1_formatter+0xac>
1c0021be:	014b8533          	add	a0,s7,s4
1c0021c2:	c42a                	sw	a0,8(sp)
1c0021c4:	d45920e3          	p.beqimm	s2,5,1c001f04 <S1_Op_input_1_formatter+0xb2>
1c0021c8:	8b52                	mv	s6,s4
1c0021ca:	10012783          	lw	a5,256(sp)
1c0021ce:	d2078fe3          	beqz	a5,1c001f0c <S1_Op_input_1_formatter+0xba>
1c0021d2:	10812703          	lw	a4,264(sp)
1c0021d6:	02000793          	li	a5,32
1c0021da:	d6070ee3          	beqz	a4,1c001f56 <S1_Op_input_1_formatter+0x104>
1c0021de:	00f42423          	sw	a5,8(s0)
1c0021e2:	03c46703          	p.elw	a4,60(s0)
1c0021e6:	00f42223          	sw	a5,4(s0)
1c0021ea:	10812703          	lw	a4,264(sp)
1c0021ee:	fb65                	bnez	a4,1c0021de <S1_Op_input_1_formatter+0x38c>
1c0021f0:	b39d                	j	1c001f56 <S1_Op_input_1_formatter+0x104>
1c0021f2:	67a1                	lui	a5,0x8
1c0021f4:	00320637          	lui	a2,0x320
1c0021f8:	cbb2                	sw	a2,212(sp)
1c0021fa:	d3e2                	sw	s8,228(sp)
1c0021fc:	d5ba                	sw	a4,232(sp)
1c0021fe:	cdce                	sw	s3,216(sp)
1c002200:	cfbe                	sw	a5,220(sp)
1c002202:	d1be                	sw	a5,224(sp)
1c002204:	57fd                	li	a5,-1
1c002206:	c9be                	sw	a5,208(sp)
1c002208:	d782                	sw	zero,236(sp)
1c00220a:	01402783          	lw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00220e:	cb89                	beqz	a5,1c002220 <S1_Op_input_1_formatter+0x3ce>
1c002210:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002214:	0998                	addi	a4,sp,208
1c002216:	cfd8                	sw	a4,28(a5)
1c002218:	099c                	addi	a5,sp,208
1c00221a:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00221e:	b761                	j	1c0021a6 <S1_Op_input_1_formatter+0x354>
1c002220:	67a1                	lui	a5,0x8
1c002222:	04f9d7b3          	p.minu	a5,s3,a5
1c002226:	00fc0633          	add	a2,s8,a5
1c00222a:	d3b2                	sw	a2,228(sp)
1c00222c:	6635                	lui	a2,0xd
1c00222e:	ba060613          	addi	a2,a2,-1120 # cba0 <__rt_stack_size+0xc3a0>
1c002232:	94b2                	add	s1,s1,a2
1c002234:	d5a6                	sw	s1,232(sp)
1c002236:	40f987b3          	sub	a5,s3,a5
1c00223a:	cdbe                	sw	a5,216(sp)
1c00223c:	40042783          	lw	a5,1024(s0)
1c002240:	c9be                	sw	a5,208(sp)
1c002242:	003287b7          	lui	a5,0x328
1c002246:	40f42023          	sw	a5,1024(s0)
1c00224a:	41842023          	sw	s8,1024(s0)
1c00224e:	40e42023          	sw	a4,1024(s0)
1c002252:	578e                	lw	a5,224(sp)
1c002254:	d3f1                	beqz	a5,1c002218 <S1_Op_input_1_formatter+0x3c6>
1c002256:	099c                	addi	a5,sp,208
1c002258:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00225c:	bf75                	j	1c002218 <S1_Op_input_1_formatter+0x3c6>
1c00225e:	578e                	lw	a5,224(sp)
1c002260:	c385                	beqz	a5,1c002280 <S1_Op_input_1_formatter+0x42e>
1c002262:	56ae                	lw	a3,232(sp)
1c002264:	02000713          	li	a4,32
1c002268:	002047b7          	lui	a5,0x204
1c00226c:	c6ad                	beqz	a3,1c0022d6 <S1_Op_input_1_formatter+0x484>
1c00226e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c002272:	03c7e683          	p.elw	a3,60(a5)
1c002276:	00e7a223          	sw	a4,4(a5)
1c00227a:	56ae                	lw	a3,232(sp)
1c00227c:	faed                	bnez	a3,1c00226e <S1_Op_input_1_formatter+0x41c>
1c00227e:	a8a1                	j	1c0022d6 <S1_Op_input_1_formatter+0x484>
1c002280:	30047673          	csrrci	a2,mstatus,8
1c002284:	002047b7          	lui	a5,0x204
1c002288:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00228c:	46ce                	lw	a3,208(sp)
1c00228e:	40d7d7b3          	sra	a5,a5,a3
1c002292:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002296:	c79d                	beqz	a5,1c0022c4 <S1_Op_input_1_formatter+0x472>
1c002298:	10000593          	li	a1,256
1c00229c:	00204737          	lui	a4,0x204
1c0022a0:	30061073          	csrw	mstatus,a2
1c0022a4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c0022a8:	03c76783          	p.elw	a5,60(a4)
1c0022ac:	00b72223          	sw	a1,4(a4)
1c0022b0:	30047673          	csrrci	a2,mstatus,8
1c0022b4:	40472783          	lw	a5,1028(a4)
1c0022b8:	46ce                	lw	a3,208(sp)
1c0022ba:	40d7d7b3          	sra	a5,a5,a3
1c0022be:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0022c2:	fff9                	bnez	a5,1c0022a0 <S1_Op_input_1_formatter+0x44e>
1c0022c4:	4785                	li	a5,1
1c0022c6:	00d796b3          	sll	a3,a5,a3
1c0022ca:	002047b7          	lui	a5,0x204
1c0022ce:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0022d2:	30061073          	csrw	mstatus,a2
1c0022d6:	020a8563          	beqz	s5,1c002300 <S1_Op_input_1_formatter+0x4ae>
1c0022da:	0cc14783          	lbu	a5,204(sp)
1c0022de:	0ff7f793          	andi	a5,a5,255
1c0022e2:	ef99                	bnez	a5,1c002300 <S1_Op_input_1_formatter+0x4ae>
1c0022e4:	4689                	li	a3,2
1c0022e6:	00204737          	lui	a4,0x204
1c0022ea:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c0022ee:	03c76783          	p.elw	a5,60(a4)
1c0022f2:	00d72223          	sw	a3,4(a4)
1c0022f6:	0cc14783          	lbu	a5,204(sp)
1c0022fa:	0ff7f793          	andi	a5,a5,255
1c0022fe:	d7f5                	beqz	a5,1c0022ea <S1_Op_input_1_formatter+0x498>
1c002300:	1c00f7b7          	lui	a5,0x1c00f
1c002304:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c002308:	181c                	addi	a5,sp,48
1c00230a:	4701                	li	a4,0
1c00230c:	86ce                	mv	a3,s3
1c00230e:	6615                	lui	a2,0x5
1c002310:	ba060613          	addi	a2,a2,-1120 # 4ba0 <__rt_stack_size+0x43a0>
1c002314:	962e                	add	a2,a2,a1
1c002316:	4562                	lw	a0,24(sp)
1c002318:	017505b3          	add	a1,a0,s7
1c00231c:	1c00f537          	lui	a0,0x1c00f
1c002320:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c002324:	25b060ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c002328:	0cc14783          	lbu	a5,204(sp)
1c00232c:	0ff7f793          	andi	a5,a5,255
1c002330:	ef99                	bnez	a5,1c00234e <S1_Op_input_1_formatter+0x4fc>
1c002332:	4689                	li	a3,2
1c002334:	00204737          	lui	a4,0x204
1c002338:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00233c:	03c76783          	p.elw	a5,60(a4)
1c002340:	00d72223          	sw	a3,4(a4)
1c002344:	0cc14783          	lbu	a5,204(sp)
1c002348:	0ff7f793          	andi	a5,a5,255
1c00234c:	d7f5                	beqz	a5,1c002338 <S1_Op_input_1_formatter+0x4e6>
1c00234e:	14c12083          	lw	ra,332(sp)
1c002352:	14812403          	lw	s0,328(sp)
1c002356:	14412483          	lw	s1,324(sp)
1c00235a:	14012903          	lw	s2,320(sp)
1c00235e:	13c12983          	lw	s3,316(sp)
1c002362:	13812a03          	lw	s4,312(sp)
1c002366:	13412a83          	lw	s5,308(sp)
1c00236a:	13012b03          	lw	s6,304(sp)
1c00236e:	12c12b83          	lw	s7,300(sp)
1c002372:	12812c03          	lw	s8,296(sp)
1c002376:	12412c83          	lw	s9,292(sp)
1c00237a:	12012d03          	lw	s10,288(sp)
1c00237e:	11c12d83          	lw	s11,284(sp)
1c002382:	6171                	addi	sp,sp,336
1c002384:	8082                	ret
1c002386:	0cc14783          	lbu	a5,204(sp)
1c00238a:	0ff7f793          	andi	a5,a5,255
1c00238e:	c40784e3          	beqz	a5,1c001fd6 <S1_Op_input_1_formatter+0x184>
1c002392:	bb71                	j	1c00212e <S1_Op_input_1_formatter+0x2dc>

1c002394 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu>:
1c002394:	d7010113          	addi	sp,sp,-656
1c002398:	28112623          	sw	ra,652(sp)
1c00239c:	28812423          	sw	s0,648(sp)
1c0023a0:	28912223          	sw	s1,644(sp)
1c0023a4:	29212023          	sw	s2,640(sp)
1c0023a8:	27312e23          	sw	s3,636(sp)
1c0023ac:	27412c23          	sw	s4,632(sp)
1c0023b0:	27512a23          	sw	s5,628(sp)
1c0023b4:	27612823          	sw	s6,624(sp)
1c0023b8:	27712623          	sw	s7,620(sp)
1c0023bc:	27812423          	sw	s8,616(sp)
1c0023c0:	27912223          	sw	s9,612(sp)
1c0023c4:	27a12023          	sw	s10,608(sp)
1c0023c8:	25b12e23          	sw	s11,604(sp)
1c0023cc:	842a                	mv	s0,a0
1c0023ce:	d036                	sw	a3,32(sp)
1c0023d0:	84c2                	mv	s1,a6
1c0023d2:	100006b7          	lui	a3,0x10000
1c0023d6:	01c6a803          	lw	a6,28(a3) # 1000001c <model_L1_Memory>
1c0023da:	6689                	lui	a3,0x2
1c0023dc:	e1868693          	addi	a3,a3,-488 # 1e18 <__rt_stack_size+0x1618>
1c0023e0:	96c2                	add	a3,a3,a6
1c0023e2:	df36                	sw	a3,188(sp)
1c0023e4:	0a000313          	li	t1,160
1c0023e8:	0c611023          	sh	t1,192(sp)
1c0023ec:	4889                	li	a7,2
1c0023ee:	0d111123          	sh	a7,194(sp)
1c0023f2:	14400513          	li	a0,324
1c0023f6:	08a11823          	sh	a0,144(sp)
1c0023fa:	14100513          	li	a0,321
1c0023fe:	08a11923          	sh	a0,146(sp)
1c002402:	4515                	li	a0,5
1c002404:	08a11a23          	sh	a0,148(sp)
1c002408:	08a11b23          	sh	a0,150(sp)
1c00240c:	4e05                	li	t3,1
1c00240e:	09c11c23          	sh	t3,152(sp)
1c002412:	09c11e23          	sh	t3,156(sp)
1c002416:	d536                	sw	a3,168(sp)
1c002418:	00007557          	pv.add.sci.b	a0,zero,0
1c00241c:	d72a                	sw	a0,172(sp)
1c00241e:	d8b6                	sw	a3,112(sp)
1c002420:	dab6                	sw	a3,116(sp)
1c002422:	06611d23          	sh	t1,122(sp)
1c002426:	07111e23          	sh	a7,124(sp)
1c00242a:	6525                	lui	a0,0x9
1c00242c:	61850513          	addi	a0,a0,1560 # 9618 <__rt_stack_size+0x8e18>
1c002430:	9542                	add	a0,a0,a6
1c002432:	c52a                	sw	a0,136(sp)
1c002434:	c4b6                	sw	a3,72(sp)
1c002436:	04611923          	sh	t1,82(sp)
1c00243a:	04611a23          	sh	t1,84(sp)
1c00243e:	05111b23          	sh	a7,86(sp)
1c002442:	05111c23          	sh	a7,88(sp)
1c002446:	000076d7          	pv.add.sci.b	a3,zero,0
1c00244a:	d4b6                	sw	a3,104(sp)
1c00244c:	05c10d23          	sb	t3,90(sp)
1c002450:	060102a3          	sb	zero,101(sp)
1c002454:	d6aa                	sw	a0,108(sp)
1c002456:	300478f3          	csrrci	a7,mstatus,8
1c00245a:	00204537          	lui	a0,0x204
1c00245e:	40052503          	lw	a0,1024(a0) # 204400 <__L2+0x184400>
1c002462:	000b06b7          	lui	a3,0xb0
1c002466:	08068693          	addi	a3,a3,128 # b0080 <__L2+0x30080>
1c00246a:	c156c6b3          	p.bset	a3,a3,0,21
1c00246e:	00204337          	lui	t1,0x204
1c002472:	40d32023          	sw	a3,1024(t1) # 204400 <__L2+0x184400>
1c002476:	6685                	lui	a3,0x1
1c002478:	ca868693          	addi	a3,a3,-856 # ca8 <__rt_stack_size+0x4a8>
1c00247c:	9836                	add	a6,a6,a3
1c00247e:	002046b7          	lui	a3,0x204
1c002482:	4106a023          	sw	a6,1024(a3) # 204400 <__L2+0x184400>
1c002486:	40c6a023          	sw	a2,1024(a3)
1c00248a:	22a12823          	sw	a0,560(sp)
1c00248e:	24012023          	sw	zero,576(sp)
1c002492:	30089073          	csrw	mstatus,a7
1c002496:	24012683          	lw	a3,576(sp)
1c00249a:	c295                	beqz	a3,1c0024be <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x12a>
1c00249c:	24812503          	lw	a0,584(sp)
1c0024a0:	02000613          	li	a2,32
1c0024a4:	002046b7          	lui	a3,0x204
1c0024a8:	c925                	beqz	a0,1c002518 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x184>
1c0024aa:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
1c0024ae:	03c6e503          	p.elw	a0,60(a3)
1c0024b2:	00c6a223          	sw	a2,4(a3)
1c0024b6:	24812503          	lw	a0,584(sp)
1c0024ba:	f965                	bnez	a0,1c0024aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x116>
1c0024bc:	a8b1                	j	1c002518 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x184>
1c0024be:	30047873          	csrrci	a6,mstatus,8
1c0024c2:	002046b7          	lui	a3,0x204
1c0024c6:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c0024ca:	23012503          	lw	a0,560(sp)
1c0024ce:	40a6d6b3          	sra	a3,a3,a0
1c0024d2:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0024d6:	ca85                	beqz	a3,1c002506 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x172>
1c0024d8:	10000893          	li	a7,256
1c0024dc:	00204637          	lui	a2,0x204
1c0024e0:	30081073          	csrw	mstatus,a6
1c0024e4:	01162423          	sw	a7,8(a2) # 204008 <__L2+0x184008>
1c0024e8:	03c66683          	p.elw	a3,60(a2)
1c0024ec:	01162223          	sw	a7,4(a2)
1c0024f0:	30047873          	csrrci	a6,mstatus,8
1c0024f4:	40462683          	lw	a3,1028(a2)
1c0024f8:	23012503          	lw	a0,560(sp)
1c0024fc:	40a6d6b3          	sra	a3,a3,a0
1c002500:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002504:	fef1                	bnez	a3,1c0024e0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x14c>
1c002506:	4685                	li	a3,1
1c002508:	00a69533          	sll	a0,a3,a0
1c00250c:	002046b7          	lui	a3,0x204
1c002510:	40a6a223          	sw	a0,1028(a3) # 204404 <__L2+0x184404>
1c002514:	30081073          	csrw	mstatus,a6
1c002518:	100006b7          	lui	a3,0x10000
1c00251c:	01c6a503          	lw	a0,28(a3) # 1000001c <model_L1_Memory>
1c002520:	6685                	lui	a3,0x1
1c002522:	d2868693          	addi	a3,a3,-728 # d28 <__rt_stack_size+0x528>
1c002526:	9536                	add	a0,a0,a3
1c002528:	30047873          	csrrci	a6,mstatus,8
1c00252c:	00204637          	lui	a2,0x204
1c002530:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
1c002534:	000b06b7          	lui	a3,0xb0
1c002538:	02068693          	addi	a3,a3,32 # b0020 <__L2+0x30020>
1c00253c:	c156c6b3          	p.bset	a3,a3,0,21
1c002540:	002048b7          	lui	a7,0x204
1c002544:	40d8a023          	sw	a3,1024(a7) # 204400 <__L2+0x184400>
1c002548:	002046b7          	lui	a3,0x204
1c00254c:	40a6a023          	sw	a0,1024(a3) # 204400 <__L2+0x184400>
1c002550:	40e6a023          	sw	a4,1024(a3)
1c002554:	20c12823          	sw	a2,528(sp)
1c002558:	22012023          	sw	zero,544(sp)
1c00255c:	30081073          	csrw	mstatus,a6
1c002560:	22012703          	lw	a4,544(sp)
1c002564:	c315                	beqz	a4,1c002588 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x1f4>
1c002566:	22812603          	lw	a2,552(sp)
1c00256a:	02000693          	li	a3,32
1c00256e:	00204737          	lui	a4,0x204
1c002572:	ca25                	beqz	a2,1c0025e2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x24e>
1c002574:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c002578:	03c76603          	p.elw	a2,60(a4)
1c00257c:	00d72223          	sw	a3,4(a4)
1c002580:	22812603          	lw	a2,552(sp)
1c002584:	fa65                	bnez	a2,1c002574 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x1e0>
1c002586:	a8b1                	j	1c0025e2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x24e>
1c002588:	30047573          	csrrci	a0,mstatus,8
1c00258c:	00204737          	lui	a4,0x204
1c002590:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c002594:	21012603          	lw	a2,528(sp)
1c002598:	40c75733          	sra	a4,a4,a2
1c00259c:	fc173733          	p.bclr	a4,a4,30,1
1c0025a0:	cb05                	beqz	a4,1c0025d0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x23c>
1c0025a2:	10000813          	li	a6,256
1c0025a6:	002046b7          	lui	a3,0x204
1c0025aa:	30051073          	csrw	mstatus,a0
1c0025ae:	0106a423          	sw	a6,8(a3) # 204008 <__L2+0x184008>
1c0025b2:	03c6e703          	p.elw	a4,60(a3)
1c0025b6:	0106a223          	sw	a6,4(a3)
1c0025ba:	30047573          	csrrci	a0,mstatus,8
1c0025be:	4046a703          	lw	a4,1028(a3)
1c0025c2:	21012603          	lw	a2,528(sp)
1c0025c6:	40c75733          	sra	a4,a4,a2
1c0025ca:	fc173733          	p.bclr	a4,a4,30,1
1c0025ce:	ff71                	bnez	a4,1c0025aa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x216>
1c0025d0:	4705                	li	a4,1
1c0025d2:	00c71633          	sll	a2,a4,a2
1c0025d6:	00204737          	lui	a4,0x204
1c0025da:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
1c0025de:	30051073          	csrw	mstatus,a0
1c0025e2:	10000737          	lui	a4,0x10000
1c0025e6:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c0025ea:	6705                	lui	a4,0x1
1c0025ec:	d4870713          	addi	a4,a4,-696 # d48 <__rt_stack_size+0x548>
1c0025f0:	963a                	add	a2,a2,a4
1c0025f2:	30047573          	csrrci	a0,mstatus,8
1c0025f6:	002046b7          	lui	a3,0x204
1c0025fa:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c0025fe:	000b0737          	lui	a4,0xb0
1c002602:	02070713          	addi	a4,a4,32 # b0020 <__L2+0x30020>
1c002606:	c1574733          	p.bset	a4,a4,0,21
1c00260a:	00204837          	lui	a6,0x204
1c00260e:	40e82023          	sw	a4,1024(a6) # 204400 <__L2+0x184400>
1c002612:	00204737          	lui	a4,0x204
1c002616:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
1c00261a:	40f72023          	sw	a5,1024(a4)
1c00261e:	1ed12823          	sw	a3,496(sp)
1c002622:	20012023          	sw	zero,512(sp)
1c002626:	30051073          	csrw	mstatus,a0
1c00262a:	20012783          	lw	a5,512(sp)
1c00262e:	c395                	beqz	a5,1c002652 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2be>
1c002630:	20812683          	lw	a3,520(sp)
1c002634:	02000713          	li	a4,32
1c002638:	002047b7          	lui	a5,0x204
1c00263c:	caa5                	beqz	a3,1c0026ac <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x318>
1c00263e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c002642:	03c7e683          	p.elw	a3,60(a5)
1c002646:	00e7a223          	sw	a4,4(a5)
1c00264a:	20812683          	lw	a3,520(sp)
1c00264e:	fae5                	bnez	a3,1c00263e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2aa>
1c002650:	a8b1                	j	1c0026ac <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x318>
1c002652:	30047673          	csrrci	a2,mstatus,8
1c002656:	002047b7          	lui	a5,0x204
1c00265a:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00265e:	1f012683          	lw	a3,496(sp)
1c002662:	40d7d7b3          	sra	a5,a5,a3
1c002666:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00266a:	cb85                	beqz	a5,1c00269a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x306>
1c00266c:	10000513          	li	a0,256
1c002670:	00204737          	lui	a4,0x204
1c002674:	30061073          	csrw	mstatus,a2
1c002678:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
1c00267c:	03c76783          	p.elw	a5,60(a4)
1c002680:	00a72223          	sw	a0,4(a4)
1c002684:	30047673          	csrrci	a2,mstatus,8
1c002688:	40472783          	lw	a5,1028(a4)
1c00268c:	1f012683          	lw	a3,496(sp)
1c002690:	40d7d7b3          	sra	a5,a5,a3
1c002694:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002698:	fff1                	bnez	a5,1c002674 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x2e0>
1c00269a:	4785                	li	a5,1
1c00269c:	00d796b3          	sll	a3,a5,a3
1c0026a0:	002047b7          	lui	a5,0x204
1c0026a4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0026a8:	30061073          	csrw	mstatus,a2
1c0026ac:	de2e                	sw	a1,60(sp)
1c0026ae:	100007b7          	lui	a5,0x10000
1c0026b2:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c0026b6:	6785                	lui	a5,0x1
1c0026b8:	d6878793          	addi	a5,a5,-664 # d68 <__rt_stack_size+0x568>
1c0026bc:	96be                	add	a3,a3,a5
1c0026be:	30047673          	csrrci	a2,mstatus,8
1c0026c2:	00204737          	lui	a4,0x204
1c0026c6:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c0026ca:	000b07b7          	lui	a5,0xb0
1c0026ce:	0d878793          	addi	a5,a5,216 # b00d8 <__L2+0x300d8>
1c0026d2:	c157c7b3          	p.bset	a5,a5,0,21
1c0026d6:	00204537          	lui	a0,0x204
1c0026da:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
1c0026de:	002047b7          	lui	a5,0x204
1c0026e2:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c0026e6:	40b7a023          	sw	a1,1024(a5)
1c0026ea:	1ce12823          	sw	a4,464(sp)
1c0026ee:	1e012023          	sw	zero,480(sp)
1c0026f2:	30061073          	csrw	mstatus,a2
1c0026f6:	d422                	sw	s0,40(sp)
1c0026f8:	1c00f7b7          	lui	a5,0x1c00f
1c0026fc:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c002700:	099c                	addi	a5,sp,208
1c002702:	4705                	li	a4,1
1c002704:	65400693          	li	a3,1620
1c002708:	0002a637          	lui	a2,0x2a
1c00270c:	3a060613          	addi	a2,a2,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c002710:	962e                	add	a2,a2,a1
1c002712:	85a2                	mv	a1,s0
1c002714:	1c00f537          	lui	a0,0x1c00f
1c002718:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c00271c:	662060ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c002720:	16c14783          	lbu	a5,364(sp)
1c002724:	0ff7f793          	andi	a5,a5,255
1c002728:	ef99                	bnez	a5,1c002746 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x3b2>
1c00272a:	4689                	li	a3,2
1c00272c:	00204737          	lui	a4,0x204
1c002730:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c002734:	03c76783          	p.elw	a5,60(a4)
1c002738:	00d72223          	sw	a3,4(a4)
1c00273c:	16c14783          	lbu	a5,364(sp)
1c002740:	0ff7f793          	andi	a5,a5,255
1c002744:	d7f5                	beqz	a5,1c002730 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x39c>
1c002746:	1c00f937          	lui	s2,0x1c00f
1c00274a:	12c90913          	addi	s2,s2,300 # 1c00f12c <model_L2_Memory>
1c00274e:	00092583          	lw	a1,0(s2)
1c002752:	099c                	addi	a5,sp,208
1c002754:	4705                	li	a4,1
1c002756:	65400693          	li	a3,1620
1c00275a:	0002b637          	lui	a2,0x2b
1c00275e:	9f460613          	addi	a2,a2,-1548 # 2a9f4 <__L1Cl+0x1a9f4>
1c002762:	962e                	add	a2,a2,a1
1c002764:	51040593          	addi	a1,s0,1296
1c002768:	1c00f537          	lui	a0,0x1c00f
1c00276c:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c002770:	60e060ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c002774:	00092583          	lw	a1,0(s2)
1c002778:	0002a7b7          	lui	a5,0x2a
1c00277c:	3a078793          	addi	a5,a5,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c002780:	95be                	add	a1,a1,a5
1c002782:	10000637          	lui	a2,0x10000
1c002786:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c00278a:	00062883          	lw	a7,0(a2)
1c00278e:	30047573          	csrrci	a0,mstatus,8
1c002792:	002046b7          	lui	a3,0x204
1c002796:	4006a803          	lw	a6,1024(a3) # 204400 <__L2+0x184400>
1c00279a:	000307b7          	lui	a5,0x30
1c00279e:	6547e713          	ori	a4,a5,1620
1c0027a2:	c1374733          	p.bset	a4,a4,0,19
1c0027a6:	c1574733          	p.bset	a4,a4,0,21
1c0027aa:	00204337          	lui	t1,0x204
1c0027ae:	40e32023          	sw	a4,1024(t1) # 204400 <__L2+0x184400>
1c0027b2:	00204737          	lui	a4,0x204
1c0027b6:	41172023          	sw	a7,1024(a4) # 204400 <__L2+0x184400>
1c0027ba:	40b72023          	sw	a1,1024(a4)
1c0027be:	1b012823          	sw	a6,432(sp)
1c0027c2:	1c012023          	sw	zero,448(sp)
1c0027c6:	30051073          	csrw	mstatus,a0
1c0027ca:	4218                	lw	a4,0(a2)
1c0027cc:	6625                	lui	a2,0x9
1c0027ce:	61860613          	addi	a2,a2,1560 # 9618 <__rt_stack_size+0x8e18>
1c0027d2:	9732                	add	a4,a4,a2
1c0027d4:	30047673          	csrrci	a2,mstatus,8
1c0027d8:	4006a683          	lw	a3,1024(a3)
1c0027dc:	0097e793          	ori	a5,a5,9
1c0027e0:	c137c7b3          	p.bset	a5,a5,0,19
1c0027e4:	c157c7b3          	p.bset	a5,a5,0,21
1c0027e8:	002045b7          	lui	a1,0x204
1c0027ec:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c0027f0:	002047b7          	lui	a5,0x204
1c0027f4:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c0027f8:	4097a023          	sw	s1,1024(a5)
1c0027fc:	18d12823          	sw	a3,400(sp)
1c002800:	1a012023          	sw	zero,416(sp)
1c002804:	30061073          	csrw	mstatus,a2
1c002808:	1a012783          	lw	a5,416(sp)
1c00280c:	c395                	beqz	a5,1c002830 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x49c>
1c00280e:	1a812683          	lw	a3,424(sp)
1c002812:	02000713          	li	a4,32
1c002816:	002047b7          	lui	a5,0x204
1c00281a:	caa5                	beqz	a3,1c00288a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4f6>
1c00281c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c002820:	03c7e683          	p.elw	a3,60(a5)
1c002824:	00e7a223          	sw	a4,4(a5)
1c002828:	1a812683          	lw	a3,424(sp)
1c00282c:	fae5                	bnez	a3,1c00281c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x488>
1c00282e:	a8b1                	j	1c00288a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4f6>
1c002830:	30047673          	csrrci	a2,mstatus,8
1c002834:	002047b7          	lui	a5,0x204
1c002838:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00283c:	19012683          	lw	a3,400(sp)
1c002840:	40d7d7b3          	sra	a5,a5,a3
1c002844:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002848:	cb85                	beqz	a5,1c002878 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4e4>
1c00284a:	10000593          	li	a1,256
1c00284e:	00204737          	lui	a4,0x204
1c002852:	30061073          	csrw	mstatus,a2
1c002856:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c00285a:	03c76783          	p.elw	a5,60(a4)
1c00285e:	00b72223          	sw	a1,4(a4)
1c002862:	30047673          	csrrci	a2,mstatus,8
1c002866:	40472783          	lw	a5,1028(a4)
1c00286a:	19012683          	lw	a3,400(sp)
1c00286e:	40d7d7b3          	sra	a5,a5,a3
1c002872:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002876:	fff1                	bnez	a5,1c002852 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x4be>
1c002878:	4785                	li	a5,1
1c00287a:	00d796b3          	sll	a3,a5,a3
1c00287e:	002047b7          	lui	a5,0x204
1c002882:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c002886:	30061073          	csrw	mstatus,a2
1c00288a:	6785                	lui	a5,0x1
1c00288c:	d2878793          	addi	a5,a5,-728 # d28 <__rt_stack_size+0x528>
1c002890:	c83e                	sw	a5,16(sp)
1c002892:	65400713          	li	a4,1620
1c002896:	c03a                	sw	a4,0(sp)
1c002898:	51000793          	li	a5,1296
1c00289c:	c43e                	sw	a5,8(sp)
1c00289e:	d802                	sw	zero,48(sp)
1c0028a0:	78000613          	li	a2,1920
1c0028a4:	c202                	sw	zero,4(sp)
1c0028a6:	4a81                	li	s5,0
1c0028a8:	4b01                	li	s6,0
1c0028aa:	4c81                	li	s9,0
1c0028ac:	d602                	sw	zero,44(sp)
1c0028ae:	00204bb7          	lui	s7,0x204
1c0028b2:	10000c37          	lui	s8,0x10000
1c0028b6:	6805                	lui	a6,0x1
1c0028b8:	d6880813          	addi	a6,a6,-664 # d68 <__rt_stack_size+0x568>
1c0028bc:	dc42                	sw	a6,56(sp)
1c0028be:	200b8d93          	addi	s11,s7,512 # 204200 <__L2+0x184200>
1c0028c2:	8d6e                	mv	s10,s11
1c0028c4:	a38d                	j	1c002e26 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa92>
1c0028c6:	4501                	li	a0,0
1c0028c8:	ab85                	j	1c002e38 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xaa4>
1c0028ca:	300476f3          	csrrci	a3,mstatus,8
1c0028ce:	404ba783          	lw	a5,1028(s7)
1c0028d2:	1d012703          	lw	a4,464(sp)
1c0028d6:	40e7d7b3          	sra	a5,a5,a4
1c0028da:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0028de:	c795                	beqz	a5,1c00290a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x576>
1c0028e0:	10000593          	li	a1,256
1c0028e4:	30069073          	csrw	mstatus,a3
1c0028e8:	00bba423          	sw	a1,8(s7)
1c0028ec:	03cbe783          	p.elw	a5,60(s7)
1c0028f0:	00bba223          	sw	a1,4(s7)
1c0028f4:	300476f3          	csrrci	a3,mstatus,8
1c0028f8:	404ba783          	lw	a5,1028(s7)
1c0028fc:	1d012703          	lw	a4,464(sp)
1c002900:	40e7d7b3          	sra	a5,a5,a4
1c002904:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002908:	fff1                	bnez	a5,1c0028e4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x550>
1c00290a:	4785                	li	a5,1
1c00290c:	00e79733          	sll	a4,a5,a4
1c002910:	40eba223          	sw	a4,1028(s7)
1c002914:	30069073          	csrw	mstatus,a3
1c002918:	e135                	bnez	a0,1c00297c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x5e8>
1c00291a:	49e1                	li	s3,24
1c00291c:	56b2                	lw	a3,44(sp)
1c00291e:	0a16a963          	p.beqimm	a3,1,1c0029d0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x63c>
1c002922:	1009d9b3          	p.exthz	s3,s3
1c002926:	3ffff7b7          	lui	a5,0x3ffff
1c00292a:	60278793          	addi	a5,a5,1538 # 3ffff602 <__l2_end+0x23feff52>
1c00292e:	4742                	lw	a4,16(sp)
1c002930:	97ba                	add	a5,a5,a4
1c002932:	078a                	slli	a5,a5,0x2
1c002934:	ca3e                	sw	a5,20(sp)
1c002936:	57b2                	lw	a5,44(sp)
1c002938:	01f7d713          	srli	a4,a5,0x1f
1c00293c:	97ba                	add	a5,a5,a4
1c00293e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002942:	8f99                	sub	a5,a5,a4
1c002944:	0d800713          	li	a4,216
1c002948:	5862                	lw	a6,56(sp)
1c00294a:	42e78833          	p.mac	a6,a5,a4
1c00294e:	cc42                	sw	a6,24(sp)
1c002950:	4542                	lw	a0,16(sp)
1c002952:	02050513          	addi	a0,a0,32
1c002956:	ce2a                	sw	a0,28(sp)
1c002958:	4761                	li	a4,24
1c00295a:	55b2                	lw	a1,44(sp)
1c00295c:	0615ac63          	p.beqimm	a1,1,1c0029d4 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x640>
1c002960:	00271793          	slli	a5,a4,0x2
1c002964:	97ba                	add	a5,a5,a4
1c002966:	0792                	slli	a5,a5,0x4
1c002968:	da3e                	sw	a5,52(sp)
1c00296a:	d23e                	sw	a5,36(sp)
1c00296c:	4402                	lw	s0,0(sp)
1c00296e:	4692                	lw	a3,4(sp)
1c002970:	c636                	sw	a3,12(sp)
1c002972:	c232                	sw	a2,4(sp)
1c002974:	4901                	li	s2,0
1c002976:	0ff00493          	li	s1,255
1c00297a:	a4a5                	j	1c002be2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x84e>
1c00297c:	56f2                	lw	a3,60(sp)
1c00297e:	57c2                	lw	a5,48(sp)
1c002980:	00f68733          	add	a4,a3,a5
1c002984:	5832                	lw	a6,44(sp)
1c002986:	00180793          	addi	a5,a6,1
1c00298a:	01f7d693          	srli	a3,a5,0x1f
1c00298e:	97b6                	add	a5,a5,a3
1c002990:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002994:	8f95                	sub	a5,a5,a3
1c002996:	0d800693          	li	a3,216
1c00299a:	55e2                	lw	a1,56(sp)
1c00299c:	42d785b3          	p.mac	a1,a5,a3
1c0029a0:	01cc2783          	lw	a5,28(s8) # 1000001c <model_L1_Memory>
1c0029a4:	97ae                	add	a5,a5,a1
1c0029a6:	300476f3          	csrrci	a3,mstatus,8
1c0029aa:	400ba583          	lw	a1,1024(s7)
1c0029ae:	002b0837          	lui	a6,0x2b0
1c0029b2:	01056533          	or	a0,a0,a6
1c0029b6:	40aba023          	sw	a0,1024(s7)
1c0029ba:	40fba023          	sw	a5,1024(s7)
1c0029be:	40eba023          	sw	a4,1024(s7)
1c0029c2:	1cb12823          	sw	a1,464(sp)
1c0029c6:	1e012023          	sw	zero,480(sp)
1c0029ca:	30069073          	csrw	mstatus,a3
1c0029ce:	b7b1                	j	1c00291a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x586>
1c0029d0:	49a1                	li	s3,8
1c0029d2:	bf81                	j	1c002922 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x58e>
1c0029d4:	4721                	li	a4,8
1c0029d6:	b769                	j	1c002960 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x5cc>
1c0029d8:	5632                	lw	a2,44(sp)
1c0029da:	54162163          	p.beqimm	a2,1,1c002f1c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb88>
1c0029de:	77b5                	lui	a5,0xfffed
1c0029e0:	55078793          	addi	a5,a5,1360 # fffed550 <pulp__FC+0xfffed551>
1c0029e4:	46a2                	lw	a3,8(sp)
1c0029e6:	96be                	add	a3,a3,a5
1c0029e8:	c436                	sw	a3,8(sp)
1c0029ea:	ac89                	j	1c002c3c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8a8>
1c0029ec:	5732                	lw	a4,44(sp)
1c0029ee:	52172763          	p.beqimm	a4,1,1c002f1c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb88>
1c0029f2:	47a2                	lw	a5,8(sp)
1c0029f4:	51078793          	addi	a5,a5,1296
1c0029f8:	c43e                	sw	a5,8(sp)
1c0029fa:	a489                	j	1c002c3c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8a8>
1c0029fc:	c002                	sw	zero,0(sp)
1c0029fe:	ac81                	j	1c002c4e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8ba>
1c002a00:	01fb5713          	srli	a4,s6,0x1f
1c002a04:	00eb07b3          	add	a5,s6,a4
1c002a08:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002a0c:	8f99                	sub	a5,a5,a4
1c002a0e:	65400713          	li	a4,1620
1c002a12:	0002a637          	lui	a2,0x2a
1c002a16:	3a060613          	addi	a2,a2,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c002a1a:	42e78633          	p.mac	a2,a5,a4
1c002a1e:	1c00f7b7          	lui	a5,0x1c00f
1c002a22:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c002a26:	099c                	addi	a5,sp,208
1c002a28:	4705                	li	a4,1
1c002a2a:	4682                	lw	a3,0(sp)
1c002a2c:	962e                	add	a2,a2,a1
1c002a2e:	5522                	lw	a0,40(sp)
1c002a30:	4822                	lw	a6,8(sp)
1c002a32:	010505b3          	add	a1,a0,a6
1c002a36:	1c00f537          	lui	a0,0x1c00f
1c002a3a:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c002a3e:	340060ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c002a42:	a42d                	j	1c002c6c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8d8>
1c002a44:	300476f3          	csrrci	a3,mstatus,8
1c002a48:	404ba783          	lw	a5,1028(s7)
1c002a4c:	1b012703          	lw	a4,432(sp)
1c002a50:	40e7d7b3          	sra	a5,a5,a4
1c002a54:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002a58:	c795                	beqz	a5,1c002a84 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6f0>
1c002a5a:	10000613          	li	a2,256
1c002a5e:	30069073          	csrw	mstatus,a3
1c002a62:	00cba423          	sw	a2,8(s7)
1c002a66:	03cbe783          	p.elw	a5,60(s7)
1c002a6a:	00cba223          	sw	a2,4(s7)
1c002a6e:	300476f3          	csrrci	a3,mstatus,8
1c002a72:	404ba783          	lw	a5,1028(s7)
1c002a76:	1b012703          	lw	a4,432(sp)
1c002a7a:	40e7d7b3          	sra	a5,a5,a4
1c002a7e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002a82:	fff1                	bnez	a5,1c002a5e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6ca>
1c002a84:	4785                	li	a5,1
1c002a86:	00e79733          	sll	a4,a5,a4
1c002a8a:	40eba223          	sw	a4,1028(s7)
1c002a8e:	30069073          	csrw	mstatus,a3
1c002a92:	20041163          	bnez	s0,1c002c94 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x900>
1c002a96:	01cc0a13          	addi	s4,s8,28
1c002a9a:	000a2703          	lw	a4,0(s4)
1c002a9e:	01fb5693          	srli	a3,s6,0x1f
1c002aa2:	00db07b3          	add	a5,s6,a3
1c002aa6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002aaa:	8f95                	sub	a5,a5,a3
1c002aac:	65400693          	li	a3,1620
1c002ab0:	85ba                	mv	a1,a4
1c002ab2:	42d785b3          	p.mac	a1,a5,a3
1c002ab6:	c72e                	sw	a1,140(sp)
1c002ab8:	09311d23          	sh	s3,154(sp)
1c002abc:	4662                	lw	a2,24(sp)
1c002abe:	9732                	add	a4,a4,a2
1c002ac0:	d13a                	sw	a4,160(sp)
1c002ac2:	089ba223          	sw	s1,132(s7)
1c002ac6:	009da023          	sw	s1,0(s11)
1c002aca:	009d2623          	sw	s1,12(s10)
1c002ace:	1c0066b7          	lui	a3,0x1c006
1c002ad2:	38468693          	addi	a3,a3,900 # 1c006384 <KerParConv3x3Stride2_SQ8>
1c002ad6:	08dba023          	sw	a3,128(s7)
1c002ada:	0168                	addi	a0,sp,140
1c002adc:	08aba023          	sw	a0,128(s7)
1c002ae0:	0a5030ef          	jal	ra,1c006384 <KerParConv3x3Stride2_SQ8>
1c002ae4:	01cde783          	p.elw	a5,28(s11)
1c002ae8:	0b05                	addi	s6,s6,1
1c002aea:	07311c23          	sh	s3,120(sp)
1c002aee:	000a2783          	lw	a5,0(s4)
1c002af2:	4842                	lw	a6,16(sp)
1c002af4:	01078733          	add	a4,a5,a6
1c002af8:	c13a                	sw	a4,128(sp)
1c002afa:	4572                	lw	a0,28(sp)
1c002afc:	97aa                	add	a5,a5,a0
1c002afe:	c33e                	sw	a5,132(sp)
1c002b00:	089ba223          	sw	s1,132(s7)
1c002b04:	009d2023          	sw	s1,0(s10)
1c002b08:	009d2623          	sw	s1,12(s10)
1c002b0c:	1c0055b7          	lui	a1,0x1c005
1c002b10:	4c058593          	addi	a1,a1,1216 # 1c0054c0 <KerParReductIO_CC_SQ8>
1c002b14:	08bba023          	sw	a1,128(s7)
1c002b18:	1888                	addi	a0,sp,112
1c002b1a:	08aba023          	sw	a0,128(s7)
1c002b1e:	1a3020ef          	jal	ra,1c0054c0 <KerParReductIO_CC_SQ8>
1c002b22:	01cde783          	p.elw	a5,28(s11)
1c002b26:	05311823          	sh	s3,80(sp)
1c002b2a:	01fcd413          	srli	s0,s9,0x1f
1c002b2e:	008c87b3          	add	a5,s9,s0
1c002b32:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002b36:	8f81                	sub	a5,a5,s0
1c002b38:	00479413          	slli	s0,a5,0x4
1c002b3c:	8c1d                	sub	s0,s0,a5
1c002b3e:	041e                	slli	s0,s0,0x7
1c002b40:	6605                	lui	a2,0x1
1c002b42:	f1860793          	addi	a5,a2,-232 # f18 <__rt_stack_size+0x718>
1c002b46:	943e                	add	s0,s0,a5
1c002b48:	000a2783          	lw	a5,0(s4)
1c002b4c:	97a2                	add	a5,a5,s0
1c002b4e:	c6be                	sw	a5,76(sp)
1c002b50:	089ba223          	sw	s1,132(s7)
1c002b54:	009d2023          	sw	s1,0(s10)
1c002b58:	009d2623          	sw	s1,12(s10)
1c002b5c:	1c0077b7          	lui	a5,0x1c007
1c002b60:	f0478793          	addi	a5,a5,-252 # 1c006f04 <KerParPool2x2Stride2_ReLU_SQ8>
1c002b64:	08fba023          	sw	a5,128(s7)
1c002b68:	00a8                	addi	a0,sp,72
1c002b6a:	08aba023          	sw	a0,128(s7)
1c002b6e:	396040ef          	jal	ra,1c006f04 <KerParPool2x2Stride2_ReLU_SQ8>
1c002b72:	01cde783          	p.elw	a5,28(s11)
1c002b76:	46b2                	lw	a3,12(sp)
1c002b78:	20069863          	bnez	a3,1c002d88 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9f4>
1c002b7c:	01cc2783          	lw	a5,28(s8)
1c002b80:	943e                	add	s0,s0,a5
1c002b82:	30047773          	csrrci	a4,mstatus,8
1c002b86:	400ba683          	lw	a3,1024(s7)
1c002b8a:	4812                	lw	a6,4(sp)
1c002b8c:	100857b3          	p.exthz	a5,a6
1c002b90:	c517c7b3          	p.bset	a5,a5,2,17
1c002b94:	c157c7b3          	p.bset	a5,a5,0,21
1c002b98:	40fba023          	sw	a5,1024(s7)
1c002b9c:	408ba023          	sw	s0,1024(s7)
1c002ba0:	5502                	lw	a0,32(sp)
1c002ba2:	015507b3          	add	a5,a0,s5
1c002ba6:	40fba023          	sw	a5,1024(s7)
1c002baa:	12c007b7          	lui	a5,0x12c00
1c002bae:	05078793          	addi	a5,a5,80 # 12c00050 <__l1_end+0x2c0000c>
1c002bb2:	40fba023          	sw	a5,1024(s7)
1c002bb6:	16d12823          	sw	a3,368(sp)
1c002bba:	18012023          	sw	zero,384(sp)
1c002bbe:	30071073          	csrw	mstatus,a4
1c002bc2:	03b00793          	li	a5,59
1c002bc6:	22f90e63          	beq	s2,a5,1c002e02 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa6e>
1c002bca:	050a8a93          	addi	s5,s5,80
1c002bce:	0905                	addi	s2,s2,1
1c002bd0:	0c85                	addi	s9,s9,1
1c002bd2:	c642                	sw	a6,12(sp)
1c002bd4:	4402                	lw	s0,0(sp)
1c002bd6:	03c00793          	li	a5,60
1c002bda:	22f90263          	beq	s2,a5,1c002dfe <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa6a>
1c002bde:	5712                	lw	a4,36(sp)
1c002be0:	c23a                	sw	a4,4(sp)
1c002be2:	0d311223          	sh	s3,196(sp)
1c002be6:	01cc2783          	lw	a5,28(s8)
1c002bea:	4852                	lw	a6,20(sp)
1c002bec:	01078733          	add	a4,a5,a6
1c002bf0:	c5ba                	sw	a4,200(sp)
1c002bf2:	6725                	lui	a4,0x9
1c002bf4:	97ba                	add	a5,a5,a4
1c002bf6:	61d7c783          	lbu	a5,1565(a5)
1c002bfa:	0cf10623          	sb	a5,204(sp)
1c002bfe:	089ba223          	sw	s1,132(s7)
1c002c02:	009da023          	sw	s1,0(s11)
1c002c06:	009d2623          	sw	s1,12(s10)
1c002c0a:	1c005537          	lui	a0,0x1c005
1c002c0e:	56e50513          	addi	a0,a0,1390 # 1c00556e <KerParSetBiasB32_SQ8>
1c002c12:	08aba023          	sw	a0,128(s7)
1c002c16:	1968                	addi	a0,sp,188
1c002c18:	08aba023          	sw	a0,128(s7)
1c002c1c:	153020ef          	jal	ra,1c00556e <KerParSetBiasB32_SQ8>
1c002c20:	01cde783          	p.elw	a5,28(s11)
1c002c24:	03b00793          	li	a5,59
1c002c28:	dcf902e3          	beq	s2,a5,1c0029ec <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x658>
1c002c2c:	03a00793          	li	a5,58
1c002c30:	daf904e3          	beq	s2,a5,1c0029d8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x644>
1c002c34:	45a2                	lw	a1,8(sp)
1c002c36:	51058593          	addi	a1,a1,1296
1c002c3a:	c42e                	sw	a1,8(sp)
1c002c3c:	16c14783          	lbu	a5,364(sp)
1c002c40:	0ff7f793          	andi	a5,a5,255
1c002c44:	65400813          	li	a6,1620
1c002c48:	c042                	sw	a6,0(sp)
1c002c4a:	da079be3          	bnez	a5,1c002a00 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x66c>
1c002c4e:	4709                	li	a4,2
1c002c50:	00eba423          	sw	a4,8(s7)
1c002c54:	03cbe783          	p.elw	a5,60(s7)
1c002c58:	00eba223          	sw	a4,4(s7)
1c002c5c:	16c14783          	lbu	a5,364(sp)
1c002c60:	0ff7f793          	andi	a5,a5,255
1c002c64:	d7f5                	beqz	a5,1c002c50 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8bc>
1c002c66:	4802                	lw	a6,0(sp)
1c002c68:	d8081ce3          	bnez	a6,1c002a00 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x66c>
1c002c6c:	1c012783          	lw	a5,448(sp)
1c002c70:	dc078ae3          	beqz	a5,1c002a44 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6b0>
1c002c74:	1c812703          	lw	a4,456(sp)
1c002c78:	02000793          	li	a5,32
1c002c7c:	e0070be3          	beqz	a4,1c002a92 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fe>
1c002c80:	00fba423          	sw	a5,8(s7)
1c002c84:	03cbe703          	p.elw	a4,60(s7)
1c002c88:	00fba223          	sw	a5,4(s7)
1c002c8c:	1c812703          	lw	a4,456(sp)
1c002c90:	fb65                	bnez	a4,1c002c80 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8ec>
1c002c92:	b501                	j	1c002a92 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x6fe>
1c002c94:	001b0793          	addi	a5,s6,1
1c002c98:	01f7d713          	srli	a4,a5,0x1f
1c002c9c:	97ba                	add	a5,a5,a4
1c002c9e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002ca2:	8f99                	sub	a5,a5,a4
1c002ca4:	65400713          	li	a4,1620
1c002ca8:	02e787b3          	mul	a5,a5,a4
1c002cac:	1c00f737          	lui	a4,0x1c00f
1c002cb0:	12c72683          	lw	a3,300(a4) # 1c00f12c <model_L2_Memory>
1c002cb4:	96be                	add	a3,a3,a5
1c002cb6:	0002a737          	lui	a4,0x2a
1c002cba:	3a070713          	addi	a4,a4,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c002cbe:	9736                	add	a4,a4,a3
1c002cc0:	01cc2603          	lw	a2,28(s8)
1c002cc4:	97b2                	add	a5,a5,a2
1c002cc6:	30047673          	csrrci	a2,mstatus,8
1c002cca:	01041513          	slli	a0,s0,0x10
1c002cce:	02054963          	bltz	a0,1c002d00 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x96c>
1c002cd2:	400ba583          	lw	a1,1024(s7)
1c002cd6:	000306b7          	lui	a3,0x30
1c002cda:	de0426b3          	p.insert	a3,s0,15,0
1c002cde:	c136c6b3          	p.bset	a3,a3,0,19
1c002ce2:	c156c6b3          	p.bset	a3,a3,0,21
1c002ce6:	40dba023          	sw	a3,1024(s7)
1c002cea:	40fba023          	sw	a5,1024(s7)
1c002cee:	40eba023          	sw	a4,1024(s7)
1c002cf2:	1ab12823          	sw	a1,432(sp)
1c002cf6:	1c012023          	sw	zero,448(sp)
1c002cfa:	30061073          	csrw	mstatus,a2
1c002cfe:	bb61                	j	1c002a96 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x702>
1c002d00:	65a1                	lui	a1,0x8
1c002d02:	00330537          	lui	a0,0x330
1c002d06:	1aa12a23          	sw	a0,436(sp)
1c002d0a:	1cf12223          	sw	a5,452(sp)
1c002d0e:	1ce12423          	sw	a4,456(sp)
1c002d12:	1a812c23          	sw	s0,440(sp)
1c002d16:	1ab12e23          	sw	a1,444(sp)
1c002d1a:	1cb12023          	sw	a1,448(sp)
1c002d1e:	55fd                	li	a1,-1
1c002d20:	1ab12823          	sw	a1,432(sp)
1c002d24:	1c012623          	sw	zero,460(sp)
1c002d28:	01402583          	lw	a1,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002d2c:	c989                	beqz	a1,1c002d3e <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9aa>
1c002d2e:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002d32:	1b18                	addi	a4,sp,432
1c002d34:	cfd8                	sw	a4,28(a5)
1c002d36:	1b1c                	addi	a5,sp,432
1c002d38:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c002d3c:	bf7d                	j	1c002cfa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x966>
1c002d3e:	65a1                	lui	a1,0x8
1c002d40:	04b455b3          	p.minu	a1,s0,a1
1c002d44:	00b78533          	add	a0,a5,a1
1c002d48:	1ca12223          	sw	a0,452(sp)
1c002d4c:	00032537          	lui	a0,0x32
1c002d50:	3a050513          	addi	a0,a0,928 # 323a0 <__L1Cl+0x223a0>
1c002d54:	96aa                	add	a3,a3,a0
1c002d56:	1cd12423          	sw	a3,456(sp)
1c002d5a:	40b405b3          	sub	a1,s0,a1
1c002d5e:	1ab12c23          	sw	a1,440(sp)
1c002d62:	400ba683          	lw	a3,1024(s7)
1c002d66:	1ad12823          	sw	a3,432(sp)
1c002d6a:	003386b7          	lui	a3,0x338
1c002d6e:	40dba023          	sw	a3,1024(s7)
1c002d72:	40fba023          	sw	a5,1024(s7)
1c002d76:	40eba023          	sw	a4,1024(s7)
1c002d7a:	1c012783          	lw	a5,448(sp)
1c002d7e:	dfc5                	beqz	a5,1c002d36 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9a2>
1c002d80:	1b1c                	addi	a5,sp,432
1c002d82:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c002d86:	bf45                	j	1c002d36 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x9a2>
1c002d88:	18012783          	lw	a5,384(sp)
1c002d8c:	c38d                	beqz	a5,1c002dae <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa1a>
1c002d8e:	18812703          	lw	a4,392(sp)
1c002d92:	02000793          	li	a5,32
1c002d96:	de0703e3          	beqz	a4,1c002b7c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e8>
1c002d9a:	00fba423          	sw	a5,8(s7)
1c002d9e:	03cbe703          	p.elw	a4,60(s7)
1c002da2:	00fba223          	sw	a5,4(s7)
1c002da6:	18812703          	lw	a4,392(sp)
1c002daa:	fb65                	bnez	a4,1c002d9a <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa06>
1c002dac:	bbc1                	j	1c002b7c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e8>
1c002dae:	300476f3          	csrrci	a3,mstatus,8
1c002db2:	404ba783          	lw	a5,1028(s7)
1c002db6:	17012703          	lw	a4,368(sp)
1c002dba:	40e7d7b3          	sra	a5,a5,a4
1c002dbe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002dc2:	c795                	beqz	a5,1c002dee <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa5a>
1c002dc4:	10000613          	li	a2,256
1c002dc8:	30069073          	csrw	mstatus,a3
1c002dcc:	00cba423          	sw	a2,8(s7)
1c002dd0:	03cbe783          	p.elw	a5,60(s7)
1c002dd4:	00cba223          	sw	a2,4(s7)
1c002dd8:	300476f3          	csrrci	a3,mstatus,8
1c002ddc:	404ba783          	lw	a5,1028(s7)
1c002de0:	17012703          	lw	a4,368(sp)
1c002de4:	40e7d7b3          	sra	a5,a5,a4
1c002de8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002dec:	fff1                	bnez	a5,1c002dc8 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa34>
1c002dee:	4785                	li	a5,1
1c002df0:	00e79733          	sll	a4,a5,a4
1c002df4:	40eba223          	sw	a4,1028(s7)
1c002df8:	30069073          	csrw	mstatus,a3
1c002dfc:	b341                	j	1c002b7c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x7e8>
1c002dfe:	5652                	lw	a2,52(sp)
1c002e00:	a819                	j	1c002e16 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa82>
1c002e02:	55b2                	lw	a1,44(sp)
1c002e04:	1215a463          	p.beqimm	a1,1,1c002f2c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb98>
1c002e08:	67ed                	lui	a5,0x1b
1c002e0a:	f9078793          	addi	a5,a5,-112 # 1af90 <__L1Cl+0xaf90>
1c002e0e:	9abe                	add	s5,s5,a5
1c002e10:	28000613          	li	a2,640
1c002e14:	0c85                	addi	s9,s9,1
1c002e16:	56b2                	lw	a3,44(sp)
1c002e18:	0685                	addi	a3,a3,1
1c002e1a:	d636                	sw	a3,44(sp)
1c002e1c:	4742                	lw	a4,16(sp)
1c002e1e:	0761                	addi	a4,a4,24
1c002e20:	c83a                	sw	a4,16(sp)
1c002e22:	0226af63          	p.beqimm	a3,2,1c002e60 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xacc>
1c002e26:	5532                	lw	a0,44(sp)
1c002e28:	a8152fe3          	p.beqimm	a0,1,1c0028c6 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x532>
1c002e2c:	55c2                	lw	a1,48(sp)
1c002e2e:	0d858593          	addi	a1,a1,216 # 80d8 <__rt_stack_size+0x78d8>
1c002e32:	d82e                	sw	a1,48(sp)
1c002e34:	04800513          	li	a0,72
1c002e38:	1e012783          	lw	a5,480(sp)
1c002e3c:	a80787e3          	beqz	a5,1c0028ca <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x536>
1c002e40:	1e812703          	lw	a4,488(sp)
1c002e44:	02000793          	li	a5,32
1c002e48:	ac0708e3          	beqz	a4,1c002918 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x584>
1c002e4c:	00fba423          	sw	a5,8(s7)
1c002e50:	03cbe703          	p.elw	a4,60(s7)
1c002e54:	00fba223          	sw	a5,4(s7)
1c002e58:	1e812703          	lw	a4,488(sp)
1c002e5c:	fb65                	bnez	a4,1c002e4c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xab8>
1c002e5e:	bc6d                	j	1c002918 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x584>
1c002e60:	18012783          	lw	a5,384(sp)
1c002e64:	c395                	beqz	a5,1c002e88 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xaf4>
1c002e66:	18812683          	lw	a3,392(sp)
1c002e6a:	02000713          	li	a4,32
1c002e6e:	002047b7          	lui	a5,0x204
1c002e72:	caa5                	beqz	a3,1c002ee2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb4e>
1c002e74:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c002e78:	03c7e683          	p.elw	a3,60(a5)
1c002e7c:	00e7a223          	sw	a4,4(a5)
1c002e80:	18812683          	lw	a3,392(sp)
1c002e84:	fae5                	bnez	a3,1c002e74 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xae0>
1c002e86:	a8b1                	j	1c002ee2 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb4e>
1c002e88:	30047673          	csrrci	a2,mstatus,8
1c002e8c:	002047b7          	lui	a5,0x204
1c002e90:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c002e94:	17012683          	lw	a3,368(sp)
1c002e98:	40d7d7b3          	sra	a5,a5,a3
1c002e9c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002ea0:	cb85                	beqz	a5,1c002ed0 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb3c>
1c002ea2:	10000593          	li	a1,256
1c002ea6:	00204737          	lui	a4,0x204
1c002eaa:	30061073          	csrw	mstatus,a2
1c002eae:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c002eb2:	03c76783          	p.elw	a5,60(a4)
1c002eb6:	00b72223          	sw	a1,4(a4)
1c002eba:	30047673          	csrrci	a2,mstatus,8
1c002ebe:	40472783          	lw	a5,1028(a4)
1c002ec2:	17012683          	lw	a3,368(sp)
1c002ec6:	40d7d7b3          	sra	a5,a5,a3
1c002eca:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002ece:	fff1                	bnez	a5,1c002eaa <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xb16>
1c002ed0:	4785                	li	a5,1
1c002ed2:	00d796b3          	sll	a3,a5,a3
1c002ed6:	002047b7          	lui	a5,0x204
1c002eda:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c002ede:	30061073          	csrw	mstatus,a2
1c002ee2:	28c12083          	lw	ra,652(sp)
1c002ee6:	28812403          	lw	s0,648(sp)
1c002eea:	28412483          	lw	s1,644(sp)
1c002eee:	28012903          	lw	s2,640(sp)
1c002ef2:	27c12983          	lw	s3,636(sp)
1c002ef6:	27812a03          	lw	s4,632(sp)
1c002efa:	27412a83          	lw	s5,628(sp)
1c002efe:	27012b03          	lw	s6,624(sp)
1c002f02:	26c12b83          	lw	s7,620(sp)
1c002f06:	26812c03          	lw	s8,616(sp)
1c002f0a:	26412c83          	lw	s9,612(sp)
1c002f0e:	26012d03          	lw	s10,608(sp)
1c002f12:	25c12d83          	lw	s11,604(sp)
1c002f16:	29010113          	addi	sp,sp,656
1c002f1a:	8082                	ret
1c002f1c:	16c14783          	lbu	a5,364(sp)
1c002f20:	0ff7f793          	andi	a5,a5,255
1c002f24:	ac078ce3          	beqz	a5,1c0029fc <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x668>
1c002f28:	c002                	sw	zero,0(sp)
1c002f2a:	b389                	j	1c002c6c <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0x8d8>
1c002f2c:	4601                	li	a2,0
1c002f2e:	b5dd                	j	1c002e14 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu+0xa80>

1c002f30 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu>:
1c002f30:	d6010113          	addi	sp,sp,-672
1c002f34:	28112e23          	sw	ra,668(sp)
1c002f38:	28812c23          	sw	s0,664(sp)
1c002f3c:	28912a23          	sw	s1,660(sp)
1c002f40:	29212823          	sw	s2,656(sp)
1c002f44:	29312623          	sw	s3,652(sp)
1c002f48:	29412423          	sw	s4,648(sp)
1c002f4c:	29512223          	sw	s5,644(sp)
1c002f50:	29612023          	sw	s6,640(sp)
1c002f54:	27712e23          	sw	s7,636(sp)
1c002f58:	27812c23          	sw	s8,632(sp)
1c002f5c:	27912a23          	sw	s9,628(sp)
1c002f60:	27a12823          	sw	s10,624(sp)
1c002f64:	27b12623          	sw	s11,620(sp)
1c002f68:	dc36                	sw	a3,56(sp)
1c002f6a:	100006b7          	lui	a3,0x10000
1c002f6e:	01c6a303          	lw	t1,28(a3) # 1000001c <model_L1_Memory>
1c002f72:	6699                	lui	a3,0x6
1c002f74:	74068693          	addi	a3,a3,1856 # 6740 <__rt_stack_size+0x5f40>
1c002f78:	969a                	add	a3,a3,t1
1c002f7a:	c7b6                	sw	a3,204(sp)
1c002f7c:	04e00f13          	li	t5,78
1c002f80:	0de11823          	sh	t5,208(sp)
1c002f84:	4e89                	li	t4,2
1c002f86:	0dd11923          	sh	t4,210(sp)
1c002f8a:	02000e13          	li	t3,32
1c002f8e:	0dc11a23          	sh	t3,212(sp)
1c002f92:	05000893          	li	a7,80
1c002f96:	0b111023          	sh	a7,160(sp)
1c002f9a:	0b111123          	sh	a7,162(sp)
1c002f9e:	4891                	li	a7,4
1c002fa0:	0b111223          	sh	a7,164(sp)
1c002fa4:	0b111323          	sh	a7,166(sp)
1c002fa8:	48a1                	li	a7,8
1c002faa:	0b111423          	sh	a7,168(sp)
1c002fae:	0bc11523          	sh	t3,170(sp)
1c002fb2:	0bc11623          	sh	t3,172(sp)
1c002fb6:	dd36                	sw	a3,184(sp)
1c002fb8:	000078d7          	pv.add.sci.b	a7,zero,0
1c002fbc:	df46                	sw	a7,188(sp)
1c002fbe:	c136                	sw	a3,128(sp)
1c002fc0:	c336                	sw	a3,132(sp)
1c002fc2:	09c11423          	sh	t3,136(sp)
1c002fc6:	09e11523          	sh	t5,138(sp)
1c002fca:	09d11623          	sh	t4,140(sp)
1c002fce:	68ad                	lui	a7,0xb
1c002fd0:	54088893          	addi	a7,a7,1344 # b540 <__rt_stack_size+0xad40>
1c002fd4:	989a                	add	a7,a7,t1
1c002fd6:	cd46                	sw	a7,152(sp)
1c002fd8:	ccb6                	sw	a3,88(sp)
1c002fda:	07e11123          	sh	t5,98(sp)
1c002fde:	07e11223          	sh	t5,100(sp)
1c002fe2:	07d11323          	sh	t4,102(sp)
1c002fe6:	07d11423          	sh	t4,104(sp)
1c002fea:	07c11023          	sh	t3,96(sp)
1c002fee:	00007f57          	pv.add.sci.b	t5,zero,0
1c002ff2:	dcfa                	sw	t5,120(sp)
1c002ff4:	4685                	li	a3,1
1c002ff6:	06d10523          	sb	a3,106(sp)
1c002ffa:	06010aa3          	sb	zero,117(sp)
1c002ffe:	dec6                	sw	a7,124(sp)
1c003000:	30047e73          	csrrci	t3,mstatus,8
1c003004:	002048b7          	lui	a7,0x204
1c003008:	4008a883          	lw	a7,1024(a7) # 204400 <__L2+0x184400>
1c00300c:	000b06b7          	lui	a3,0xb0
1c003010:	10068693          	addi	a3,a3,256 # b0100 <__L2+0x30100>
1c003014:	c156c6b3          	p.bset	a3,a3,0,21
1c003018:	00204eb7          	lui	t4,0x204
1c00301c:	40dea023          	sw	a3,1024(t4) # 204400 <__L2+0x184400>
1c003020:	6685                	lui	a3,0x1
1c003022:	40068693          	addi	a3,a3,1024 # 1400 <__rt_stack_size+0xc00>
1c003026:	9336                	add	t1,t1,a3
1c003028:	002046b7          	lui	a3,0x204
1c00302c:	4066a023          	sw	t1,1024(a3) # 204400 <__L2+0x184400>
1c003030:	40c6a023          	sw	a2,1024(a3)
1c003034:	25112023          	sw	a7,576(sp)
1c003038:	24012823          	sw	zero,592(sp)
1c00303c:	300e1073          	csrw	mstatus,t3
1c003040:	25012683          	lw	a3,592(sp)
1c003044:	c685                	beqz	a3,1c00306c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x13c>
1c003046:	25812883          	lw	a7,600(sp)
1c00304a:	02000613          	li	a2,32
1c00304e:	002046b7          	lui	a3,0x204
1c003052:	06088a63          	beqz	a7,1c0030c6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x196>
1c003056:	00c6a423          	sw	a2,8(a3) # 204008 <__L2+0x184008>
1c00305a:	03c6e883          	p.elw	a7,60(a3)
1c00305e:	00c6a223          	sw	a2,4(a3)
1c003062:	25812883          	lw	a7,600(sp)
1c003066:	fe0898e3          	bnez	a7,1c003056 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x126>
1c00306a:	a8b1                	j	1c0030c6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x196>
1c00306c:	30047373          	csrrci	t1,mstatus,8
1c003070:	002046b7          	lui	a3,0x204
1c003074:	4046a683          	lw	a3,1028(a3) # 204404 <__L2+0x184404>
1c003078:	24012883          	lw	a7,576(sp)
1c00307c:	4116d6b3          	sra	a3,a3,a7
1c003080:	fc16b6b3          	p.bclr	a3,a3,30,1
1c003084:	ca85                	beqz	a3,1c0030b4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x184>
1c003086:	10000e13          	li	t3,256
1c00308a:	00204637          	lui	a2,0x204
1c00308e:	30031073          	csrw	mstatus,t1
1c003092:	01c62423          	sw	t3,8(a2) # 204008 <__L2+0x184008>
1c003096:	03c66683          	p.elw	a3,60(a2)
1c00309a:	01c62223          	sw	t3,4(a2)
1c00309e:	30047373          	csrrci	t1,mstatus,8
1c0030a2:	40462683          	lw	a3,1028(a2)
1c0030a6:	24012883          	lw	a7,576(sp)
1c0030aa:	4116d6b3          	sra	a3,a3,a7
1c0030ae:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0030b2:	fef1                	bnez	a3,1c00308e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x15e>
1c0030b4:	4685                	li	a3,1
1c0030b6:	011698b3          	sll	a7,a3,a7
1c0030ba:	002046b7          	lui	a3,0x204
1c0030be:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
1c0030c2:	30031073          	csrw	mstatus,t1
1c0030c6:	100006b7          	lui	a3,0x10000
1c0030ca:	01c6a883          	lw	a7,28(a3) # 1000001c <model_L1_Memory>
1c0030ce:	6685                	lui	a3,0x1
1c0030d0:	50068693          	addi	a3,a3,1280 # 1500 <__rt_stack_size+0xd00>
1c0030d4:	98b6                	add	a7,a7,a3
1c0030d6:	30047373          	csrrci	t1,mstatus,8
1c0030da:	00204637          	lui	a2,0x204
1c0030de:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
1c0030e2:	000b06b7          	lui	a3,0xb0
1c0030e6:	04068693          	addi	a3,a3,64 # b0040 <__L2+0x30040>
1c0030ea:	c156c6b3          	p.bset	a3,a3,0,21
1c0030ee:	00204e37          	lui	t3,0x204
1c0030f2:	40de2023          	sw	a3,1024(t3) # 204400 <__L2+0x184400>
1c0030f6:	002046b7          	lui	a3,0x204
1c0030fa:	4116a023          	sw	a7,1024(a3) # 204400 <__L2+0x184400>
1c0030fe:	40e6a023          	sw	a4,1024(a3)
1c003102:	22c12023          	sw	a2,544(sp)
1c003106:	22012823          	sw	zero,560(sp)
1c00310a:	30031073          	csrw	mstatus,t1
1c00310e:	23012703          	lw	a4,560(sp)
1c003112:	c315                	beqz	a4,1c003136 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x206>
1c003114:	23812603          	lw	a2,568(sp)
1c003118:	02000693          	li	a3,32
1c00311c:	00204737          	lui	a4,0x204
1c003120:	ca25                	beqz	a2,1c003190 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x260>
1c003122:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003126:	03c76603          	p.elw	a2,60(a4)
1c00312a:	00d72223          	sw	a3,4(a4)
1c00312e:	23812603          	lw	a2,568(sp)
1c003132:	fa65                	bnez	a2,1c003122 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x1f2>
1c003134:	a8b1                	j	1c003190 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x260>
1c003136:	300478f3          	csrrci	a7,mstatus,8
1c00313a:	00204737          	lui	a4,0x204
1c00313e:	40472703          	lw	a4,1028(a4) # 204404 <__L2+0x184404>
1c003142:	22012603          	lw	a2,544(sp)
1c003146:	40c75733          	sra	a4,a4,a2
1c00314a:	fc173733          	p.bclr	a4,a4,30,1
1c00314e:	cb05                	beqz	a4,1c00317e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x24e>
1c003150:	10000313          	li	t1,256
1c003154:	002046b7          	lui	a3,0x204
1c003158:	30089073          	csrw	mstatus,a7
1c00315c:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
1c003160:	03c6e703          	p.elw	a4,60(a3)
1c003164:	0066a223          	sw	t1,4(a3)
1c003168:	300478f3          	csrrci	a7,mstatus,8
1c00316c:	4046a703          	lw	a4,1028(a3)
1c003170:	22012603          	lw	a2,544(sp)
1c003174:	40c75733          	sra	a4,a4,a2
1c003178:	fc173733          	p.bclr	a4,a4,30,1
1c00317c:	ff71                	bnez	a4,1c003158 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x228>
1c00317e:	4705                	li	a4,1
1c003180:	00c71633          	sll	a2,a4,a2
1c003184:	00204737          	lui	a4,0x204
1c003188:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
1c00318c:	30089073          	csrw	mstatus,a7
1c003190:	10000737          	lui	a4,0x10000
1c003194:	01c72603          	lw	a2,28(a4) # 1000001c <model_L1_Memory>
1c003198:	6705                	lui	a4,0x1
1c00319a:	54070713          	addi	a4,a4,1344 # 1540 <__rt_stack_size+0xd40>
1c00319e:	963a                	add	a2,a2,a4
1c0031a0:	300478f3          	csrrci	a7,mstatus,8
1c0031a4:	002046b7          	lui	a3,0x204
1c0031a8:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c0031ac:	000b0737          	lui	a4,0xb0
1c0031b0:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
1c0031b4:	c1574733          	p.bset	a4,a4,0,21
1c0031b8:	00204337          	lui	t1,0x204
1c0031bc:	40e32023          	sw	a4,1024(t1) # 204400 <__L2+0x184400>
1c0031c0:	00204737          	lui	a4,0x204
1c0031c4:	40c72023          	sw	a2,1024(a4) # 204400 <__L2+0x184400>
1c0031c8:	40f72023          	sw	a5,1024(a4)
1c0031cc:	20d12023          	sw	a3,512(sp)
1c0031d0:	20012823          	sw	zero,528(sp)
1c0031d4:	30089073          	csrw	mstatus,a7
1c0031d8:	21012783          	lw	a5,528(sp)
1c0031dc:	c395                	beqz	a5,1c003200 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2d0>
1c0031de:	21812683          	lw	a3,536(sp)
1c0031e2:	02000713          	li	a4,32
1c0031e6:	002047b7          	lui	a5,0x204
1c0031ea:	caa5                	beqz	a3,1c00325a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x32a>
1c0031ec:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0031f0:	03c7e683          	p.elw	a3,60(a5)
1c0031f4:	00e7a223          	sw	a4,4(a5)
1c0031f8:	21812683          	lw	a3,536(sp)
1c0031fc:	fae5                	bnez	a3,1c0031ec <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2bc>
1c0031fe:	a8b1                	j	1c00325a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x32a>
1c003200:	30047673          	csrrci	a2,mstatus,8
1c003204:	002047b7          	lui	a5,0x204
1c003208:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00320c:	20012683          	lw	a3,512(sp)
1c003210:	40d7d7b3          	sra	a5,a5,a3
1c003214:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003218:	cb85                	beqz	a5,1c003248 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x318>
1c00321a:	10000893          	li	a7,256
1c00321e:	00204737          	lui	a4,0x204
1c003222:	30061073          	csrw	mstatus,a2
1c003226:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
1c00322a:	03c76783          	p.elw	a5,60(a4)
1c00322e:	01172223          	sw	a7,4(a4)
1c003232:	30047673          	csrrci	a2,mstatus,8
1c003236:	40472783          	lw	a5,1028(a4)
1c00323a:	20012683          	lw	a3,512(sp)
1c00323e:	40d7d7b3          	sra	a5,a5,a3
1c003242:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003246:	fff1                	bnez	a5,1c003222 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2f2>
1c003248:	4785                	li	a5,1
1c00324a:	00d796b3          	sll	a3,a5,a3
1c00324e:	002047b7          	lui	a5,0x204
1c003252:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c003256:	30061073          	csrw	mstatus,a2
1c00325a:	c6ae                	sw	a1,76(sp)
1c00325c:	10000637          	lui	a2,0x10000
1c003260:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c003264:	00062303          	lw	t1,0(a2)
1c003268:	6885                	lui	a7,0x1
1c00326a:	58088793          	addi	a5,a7,1408 # 1580 <__rt_stack_size+0xd80>
1c00326e:	933e                	add	t1,t1,a5
1c003270:	30047e73          	csrrci	t3,mstatus,8
1c003274:	002046b7          	lui	a3,0x204
1c003278:	4006ae83          	lw	t4,1024(a3) # 204400 <__L2+0x184400>
1c00327c:	000307b7          	lui	a5,0x30
1c003280:	6709                	lui	a4,0x2
1c003282:	40070713          	addi	a4,a4,1024 # 2400 <__rt_stack_size+0x1c00>
1c003286:	8f3e                	mv	t5,a5
1c003288:	de072f33          	p.insert	t5,a4,15,0
1c00328c:	c13f4733          	p.bset	a4,t5,0,19
1c003290:	c1574733          	p.bset	a4,a4,0,21
1c003294:	00204f37          	lui	t5,0x204
1c003298:	40ef2023          	sw	a4,1024(t5) # 204400 <__L2+0x184400>
1c00329c:	00204737          	lui	a4,0x204
1c0032a0:	40672023          	sw	t1,1024(a4) # 204400 <__L2+0x184400>
1c0032a4:	40b72023          	sw	a1,1024(a4)
1c0032a8:	1fd12023          	sw	t4,480(sp)
1c0032ac:	1e012823          	sw	zero,496(sp)
1c0032b0:	300e1073          	csrw	mstatus,t3
1c0032b4:	ca2a                	sw	a0,20(sp)
1c0032b6:	00062e03          	lw	t3,0(a2)
1c0032ba:	300475f3          	csrrci	a1,mstatus,8
1c0032be:	4006a303          	lw	t1,1024(a3)
1c0032c2:	a0088893          	addi	a7,a7,-1536
1c0032c6:	00070737          	lui	a4,0x70
1c0032ca:	de08a733          	p.insert	a4,a7,15,0
1c0032ce:	c1374733          	p.bset	a4,a4,0,19
1c0032d2:	c1574733          	p.bset	a4,a4,0,21
1c0032d6:	002048b7          	lui	a7,0x204
1c0032da:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
1c0032de:	00204737          	lui	a4,0x204
1c0032e2:	41c72023          	sw	t3,1024(a4) # 204400 <__L2+0x184400>
1c0032e6:	40a72023          	sw	a0,1024(a4)
1c0032ea:	12c00737          	lui	a4,0x12c00
1c0032ee:	14070713          	addi	a4,a4,320 # 12c00140 <__l1_end+0x2c000fc>
1c0032f2:	00204537          	lui	a0,0x204
1c0032f6:	40e52023          	sw	a4,1024(a0) # 204400 <__L2+0x184400>
1c0032fa:	1c612023          	sw	t1,448(sp)
1c0032fe:	1c012823          	sw	zero,464(sp)
1c003302:	30059073          	csrw	mstatus,a1
1c003306:	4218                	lw	a4,0(a2)
1c003308:	662d                	lui	a2,0xb
1c00330a:	54060613          	addi	a2,a2,1344 # b540 <__rt_stack_size+0xad40>
1c00330e:	9732                	add	a4,a4,a2
1c003310:	30047673          	csrrci	a2,mstatus,8
1c003314:	4006a683          	lw	a3,1024(a3)
1c003318:	0097e793          	ori	a5,a5,9
1c00331c:	c137c7b3          	p.bset	a5,a5,0,19
1c003320:	c157c7b3          	p.bset	a5,a5,0,21
1c003324:	002045b7          	lui	a1,0x204
1c003328:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c00332c:	002047b7          	lui	a5,0x204
1c003330:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c003334:	4107a023          	sw	a6,1024(a5)
1c003338:	1ad12023          	sw	a3,416(sp)
1c00333c:	1a012823          	sw	zero,432(sp)
1c003340:	30061073          	csrw	mstatus,a2
1c003344:	1b012783          	lw	a5,432(sp)
1c003348:	c395                	beqz	a5,1c00336c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x43c>
1c00334a:	1b812683          	lw	a3,440(sp)
1c00334e:	02000713          	li	a4,32
1c003352:	002047b7          	lui	a5,0x204
1c003356:	caa5                	beqz	a3,1c0033c6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x496>
1c003358:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00335c:	03c7e683          	p.elw	a3,60(a5)
1c003360:	00e7a223          	sw	a4,4(a5)
1c003364:	1b812683          	lw	a3,440(sp)
1c003368:	fae5                	bnez	a3,1c003358 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x428>
1c00336a:	a8b1                	j	1c0033c6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x496>
1c00336c:	30047673          	csrrci	a2,mstatus,8
1c003370:	002047b7          	lui	a5,0x204
1c003374:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003378:	1a012683          	lw	a3,416(sp)
1c00337c:	40d7d7b3          	sra	a5,a5,a3
1c003380:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003384:	cb85                	beqz	a5,1c0033b4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x484>
1c003386:	10000593          	li	a1,256
1c00338a:	00204737          	lui	a4,0x204
1c00338e:	30061073          	csrw	mstatus,a2
1c003392:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c003396:	03c76783          	p.elw	a5,60(a4)
1c00339a:	00b72223          	sw	a1,4(a4)
1c00339e:	30047673          	csrrci	a2,mstatus,8
1c0033a2:	40472783          	lw	a5,1028(a4)
1c0033a6:	1a012683          	lw	a3,416(sp)
1c0033aa:	40d7d7b3          	sra	a5,a5,a3
1c0033ae:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0033b2:	fff1                	bnez	a5,1c00338e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x45e>
1c0033b4:	4785                	li	a5,1
1c0033b6:	00d796b3          	sll	a3,a5,a3
1c0033ba:	002047b7          	lui	a5,0x204
1c0033be:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0033c2:	30061073          	csrw	mstatus,a2
1c0033c6:	4c01                	li	s8,0
1c0033c8:	c082                	sw	zero,64(sp)
1c0033ca:	4e000613          	li	a2,1248
1c0033ce:	c202                	sw	zero,4(sp)
1c0033d0:	c402                	sw	zero,8(sp)
1c0033d2:	4781                	li	a5,0
1c0033d4:	4c81                	li	s9,0
1c0033d6:	4d01                	li	s10,0
1c0033d8:	de02                	sw	zero,60(sp)
1c0033da:	00204db7          	lui	s11,0x204
1c0033de:	10000ab7          	lui	s5,0x10000
1c0033e2:	6305                	lui	t1,0x1
1c0033e4:	58030313          	addi	t1,t1,1408 # 1580 <__rt_stack_size+0xd80>
1c0033e8:	c49a                	sw	t1,72(sp)
1c0033ea:	200d8b93          	addi	s7,s11,512 # 204200 <__L2+0x184200>
1c0033ee:	8b5e                	mv	s6,s7
1c0033f0:	ab89                	j	1c003942 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa12>
1c0033f2:	4681                	li	a3,0
1c0033f4:	a385                	j	1c003954 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa24>
1c0033f6:	30047573          	csrrci	a0,mstatus,8
1c0033fa:	404da703          	lw	a4,1028(s11)
1c0033fe:	1e012583          	lw	a1,480(sp)
1c003402:	40b75733          	sra	a4,a4,a1
1c003406:	fc173733          	p.bclr	a4,a4,30,1
1c00340a:	c715                	beqz	a4,1c003436 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x506>
1c00340c:	10000813          	li	a6,256
1c003410:	30051073          	csrw	mstatus,a0
1c003414:	010da423          	sw	a6,8(s11)
1c003418:	03cde703          	p.elw	a4,60(s11)
1c00341c:	010da223          	sw	a6,4(s11)
1c003420:	30047573          	csrrci	a0,mstatus,8
1c003424:	404da703          	lw	a4,1028(s11)
1c003428:	1e012583          	lw	a1,480(sp)
1c00342c:	40b75733          	sra	a4,a4,a1
1c003430:	fc173733          	p.bclr	a4,a4,30,1
1c003434:	ff71                	bnez	a4,1c003410 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4e0>
1c003436:	4705                	li	a4,1
1c003438:	00b715b3          	sll	a1,a4,a1
1c00343c:	40bda223          	sw	a1,1028(s11)
1c003440:	30051073          	csrw	mstatus,a0
1c003444:	e2ad                	bnez	a3,1c0034a6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x576>
1c003446:	5572                	lw	a0,60(sp)
1c003448:	02850713          	addi	a4,a0,40
1c00344c:	071e                	slli	a4,a4,0x7
1c00344e:	d23a                	sw	a4,36(sp)
1c003450:	01f55693          	srli	a3,a0,0x1f
1c003454:	00d50733          	add	a4,a0,a3
1c003458:	fc173733          	p.bclr	a4,a4,30,1
1c00345c:	8f15                	sub	a4,a4,a3
1c00345e:	00371693          	slli	a3,a4,0x3
1c003462:	9736                	add	a4,a4,a3
1c003464:	072a                	slli	a4,a4,0xa
1c003466:	45a6                	lw	a1,72(sp)
1c003468:	972e                	add	a4,a4,a1
1c00346a:	d43a                	sw	a4,40(sp)
1c00346c:	0a850713          	addi	a4,a0,168
1c003470:	0716                	slli	a4,a4,0x5
1c003472:	ce3a                	sw	a4,28(sp)
1c003474:	04070693          	addi	a3,a4,64
1c003478:	d636                	sw	a3,44(sp)
1c00347a:	c2ea                	sw	s10,68(sp)
1c00347c:	01dd0713          	addi	a4,s10,29
1c003480:	d83a                	sw	a4,48(sp)
1c003482:	01cd0893          	addi	a7,s10,28
1c003486:	d046                	sw	a7,32(sp)
1c003488:	4f22                	lw	t5,8(sp)
1c00348a:	c87a                	sw	t5,16(sp)
1c00348c:	4312                	lw	t1,4(sp)
1c00348e:	c41a                	sw	t1,8(sp)
1c003490:	c232                	sw	a2,4(sp)
1c003492:	4532                	lw	a0,12(sp)
1c003494:	cc2a                	sw	a0,24(sp)
1c003496:	c63e                	sw	a5,12(sp)
1c003498:	0ff00493          	li	s1,255
1c00349c:	1c0067b7          	lui	a5,0x1c006
1c0034a0:	14078a13          	addi	s4,a5,320 # 1c006140 <KerParConv3x3Stride1_SQ8>
1c0034a4:	a4d9                	j	1c00376a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x83a>
1c0034a6:	4736                	lw	a4,76(sp)
1c0034a8:	4886                	lw	a7,64(sp)
1c0034aa:	01170533          	add	a0,a4,a7
1c0034ae:	5f72                	lw	t5,60(sp)
1c0034b0:	001f0713          	addi	a4,t5,1
1c0034b4:	01f75593          	srli	a1,a4,0x1f
1c0034b8:	972e                	add	a4,a4,a1
1c0034ba:	fc173733          	p.bclr	a4,a4,30,1
1c0034be:	8f0d                	sub	a4,a4,a1
1c0034c0:	00371593          	slli	a1,a4,0x3
1c0034c4:	972e                	add	a4,a4,a1
1c0034c6:	072a                	slli	a4,a4,0xa
1c0034c8:	4326                	lw	t1,72(sp)
1c0034ca:	971a                	add	a4,a4,t1
1c0034cc:	01caa583          	lw	a1,28(s5) # 1000001c <model_L1_Memory>
1c0034d0:	972e                	add	a4,a4,a1
1c0034d2:	300475f3          	csrrci	a1,mstatus,8
1c0034d6:	400da803          	lw	a6,1024(s11)
1c0034da:	002b08b7          	lui	a7,0x2b0
1c0034de:	0116e6b3          	or	a3,a3,a7
1c0034e2:	40dda023          	sw	a3,1024(s11)
1c0034e6:	40eda023          	sw	a4,1024(s11)
1c0034ea:	40ada023          	sw	a0,1024(s11)
1c0034ee:	1f012023          	sw	a6,480(sp)
1c0034f2:	1e012823          	sw	zero,496(sp)
1c0034f6:	30059073          	csrw	mstatus,a1
1c0034fa:	b7b1                	j	1c003446 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x516>
1c0034fc:	fe4d0793          	addi	a5,s10,-28
1c003500:	4896                	lw	a7,68(sp)
1c003502:	01178a63          	beq	a5,a7,1c003516 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5e6>
1c003506:	7791                	lui	a5,0xfffe4
1c003508:	ea078793          	addi	a5,a5,-352 # fffe3ea0 <pulp__FC+0xfffe3ea1>
1c00350c:	9c3e                	add	s8,s8,a5
1c00350e:	6f05                	lui	t5,0x1
1c003510:	a00f0813          	addi	a6,t5,-1536 # a00 <__rt_stack_size+0x200>
1c003514:	a0f1                	j	1c0035e0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
1c003516:	5372                	lw	t1,60(sp)
1c003518:	00132863          	p.beqimm	t1,1,1c003528 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5f8>
1c00351c:	55d2                	lw	a1,52(sp)
1c00351e:	9c2e                	add	s8,s8,a1
1c003520:	6605                	lui	a2,0x1
1c003522:	a0060813          	addi	a6,a2,-1536 # a00 <__rt_stack_size+0x200>
1c003526:	a86d                	j	1c0035e0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
1c003528:	4801                	li	a6,0
1c00352a:	a85d                	j	1c0035e0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
1c00352c:	30047673          	csrrci	a2,mstatus,8
1c003530:	404da783          	lw	a5,1028(s11)
1c003534:	1c012683          	lw	a3,448(sp)
1c003538:	40d7d7b3          	sra	a5,a5,a3
1c00353c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003540:	c795                	beqz	a5,1c00356c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x63c>
1c003542:	10000593          	li	a1,256
1c003546:	30061073          	csrw	mstatus,a2
1c00354a:	00bda423          	sw	a1,8(s11)
1c00354e:	03cde783          	p.elw	a5,60(s11)
1c003552:	00bda223          	sw	a1,4(s11)
1c003556:	30047673          	csrrci	a2,mstatus,8
1c00355a:	404da783          	lw	a5,1028(s11)
1c00355e:	1c012683          	lw	a3,448(sp)
1c003562:	40d7d7b3          	sra	a5,a5,a3
1c003566:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00356a:	fff1                	bnez	a5,1c003546 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x616>
1c00356c:	4785                	li	a5,1
1c00356e:	00d796b3          	sll	a3,a5,a3
1c003572:	40dda223          	sw	a3,1028(s11)
1c003576:	30061073          	csrw	mstatus,a2
1c00357a:	08081563          	bnez	a6,1c003604 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6d4>
1c00357e:	01caa683          	lw	a3,28(s5)
1c003582:	01f75613          	srli	a2,a4,0x1f
1c003586:	00c707b3          	add	a5,a4,a2
1c00358a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00358e:	8f91                	sub	a5,a5,a2
1c003590:	00279713          	slli	a4,a5,0x2
1c003594:	97ba                	add	a5,a5,a4
1c003596:	07a6                	slli	a5,a5,0x9
1c003598:	97b6                	add	a5,a5,a3
1c00359a:	cf3e                	sw	a5,156(sp)
1c00359c:	96ca                	add	a3,a3,s2
1c00359e:	d936                	sw	a3,176(sp)
1c0035a0:	089da223          	sw	s1,132(s11)
1c0035a4:	009ba023          	sw	s1,0(s7)
1c0035a8:	009b2623          	sw	s1,12(s6)
1c0035ac:	094da023          	sw	s4,128(s11)
1c0035b0:	0968                	addi	a0,sp,156
1c0035b2:	08ada023          	sw	a0,128(s11)
1c0035b6:	38b020ef          	jal	ra,1c006140 <KerParConv3x3Stride1_SQ8>
1c0035ba:	01cbe783          	p.elw	a5,28(s7)
1c0035be:	0405                	addi	s0,s0,1
1c0035c0:	04890913          	addi	s2,s2,72
1c0035c4:	08442c63          	p.beqimm	s0,4,1c00365c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x72c>
1c0035c8:	8522                	mv	a0,s0
1c0035ca:	01940733          	add	a4,s0,s9
1c0035ce:	f23427e3          	p.beqimm	s0,3,1c0034fc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5cc>
1c0035d2:	67a5                	lui	a5,0x9
1c0035d4:	60078793          	addi	a5,a5,1536 # 9600 <__rt_stack_size+0x8e00>
1c0035d8:	9c3e                	add	s8,s8,a5
1c0035da:	6785                	lui	a5,0x1
1c0035dc:	a0078813          	addi	a6,a5,-1536 # a00 <__rt_stack_size+0x200>
1c0035e0:	1d012783          	lw	a5,464(sp)
1c0035e4:	d7a1                	beqz	a5,1c00352c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5fc>
1c0035e6:	1d812683          	lw	a3,472(sp)
1c0035ea:	02000793          	li	a5,32
1c0035ee:	d6d1                	beqz	a3,1c00357a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64a>
1c0035f0:	00fda423          	sw	a5,8(s11)
1c0035f4:	03cde683          	p.elw	a3,60(s11)
1c0035f8:	00fda223          	sw	a5,4(s11)
1c0035fc:	1d812683          	lw	a3,472(sp)
1c003600:	fae5                	bnez	a3,1c0035f0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6c0>
1c003602:	bfa5                	j	1c00357a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64a>
1c003604:	954e                	add	a0,a0,s3
1c003606:	01f55693          	srli	a3,a0,0x1f
1c00360a:	9536                	add	a0,a0,a3
1c00360c:	fc1537b3          	p.bclr	a5,a0,30,1
1c003610:	8f95                	sub	a5,a5,a3
1c003612:	00279693          	slli	a3,a5,0x2
1c003616:	97b6                	add	a5,a5,a3
1c003618:	07a6                	slli	a5,a5,0x9
1c00361a:	01caa683          	lw	a3,28(s5)
1c00361e:	97b6                	add	a5,a5,a3
1c003620:	300476f3          	csrrci	a3,mstatus,8
1c003624:	400da603          	lw	a2,1024(s11)
1c003628:	c7084833          	p.bset	a6,a6,3,16
1c00362c:	c1584833          	p.bset	a6,a6,0,21
1c003630:	410da023          	sw	a6,1024(s11)
1c003634:	40fda023          	sw	a5,1024(s11)
1c003638:	48d2                	lw	a7,20(sp)
1c00363a:	018887b3          	add	a5,a7,s8
1c00363e:	40fda023          	sw	a5,1024(s11)
1c003642:	12c007b7          	lui	a5,0x12c00
1c003646:	14078793          	addi	a5,a5,320 # 12c00140 <__l1_end+0x2c000fc>
1c00364a:	40fda023          	sw	a5,1024(s11)
1c00364e:	1cc12023          	sw	a2,448(sp)
1c003652:	1c012823          	sw	zero,464(sp)
1c003656:	30069073          	csrw	mstatus,a3
1c00365a:	b715                	j	1c00357e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x64e>
1c00365c:	0c91                	addi	s9,s9,4
1c00365e:	01ca8993          	addi	s3,s5,28
1c003662:	0009a783          	lw	a5,0(s3)
1c003666:	4f72                	lw	t5,28(sp)
1c003668:	01e78733          	add	a4,a5,t5
1c00366c:	c93a                	sw	a4,144(sp)
1c00366e:	5332                	lw	t1,44(sp)
1c003670:	979a                	add	a5,a5,t1
1c003672:	cb3e                	sw	a5,148(sp)
1c003674:	089da223          	sw	s1,132(s11)
1c003678:	009ba023          	sw	s1,0(s7)
1c00367c:	009b2623          	sw	s1,12(s6)
1c003680:	1c0057b7          	lui	a5,0x1c005
1c003684:	4c078793          	addi	a5,a5,1216 # 1c0054c0 <KerParReductIO_CC_SQ8>
1c003688:	08fda023          	sw	a5,128(s11)
1c00368c:	0108                	addi	a0,sp,128
1c00368e:	08ada023          	sw	a0,128(s11)
1c003692:	62f010ef          	jal	ra,1c0054c0 <KerParReductIO_CC_SQ8>
1c003696:	01cbe783          	p.elw	a5,28(s7)
1c00369a:	01fd5793          	srli	a5,s10,0x1f
1c00369e:	00fd0433          	add	s0,s10,a5
1c0036a2:	fc143433          	p.bclr	s0,s0,30,1
1c0036a6:	8c1d                	sub	s0,s0,a5
1c0036a8:	4e000793          	li	a5,1248
1c0036ac:	02f40433          	mul	s0,s0,a5
1c0036b0:	6919                	lui	s2,0x6
1c0036b2:	d8090913          	addi	s2,s2,-640 # 5d80 <__rt_stack_size+0x5580>
1c0036b6:	9922                	add	s2,s2,s0
1c0036b8:	0009a783          	lw	a5,0(s3)
1c0036bc:	97ca                	add	a5,a5,s2
1c0036be:	cebe                	sw	a5,92(sp)
1c0036c0:	089da223          	sw	s1,132(s11)
1c0036c4:	009b2023          	sw	s1,0(s6)
1c0036c8:	009b2623          	sw	s1,12(s6)
1c0036cc:	1c0077b7          	lui	a5,0x1c007
1c0036d0:	f0478793          	addi	a5,a5,-252 # 1c006f04 <KerParPool2x2Stride2_ReLU_SQ8>
1c0036d4:	08fda023          	sw	a5,128(s11)
1c0036d8:	08a8                	addi	a0,sp,88
1c0036da:	08ada023          	sw	a0,128(s11)
1c0036de:	027030ef          	jal	ra,1c006f04 <KerParPool2x2Stride2_ReLU_SQ8>
1c0036e2:	01cbe783          	p.elw	a5,28(s7)
1c0036e6:	4522                	lw	a0,8(sp)
1c0036e8:	e969                	bnez	a0,1c0037ba <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x88a>
1c0036ea:	45c2                	lw	a1,16(sp)
1c0036ec:	40059463          	bnez	a1,1c003af4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xbc4>
1c0036f0:	1c00f7b7          	lui	a5,0x1c00f
1c0036f4:	12c7a783          	lw	a5,300(a5) # 1c00f12c <model_L2_Memory>
1c0036f8:	943e                	add	s0,s0,a5
1c0036fa:	0002a7b7          	lui	a5,0x2a
1c0036fe:	3a078793          	addi	a5,a5,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c003702:	97a2                	add	a5,a5,s0
1c003704:	01caa703          	lw	a4,28(s5)
1c003708:	993a                	add	s2,s2,a4
1c00370a:	300476f3          	csrrci	a3,mstatus,8
1c00370e:	4512                	lw	a0,4(sp)
1c003710:	01051593          	slli	a1,a0,0x10
1c003714:	1805ca63          	bltz	a1,1c0038a8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x978>
1c003718:	400da603          	lw	a2,1024(s11)
1c00371c:	00020737          	lui	a4,0x20
1c003720:	de052733          	p.insert	a4,a0,15,0
1c003724:	c1374733          	p.bset	a4,a4,0,19
1c003728:	c1574733          	p.bset	a4,a4,0,21
1c00372c:	40eda023          	sw	a4,1024(s11)
1c003730:	412da023          	sw	s2,1024(s11)
1c003734:	40fda023          	sw	a5,1024(s11)
1c003738:	18c12023          	sw	a2,384(sp)
1c00373c:	18012823          	sw	zero,400(sp)
1c003740:	30069073          	csrw	mstatus,a3
1c003744:	5f02                	lw	t5,32(sp)
1c003746:	23af0b63          	beq	t5,s10,1c00397c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa4c>
1c00374a:	4332                	lw	t1,12(sp)
1c00374c:	02730793          	addi	a5,t1,39
1c003750:	0d05                	addi	s10,s10,1
1c003752:	cc1a                	sw	t1,24(sp)
1c003754:	4522                	lw	a0,8(sp)
1c003756:	c82a                	sw	a0,16(sp)
1c003758:	55c2                	lw	a1,48(sp)
1c00375a:	1da58d63          	beq	a1,s10,1c003934 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa04>
1c00375e:	4592                	lw	a1,4(sp)
1c003760:	c42e                	sw	a1,8(sp)
1c003762:	4e000613          	li	a2,1248
1c003766:	c232                	sw	a2,4(sp)
1c003768:	c63e                	sw	a5,12(sp)
1c00376a:	01caa783          	lw	a5,28(s5)
1c00376e:	5692                	lw	a3,36(sp)
1c003770:	00d78733          	add	a4,a5,a3
1c003774:	cdba                	sw	a4,216(sp)
1c003776:	672d                	lui	a4,0xb
1c003778:	97ba                	add	a5,a5,a4
1c00377a:	5457c783          	lbu	a5,1349(a5)
1c00377e:	0cf10e23          	sb	a5,220(sp)
1c003782:	089da223          	sw	s1,132(s11)
1c003786:	009ba023          	sw	s1,0(s7)
1c00378a:	009b2623          	sw	s1,12(s6)
1c00378e:	1c005737          	lui	a4,0x1c005
1c003792:	56e70713          	addi	a4,a4,1390 # 1c00556e <KerParSetBiasB32_SQ8>
1c003796:	08eda023          	sw	a4,128(s11)
1c00379a:	01e8                	addi	a0,sp,204
1c00379c:	08ada023          	sw	a0,128(s11)
1c0037a0:	5cf010ef          	jal	ra,1c00556e <KerParSetBiasB32_SQ8>
1c0037a4:	01cbe783          	p.elw	a5,28(s7)
1c0037a8:	5922                	lw	s2,40(sp)
1c0037aa:	4401                	li	s0,0
1c0037ac:	778d                	lui	a5,0xfffe3
1c0037ae:	c8078793          	addi	a5,a5,-896 # fffe2c80 <pulp__FC+0xfffe2c81>
1c0037b2:	da3e                	sw	a5,52(sp)
1c0037b4:	001c8993          	addi	s3,s9,1
1c0037b8:	bd01                	j	1c0035c8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x698>
1c0037ba:	19012783          	lw	a5,400(sp)
1c0037be:	c385                	beqz	a5,1c0037de <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8ae>
1c0037c0:	19812703          	lw	a4,408(sp)
1c0037c4:	02000793          	li	a5,32
1c0037c8:	c335                	beqz	a4,1c00382c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8fc>
1c0037ca:	00fda423          	sw	a5,8(s11)
1c0037ce:	03cde703          	p.elw	a4,60(s11)
1c0037d2:	00fda223          	sw	a5,4(s11)
1c0037d6:	19812703          	lw	a4,408(sp)
1c0037da:	fb65                	bnez	a4,1c0037ca <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x89a>
1c0037dc:	a881                	j	1c00382c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8fc>
1c0037de:	300476f3          	csrrci	a3,mstatus,8
1c0037e2:	404da783          	lw	a5,1028(s11)
1c0037e6:	18012703          	lw	a4,384(sp)
1c0037ea:	40e7d7b3          	sra	a5,a5,a4
1c0037ee:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0037f2:	c795                	beqz	a5,1c00381e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8ee>
1c0037f4:	10000613          	li	a2,256
1c0037f8:	30069073          	csrw	mstatus,a3
1c0037fc:	00cda423          	sw	a2,8(s11)
1c003800:	03cde783          	p.elw	a5,60(s11)
1c003804:	00cda223          	sw	a2,4(s11)
1c003808:	300476f3          	csrrci	a3,mstatus,8
1c00380c:	404da783          	lw	a5,1028(s11)
1c003810:	18012703          	lw	a4,384(sp)
1c003814:	40e7d7b3          	sra	a5,a5,a4
1c003818:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00381c:	fff1                	bnez	a5,1c0037f8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x8c8>
1c00381e:	4785                	li	a5,1
1c003820:	00e79733          	sll	a4,a5,a4
1c003824:	40eda223          	sw	a4,1028(s11)
1c003828:	30069073          	csrw	mstatus,a3
1c00382c:	4542                	lw	a0,16(sp)
1c00382e:	c50d                	beqz	a0,1c003858 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x928>
1c003830:	17c14783          	lbu	a5,380(sp)
1c003834:	0ff7f793          	andi	a5,a5,255
1c003838:	e385                	bnez	a5,1c003858 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x928>
1c00383a:	4709                	li	a4,2
1c00383c:	00eda423          	sw	a4,8(s11)
1c003840:	03cde783          	p.elw	a5,60(s11)
1c003844:	00eda223          	sw	a4,4(s11)
1c003848:	17c14783          	lbu	a5,380(sp)
1c00384c:	0ff7f793          	andi	a5,a5,255
1c003850:	d7f5                	beqz	a5,1c00383c <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x90c>
1c003852:	45a2                	lw	a1,8(sp)
1c003854:	e8058ee3          	beqz	a1,1c0036f0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c003858:	fffd0793          	addi	a5,s10,-1
1c00385c:	01f7d713          	srli	a4,a5,0x1f
1c003860:	97ba                	add	a5,a5,a4
1c003862:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003866:	8f99                	sub	a5,a5,a4
1c003868:	4e000713          	li	a4,1248
1c00386c:	0002a637          	lui	a2,0x2a
1c003870:	3a060613          	addi	a2,a2,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c003874:	42e78633          	p.mac	a2,a5,a4
1c003878:	1c00f7b7          	lui	a5,0x1c00f
1c00387c:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c003880:	0e010893          	addi	a7,sp,224
1c003884:	4801                	li	a6,0
1c003886:	02700793          	li	a5,39
1c00388a:	46b00713          	li	a4,1131
1c00388e:	46a2                	lw	a3,8(sp)
1c003890:	962e                	add	a2,a2,a1
1c003892:	5f62                	lw	t5,56(sp)
1c003894:	4362                	lw	t1,24(sp)
1c003896:	006f05b3          	add	a1,t5,t1
1c00389a:	1c00f537          	lui	a0,0x1c00f
1c00389e:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c0038a2:	51e050ef          	jal	ra,1c008dc0 <pi_cl_ram_copy_2d>
1c0038a6:	b5a9                	j	1c0036f0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c0038a8:	6721                	lui	a4,0x8
1c0038aa:	00320637          	lui	a2,0x320
1c0038ae:	18c12223          	sw	a2,388(sp)
1c0038b2:	19212a23          	sw	s2,404(sp)
1c0038b6:	18f12c23          	sw	a5,408(sp)
1c0038ba:	4612                	lw	a2,4(sp)
1c0038bc:	18c12423          	sw	a2,392(sp)
1c0038c0:	18e12623          	sw	a4,396(sp)
1c0038c4:	18e12823          	sw	a4,400(sp)
1c0038c8:	577d                	li	a4,-1
1c0038ca:	18e12023          	sw	a4,384(sp)
1c0038ce:	18012e23          	sw	zero,412(sp)
1c0038d2:	01402703          	lw	a4,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0038d6:	cb09                	beqz	a4,1c0038e8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b8>
1c0038d8:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0038dc:	0318                	addi	a4,sp,384
1c0038de:	cfd8                	sw	a4,28(a5)
1c0038e0:	031c                	addi	a5,sp,384
1c0038e2:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c0038e6:	bda9                	j	1c003740 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x810>
1c0038e8:	6721                	lui	a4,0x8
1c0038ea:	4892                	lw	a7,4(sp)
1c0038ec:	04e8d733          	p.minu	a4,a7,a4
1c0038f0:	00e90633          	add	a2,s2,a4
1c0038f4:	18c12a23          	sw	a2,404(sp)
1c0038f8:	00032637          	lui	a2,0x32
1c0038fc:	3a060613          	addi	a2,a2,928 # 323a0 <__L1Cl+0x223a0>
1c003900:	9432                	add	s0,s0,a2
1c003902:	18812c23          	sw	s0,408(sp)
1c003906:	40e88733          	sub	a4,a7,a4
1c00390a:	18e12423          	sw	a4,392(sp)
1c00390e:	400da703          	lw	a4,1024(s11)
1c003912:	18e12023          	sw	a4,384(sp)
1c003916:	00328737          	lui	a4,0x328
1c00391a:	40eda023          	sw	a4,1024(s11)
1c00391e:	412da023          	sw	s2,1024(s11)
1c003922:	40fda023          	sw	a5,1024(s11)
1c003926:	19012783          	lw	a5,400(sp)
1c00392a:	dbdd                	beqz	a5,1c0038e0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b0>
1c00392c:	031c                	addi	a5,sp,384
1c00392e:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c003932:	b77d                	j	1c0038e0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x9b0>
1c003934:	4e000613          	li	a2,1248
1c003938:	5772                	lw	a4,60(sp)
1c00393a:	0705                	addi	a4,a4,1
1c00393c:	de3a                	sw	a4,60(sp)
1c00393e:	04272b63          	p.beqimm	a4,2,1c003994 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa64>
1c003942:	5572                	lw	a0,60(sp)
1c003944:	aa1527e3          	p.beqimm	a0,1,1c0033f2 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4c2>
1c003948:	6689                	lui	a3,0x2
1c00394a:	40068693          	addi	a3,a3,1024 # 2400 <__rt_stack_size+0x1c00>
1c00394e:	4586                	lw	a1,64(sp)
1c003950:	95b6                	add	a1,a1,a3
1c003952:	c0ae                	sw	a1,64(sp)
1c003954:	1f012703          	lw	a4,496(sp)
1c003958:	a8070fe3          	beqz	a4,1c0033f6 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4c6>
1c00395c:	1f812583          	lw	a1,504(sp)
1c003960:	02000713          	li	a4,32
1c003964:	ae0580e3          	beqz	a1,1c003444 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x514>
1c003968:	00eda423          	sw	a4,8(s11)
1c00396c:	03cde583          	p.elw	a1,60(s11)
1c003970:	00eda223          	sw	a4,4(s11)
1c003974:	1f812583          	lw	a1,504(sp)
1c003978:	f9e5                	bnez	a1,1c003968 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa38>
1c00397a:	b4e9                	j	1c003444 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x514>
1c00397c:	5672                	lw	a2,60(sp)
1c00397e:	16162863          	p.beqimm	a2,1,1c003aee <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xbbe>
1c003982:	67a5                	lui	a5,0x9
1c003984:	91c78793          	addi	a5,a5,-1764 # 891c <__rt_stack_size+0x811c>
1c003988:	46b2                	lw	a3,12(sp)
1c00398a:	97b6                	add	a5,a5,a3
1c00398c:	4e000613          	li	a2,1248
1c003990:	0d05                	addi	s10,s10,1
1c003992:	b75d                	j	1c003938 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa08>
1c003994:	19012783          	lw	a5,400(sp)
1c003998:	c395                	beqz	a5,1c0039bc <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa8c>
1c00399a:	19812683          	lw	a3,408(sp)
1c00399e:	02000713          	li	a4,32
1c0039a2:	002047b7          	lui	a5,0x204
1c0039a6:	caa5                	beqz	a3,1c003a16 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xae6>
1c0039a8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0039ac:	03c7e683          	p.elw	a3,60(a5)
1c0039b0:	00e7a223          	sw	a4,4(a5)
1c0039b4:	19812683          	lw	a3,408(sp)
1c0039b8:	fae5                	bnez	a3,1c0039a8 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa78>
1c0039ba:	a8b1                	j	1c003a16 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xae6>
1c0039bc:	30047673          	csrrci	a2,mstatus,8
1c0039c0:	002047b7          	lui	a5,0x204
1c0039c4:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0039c8:	18012683          	lw	a3,384(sp)
1c0039cc:	40d7d7b3          	sra	a5,a5,a3
1c0039d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0039d4:	cb85                	beqz	a5,1c003a04 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xad4>
1c0039d6:	10000593          	li	a1,256
1c0039da:	00204737          	lui	a4,0x204
1c0039de:	30061073          	csrw	mstatus,a2
1c0039e2:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c0039e6:	03c76783          	p.elw	a5,60(a4)
1c0039ea:	00b72223          	sw	a1,4(a4)
1c0039ee:	30047673          	csrrci	a2,mstatus,8
1c0039f2:	40472783          	lw	a5,1028(a4)
1c0039f6:	18012683          	lw	a3,384(sp)
1c0039fa:	40d7d7b3          	sra	a5,a5,a3
1c0039fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003a02:	fff1                	bnez	a5,1c0039de <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xaae>
1c003a04:	4785                	li	a5,1
1c003a06:	00d796b3          	sll	a3,a5,a3
1c003a0a:	002047b7          	lui	a5,0x204
1c003a0e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c003a12:	30061073          	csrw	mstatus,a2
1c003a16:	47a2                	lw	a5,8(sp)
1c003a18:	c785                	beqz	a5,1c003a40 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb10>
1c003a1a:	17c14783          	lbu	a5,380(sp)
1c003a1e:	0ff7f793          	andi	a5,a5,255
1c003a22:	ef99                	bnez	a5,1c003a40 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb10>
1c003a24:	4689                	li	a3,2
1c003a26:	00204737          	lui	a4,0x204
1c003a2a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003a2e:	03c76783          	p.elw	a5,60(a4)
1c003a32:	00d72223          	sw	a3,4(a4)
1c003a36:	17c14783          	lbu	a5,380(sp)
1c003a3a:	0ff7f793          	andi	a5,a5,255
1c003a3e:	d7f5                	beqz	a5,1c003a2a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xafa>
1c003a40:	fffd0793          	addi	a5,s10,-1
1c003a44:	01f7d713          	srli	a4,a5,0x1f
1c003a48:	97ba                	add	a5,a5,a4
1c003a4a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003a4e:	8f99                	sub	a5,a5,a4
1c003a50:	4e000713          	li	a4,1248
1c003a54:	0002a637          	lui	a2,0x2a
1c003a58:	3a060613          	addi	a2,a2,928 # 2a3a0 <__L1Cl+0x1a3a0>
1c003a5c:	42e78633          	p.mac	a2,a5,a4
1c003a60:	1c00f7b7          	lui	a5,0x1c00f
1c003a64:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c003a68:	0e010893          	addi	a7,sp,224
1c003a6c:	4801                	li	a6,0
1c003a6e:	02700793          	li	a5,39
1c003a72:	46b00713          	li	a4,1131
1c003a76:	4692                	lw	a3,4(sp)
1c003a78:	962e                	add	a2,a2,a1
1c003a7a:	5f62                	lw	t5,56(sp)
1c003a7c:	4332                	lw	t1,12(sp)
1c003a7e:	006f05b3          	add	a1,t5,t1
1c003a82:	1c00f537          	lui	a0,0x1c00f
1c003a86:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c003a8a:	336050ef          	jal	ra,1c008dc0 <pi_cl_ram_copy_2d>
1c003a8e:	17c14783          	lbu	a5,380(sp)
1c003a92:	0ff7f793          	andi	a5,a5,255
1c003a96:	ef99                	bnez	a5,1c003ab4 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb84>
1c003a98:	4689                	li	a3,2
1c003a9a:	00204737          	lui	a4,0x204
1c003a9e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003aa2:	03c76783          	p.elw	a5,60(a4)
1c003aa6:	00d72223          	sw	a3,4(a4)
1c003aaa:	17c14783          	lbu	a5,380(sp)
1c003aae:	0ff7f793          	andi	a5,a5,255
1c003ab2:	d7f5                	beqz	a5,1c003a9e <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xb6e>
1c003ab4:	29c12083          	lw	ra,668(sp)
1c003ab8:	29812403          	lw	s0,664(sp)
1c003abc:	29412483          	lw	s1,660(sp)
1c003ac0:	29012903          	lw	s2,656(sp)
1c003ac4:	28c12983          	lw	s3,652(sp)
1c003ac8:	28812a03          	lw	s4,648(sp)
1c003acc:	28412a83          	lw	s5,644(sp)
1c003ad0:	28012b03          	lw	s6,640(sp)
1c003ad4:	27c12b83          	lw	s7,636(sp)
1c003ad8:	27812c03          	lw	s8,632(sp)
1c003adc:	27412c83          	lw	s9,628(sp)
1c003ae0:	27012d03          	lw	s10,624(sp)
1c003ae4:	26c12d83          	lw	s11,620(sp)
1c003ae8:	2a010113          	addi	sp,sp,672
1c003aec:	8082                	ret
1c003aee:	47b2                	lw	a5,12(sp)
1c003af0:	4601                	li	a2,0
1c003af2:	bd79                	j	1c003990 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0xa60>
1c003af4:	17c14783          	lbu	a5,380(sp)
1c003af8:	0ff7f793          	andi	a5,a5,255
1c003afc:	be079ae3          	bnez	a5,1c0036f0 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7c0>
1c003b00:	bb2d                	j	1c00383a <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x90a>

1c003b02 <S4_Linear_2x29x39x64>:
1c003b02:	d2010113          	addi	sp,sp,-736
1c003b06:	2c112e23          	sw	ra,732(sp)
1c003b0a:	2c812c23          	sw	s0,728(sp)
1c003b0e:	2c912a23          	sw	s1,724(sp)
1c003b12:	2d212823          	sw	s2,720(sp)
1c003b16:	2d312623          	sw	s3,716(sp)
1c003b1a:	2d412423          	sw	s4,712(sp)
1c003b1e:	2d512223          	sw	s5,708(sp)
1c003b22:	2d612023          	sw	s6,704(sp)
1c003b26:	2b712e23          	sw	s7,700(sp)
1c003b2a:	2b812c23          	sw	s8,696(sp)
1c003b2e:	2b912a23          	sw	s9,692(sp)
1c003b32:	2ba12823          	sw	s10,688(sp)
1c003b36:	2bb12623          	sw	s11,684(sp)
1c003b3a:	8aaa                	mv	s5,a0
1c003b3c:	842e                	mv	s0,a1
1c003b3e:	8a32                	mv	s4,a2
1c003b40:	ce36                	sw	a3,28(sp)
1c003b42:	89ba                	mv	s3,a4
1c003b44:	893e                	mv	s2,a5
1c003b46:	84c2                	mv	s1,a6
1c003b48:	100007b7          	lui	a5,0x10000
1c003b4c:	01c7a783          	lw	a5,28(a5) # 1000001c <model_L1_Memory>
1c003b50:	6731                	lui	a4,0xc
1c003b52:	e6870693          	addi	a3,a4,-408 # be68 <__rt_stack_size+0xb668>
1c003b56:	96be                	add	a3,a3,a5
1c003b58:	d6b6                	sw	a3,108(sp)
1c003b5a:	4585                	li	a1,1
1c003b5c:	06b11823          	sh	a1,112(sp)
1c003b60:	06b11923          	sh	a1,114(sp)
1c003b64:	4509                	li	a0,2
1c003b66:	06a11a23          	sh	a0,116(sp)
1c003b6a:	e6070613          	addi	a2,a4,-416
1c003b6e:	963e                	add	a2,a2,a5
1c003b70:	dcb2                	sw	a2,120(sp)
1c003b72:	cab6                	sw	a3,84(sp)
1c003b74:	04a11e23          	sh	a0,92(sp)
1c003b78:	e7c70613          	addi	a2,a4,-388
1c003b7c:	963e                	add	a2,a2,a5
1c003b7e:	d4b2                	sw	a2,104(sp)
1c003b80:	d636                	sw	a3,44(sp)
1c003b82:	e7070693          	addi	a3,a4,-400
1c003b86:	96be                	add	a3,a3,a5
1c003b88:	d836                	sw	a3,48(sp)
1c003b8a:	02a11a23          	sh	a0,52(sp)
1c003b8e:	02b11b23          	sh	a1,54(sp)
1c003b92:	02b11c23          	sh	a1,56(sp)
1c003b96:	e7470693          	addi	a3,a4,-396
1c003b9a:	96be                	add	a3,a3,a5
1c003b9c:	de36                	sw	a3,60(sp)
1c003b9e:	e7870713          	addi	a4,a4,-392
1c003ba2:	97ba                	add	a5,a5,a4
1c003ba4:	c0be                	sw	a5,64(sp)
1c003ba6:	c2b2                	sw	a2,68(sp)
1c003ba8:	ca56                	sw	s5,20(sp)
1c003baa:	1c00f7b7          	lui	a5,0x1c00f
1c003bae:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c003bb2:	121c                	addi	a5,sp,288
1c003bb4:	4705                	li	a4,1
1c003bb6:	6689                	lui	a3,0x2
1c003bb8:	fba68693          	addi	a3,a3,-70 # 1fba <__rt_stack_size+0x17ba>
1c003bbc:	6615                	lui	a2,0x5
1c003bbe:	ba460613          	addi	a2,a2,-1116 # 4ba4 <__rt_stack_size+0x43a4>
1c003bc2:	962e                	add	a2,a2,a1
1c003bc4:	85d6                	mv	a1,s5
1c003bc6:	1c00f537          	lui	a0,0x1c00f
1c003bca:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c003bce:	1b0050ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c003bd2:	1bc14783          	lbu	a5,444(sp)
1c003bd6:	0ff7f793          	andi	a5,a5,255
1c003bda:	ef99                	bnez	a5,1c003bf8 <S4_Linear_2x29x39x64+0xf6>
1c003bdc:	4689                	li	a3,2
1c003bde:	00204737          	lui	a4,0x204
1c003be2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003be6:	03c76783          	p.elw	a5,60(a4)
1c003bea:	00d72223          	sw	a3,4(a4)
1c003bee:	1bc14783          	lbu	a5,444(sp)
1c003bf2:	0ff7f793          	andi	a5,a5,255
1c003bf6:	d7f5                	beqz	a5,1c003be2 <S4_Linear_2x29x39x64+0xe0>
1c003bf8:	1c00fb37          	lui	s6,0x1c00f
1c003bfc:	12cb0b13          	addi	s6,s6,300 # 1c00f12c <model_L2_Memory>
1c003c00:	000b2583          	lw	a1,0(s6)
1c003c04:	6c09                	lui	s8,0x2
1c003c06:	fbac0c13          	addi	s8,s8,-70 # 1fba <__rt_stack_size+0x17ba>
1c003c0a:	1c00fbb7          	lui	s7,0x1c00f
1c003c0e:	121c                	addi	a5,sp,288
1c003c10:	4705                	li	a4,1
1c003c12:	86e2                	mv	a3,s8
1c003c14:	661d                	lui	a2,0x7
1c003c16:	b6060613          	addi	a2,a2,-1184 # 6b60 <__rt_stack_size+0x6360>
1c003c1a:	962e                	add	a2,a2,a1
1c003c1c:	018a85b3          	add	a1,s5,s8
1c003c20:	2f8b8513          	addi	a0,s7,760 # 1c00f2f8 <HyperRam>
1c003c24:	15a050ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c003c28:	000b2683          	lw	a3,0(s6)
1c003c2c:	6795                	lui	a5,0x5
1c003c2e:	ba478793          	addi	a5,a5,-1116 # 4ba4 <__rt_stack_size+0x43a4>
1c003c32:	96be                	add	a3,a3,a5
1c003c34:	100007b7          	lui	a5,0x10000
1c003c38:	01c7a583          	lw	a1,28(a5) # 1000001c <model_L1_Memory>
1c003c3c:	30047673          	csrrci	a2,mstatus,8
1c003c40:	00204737          	lui	a4,0x204
1c003c44:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c003c48:	000307b7          	lui	a5,0x30
1c003c4c:	de0c27b3          	p.insert	a5,s8,15,0
1c003c50:	c137c7b3          	p.bset	a5,a5,0,19
1c003c54:	c157c7b3          	p.bset	a5,a5,0,21
1c003c58:	00204537          	lui	a0,0x204
1c003c5c:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
1c003c60:	002047b7          	lui	a5,0x204
1c003c64:	40b7a023          	sw	a1,1024(a5) # 204400 <__L2+0x184400>
1c003c68:	40d7a023          	sw	a3,1024(a5)
1c003c6c:	28e12023          	sw	a4,640(sp)
1c003c70:	28012823          	sw	zero,656(sp)
1c003c74:	30061073          	csrw	mstatus,a2
1c003c78:	cc22                	sw	s0,24(sp)
1c003c7a:	000b2583          	lw	a1,0(s6)
1c003c7e:	011c                	addi	a5,sp,128
1c003c80:	4705                	li	a4,1
1c003c82:	6691                	lui	a3,0x4
1c003c84:	f7468693          	addi	a3,a3,-140 # 3f74 <__rt_stack_size+0x3774>
1c003c88:	6625                	lui	a2,0x9
1c003c8a:	b1c60613          	addi	a2,a2,-1252 # 8b1c <__rt_stack_size+0x831c>
1c003c8e:	962e                	add	a2,a2,a1
1c003c90:	85a2                	mv	a1,s0
1c003c92:	2f8b8513          	addi	a0,s7,760
1c003c96:	0e8050ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c003c9a:	11c14783          	lbu	a5,284(sp)
1c003c9e:	0ff7f793          	andi	a5,a5,255
1c003ca2:	ef99                	bnez	a5,1c003cc0 <S4_Linear_2x29x39x64+0x1be>
1c003ca4:	4689                	li	a3,2
1c003ca6:	00204737          	lui	a4,0x204
1c003caa:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c003cae:	03c76783          	p.elw	a5,60(a4)
1c003cb2:	00d72223          	sw	a3,4(a4)
1c003cb6:	11c14783          	lbu	a5,284(sp)
1c003cba:	0ff7f793          	andi	a5,a5,255
1c003cbe:	d7f5                	beqz	a5,1c003caa <S4_Linear_2x29x39x64+0x1a8>
1c003cc0:	1c00fbb7          	lui	s7,0x1c00f
1c003cc4:	12cb8b93          	addi	s7,s7,300 # 1c00f12c <model_L2_Memory>
1c003cc8:	000ba583          	lw	a1,0(s7)
1c003ccc:	6b11                	lui	s6,0x4
1c003cce:	f74b0a93          	addi	s5,s6,-140 # 3f74 <__rt_stack_size+0x3774>
1c003cd2:	011c                	addi	a5,sp,128
1c003cd4:	4705                	li	a4,1
1c003cd6:	86d6                	mv	a3,s5
1c003cd8:	6635                	lui	a2,0xd
1c003cda:	a9060613          	addi	a2,a2,-1392 # ca90 <__rt_stack_size+0xc290>
1c003cde:	962e                	add	a2,a2,a1
1c003ce0:	015405b3          	add	a1,s0,s5
1c003ce4:	1c00f537          	lui	a0,0x1c00f
1c003ce8:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c003cec:	092050ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c003cf0:	000ba583          	lw	a1,0(s7)
1c003cf4:	67a5                	lui	a5,0x9
1c003cf6:	b1c78793          	addi	a5,a5,-1252 # 8b1c <__rt_stack_size+0x831c>
1c003cfa:	95be                	add	a1,a1,a5
1c003cfc:	10000637          	lui	a2,0x10000
1c003d00:	01c60613          	addi	a2,a2,28 # 1000001c <model_L1_Memory>
1c003d04:	421c                	lw	a5,0(a2)
1c003d06:	f78b0b13          	addi	s6,s6,-136
1c003d0a:	9b3e                	add	s6,s6,a5
1c003d0c:	30047573          	csrrci	a0,mstatus,8
1c003d10:	002046b7          	lui	a3,0x204
1c003d14:	4006a803          	lw	a6,1024(a3) # 204400 <__L2+0x184400>
1c003d18:	000307b7          	lui	a5,0x30
1c003d1c:	873e                	mv	a4,a5
1c003d1e:	de0aa733          	p.insert	a4,s5,15,0
1c003d22:	c1374733          	p.bset	a4,a4,0,19
1c003d26:	c1574733          	p.bset	a4,a4,0,21
1c003d2a:	002048b7          	lui	a7,0x204
1c003d2e:	40e8a023          	sw	a4,1024(a7) # 204400 <__L2+0x184400>
1c003d32:	00204737          	lui	a4,0x204
1c003d36:	41672023          	sw	s6,1024(a4) # 204400 <__L2+0x184400>
1c003d3a:	40b72023          	sw	a1,1024(a4)
1c003d3e:	27012023          	sw	a6,608(sp)
1c003d42:	26012823          	sw	zero,624(sp)
1c003d46:	30051073          	csrw	mstatus,a0
1c003d4a:	4218                	lw	a4,0(a2)
1c003d4c:	6631                	lui	a2,0xc
1c003d4e:	e6060613          	addi	a2,a2,-416 # be60 <__rt_stack_size+0xb660>
1c003d52:	9732                	add	a4,a4,a2
1c003d54:	30047673          	csrrci	a2,mstatus,8
1c003d58:	4006a683          	lw	a3,1024(a3)
1c003d5c:	c037c7b3          	p.bset	a5,a5,0,3
1c003d60:	c137c7b3          	p.bset	a5,a5,0,19
1c003d64:	c157c7b3          	p.bset	a5,a5,0,21
1c003d68:	002045b7          	lui	a1,0x204
1c003d6c:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c003d70:	002047b7          	lui	a5,0x204
1c003d74:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c003d78:	4147a023          	sw	s4,1024(a5)
1c003d7c:	24d12023          	sw	a3,576(sp)
1c003d80:	24012823          	sw	zero,592(sp)
1c003d84:	30061073          	csrw	mstatus,a2
1c003d88:	25012783          	lw	a5,592(sp)
1c003d8c:	c395                	beqz	a5,1c003db0 <S4_Linear_2x29x39x64+0x2ae>
1c003d8e:	25812683          	lw	a3,600(sp)
1c003d92:	02000713          	li	a4,32
1c003d96:	002047b7          	lui	a5,0x204
1c003d9a:	caa5                	beqz	a3,1c003e0a <S4_Linear_2x29x39x64+0x308>
1c003d9c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c003da0:	03c7e683          	p.elw	a3,60(a5)
1c003da4:	00e7a223          	sw	a4,4(a5)
1c003da8:	25812683          	lw	a3,600(sp)
1c003dac:	fae5                	bnez	a3,1c003d9c <S4_Linear_2x29x39x64+0x29a>
1c003dae:	a8b1                	j	1c003e0a <S4_Linear_2x29x39x64+0x308>
1c003db0:	30047673          	csrrci	a2,mstatus,8
1c003db4:	002047b7          	lui	a5,0x204
1c003db8:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003dbc:	24012683          	lw	a3,576(sp)
1c003dc0:	40d7d7b3          	sra	a5,a5,a3
1c003dc4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003dc8:	cb85                	beqz	a5,1c003df8 <S4_Linear_2x29x39x64+0x2f6>
1c003dca:	10000593          	li	a1,256
1c003dce:	00204737          	lui	a4,0x204
1c003dd2:	30061073          	csrw	mstatus,a2
1c003dd6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c003dda:	03c76783          	p.elw	a5,60(a4)
1c003dde:	00b72223          	sw	a1,4(a4)
1c003de2:	30047673          	csrrci	a2,mstatus,8
1c003de6:	40472783          	lw	a5,1028(a4)
1c003dea:	24012683          	lw	a3,576(sp)
1c003dee:	40d7d7b3          	sra	a5,a5,a3
1c003df2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003df6:	fff1                	bnez	a5,1c003dd2 <S4_Linear_2x29x39x64+0x2d0>
1c003df8:	4785                	li	a5,1
1c003dfa:	00d796b3          	sll	a3,a5,a3
1c003dfe:	002047b7          	lui	a5,0x204
1c003e02:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c003e06:	30061073          	csrw	mstatus,a2
1c003e0a:	100007b7          	lui	a5,0x10000
1c003e0e:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c003e12:	67b1                	lui	a5,0xc
1c003e14:	e7478793          	addi	a5,a5,-396 # be74 <__rt_stack_size+0xb674>
1c003e18:	96be                	add	a3,a3,a5
1c003e1a:	30047673          	csrrci	a2,mstatus,8
1c003e1e:	00204737          	lui	a4,0x204
1c003e22:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c003e26:	000b07b7          	lui	a5,0xb0
1c003e2a:	0789                	addi	a5,a5,2
1c003e2c:	c157c7b3          	p.bset	a5,a5,0,21
1c003e30:	002045b7          	lui	a1,0x204
1c003e34:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c003e38:	002047b7          	lui	a5,0x204
1c003e3c:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c003e40:	4137a023          	sw	s3,1024(a5)
1c003e44:	22e12023          	sw	a4,544(sp)
1c003e48:	22012823          	sw	zero,560(sp)
1c003e4c:	30061073          	csrw	mstatus,a2
1c003e50:	23012783          	lw	a5,560(sp)
1c003e54:	c395                	beqz	a5,1c003e78 <S4_Linear_2x29x39x64+0x376>
1c003e56:	23812683          	lw	a3,568(sp)
1c003e5a:	02000713          	li	a4,32
1c003e5e:	002047b7          	lui	a5,0x204
1c003e62:	caa5                	beqz	a3,1c003ed2 <S4_Linear_2x29x39x64+0x3d0>
1c003e64:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c003e68:	03c7e683          	p.elw	a3,60(a5)
1c003e6c:	00e7a223          	sw	a4,4(a5)
1c003e70:	23812683          	lw	a3,568(sp)
1c003e74:	fae5                	bnez	a3,1c003e64 <S4_Linear_2x29x39x64+0x362>
1c003e76:	a8b1                	j	1c003ed2 <S4_Linear_2x29x39x64+0x3d0>
1c003e78:	30047673          	csrrci	a2,mstatus,8
1c003e7c:	002047b7          	lui	a5,0x204
1c003e80:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003e84:	22012683          	lw	a3,544(sp)
1c003e88:	40d7d7b3          	sra	a5,a5,a3
1c003e8c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003e90:	cb85                	beqz	a5,1c003ec0 <S4_Linear_2x29x39x64+0x3be>
1c003e92:	10000593          	li	a1,256
1c003e96:	00204737          	lui	a4,0x204
1c003e9a:	30061073          	csrw	mstatus,a2
1c003e9e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c003ea2:	03c76783          	p.elw	a5,60(a4)
1c003ea6:	00b72223          	sw	a1,4(a4)
1c003eaa:	30047673          	csrrci	a2,mstatus,8
1c003eae:	40472783          	lw	a5,1028(a4)
1c003eb2:	22012683          	lw	a3,544(sp)
1c003eb6:	40d7d7b3          	sra	a5,a5,a3
1c003eba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003ebe:	fff1                	bnez	a5,1c003e9a <S4_Linear_2x29x39x64+0x398>
1c003ec0:	4785                	li	a5,1
1c003ec2:	00d796b3          	sll	a3,a5,a3
1c003ec6:	002047b7          	lui	a5,0x204
1c003eca:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c003ece:	30061073          	csrw	mstatus,a2
1c003ed2:	100007b7          	lui	a5,0x10000
1c003ed6:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c003eda:	67b1                	lui	a5,0xc
1c003edc:	e7878793          	addi	a5,a5,-392 # be78 <__rt_stack_size+0xb678>
1c003ee0:	96be                	add	a3,a3,a5
1c003ee2:	30047673          	csrrci	a2,mstatus,8
1c003ee6:	00204737          	lui	a4,0x204
1c003eea:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c003eee:	000b07b7          	lui	a5,0xb0
1c003ef2:	0789                	addi	a5,a5,2
1c003ef4:	c157c7b3          	p.bset	a5,a5,0,21
1c003ef8:	002045b7          	lui	a1,0x204
1c003efc:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c003f00:	002047b7          	lui	a5,0x204
1c003f04:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c003f08:	4127a023          	sw	s2,1024(a5)
1c003f0c:	20e12023          	sw	a4,512(sp)
1c003f10:	20012823          	sw	zero,528(sp)
1c003f14:	30061073          	csrw	mstatus,a2
1c003f18:	21012783          	lw	a5,528(sp)
1c003f1c:	c395                	beqz	a5,1c003f40 <S4_Linear_2x29x39x64+0x43e>
1c003f1e:	21812683          	lw	a3,536(sp)
1c003f22:	02000713          	li	a4,32
1c003f26:	002047b7          	lui	a5,0x204
1c003f2a:	caa5                	beqz	a3,1c003f9a <S4_Linear_2x29x39x64+0x498>
1c003f2c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c003f30:	03c7e683          	p.elw	a3,60(a5)
1c003f34:	00e7a223          	sw	a4,4(a5)
1c003f38:	21812683          	lw	a3,536(sp)
1c003f3c:	fae5                	bnez	a3,1c003f2c <S4_Linear_2x29x39x64+0x42a>
1c003f3e:	a8b1                	j	1c003f9a <S4_Linear_2x29x39x64+0x498>
1c003f40:	30047673          	csrrci	a2,mstatus,8
1c003f44:	002047b7          	lui	a5,0x204
1c003f48:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c003f4c:	20012683          	lw	a3,512(sp)
1c003f50:	40d7d7b3          	sra	a5,a5,a3
1c003f54:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003f58:	cb85                	beqz	a5,1c003f88 <S4_Linear_2x29x39x64+0x486>
1c003f5a:	10000593          	li	a1,256
1c003f5e:	00204737          	lui	a4,0x204
1c003f62:	30061073          	csrw	mstatus,a2
1c003f66:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c003f6a:	03c76783          	p.elw	a5,60(a4)
1c003f6e:	00b72223          	sw	a1,4(a4)
1c003f72:	30047673          	csrrci	a2,mstatus,8
1c003f76:	40472783          	lw	a5,1028(a4)
1c003f7a:	20012683          	lw	a3,512(sp)
1c003f7e:	40d7d7b3          	sra	a5,a5,a3
1c003f82:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003f86:	fff1                	bnez	a5,1c003f62 <S4_Linear_2x29x39x64+0x460>
1c003f88:	4785                	li	a5,1
1c003f8a:	00d796b3          	sll	a3,a5,a3
1c003f8e:	002047b7          	lui	a5,0x204
1c003f92:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c003f96:	30061073          	csrw	mstatus,a2
1c003f9a:	100007b7          	lui	a5,0x10000
1c003f9e:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c003fa2:	67b1                	lui	a5,0xc
1c003fa4:	e7c78793          	addi	a5,a5,-388 # be7c <__rt_stack_size+0xb67c>
1c003fa8:	96be                	add	a3,a3,a5
1c003faa:	30047673          	csrrci	a2,mstatus,8
1c003fae:	00204737          	lui	a4,0x204
1c003fb2:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c003fb6:	000b07b7          	lui	a5,0xb0
1c003fba:	07a5                	addi	a5,a5,9
1c003fbc:	c157c7b3          	p.bset	a5,a5,0,21
1c003fc0:	002045b7          	lui	a1,0x204
1c003fc4:	40f5a023          	sw	a5,1024(a1) # 204400 <__L2+0x184400>
1c003fc8:	002047b7          	lui	a5,0x204
1c003fcc:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c003fd0:	4097a023          	sw	s1,1024(a5)
1c003fd4:	1ee12023          	sw	a4,480(sp)
1c003fd8:	1e012823          	sw	zero,496(sp)
1c003fdc:	30061073          	csrw	mstatus,a2
1c003fe0:	1f012783          	lw	a5,496(sp)
1c003fe4:	c395                	beqz	a5,1c004008 <S4_Linear_2x29x39x64+0x506>
1c003fe6:	1f812683          	lw	a3,504(sp)
1c003fea:	02000713          	li	a4,32
1c003fee:	002047b7          	lui	a5,0x204
1c003ff2:	caa5                	beqz	a3,1c004062 <S4_Linear_2x29x39x64+0x560>
1c003ff4:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c003ff8:	03c7e683          	p.elw	a3,60(a5)
1c003ffc:	00e7a223          	sw	a4,4(a5)
1c004000:	1f812683          	lw	a3,504(sp)
1c004004:	fae5                	bnez	a3,1c003ff4 <S4_Linear_2x29x39x64+0x4f2>
1c004006:	a8b1                	j	1c004062 <S4_Linear_2x29x39x64+0x560>
1c004008:	30047673          	csrrci	a2,mstatus,8
1c00400c:	002047b7          	lui	a5,0x204
1c004010:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004014:	1e012683          	lw	a3,480(sp)
1c004018:	40d7d7b3          	sra	a5,a5,a3
1c00401c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004020:	cb85                	beqz	a5,1c004050 <S4_Linear_2x29x39x64+0x54e>
1c004022:	10000593          	li	a1,256
1c004026:	00204737          	lui	a4,0x204
1c00402a:	30061073          	csrw	mstatus,a2
1c00402e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004032:	03c76783          	p.elw	a5,60(a4)
1c004036:	00b72223          	sw	a1,4(a4)
1c00403a:	30047673          	csrrci	a2,mstatus,8
1c00403e:	40472783          	lw	a5,1028(a4)
1c004042:	1e012683          	lw	a3,480(sp)
1c004046:	40d7d7b3          	sra	a5,a5,a3
1c00404a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00404e:	fff1                	bnez	a5,1c00402a <S4_Linear_2x29x39x64+0x528>
1c004050:	4785                	li	a5,1
1c004052:	00d796b3          	sll	a3,a5,a3
1c004056:	002047b7          	lui	a5,0x204
1c00405a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c00405e:	30061073          	csrw	mstatus,a2
1c004062:	100007b7          	lui	a5,0x10000
1c004066:	01c7a783          	lw	a5,28(a5) # 1000001c <model_L1_Memory>
1c00406a:	6731                	lui	a4,0xc
1c00406c:	97ba                	add	a5,a5,a4
1c00406e:	e817c783          	lbu	a5,-383(a5)
1c004072:	06f10e23          	sb	a5,124(sp)
1c004076:	00204437          	lui	s0,0x204
1c00407a:	0ff00793          	li	a5,255
1c00407e:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
1c004082:	20040413          	addi	s0,s0,512
1c004086:	00f42023          	sw	a5,0(s0)
1c00408a:	00f42623          	sw	a5,12(s0)
1c00408e:	1c0057b7          	lui	a5,0x1c005
1c004092:	56e78793          	addi	a5,a5,1390 # 1c00556e <KerParSetBiasB32_SQ8>
1c004096:	00204737          	lui	a4,0x204
1c00409a:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c00409e:	10e8                	addi	a0,sp,108
1c0040a0:	002047b7          	lui	a5,0x204
1c0040a4:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c0040a8:	4c6010ef          	jal	ra,1c00556e <KerParSetBiasB32_SQ8>
1c0040ac:	01c46783          	p.elw	a5,28(s0)
1c0040b0:	6a11                	lui	s4,0x4
1c0040b2:	f74a0a13          	addi	s4,s4,-140 # 3f74 <__rt_stack_size+0x3774>
1c0040b6:	8bd2                	mv	s7,s4
1c0040b8:	6989                	lui	s3,0x2
1c0040ba:	fba98993          	addi	s3,s3,-70 # 1fba <__rt_stack_size+0x17ba>
1c0040be:	8b4e                	mv	s6,s3
1c0040c0:	4401                	li	s0,0
1c0040c2:	6c09                	lui	s8,0x2
1c0040c4:	fbcc0d13          	addi	s10,s8,-68 # 1fbc <__rt_stack_size+0x17bc>
1c0040c8:	6d91                	lui	s11,0x4
1c0040ca:	8ad2                	mv	s5,s4
1c0040cc:	10000cb7          	lui	s9,0x10000
1c0040d0:	f78d8d93          	addi	s11,s11,-136 # 3f78 <__rt_stack_size+0x3778>
1c0040d4:	1c0057b7          	lui	a5,0x1c005
1c0040d8:	62278793          	addi	a5,a5,1570 # 1c005622 <KerParLinearLayer_SQ8>
1c0040dc:	c83e                	sw	a5,16(sp)
1c0040de:	a629                	j	1c0043e8 <S4_Linear_2x29x39x64+0x8e6>
1c0040e0:	01f45713          	srli	a4,s0,0x1f
1c0040e4:	00e407b3          	add	a5,s0,a4
1c0040e8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0040ec:	8f99                	sub	a5,a5,a4
1c0040ee:	6615                	lui	a2,0x5
1c0040f0:	ba460613          	addi	a2,a2,-1116 # 4ba4 <__rt_stack_size+0x43a4>
1c0040f4:	43a78633          	p.mac	a2,a5,s10
1c0040f8:	1c00f7b7          	lui	a5,0x1c00f
1c0040fc:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004100:	121c                	addi	a5,sp,288
1c004102:	4705                	li	a4,1
1c004104:	86ca                	mv	a3,s2
1c004106:	962e                	add	a2,a2,a1
1c004108:	4552                	lw	a0,20(sp)
1c00410a:	016505b3          	add	a1,a0,s6
1c00410e:	1c00f537          	lui	a0,0x1c00f
1c004112:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c004116:	469040ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c00411a:	ae21                	j	1c004432 <S4_Linear_2x29x39x64+0x930>
1c00411c:	30047673          	csrrci	a2,mstatus,8
1c004120:	002047b7          	lui	a5,0x204
1c004124:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004128:	28012683          	lw	a3,640(sp)
1c00412c:	40d7d7b3          	sra	a5,a5,a3
1c004130:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004134:	cb85                	beqz	a5,1c004164 <S4_Linear_2x29x39x64+0x662>
1c004136:	10000593          	li	a1,256
1c00413a:	00204737          	lui	a4,0x204
1c00413e:	30061073          	csrw	mstatus,a2
1c004142:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004146:	03c76783          	p.elw	a5,60(a4)
1c00414a:	00b72223          	sw	a1,4(a4)
1c00414e:	30047673          	csrrci	a2,mstatus,8
1c004152:	40472783          	lw	a5,1028(a4)
1c004156:	28012683          	lw	a3,640(sp)
1c00415a:	40d7d7b3          	sra	a5,a5,a3
1c00415e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004162:	fff1                	bnez	a5,1c00413e <S4_Linear_2x29x39x64+0x63c>
1c004164:	4785                	li	a5,1
1c004166:	00d796b3          	sll	a3,a5,a3
1c00416a:	002047b7          	lui	a5,0x204
1c00416e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c004172:	30061073          	csrw	mstatus,a2
1c004176:	04099d63          	bnez	s3,1c0041d0 <S4_Linear_2x29x39x64+0x6ce>
1c00417a:	11c14783          	lbu	a5,284(sp)
1c00417e:	0ff7f793          	andi	a5,a5,255
1c004182:	ef99                	bnez	a5,1c0041a0 <S4_Linear_2x29x39x64+0x69e>
1c004184:	4689                	li	a3,2
1c004186:	00204737          	lui	a4,0x204
1c00418a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00418e:	03c76783          	p.elw	a5,60(a4)
1c004192:	00d72223          	sw	a3,4(a4)
1c004196:	11c14783          	lbu	a5,284(sp)
1c00419a:	0ff7f793          	andi	a5,a5,255
1c00419e:	d7f5                	beqz	a5,1c00418a <S4_Linear_2x29x39x64+0x688>
1c0041a0:	12049f63          	bnez	s1,1c0042de <S4_Linear_2x29x39x64+0x7dc>
1c0041a4:	27012783          	lw	a5,624(sp)
1c0041a8:	16078963          	beqz	a5,1c00431a <S4_Linear_2x29x39x64+0x818>
1c0041ac:	27812683          	lw	a3,632(sp)
1c0041b0:	02000713          	li	a4,32
1c0041b4:	002047b7          	lui	a5,0x204
1c0041b8:	1a068e63          	beqz	a3,1c004374 <S4_Linear_2x29x39x64+0x872>
1c0041bc:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0041c0:	03c7e683          	p.elw	a3,60(a5)
1c0041c4:	00e7a223          	sw	a4,4(a5)
1c0041c8:	27812683          	lw	a3,632(sp)
1c0041cc:	fae5                	bnez	a3,1c0041bc <S4_Linear_2x29x39x64+0x6ba>
1c0041ce:	a25d                	j	1c004374 <S4_Linear_2x29x39x64+0x872>
1c0041d0:	4632                	lw	a2,12(sp)
1c0041d2:	00160793          	addi	a5,a2,1
1c0041d6:	01f7d713          	srli	a4,a5,0x1f
1c0041da:	97ba                	add	a5,a5,a4
1c0041dc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0041e0:	8f99                	sub	a5,a5,a4
1c0041e2:	03a787b3          	mul	a5,a5,s10
1c0041e6:	1c00f737          	lui	a4,0x1c00f
1c0041ea:	12c72683          	lw	a3,300(a4) # 1c00f12c <model_L2_Memory>
1c0041ee:	96be                	add	a3,a3,a5
1c0041f0:	6715                	lui	a4,0x5
1c0041f2:	ba470713          	addi	a4,a4,-1116 # 4ba4 <__rt_stack_size+0x43a4>
1c0041f6:	9736                	add	a4,a4,a3
1c0041f8:	01cca603          	lw	a2,28(s9) # 1000001c <model_L1_Memory>
1c0041fc:	97b2                	add	a5,a5,a2
1c0041fe:	300475f3          	csrrci	a1,mstatus,8
1c004202:	01099513          	slli	a0,s3,0x10
1c004206:	04054163          	bltz	a0,1c004248 <S4_Linear_2x29x39x64+0x746>
1c00420a:	00204637          	lui	a2,0x204
1c00420e:	40062603          	lw	a2,1024(a2) # 204400 <__L2+0x184400>
1c004212:	000306b7          	lui	a3,0x30
1c004216:	de09a6b3          	p.insert	a3,s3,15,0
1c00421a:	c136c6b3          	p.bset	a3,a3,0,19
1c00421e:	c156c6b3          	p.bset	a3,a3,0,21
1c004222:	00204537          	lui	a0,0x204
1c004226:	40d52023          	sw	a3,1024(a0) # 204400 <__L2+0x184400>
1c00422a:	002046b7          	lui	a3,0x204
1c00422e:	40f6a023          	sw	a5,1024(a3) # 204400 <__L2+0x184400>
1c004232:	002047b7          	lui	a5,0x204
1c004236:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c00423a:	28c12023          	sw	a2,640(sp)
1c00423e:	28012823          	sw	zero,656(sp)
1c004242:	30059073          	csrw	mstatus,a1
1c004246:	bf15                	j	1c00417a <S4_Linear_2x29x39x64+0x678>
1c004248:	6621                	lui	a2,0x8
1c00424a:	00330537          	lui	a0,0x330
1c00424e:	28a12223          	sw	a0,644(sp)
1c004252:	28f12a23          	sw	a5,660(sp)
1c004256:	28e12c23          	sw	a4,664(sp)
1c00425a:	29312423          	sw	s3,648(sp)
1c00425e:	28c12623          	sw	a2,652(sp)
1c004262:	28c12823          	sw	a2,656(sp)
1c004266:	567d                	li	a2,-1
1c004268:	28c12023          	sw	a2,640(sp)
1c00426c:	28012e23          	sw	zero,668(sp)
1c004270:	01402603          	lw	a2,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c004274:	ca09                	beqz	a2,1c004286 <S4_Linear_2x29x39x64+0x784>
1c004276:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00427a:	0518                	addi	a4,sp,640
1c00427c:	cfd8                	sw	a4,28(a5)
1c00427e:	051c                	addi	a5,sp,640
1c004280:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c004284:	bf7d                	j	1c004242 <S4_Linear_2x29x39x64+0x740>
1c004286:	6621                	lui	a2,0x8
1c004288:	04c9d633          	p.minu	a2,s3,a2
1c00428c:	00c78533          	add	a0,a5,a2
1c004290:	28a12a23          	sw	a0,660(sp)
1c004294:	6535                	lui	a0,0xd
1c004296:	ba450513          	addi	a0,a0,-1116 # cba4 <__rt_stack_size+0xc3a4>
1c00429a:	96aa                	add	a3,a3,a0
1c00429c:	28d12c23          	sw	a3,664(sp)
1c0042a0:	40c98633          	sub	a2,s3,a2
1c0042a4:	28c12423          	sw	a2,648(sp)
1c0042a8:	002046b7          	lui	a3,0x204
1c0042ac:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c0042b0:	28d12023          	sw	a3,640(sp)
1c0042b4:	003386b7          	lui	a3,0x338
1c0042b8:	00204637          	lui	a2,0x204
1c0042bc:	40d62023          	sw	a3,1024(a2) # 204400 <__L2+0x184400>
1c0042c0:	002046b7          	lui	a3,0x204
1c0042c4:	40f6a023          	sw	a5,1024(a3) # 204400 <__L2+0x184400>
1c0042c8:	002047b7          	lui	a5,0x204
1c0042cc:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c0042d0:	29012783          	lw	a5,656(sp)
1c0042d4:	d7cd                	beqz	a5,1c00427e <S4_Linear_2x29x39x64+0x77c>
1c0042d6:	051c                	addi	a5,sp,640
1c0042d8:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0042dc:	b74d                	j	1c00427e <S4_Linear_2x29x39x64+0x77c>
1c0042de:	01f45713          	srli	a4,s0,0x1f
1c0042e2:	00e407b3          	add	a5,s0,a4
1c0042e6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0042ea:	8f99                	sub	a5,a5,a4
1c0042ec:	6625                	lui	a2,0x9
1c0042ee:	b1c60613          	addi	a2,a2,-1252 # 8b1c <__rt_stack_size+0x831c>
1c0042f2:	43578633          	p.mac	a2,a5,s5
1c0042f6:	1c00f7b7          	lui	a5,0x1c00f
1c0042fa:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c0042fe:	011c                	addi	a5,sp,128
1c004300:	4705                	li	a4,1
1c004302:	86a6                	mv	a3,s1
1c004304:	962e                	add	a2,a2,a1
1c004306:	4562                	lw	a0,24(sp)
1c004308:	017505b3          	add	a1,a0,s7
1c00430c:	1c00f537          	lui	a0,0x1c00f
1c004310:	2f850513          	addi	a0,a0,760 # 1c00f2f8 <HyperRam>
1c004314:	26b040ef          	jal	ra,1c008d7e <pi_cl_ram_copy>
1c004318:	b571                	j	1c0041a4 <S4_Linear_2x29x39x64+0x6a2>
1c00431a:	30047673          	csrrci	a2,mstatus,8
1c00431e:	002047b7          	lui	a5,0x204
1c004322:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004326:	26012683          	lw	a3,608(sp)
1c00432a:	40d7d7b3          	sra	a5,a5,a3
1c00432e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004332:	cb85                	beqz	a5,1c004362 <S4_Linear_2x29x39x64+0x860>
1c004334:	10000593          	li	a1,256
1c004338:	00204737          	lui	a4,0x204
1c00433c:	30061073          	csrw	mstatus,a2
1c004340:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004344:	03c76783          	p.elw	a5,60(a4)
1c004348:	00b72223          	sw	a1,4(a4)
1c00434c:	30047673          	csrrci	a2,mstatus,8
1c004350:	40472783          	lw	a5,1028(a4)
1c004354:	26012683          	lw	a3,608(sp)
1c004358:	40d7d7b3          	sra	a5,a5,a3
1c00435c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004360:	fff1                	bnez	a5,1c00433c <S4_Linear_2x29x39x64+0x83a>
1c004362:	4785                	li	a5,1
1c004364:	00d796b3          	sll	a3,a5,a3
1c004368:	002047b7          	lui	a5,0x204
1c00436c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c004370:	30061073          	csrw	mstatus,a2
1c004374:	0e0a1563          	bnez	s4,1c00445e <S4_Linear_2x29x39x64+0x95c>
1c004378:	01cca703          	lw	a4,28(s9)
1c00437c:	01f45693          	srli	a3,s0,0x1f
1c004380:	00d407b3          	add	a5,s0,a3
1c004384:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004388:	8f95                	sub	a5,a5,a3
1c00438a:	86ba                	mv	a3,a4
1c00438c:	43a786b3          	p.mac	a3,a5,s10
1c004390:	c4b6                	sw	a3,72(sp)
1c004392:	86ee                	mv	a3,s11
1c004394:	435786b3          	p.mac	a3,a5,s5
1c004398:	9736                	add	a4,a4,a3
1c00439a:	c6ba                	sw	a4,76(sp)
1c00439c:	26842063          	p.beqimm	s0,8,1c0045fc <S4_Linear_2x29x39x64+0xafa>
1c0043a0:	6789                	lui	a5,0x2
1c0043a2:	fba78793          	addi	a5,a5,-70 # 1fba <__rt_stack_size+0x17ba>
1c0043a6:	04f11c23          	sh	a5,88(sp)
1c0043aa:	04f11d23          	sh	a5,90(sp)
1c0043ae:	002049b7          	lui	s3,0x204
1c0043b2:	0ff00793          	li	a5,255
1c0043b6:	08f9a223          	sw	a5,132(s3) # 204084 <__L2+0x184084>
1c0043ba:	20098993          	addi	s3,s3,512
1c0043be:	00f9a023          	sw	a5,0(s3)
1c0043c2:	00f9a623          	sw	a5,12(s3)
1c0043c6:	002047b7          	lui	a5,0x204
1c0043ca:	4742                	lw	a4,16(sp)
1c0043cc:	08e7a023          	sw	a4,128(a5) # 204080 <__L2+0x184080>
1c0043d0:	00a8                	addi	a0,sp,72
1c0043d2:	08a7a023          	sw	a0,128(a5)
1c0043d6:	24c010ef          	jal	ra,1c005622 <KerParLinearLayer_SQ8>
1c0043da:	01c9e783          	p.elw	a5,28(s3)
1c0043de:	0405                	addi	s0,s0,1
1c0043e0:	89ca                	mv	s3,s2
1c0043e2:	8a26                	mv	s4,s1
1c0043e4:	26942063          	p.beqimm	s0,9,1c004644 <S4_Linear_2x29x39x64+0xb42>
1c0043e8:	c622                	sw	s0,12(sp)
1c0043ea:	ff940793          	addi	a5,s0,-7
1c0043ee:	4705                	li	a4,1
1c0043f0:	2ef77f63          	bleu	a5,a4,1c0046ee <S4_Linear_2x29x39x64+0xbec>
1c0043f4:	fbac0793          	addi	a5,s8,-70
1c0043f8:	9b3e                	add	s6,s6,a5
1c0043fa:	30642363          	p.beqimm	s0,6,1c004700 <S4_Linear_2x29x39x64+0xbfe>
1c0043fe:	9bd6                	add	s7,s7,s5
1c004400:	fbac0913          	addi	s2,s8,-70
1c004404:	84ca                	mv	s1,s2
1c004406:	0486                	slli	s1,s1,0x1
1c004408:	1bc14783          	lbu	a5,444(sp)
1c00440c:	0ff7f793          	andi	a5,a5,255
1c004410:	ef99                	bnez	a5,1c00442e <S4_Linear_2x29x39x64+0x92c>
1c004412:	4689                	li	a3,2
1c004414:	00204737          	lui	a4,0x204
1c004418:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00441c:	03c76783          	p.elw	a5,60(a4)
1c004420:	00d72223          	sw	a3,4(a4)
1c004424:	1bc14783          	lbu	a5,444(sp)
1c004428:	0ff7f793          	andi	a5,a5,255
1c00442c:	d7f5                	beqz	a5,1c004418 <S4_Linear_2x29x39x64+0x916>
1c00442e:	ca0919e3          	bnez	s2,1c0040e0 <S4_Linear_2x29x39x64+0x5de>
1c004432:	29012783          	lw	a5,656(sp)
1c004436:	ce0783e3          	beqz	a5,1c00411c <S4_Linear_2x29x39x64+0x61a>
1c00443a:	29812683          	lw	a3,664(sp)
1c00443e:	02000713          	li	a4,32
1c004442:	002047b7          	lui	a5,0x204
1c004446:	d20688e3          	beqz	a3,1c004176 <S4_Linear_2x29x39x64+0x674>
1c00444a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00444e:	03c7e683          	p.elw	a3,60(a5)
1c004452:	00e7a223          	sw	a4,4(a5)
1c004456:	29812683          	lw	a3,664(sp)
1c00445a:	fae5                	bnez	a3,1c00444a <S4_Linear_2x29x39x64+0x948>
1c00445c:	bb29                	j	1c004176 <S4_Linear_2x29x39x64+0x674>
1c00445e:	4632                	lw	a2,12(sp)
1c004460:	00160793          	addi	a5,a2,1
1c004464:	01f7d713          	srli	a4,a5,0x1f
1c004468:	97ba                	add	a5,a5,a4
1c00446a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00446e:	8f99                	sub	a5,a5,a4
1c004470:	035787b3          	mul	a5,a5,s5
1c004474:	1c00f737          	lui	a4,0x1c00f
1c004478:	12c72683          	lw	a3,300(a4) # 1c00f12c <model_L2_Memory>
1c00447c:	96be                	add	a3,a3,a5
1c00447e:	6725                	lui	a4,0x9
1c004480:	b1c70713          	addi	a4,a4,-1252 # 8b1c <__rt_stack_size+0x831c>
1c004484:	9736                	add	a4,a4,a3
1c004486:	97ee                	add	a5,a5,s11
1c004488:	01cca603          	lw	a2,28(s9)
1c00448c:	97b2                	add	a5,a5,a2
1c00448e:	30047573          	csrrci	a0,mstatus,8
1c004492:	100a55b3          	p.exthz	a1,s4
1c004496:	010a1613          	slli	a2,s4,0x10
1c00449a:	02064c63          	bltz	a2,1c0044d2 <S4_Linear_2x29x39x64+0x9d0>
1c00449e:	002046b7          	lui	a3,0x204
1c0044a2:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c0044a6:	002b0637          	lui	a2,0x2b0
1c0044aa:	8e4d                	or	a2,a2,a1
1c0044ac:	002045b7          	lui	a1,0x204
1c0044b0:	40c5a023          	sw	a2,1024(a1) # 204400 <__L2+0x184400>
1c0044b4:	00204637          	lui	a2,0x204
1c0044b8:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
1c0044bc:	002047b7          	lui	a5,0x204
1c0044c0:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c0044c4:	26d12023          	sw	a3,608(sp)
1c0044c8:	26012823          	sw	zero,624(sp)
1c0044cc:	30051073          	csrw	mstatus,a0
1c0044d0:	b565                	j	1c004378 <S4_Linear_2x29x39x64+0x876>
1c0044d2:	6621                	lui	a2,0x8
1c0044d4:	00330837          	lui	a6,0x330
1c0044d8:	27012223          	sw	a6,612(sp)
1c0044dc:	26f12a23          	sw	a5,628(sp)
1c0044e0:	26e12c23          	sw	a4,632(sp)
1c0044e4:	26b12423          	sw	a1,616(sp)
1c0044e8:	26c12623          	sw	a2,620(sp)
1c0044ec:	26c12823          	sw	a2,624(sp)
1c0044f0:	567d                	li	a2,-1
1c0044f2:	26c12023          	sw	a2,608(sp)
1c0044f6:	26012e23          	sw	zero,636(sp)
1c0044fa:	01402603          	lw	a2,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c0044fe:	ca09                	beqz	a2,1c004510 <S4_Linear_2x29x39x64+0xa0e>
1c004500:	01002783          	lw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c004504:	1498                	addi	a4,sp,608
1c004506:	cfd8                	sw	a4,28(a5)
1c004508:	149c                	addi	a5,sp,608
1c00450a:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
1c00450e:	bf7d                	j	1c0044cc <S4_Linear_2x29x39x64+0x9ca>
1c004510:	6621                	lui	a2,0x8
1c004512:	04c5d633          	p.minu	a2,a1,a2
1c004516:	00c78833          	add	a6,a5,a2
1c00451a:	27012a23          	sw	a6,628(sp)
1c00451e:	6845                	lui	a6,0x11
1c004520:	b1c80813          	addi	a6,a6,-1252 # 10b1c <__L1Cl+0xb1c>
1c004524:	96c2                	add	a3,a3,a6
1c004526:	26d12c23          	sw	a3,632(sp)
1c00452a:	40c586b3          	sub	a3,a1,a2
1c00452e:	26d12423          	sw	a3,616(sp)
1c004532:	002046b7          	lui	a3,0x204
1c004536:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c00453a:	26d12023          	sw	a3,608(sp)
1c00453e:	003386b7          	lui	a3,0x338
1c004542:	00204637          	lui	a2,0x204
1c004546:	40d62023          	sw	a3,1024(a2) # 204400 <__L2+0x184400>
1c00454a:	002046b7          	lui	a3,0x204
1c00454e:	40f6a023          	sw	a5,1024(a3) # 204400 <__L2+0x184400>
1c004552:	002047b7          	lui	a5,0x204
1c004556:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c00455a:	27012783          	lw	a5,624(sp)
1c00455e:	d7cd                	beqz	a5,1c004508 <S4_Linear_2x29x39x64+0xa06>
1c004560:	149c                	addi	a5,sp,608
1c004562:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c004566:	b74d                	j	1c004508 <S4_Linear_2x29x39x64+0xa06>
1c004568:	30047673          	csrrci	a2,mstatus,8
1c00456c:	002047b7          	lui	a5,0x204
1c004570:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004574:	1c012683          	lw	a3,448(sp)
1c004578:	40d7d7b3          	sra	a5,a5,a3
1c00457c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004580:	cb85                	beqz	a5,1c0045b0 <S4_Linear_2x29x39x64+0xaae>
1c004582:	10000593          	li	a1,256
1c004586:	00204737          	lui	a4,0x204
1c00458a:	30061073          	csrw	mstatus,a2
1c00458e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004592:	03c76783          	p.elw	a5,60(a4)
1c004596:	00b72223          	sw	a1,4(a4)
1c00459a:	30047673          	csrrci	a2,mstatus,8
1c00459e:	40472783          	lw	a5,1028(a4)
1c0045a2:	1c012683          	lw	a3,448(sp)
1c0045a6:	40d7d7b3          	sra	a5,a5,a3
1c0045aa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0045ae:	fff1                	bnez	a5,1c00458a <S4_Linear_2x29x39x64+0xa88>
1c0045b0:	4785                	li	a5,1
1c0045b2:	00d796b3          	sll	a3,a5,a3
1c0045b6:	002047b7          	lui	a5,0x204
1c0045ba:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0045be:	30061073          	csrw	mstatus,a2
1c0045c2:	2dc12083          	lw	ra,732(sp)
1c0045c6:	2d812403          	lw	s0,728(sp)
1c0045ca:	2d412483          	lw	s1,724(sp)
1c0045ce:	2d012903          	lw	s2,720(sp)
1c0045d2:	2cc12983          	lw	s3,716(sp)
1c0045d6:	2c812a03          	lw	s4,712(sp)
1c0045da:	2c412a83          	lw	s5,708(sp)
1c0045de:	2c012b03          	lw	s6,704(sp)
1c0045e2:	2bc12b83          	lw	s7,700(sp)
1c0045e6:	2b812c03          	lw	s8,696(sp)
1c0045ea:	2b412c83          	lw	s9,692(sp)
1c0045ee:	2b012d03          	lw	s10,688(sp)
1c0045f2:	2ac12d83          	lw	s11,684(sp)
1c0045f6:	2e010113          	addi	sp,sp,736
1c0045fa:	8082                	ret
1c0045fc:	6789                	lui	a5,0x2
1c0045fe:	cf078793          	addi	a5,a5,-784 # 1cf0 <__rt_stack_size+0x14f0>
1c004602:	04f11c23          	sh	a5,88(sp)
1c004606:	04f11d23          	sh	a5,90(sp)
1c00460a:	00204437          	lui	s0,0x204
1c00460e:	0ff00793          	li	a5,255
1c004612:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
1c004616:	20040413          	addi	s0,s0,512
1c00461a:	00f42023          	sw	a5,0(s0)
1c00461e:	00f42623          	sw	a5,12(s0)
1c004622:	1c0057b7          	lui	a5,0x1c005
1c004626:	62278793          	addi	a5,a5,1570 # 1c005622 <KerParLinearLayer_SQ8>
1c00462a:	00204737          	lui	a4,0x204
1c00462e:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c004632:	00a8                	addi	a0,sp,72
1c004634:	002047b7          	lui	a5,0x204
1c004638:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c00463c:	7e7000ef          	jal	ra,1c005622 <KerParLinearLayer_SQ8>
1c004640:	01c46783          	p.elw	a5,28(s0)
1c004644:	00204437          	lui	s0,0x204
1c004648:	0ff00793          	li	a5,255
1c00464c:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
1c004650:	20040493          	addi	s1,s0,512
1c004654:	00f4a023          	sw	a5,0(s1)
1c004658:	00f4a623          	sw	a5,12(s1)
1c00465c:	1c0057b7          	lui	a5,0x1c005
1c004660:	42678793          	addi	a5,a5,1062 # 1c005426 <KerParReduct_CC_SQ8>
1c004664:	00204737          	lui	a4,0x204
1c004668:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c00466c:	1068                	addi	a0,sp,44
1c00466e:	002047b7          	lui	a5,0x204
1c004672:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c004676:	5b1000ef          	jal	ra,1c005426 <KerParReduct_CC_SQ8>
1c00467a:	01c4e783          	p.elw	a5,28(s1)
1c00467e:	100007b7          	lui	a5,0x10000
1c004682:	01c7a703          	lw	a4,28(a5) # 1000001c <model_L1_Memory>
1c004686:	67b1                	lui	a5,0xc
1c004688:	e7078793          	addi	a5,a5,-400 # be70 <__rt_stack_size+0xb670>
1c00468c:	973e                	add	a4,a4,a5
1c00468e:	300476f3          	csrrci	a3,mstatus,8
1c004692:	40042403          	lw	s0,1024(s0)
1c004696:	000a07b7          	lui	a5,0xa0
1c00469a:	0789                	addi	a5,a5,2
1c00469c:	c157c7b3          	p.bset	a5,a5,0,21
1c0046a0:	00204637          	lui	a2,0x204
1c0046a4:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
1c0046a8:	002047b7          	lui	a5,0x204
1c0046ac:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c0046b0:	4572                	lw	a0,28(sp)
1c0046b2:	40a7a023          	sw	a0,1024(a5)
1c0046b6:	1c812023          	sw	s0,448(sp)
1c0046ba:	1c012823          	sw	zero,464(sp)
1c0046be:	30069073          	csrw	mstatus,a3
1c0046c2:	1d012783          	lw	a5,464(sp)
1c0046c6:	ea0781e3          	beqz	a5,1c004568 <S4_Linear_2x29x39x64+0xa66>
1c0046ca:	1d812683          	lw	a3,472(sp)
1c0046ce:	02000713          	li	a4,32
1c0046d2:	002047b7          	lui	a5,0x204
1c0046d6:	ee0686e3          	beqz	a3,1c0045c2 <S4_Linear_2x29x39x64+0xac0>
1c0046da:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0046de:	03c7e683          	p.elw	a3,60(a5)
1c0046e2:	00e7a223          	sw	a4,4(a5)
1c0046e6:	1d812683          	lw	a3,472(sp)
1c0046ea:	fae5                	bnez	a3,1c0046da <S4_Linear_2x29x39x64+0xbd8>
1c0046ec:	bdd9                	j	1c0045c2 <S4_Linear_2x29x39x64+0xac0>
1c0046ee:	1bc14783          	lbu	a5,444(sp)
1c0046f2:	0ff7f793          	andi	a5,a5,255
1c0046f6:	4901                	li	s2,0
1c0046f8:	4481                	li	s1,0
1c0046fa:	d0078ce3          	beqz	a5,1c004412 <S4_Linear_2x29x39x64+0x910>
1c0046fe:	bb15                	j	1c004432 <S4_Linear_2x29x39x64+0x930>
1c004700:	9bd6                	add	s7,s7,s5
1c004702:	cf0c0913          	addi	s2,s8,-784
1c004706:	84ca                	mv	s1,s2
1c004708:	b9fd                	j	1c004406 <S4_Linear_2x29x39x64+0x904>

1c00470a <S5_SoftMax>:
1c00470a:	7175                	addi	sp,sp,-144
1c00470c:	c706                	sw	ra,140(sp)
1c00470e:	c522                	sw	s0,136(sp)
1c004710:	c326                	sw	s1,132(sp)
1c004712:	c14a                	sw	s2,128(sp)
1c004714:	dece                	sw	s3,124(sp)
1c004716:	842e                	mv	s0,a1
1c004718:	100007b7          	lui	a5,0x10000
1c00471c:	01c7a703          	lw	a4,28(a5) # 1000001c <model_L1_Memory>
1c004720:	c03a                	sw	a4,0(sp)
1c004722:	4789                	li	a5,2
1c004724:	00f11223          	sh	a5,4(sp)
1c004728:	00470793          	addi	a5,a4,4
1c00472c:	c43e                	sw	a5,8(sp)
1c00472e:	00870793          	addi	a5,a4,8
1c004732:	c63e                	sw	a5,12(sp)
1c004734:	300475f3          	csrrci	a1,mstatus,8
1c004738:	002046b7          	lui	a3,0x204
1c00473c:	4006a683          	lw	a3,1024(a3) # 204400 <__L2+0x184400>
1c004740:	000b07b7          	lui	a5,0xb0
1c004744:	0789                	addi	a5,a5,2
1c004746:	c157c7b3          	p.bset	a5,a5,0,21
1c00474a:	00204837          	lui	a6,0x204
1c00474e:	40f82023          	sw	a5,1024(a6) # 204400 <__L2+0x184400>
1c004752:	002047b7          	lui	a5,0x204
1c004756:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c00475a:	40a7a023          	sw	a0,1024(a5)
1c00475e:	c8b6                	sw	a3,80(sp)
1c004760:	d082                	sw	zero,96(sp)
1c004762:	30059073          	csrw	mstatus,a1
1c004766:	5786                	lw	a5,96(sp)
1c004768:	c385                	beqz	a5,1c004788 <S5_SoftMax+0x7e>
1c00476a:	56a6                	lw	a3,104(sp)
1c00476c:	02000713          	li	a4,32
1c004770:	002047b7          	lui	a5,0x204
1c004774:	c6ad                	beqz	a3,1c0047de <S5_SoftMax+0xd4>
1c004776:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00477a:	03c7e683          	p.elw	a3,60(a5)
1c00477e:	00e7a223          	sw	a4,4(a5)
1c004782:	56a6                	lw	a3,104(sp)
1c004784:	faed                	bnez	a3,1c004776 <S5_SoftMax+0x6c>
1c004786:	a8a1                	j	1c0047de <S5_SoftMax+0xd4>
1c004788:	300475f3          	csrrci	a1,mstatus,8
1c00478c:	002047b7          	lui	a5,0x204
1c004790:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004794:	46c6                	lw	a3,80(sp)
1c004796:	40d7d7b3          	sra	a5,a5,a3
1c00479a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00479e:	c79d                	beqz	a5,1c0047cc <S5_SoftMax+0xc2>
1c0047a0:	10000513          	li	a0,256
1c0047a4:	00204737          	lui	a4,0x204
1c0047a8:	30059073          	csrw	mstatus,a1
1c0047ac:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
1c0047b0:	03c76783          	p.elw	a5,60(a4)
1c0047b4:	00a72223          	sw	a0,4(a4)
1c0047b8:	300475f3          	csrrci	a1,mstatus,8
1c0047bc:	40472783          	lw	a5,1028(a4)
1c0047c0:	46c6                	lw	a3,80(sp)
1c0047c2:	40d7d7b3          	sra	a5,a5,a3
1c0047c6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0047ca:	fff9                	bnez	a5,1c0047a8 <S5_SoftMax+0x9e>
1c0047cc:	4785                	li	a5,1
1c0047ce:	00d796b3          	sll	a3,a5,a3
1c0047d2:	002047b7          	lui	a5,0x204
1c0047d6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c0047da:	30059073          	csrw	mstatus,a1
1c0047de:	100007b7          	lui	a5,0x10000
1c0047e2:	01c7a683          	lw	a3,28(a5) # 1000001c <model_L1_Memory>
1c0047e6:	06a1                	addi	a3,a3,8
1c0047e8:	300475f3          	csrrci	a1,mstatus,8
1c0047ec:	00204737          	lui	a4,0x204
1c0047f0:	40072703          	lw	a4,1024(a4) # 204400 <__L2+0x184400>
1c0047f4:	000b07b7          	lui	a5,0xb0
1c0047f8:	07a5                	addi	a5,a5,9
1c0047fa:	c157c7b3          	p.bset	a5,a5,0,21
1c0047fe:	00204537          	lui	a0,0x204
1c004802:	40f52023          	sw	a5,1024(a0) # 204400 <__L2+0x184400>
1c004806:	002047b7          	lui	a5,0x204
1c00480a:	40d7a023          	sw	a3,1024(a5) # 204400 <__L2+0x184400>
1c00480e:	40c7a023          	sw	a2,1024(a5)
1c004812:	d83a                	sw	a4,48(sp)
1c004814:	c082                	sw	zero,64(sp)
1c004816:	30059073          	csrw	mstatus,a1
1c00481a:	4786                	lw	a5,64(sp)
1c00481c:	c385                	beqz	a5,1c00483c <S5_SoftMax+0x132>
1c00481e:	46a6                	lw	a3,72(sp)
1c004820:	02000713          	li	a4,32
1c004824:	002047b7          	lui	a5,0x204
1c004828:	c6ad                	beqz	a3,1c004892 <S5_SoftMax+0x188>
1c00482a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00482e:	03c7e683          	p.elw	a3,60(a5)
1c004832:	00e7a223          	sw	a4,4(a5)
1c004836:	46a6                	lw	a3,72(sp)
1c004838:	faed                	bnez	a3,1c00482a <S5_SoftMax+0x120>
1c00483a:	a8a1                	j	1c004892 <S5_SoftMax+0x188>
1c00483c:	30047673          	csrrci	a2,mstatus,8
1c004840:	002047b7          	lui	a5,0x204
1c004844:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004848:	56c2                	lw	a3,48(sp)
1c00484a:	40d7d7b3          	sra	a5,a5,a3
1c00484e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004852:	c79d                	beqz	a5,1c004880 <S5_SoftMax+0x176>
1c004854:	10000593          	li	a1,256
1c004858:	00204737          	lui	a4,0x204
1c00485c:	30061073          	csrw	mstatus,a2
1c004860:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c004864:	03c76783          	p.elw	a5,60(a4)
1c004868:	00b72223          	sw	a1,4(a4)
1c00486c:	30047673          	csrrci	a2,mstatus,8
1c004870:	40472783          	lw	a5,1028(a4)
1c004874:	56c2                	lw	a3,48(sp)
1c004876:	40d7d7b3          	sra	a5,a5,a3
1c00487a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00487e:	fff9                	bnez	a5,1c00485c <S5_SoftMax+0x152>
1c004880:	4785                	li	a5,1
1c004882:	00d796b3          	sll	a3,a5,a3
1c004886:	002047b7          	lui	a5,0x204
1c00488a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c00488e:	30061073          	csrw	mstatus,a2
1c004892:	10000937          	lui	s2,0x10000
1c004896:	01c90913          	addi	s2,s2,28 # 1000001c <model_L1_Memory>
1c00489a:	00092783          	lw	a5,0(s2)
1c00489e:	0087c783          	lbu	a5,8(a5)
1c0048a2:	00f11323          	sh	a5,6(sp)
1c0048a6:	002044b7          	lui	s1,0x204
1c0048aa:	0ff00793          	li	a5,255
1c0048ae:	08f4a223          	sw	a5,132(s1) # 204084 <__L2+0x184084>
1c0048b2:	20048993          	addi	s3,s1,512
1c0048b6:	00f9a023          	sw	a5,0(s3)
1c0048ba:	00f9a623          	sw	a5,12(s3)
1c0048be:	1c0077b7          	lui	a5,0x1c007
1c0048c2:	09278793          	addi	a5,a5,146 # 1c007092 <KerParSoftMax_SQ8>
1c0048c6:	00204737          	lui	a4,0x204
1c0048ca:	08f72023          	sw	a5,128(a4) # 204080 <__L2+0x184080>
1c0048ce:	850a                	mv	a0,sp
1c0048d0:	002047b7          	lui	a5,0x204
1c0048d4:	08a7a023          	sw	a0,128(a5) # 204080 <__L2+0x184080>
1c0048d8:	7ba020ef          	jal	ra,1c007092 <KerParSoftMax_SQ8>
1c0048dc:	01c9e783          	p.elw	a5,28(s3)
1c0048e0:	00092703          	lw	a4,0(s2)
1c0048e4:	0711                	addi	a4,a4,4
1c0048e6:	300476f3          	csrrci	a3,mstatus,8
1c0048ea:	4004a483          	lw	s1,1024(s1)
1c0048ee:	000a07b7          	lui	a5,0xa0
1c0048f2:	0791                	addi	a5,a5,4
1c0048f4:	c157c7b3          	p.bset	a5,a5,0,21
1c0048f8:	00204637          	lui	a2,0x204
1c0048fc:	40f62023          	sw	a5,1024(a2) # 204400 <__L2+0x184400>
1c004900:	002047b7          	lui	a5,0x204
1c004904:	40e7a023          	sw	a4,1024(a5) # 204400 <__L2+0x184400>
1c004908:	4087a023          	sw	s0,1024(a5)
1c00490c:	c826                	sw	s1,16(sp)
1c00490e:	d002                	sw	zero,32(sp)
1c004910:	30069073          	csrw	mstatus,a3
1c004914:	5782                	lw	a5,32(sp)
1c004916:	c385                	beqz	a5,1c004936 <S5_SoftMax+0x22c>
1c004918:	56a2                	lw	a3,40(sp)
1c00491a:	02000713          	li	a4,32
1c00491e:	002047b7          	lui	a5,0x204
1c004922:	c6ad                	beqz	a3,1c00498c <S5_SoftMax+0x282>
1c004924:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c004928:	03c7e683          	p.elw	a3,60(a5)
1c00492c:	00e7a223          	sw	a4,4(a5)
1c004930:	56a2                	lw	a3,40(sp)
1c004932:	faed                	bnez	a3,1c004924 <S5_SoftMax+0x21a>
1c004934:	a8a1                	j	1c00498c <S5_SoftMax+0x282>
1c004936:	30047673          	csrrci	a2,mstatus,8
1c00493a:	002047b7          	lui	a5,0x204
1c00493e:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004942:	46c2                	lw	a3,16(sp)
1c004944:	40d7d7b3          	sra	a5,a5,a3
1c004948:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00494c:	c79d                	beqz	a5,1c00497a <S5_SoftMax+0x270>
1c00494e:	10000593          	li	a1,256
1c004952:	00204737          	lui	a4,0x204
1c004956:	30061073          	csrw	mstatus,a2
1c00495a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
1c00495e:	03c76783          	p.elw	a5,60(a4)
1c004962:	00b72223          	sw	a1,4(a4)
1c004966:	30047673          	csrrci	a2,mstatus,8
1c00496a:	40472783          	lw	a5,1028(a4)
1c00496e:	46c2                	lw	a3,16(sp)
1c004970:	40d7d7b3          	sra	a5,a5,a3
1c004974:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004978:	fff9                	bnez	a5,1c004956 <S5_SoftMax+0x24c>
1c00497a:	4785                	li	a5,1
1c00497c:	00d796b3          	sll	a3,a5,a3
1c004980:	002047b7          	lui	a5,0x204
1c004984:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
1c004988:	30061073          	csrw	mstatus,a2
1c00498c:	40ba                	lw	ra,140(sp)
1c00498e:	442a                	lw	s0,136(sp)
1c004990:	449a                	lw	s1,132(sp)
1c004992:	490a                	lw	s2,128(sp)
1c004994:	59f6                	lw	s3,124(sp)
1c004996:	6149                	addi	sp,sp,144
1c004998:	8082                	ret

1c00499a <modelCNN_Construct>:
1c00499a:	7165                	addi	sp,sp,-400
1c00499c:	18112623          	sw	ra,396(sp)
1c0049a0:	18812423          	sw	s0,392(sp)
1c0049a4:	18912223          	sw	s1,388(sp)
1c0049a8:	19212023          	sw	s2,384(sp)
1c0049ac:	17312e23          	sw	s3,380(sp)
1c0049b0:	17412c23          	sw	s4,376(sp)
1c0049b4:	17512a23          	sw	s5,372(sp)
1c0049b8:	17612823          	sw	s6,368(sp)
1c0049bc:	17712623          	sw	s7,364(sp)
1c0049c0:	17812423          	sw	s8,360(sp)
1c0049c4:	17912223          	sw	s9,356(sp)
1c0049c8:	17a12023          	sw	s10,352(sp)
1c0049cc:	15b12e23          	sw	s11,348(sp)
1c0049d0:	1068                	addi	a0,sp,44
1c0049d2:	2f8040ef          	jal	ra,1c008cca <pi_hyperram_conf_init>
1c0049d6:	0828                	addi	a0,sp,24
1c0049d8:	22f020ef          	jal	ra,1c007406 <pi_fs_conf_init>
1c0049dc:	1c00f437          	lui	s0,0x1c00f
1c0049e0:	106c                	addi	a1,sp,44
1c0049e2:	2f840513          	addi	a0,s0,760 # 1c00f2f8 <HyperRam>
1c0049e6:	5ca050ef          	jal	ra,1c009fb0 <pi_open_from_conf>
1c0049ea:	2f840513          	addi	a0,s0,760
1c0049ee:	384040ef          	jal	ra,1c008d72 <pi_ram_open>
1c0049f2:	4985                	li	s3,1
1c0049f4:	cd15                	beqz	a0,1c004a30 <modelCNN_Construct+0x96>
1c0049f6:	854e                	mv	a0,s3
1c0049f8:	18c12083          	lw	ra,396(sp)
1c0049fc:	18812403          	lw	s0,392(sp)
1c004a00:	18412483          	lw	s1,388(sp)
1c004a04:	18012903          	lw	s2,384(sp)
1c004a08:	17c12983          	lw	s3,380(sp)
1c004a0c:	17812a03          	lw	s4,376(sp)
1c004a10:	17412a83          	lw	s5,372(sp)
1c004a14:	17012b03          	lw	s6,368(sp)
1c004a18:	16c12b83          	lw	s7,364(sp)
1c004a1c:	16812c03          	lw	s8,360(sp)
1c004a20:	16412c83          	lw	s9,356(sp)
1c004a24:	16012d03          	lw	s10,352(sp)
1c004a28:	15c12d83          	lw	s11,348(sp)
1c004a2c:	6159                	addi	sp,sp,400
1c004a2e:	8082                	ret
1c004a30:	0048                	addi	a0,sp,4
1c004a32:	168040ef          	jal	ra,1c008b9a <pi_hyperflash_conf_init>
1c004a36:	1c00f437          	lui	s0,0x1c00f
1c004a3a:	2e840413          	addi	s0,s0,744 # 1c00f2e8 <HyperFlash+0xc>
1c004a3e:	004c                	addi	a1,sp,4
1c004a40:	8522                	mv	a0,s0
1c004a42:	56e050ef          	jal	ra,1c009fb0 <pi_open_from_conf>
1c004a46:	8522                	mv	a0,s0
1c004a48:	17f020ef          	jal	ra,1c0073c6 <pi_flash_open>
1c004a4c:	e905                	bnez	a0,1c004a7c <modelCNN_Construct+0xe2>
1c004a4e:	1c00f437          	lui	s0,0x1c00f
1c004a52:	2dc40793          	addi	a5,s0,732 # 1c00f2dc <HyperFlash>
1c004a56:	07b1                	addi	a5,a5,12
1c004a58:	ce3e                	sw	a5,28(sp)
1c004a5a:	cc02                	sw	zero,24(sp)
1c004a5c:	082c                	addi	a1,sp,24
1c004a5e:	2dc40513          	addi	a0,s0,732
1c004a62:	54e050ef          	jal	ra,1c009fb0 <pi_open_from_conf>
1c004a66:	2dc40513          	addi	a0,s0,732
1c004a6a:	1af020ef          	jal	ra,1c007418 <pi_fs_mount>
1c004a6e:	c909                	beqz	a0,1c004a80 <modelCNN_Construct+0xe6>
1c004a70:	2dc40513          	addi	a0,s0,732
1c004a74:	455c                	lw	a5,12(a0)
1c004a76:	43dc                	lw	a5,4(a5)
1c004a78:	0531                	addi	a0,a0,12
1c004a7a:	9782                	jalr	a5
1c004a7c:	4985                	li	s3,1
1c004a7e:	bfa5                	j	1c0049f6 <modelCNN_Construct+0x5c>
1c004a80:	1c00f537          	lui	a0,0x1c00f
1c004a84:	2dc50413          	addi	s0,a0,732 # 1c00f2dc <HyperFlash>
1c004a88:	4601                	li	a2,0
1c004a8a:	1c00f5b7          	lui	a1,0x1c00f
1c004a8e:	ac858593          	addi	a1,a1,-1336 # 1c00eac8 <__clz_tab+0x324>
1c004a92:	2dc50513          	addi	a0,a0,732
1c004a96:	1b7020ef          	jal	ra,1c00744c <pi_fs_open>
1c004a9a:	cc08                	sw	a0,24(s0)
1c004a9c:	c515                	beqz	a0,1c004ac8 <modelCNN_Construct+0x12e>
1c004a9e:	1c00f537          	lui	a0,0x1c00f
1c004aa2:	2f852783          	lw	a5,760(a0) # 1c00f2f8 <HyperRam>
1c004aa6:	4b9c                	lw	a5,16(a5)
1c004aa8:	00037637          	lui	a2,0x37
1c004aac:	a5060613          	addi	a2,a2,-1456 # 36a50 <__L1Cl+0x26a50>
1c004ab0:	004c                	addi	a1,sp,4
1c004ab2:	2f850513          	addi	a0,a0,760
1c004ab6:	9782                	jalr	a5
1c004ab8:	8a2a                	mv	s4,a0
1c004aba:	c11d                	beqz	a0,1c004ae0 <modelCNN_Construct+0x146>
1c004abc:	1c00f7b7          	lui	a5,0x1c00f
1c004ac0:	6207a223          	sw	zero,1572(a5) # 1c00f624 <model_L3_Memory>
1c004ac4:	4989                	li	s3,2
1c004ac6:	bf05                	j	1c0049f6 <modelCNN_Construct+0x5c>
1c004ac8:	1c00f537          	lui	a0,0x1c00f
1c004acc:	2dc50513          	addi	a0,a0,732 # 1c00f2dc <HyperFlash>
1c004ad0:	175020ef          	jal	ra,1c007444 <pi_fs_unmount>
1c004ad4:	445c                	lw	a5,12(s0)
1c004ad6:	43dc                	lw	a5,4(a5)
1c004ad8:	00c40513          	addi	a0,s0,12
1c004adc:	9782                	jalr	a5
1c004ade:	bf79                	j	1c004a7c <modelCNN_Construct+0xe2>
1c004ae0:	4792                	lw	a5,4(sp)
1c004ae2:	6a079b63          	bnez	a5,1c005198 <modelCNN_Construct+0x7fe>
1c004ae6:	1c00f537          	lui	a0,0x1c00f
1c004aea:	2f852783          	lw	a5,760(a0) # 1c00f2f8 <HyperRam>
1c004aee:	4b9c                	lw	a5,16(a5)
1c004af0:	00037637          	lui	a2,0x37
1c004af4:	a5060613          	addi	a2,a2,-1456 # 36a50 <__L1Cl+0x26a50>
1c004af8:	004c                	addi	a1,sp,4
1c004afa:	2f850513          	addi	a0,a0,760
1c004afe:	9782                	jalr	a5
1c004b00:	fd55                	bnez	a0,1c004abc <modelCNN_Construct+0x122>
1c004b02:	4792                	lw	a5,4(sp)
1c004b04:	1c00f737          	lui	a4,0x1c00f
1c004b08:	62f72223          	sw	a5,1572(a4) # 1c00f624 <model_L3_Memory>
1c004b0c:	4989                	li	s3,2
1c004b0e:	ee0784e3          	beqz	a5,1c0049f6 <modelCNN_Construct+0x5c>
1c004b12:	0002b537          	lui	a0,0x2b
1c004b16:	04650513          	addi	a0,a0,70 # 2b046 <__L1Cl+0x1b046>
1c004b1a:	5b7050ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c004b1e:	1c00f7b7          	lui	a5,0x1c00f
1c004b22:	12a7a623          	sw	a0,300(a5) # 1c00f12c <model_L2_Memory>
1c004b26:	498d                	li	s3,3
1c004b28:	ec0507e3          	beqz	a0,1c0049f6 <modelCNN_Construct+0x5c>
1c004b2c:	65b1                	lui	a1,0xc
1c004b2e:	e8858593          	addi	a1,a1,-376 # be88 <__rt_stack_size+0xb688>
1c004b32:	4501                	li	a0,0
1c004b34:	597050ef          	jal	ra,1c00a8ca <pi_cl_l1_malloc>
1c004b38:	100007b7          	lui	a5,0x10000
1c004b3c:	00a7ae23          	sw	a0,28(a5) # 1000001c <model_L1_Memory>
1c004b40:	64050963          	beqz	a0,1c005192 <modelCNN_Construct+0x7f8>
1c004b44:	000239b7          	lui	s3,0x23
1c004b48:	58098993          	addi	s3,s3,1408 # 23580 <__L1Cl+0x13580>
1c004b4c:	1c00fc37          	lui	s8,0x1c00f
1c004b50:	2dcc0c13          	addi	s8,s8,732 # 1c00f2dc <HyperFlash>
1c004b54:	1c00fd37          	lui	s10,0x1c00f
1c004b58:	1c00fbb7          	lui	s7,0x1c00f
1c004b5c:	4405                	li	s0,1
1c004b5e:	1c00fcb7          	lui	s9,0x1c00f
1c004b62:	1c00fb37          	lui	s6,0x1c00f
1c004b66:	40000793          	li	a5,1024
1c004b6a:	04f9cab3          	p.min	s5,s3,a5
1c004b6e:	8952                	mv	s2,s4
1c004b70:	5d8d2583          	lw	a1,1496(s10) # 1c00f5d8 <model_L3_Flash>
1c004b74:	d5a2                	sw	s0,232(sp)
1c004b76:	cb82                	sw	zero,212(sp)
1c004b78:	dda2                	sw	s0,248(sp)
1c004b7a:	0e010223          	sb	zero,228(sp)
1c004b7e:	099c                	addi	a5,sp,208
1c004b80:	8722                	mv	a4,s0
1c004b82:	86d6                	mv	a3,s5
1c004b84:	12cba603          	lw	a2,300(s7) # 1c00f12c <model_L2_Memory>
1c004b88:	95d2                	add	a1,a1,s4
1c004b8a:	018c2503          	lw	a0,24(s8)
1c004b8e:	123020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004b92:	0e410783          	lb	a5,228(sp)
1c004b96:	ef89                	bnez	a5,1c004bb0 <modelCNN_Construct+0x216>
1c004b98:	30047df3          	csrrci	s11,mstatus,8
1c004b9c:	85a2                	mv	a1,s0
1c004b9e:	01c00513          	li	a0,28
1c004ba2:	28f050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004ba6:	300d9073          	csrw	mstatus,s11
1c004baa:	0e410783          	lb	a5,228(sp)
1c004bae:	d7ed                	beqz	a5,1c004b98 <modelCNN_Construct+0x1fe>
1c004bb0:	624ca583          	lw	a1,1572(s9) # 1c00f624 <model_L3_Memory>
1c004bb4:	d4a2                	sw	s0,104(sp)
1c004bb6:	ca82                	sw	zero,84(sp)
1c004bb8:	dca2                	sw	s0,120(sp)
1c004bba:	06010223          	sb	zero,100(sp)
1c004bbe:	2f8b2783          	lw	a5,760(s6) # 1c00f2f8 <HyperRam>
1c004bc2:	0087a803          	lw	a6,8(a5)
1c004bc6:	089c                	addi	a5,sp,80
1c004bc8:	4701                	li	a4,0
1c004bca:	86d6                	mv	a3,s5
1c004bcc:	12cba603          	lw	a2,300(s7)
1c004bd0:	95ca                	add	a1,a1,s2
1c004bd2:	2f8b0513          	addi	a0,s6,760
1c004bd6:	9802                	jalr	a6
1c004bd8:	06410783          	lb	a5,100(sp)
1c004bdc:	ef89                	bnez	a5,1c004bf6 <modelCNN_Construct+0x25c>
1c004bde:	30047973          	csrrci	s2,mstatus,8
1c004be2:	85a2                	mv	a1,s0
1c004be4:	01c00513          	li	a0,28
1c004be8:	249050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004bec:	30091073          	csrw	mstatus,s2
1c004bf0:	06410783          	lb	a5,100(sp)
1c004bf4:	d7ed                	beqz	a5,1c004bde <modelCNN_Construct+0x244>
1c004bf6:	9a56                	add	s4,s4,s5
1c004bf8:	415989b3          	sub	s3,s3,s5
1c004bfc:	f60995e3          	bnez	s3,1c004b66 <modelCNN_Construct+0x1cc>
1c004c00:	1c00f7b7          	lui	a5,0x1c00f
1c004c04:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004c08:	1c00f7b7          	lui	a5,0x1c00f
1c004c0c:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004c10:	1c00f7b7          	lui	a5,0x1c00f
1c004c14:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004c18:	4785                	li	a5,1
1c004c1a:	d5be                	sw	a5,232(sp)
1c004c1c:	cb82                	sw	zero,212(sp)
1c004c1e:	ddbe                	sw	a5,248(sp)
1c004c20:	0e010223          	sb	zero,228(sp)
1c004c24:	099c                	addi	a5,sp,208
1c004c26:	4705                	li	a4,1
1c004c28:	46a5                	li	a3,9
1c004c2a:	6615                	lui	a2,0x5
1c004c2c:	b6060613          	addi	a2,a2,-1184 # 4b60 <__rt_stack_size+0x4360>
1c004c30:	962e                	add	a2,a2,a1
1c004c32:	000285b7          	lui	a1,0x28
1c004c36:	0e058593          	addi	a1,a1,224 # 280e0 <__L1Cl+0x180e0>
1c004c3a:	95c2                	add	a1,a1,a6
1c004c3c:	075020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004c40:	0e410783          	lb	a5,228(sp)
1c004c44:	ef89                	bnez	a5,1c004c5e <modelCNN_Construct+0x2c4>
1c004c46:	30047473          	csrrci	s0,mstatus,8
1c004c4a:	4585                	li	a1,1
1c004c4c:	01c00513          	li	a0,28
1c004c50:	1e1050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004c54:	30041073          	csrw	mstatus,s0
1c004c58:	0e410783          	lb	a5,228(sp)
1c004c5c:	d7ed                	beqz	a5,1c004c46 <modelCNN_Construct+0x2ac>
1c004c5e:	1c00f7b7          	lui	a5,0x1c00f
1c004c62:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004c66:	1c00f7b7          	lui	a5,0x1c00f
1c004c6a:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004c6e:	1c00f7b7          	lui	a5,0x1c00f
1c004c72:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004c76:	4785                	li	a5,1
1c004c78:	d5be                	sw	a5,232(sp)
1c004c7a:	cb82                	sw	zero,212(sp)
1c004c7c:	ddbe                	sw	a5,248(sp)
1c004c7e:	0e010223          	sb	zero,228(sp)
1c004c82:	099c                	addi	a5,sp,208
1c004c84:	4705                	li	a4,1
1c004c86:	12000693          	li	a3,288
1c004c8a:	6615                	lui	a2,0x5
1c004c8c:	80060613          	addi	a2,a2,-2048 # 4800 <__rt_stack_size+0x4000>
1c004c90:	962e                	add	a2,a2,a1
1c004c92:	000285b7          	lui	a1,0x28
1c004c96:	d8058593          	addi	a1,a1,-640 # 27d80 <__L1Cl+0x17d80>
1c004c9a:	95c2                	add	a1,a1,a6
1c004c9c:	015020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004ca0:	0e410783          	lb	a5,228(sp)
1c004ca4:	ef89                	bnez	a5,1c004cbe <modelCNN_Construct+0x324>
1c004ca6:	30047473          	csrrci	s0,mstatus,8
1c004caa:	4585                	li	a1,1
1c004cac:	01c00513          	li	a0,28
1c004cb0:	181050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004cb4:	30041073          	csrw	mstatus,s0
1c004cb8:	0e410783          	lb	a5,228(sp)
1c004cbc:	d7ed                	beqz	a5,1c004ca6 <modelCNN_Construct+0x30c>
1c004cbe:	1c00f7b7          	lui	a5,0x1c00f
1c004cc2:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004cc6:	1c00f7b7          	lui	a5,0x1c00f
1c004cca:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004cce:	1c00f7b7          	lui	a5,0x1c00f
1c004cd2:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004cd6:	4785                	li	a5,1
1c004cd8:	d5be                	sw	a5,232(sp)
1c004cda:	cb82                	sw	zero,212(sp)
1c004cdc:	ddbe                	sw	a5,248(sp)
1c004cde:	0e010223          	sb	zero,228(sp)
1c004ce2:	099c                	addi	a5,sp,208
1c004ce4:	4705                	li	a4,1
1c004ce6:	08000693          	li	a3,128
1c004cea:	6615                	lui	a2,0x5
1c004cec:	a2060613          	addi	a2,a2,-1504 # 4a20 <__rt_stack_size+0x4220>
1c004cf0:	962e                	add	a2,a2,a1
1c004cf2:	000285b7          	lui	a1,0x28
1c004cf6:	fa058593          	addi	a1,a1,-96 # 27fa0 <__L1Cl+0x17fa0>
1c004cfa:	95c2                	add	a1,a1,a6
1c004cfc:	7b4020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004d00:	0e410783          	lb	a5,228(sp)
1c004d04:	ef89                	bnez	a5,1c004d1e <modelCNN_Construct+0x384>
1c004d06:	30047473          	csrrci	s0,mstatus,8
1c004d0a:	4585                	li	a1,1
1c004d0c:	01c00513          	li	a0,28
1c004d10:	121050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004d14:	30041073          	csrw	mstatus,s0
1c004d18:	0e410783          	lb	a5,228(sp)
1c004d1c:	d7ed                	beqz	a5,1c004d06 <modelCNN_Construct+0x36c>
1c004d1e:	1c00f7b7          	lui	a5,0x1c00f
1c004d22:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004d26:	1c00f7b7          	lui	a5,0x1c00f
1c004d2a:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004d2e:	1c00f7b7          	lui	a5,0x1c00f
1c004d32:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004d36:	4785                	li	a5,1
1c004d38:	d5be                	sw	a5,232(sp)
1c004d3a:	cb82                	sw	zero,212(sp)
1c004d3c:	ddbe                	sw	a5,248(sp)
1c004d3e:	0e010223          	sb	zero,228(sp)
1c004d42:	099c                	addi	a5,sp,208
1c004d44:	4705                	li	a4,1
1c004d46:	02000693          	li	a3,32
1c004d4a:	6615                	lui	a2,0x5
1c004d4c:	b2060613          	addi	a2,a2,-1248 # 4b20 <__rt_stack_size+0x4320>
1c004d50:	962e                	add	a2,a2,a1
1c004d52:	000285b7          	lui	a1,0x28
1c004d56:	0a058593          	addi	a1,a1,160 # 280a0 <__L1Cl+0x180a0>
1c004d5a:	95c2                	add	a1,a1,a6
1c004d5c:	754020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004d60:	0e410783          	lb	a5,228(sp)
1c004d64:	ef89                	bnez	a5,1c004d7e <modelCNN_Construct+0x3e4>
1c004d66:	30047473          	csrrci	s0,mstatus,8
1c004d6a:	4585                	li	a1,1
1c004d6c:	01c00513          	li	a0,28
1c004d70:	0c1050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004d74:	30041073          	csrw	mstatus,s0
1c004d78:	0e410783          	lb	a5,228(sp)
1c004d7c:	d7ed                	beqz	a5,1c004d66 <modelCNN_Construct+0x3cc>
1c004d7e:	1c00f7b7          	lui	a5,0x1c00f
1c004d82:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004d86:	1c00f7b7          	lui	a5,0x1c00f
1c004d8a:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004d8e:	1c00f7b7          	lui	a5,0x1c00f
1c004d92:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004d96:	4785                	li	a5,1
1c004d98:	d5be                	sw	a5,232(sp)
1c004d9a:	cb82                	sw	zero,212(sp)
1c004d9c:	ddbe                	sw	a5,248(sp)
1c004d9e:	0e010223          	sb	zero,228(sp)
1c004da2:	099c                	addi	a5,sp,208
1c004da4:	4705                	li	a4,1
1c004da6:	02000693          	li	a3,32
1c004daa:	6615                	lui	a2,0x5
1c004dac:	b4060613          	addi	a2,a2,-1216 # 4b40 <__rt_stack_size+0x4340>
1c004db0:	962e                	add	a2,a2,a1
1c004db2:	000285b7          	lui	a1,0x28
1c004db6:	0c058593          	addi	a1,a1,192 # 280c0 <__L1Cl+0x180c0>
1c004dba:	95c2                	add	a1,a1,a6
1c004dbc:	6f4020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004dc0:	0e410783          	lb	a5,228(sp)
1c004dc4:	ef89                	bnez	a5,1c004dde <modelCNN_Construct+0x444>
1c004dc6:	30047473          	csrrci	s0,mstatus,8
1c004dca:	4585                	li	a1,1
1c004dcc:	01c00513          	li	a0,28
1c004dd0:	061050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004dd4:	30041073          	csrw	mstatus,s0
1c004dd8:	0e410783          	lb	a5,228(sp)
1c004ddc:	d7ed                	beqz	a5,1c004dc6 <modelCNN_Construct+0x42c>
1c004dde:	1c00f7b7          	lui	a5,0x1c00f
1c004de2:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004de6:	1c00f7b7          	lui	a5,0x1c00f
1c004dea:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004dee:	1c00f7b7          	lui	a5,0x1c00f
1c004df2:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004df6:	4785                	li	a5,1
1c004df8:	d5be                	sw	a5,232(sp)
1c004dfa:	cb82                	sw	zero,212(sp)
1c004dfc:	ddbe                	sw	a5,248(sp)
1c004dfe:	0e010223          	sb	zero,228(sp)
1c004e02:	099c                	addi	a5,sp,208
1c004e04:	4705                	li	a4,1
1c004e06:	46a5                	li	a3,9
1c004e08:	6615                	lui	a2,0x5
1c004e0a:	b6c60613          	addi	a2,a2,-1172 # 4b6c <__rt_stack_size+0x436c>
1c004e0e:	962e                	add	a2,a2,a1
1c004e10:	000285b7          	lui	a1,0x28
1c004e14:	0ec58593          	addi	a1,a1,236 # 280ec <__L1Cl+0x180ec>
1c004e18:	95c2                	add	a1,a1,a6
1c004e1a:	696020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004e1e:	0e410783          	lb	a5,228(sp)
1c004e22:	ef89                	bnez	a5,1c004e3c <modelCNN_Construct+0x4a2>
1c004e24:	30047473          	csrrci	s0,mstatus,8
1c004e28:	4585                	li	a1,1
1c004e2a:	01c00513          	li	a0,28
1c004e2e:	003050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004e32:	30041073          	csrw	mstatus,s0
1c004e36:	0e410783          	lb	a5,228(sp)
1c004e3a:	d7ed                	beqz	a5,1c004e24 <modelCNN_Construct+0x48a>
1c004e3c:	1c00f7b7          	lui	a5,0x1c00f
1c004e40:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004e44:	1c00f7b7          	lui	a5,0x1c00f
1c004e48:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004e4c:	1c00f7b7          	lui	a5,0x1c00f
1c004e50:	12c7a603          	lw	a2,300(a5) # 1c00f12c <model_L2_Memory>
1c004e54:	4785                	li	a5,1
1c004e56:	d5be                	sw	a5,232(sp)
1c004e58:	cb82                	sw	zero,212(sp)
1c004e5a:	ddbe                	sw	a5,248(sp)
1c004e5c:	0e010223          	sb	zero,228(sp)
1c004e60:	099c                	addi	a5,sp,208
1c004e62:	4705                	li	a4,1
1c004e64:	6695                	lui	a3,0x5
1c004e66:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c004e6a:	000235b7          	lui	a1,0x23
1c004e6e:	58058593          	addi	a1,a1,1408 # 23580 <__L1Cl+0x13580>
1c004e72:	95c2                	add	a1,a1,a6
1c004e74:	63c020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004e78:	0e410783          	lb	a5,228(sp)
1c004e7c:	ef89                	bnez	a5,1c004e96 <modelCNN_Construct+0x4fc>
1c004e7e:	30047473          	csrrci	s0,mstatus,8
1c004e82:	4585                	li	a1,1
1c004e84:	01c00513          	li	a0,28
1c004e88:	7a8050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004e8c:	30041073          	csrw	mstatus,s0
1c004e90:	0e410783          	lb	a5,228(sp)
1c004e94:	d7ed                	beqz	a5,1c004e7e <modelCNN_Construct+0x4e4>
1c004e96:	1c00f7b7          	lui	a5,0x1c00f
1c004e9a:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004e9e:	1c00f7b7          	lui	a5,0x1c00f
1c004ea2:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004ea6:	1c00f7b7          	lui	a5,0x1c00f
1c004eaa:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004eae:	4785                	li	a5,1
1c004eb0:	d5be                	sw	a5,232(sp)
1c004eb2:	cb82                	sw	zero,212(sp)
1c004eb4:	ddbe                	sw	a5,248(sp)
1c004eb6:	0e010223          	sb	zero,228(sp)
1c004eba:	099c                	addi	a5,sp,208
1c004ebc:	4705                	li	a4,1
1c004ebe:	10000693          	li	a3,256
1c004ec2:	6615                	lui	a2,0x5
1c004ec4:	92060613          	addi	a2,a2,-1760 # 4920 <__rt_stack_size+0x4120>
1c004ec8:	962e                	add	a2,a2,a1
1c004eca:	000285b7          	lui	a1,0x28
1c004ece:	ea058593          	addi	a1,a1,-352 # 27ea0 <__L1Cl+0x17ea0>
1c004ed2:	95c2                	add	a1,a1,a6
1c004ed4:	5dc020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004ed8:	0e410783          	lb	a5,228(sp)
1c004edc:	ef89                	bnez	a5,1c004ef6 <modelCNN_Construct+0x55c>
1c004ede:	30047473          	csrrci	s0,mstatus,8
1c004ee2:	4585                	li	a1,1
1c004ee4:	01c00513          	li	a0,28
1c004ee8:	748050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004eec:	30041073          	csrw	mstatus,s0
1c004ef0:	0e410783          	lb	a5,228(sp)
1c004ef4:	d7ed                	beqz	a5,1c004ede <modelCNN_Construct+0x544>
1c004ef6:	1c00f7b7          	lui	a5,0x1c00f
1c004efa:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004efe:	1c00f7b7          	lui	a5,0x1c00f
1c004f02:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004f06:	1c00f7b7          	lui	a5,0x1c00f
1c004f0a:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004f0e:	4785                	li	a5,1
1c004f10:	d5be                	sw	a5,232(sp)
1c004f12:	cb82                	sw	zero,212(sp)
1c004f14:	ddbe                	sw	a5,248(sp)
1c004f16:	0e010223          	sb	zero,228(sp)
1c004f1a:	099c                	addi	a5,sp,208
1c004f1c:	4705                	li	a4,1
1c004f1e:	04000693          	li	a3,64
1c004f22:	6615                	lui	a2,0x5
1c004f24:	aa060613          	addi	a2,a2,-1376 # 4aa0 <__rt_stack_size+0x42a0>
1c004f28:	962e                	add	a2,a2,a1
1c004f2a:	000285b7          	lui	a1,0x28
1c004f2e:	02058593          	addi	a1,a1,32 # 28020 <__L1Cl+0x18020>
1c004f32:	95c2                	add	a1,a1,a6
1c004f34:	57c020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004f38:	0e410783          	lb	a5,228(sp)
1c004f3c:	ef89                	bnez	a5,1c004f56 <modelCNN_Construct+0x5bc>
1c004f3e:	30047473          	csrrci	s0,mstatus,8
1c004f42:	4585                	li	a1,1
1c004f44:	01c00513          	li	a0,28
1c004f48:	6e8050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004f4c:	30041073          	csrw	mstatus,s0
1c004f50:	0e410783          	lb	a5,228(sp)
1c004f54:	d7ed                	beqz	a5,1c004f3e <modelCNN_Construct+0x5a4>
1c004f56:	1c00f7b7          	lui	a5,0x1c00f
1c004f5a:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004f5e:	1c00f7b7          	lui	a5,0x1c00f
1c004f62:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004f66:	1c00f7b7          	lui	a5,0x1c00f
1c004f6a:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004f6e:	4785                	li	a5,1
1c004f70:	d5be                	sw	a5,232(sp)
1c004f72:	cb82                	sw	zero,212(sp)
1c004f74:	ddbe                	sw	a5,248(sp)
1c004f76:	0e010223          	sb	zero,228(sp)
1c004f7a:	099c                	addi	a5,sp,208
1c004f7c:	4705                	li	a4,1
1c004f7e:	04000693          	li	a3,64
1c004f82:	6615                	lui	a2,0x5
1c004f84:	ae060613          	addi	a2,a2,-1312 # 4ae0 <__rt_stack_size+0x42e0>
1c004f88:	962e                	add	a2,a2,a1
1c004f8a:	000285b7          	lui	a1,0x28
1c004f8e:	06058593          	addi	a1,a1,96 # 28060 <__L1Cl+0x18060>
1c004f92:	95c2                	add	a1,a1,a6
1c004f94:	51c020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004f98:	0e410783          	lb	a5,228(sp)
1c004f9c:	ef89                	bnez	a5,1c004fb6 <modelCNN_Construct+0x61c>
1c004f9e:	30047473          	csrrci	s0,mstatus,8
1c004fa2:	4585                	li	a1,1
1c004fa4:	01c00513          	li	a0,28
1c004fa8:	688050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c004fac:	30041073          	csrw	mstatus,s0
1c004fb0:	0e410783          	lb	a5,228(sp)
1c004fb4:	d7ed                	beqz	a5,1c004f9e <modelCNN_Construct+0x604>
1c004fb6:	1c00f7b7          	lui	a5,0x1c00f
1c004fba:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c004fbe:	1c00f7b7          	lui	a5,0x1c00f
1c004fc2:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c004fc6:	1c00f7b7          	lui	a5,0x1c00f
1c004fca:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c004fce:	4785                	li	a5,1
1c004fd0:	d5be                	sw	a5,232(sp)
1c004fd2:	cb82                	sw	zero,212(sp)
1c004fd4:	ddbe                	sw	a5,248(sp)
1c004fd6:	0e010223          	sb	zero,228(sp)
1c004fda:	099c                	addi	a5,sp,208
1c004fdc:	4705                	li	a4,1
1c004fde:	46a5                	li	a3,9
1c004fe0:	6615                	lui	a2,0x5
1c004fe2:	b7860613          	addi	a2,a2,-1160 # 4b78 <__rt_stack_size+0x4378>
1c004fe6:	962e                	add	a2,a2,a1
1c004fe8:	000285b7          	lui	a1,0x28
1c004fec:	0f858593          	addi	a1,a1,248 # 280f8 <__L1Cl+0x180f8>
1c004ff0:	95c2                	add	a1,a1,a6
1c004ff2:	4be020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c004ff6:	0e410783          	lb	a5,228(sp)
1c004ffa:	ef89                	bnez	a5,1c005014 <modelCNN_Construct+0x67a>
1c004ffc:	30047473          	csrrci	s0,mstatus,8
1c005000:	4585                	li	a1,1
1c005002:	01c00513          	li	a0,28
1c005006:	62a050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c00500a:	30041073          	csrw	mstatus,s0
1c00500e:	0e410783          	lb	a5,228(sp)
1c005012:	d7ed                	beqz	a5,1c004ffc <modelCNN_Construct+0x662>
1c005014:	1c00f7b7          	lui	a5,0x1c00f
1c005018:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c00501c:	1c00f7b7          	lui	a5,0x1c00f
1c005020:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c005024:	1c00f7b7          	lui	a5,0x1c00f
1c005028:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c00502c:	4785                	li	a5,1
1c00502e:	d5be                	sw	a5,232(sp)
1c005030:	cb82                	sw	zero,212(sp)
1c005032:	ddbe                	sw	a5,248(sp)
1c005034:	0e010223          	sb	zero,228(sp)
1c005038:	099c                	addi	a5,sp,208
1c00503a:	4705                	li	a4,1
1c00503c:	46a1                	li	a3,8
1c00503e:	6615                	lui	a2,0x5
1c005040:	b9060613          	addi	a2,a2,-1136 # 4b90 <__rt_stack_size+0x4390>
1c005044:	962e                	add	a2,a2,a1
1c005046:	000285b7          	lui	a1,0x28
1c00504a:	11058593          	addi	a1,a1,272 # 28110 <__L1Cl+0x18110>
1c00504e:	95c2                	add	a1,a1,a6
1c005050:	460020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c005054:	0e410783          	lb	a5,228(sp)
1c005058:	ef89                	bnez	a5,1c005072 <modelCNN_Construct+0x6d8>
1c00505a:	30047473          	csrrci	s0,mstatus,8
1c00505e:	4585                	li	a1,1
1c005060:	01c00513          	li	a0,28
1c005064:	5cc050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c005068:	30041073          	csrw	mstatus,s0
1c00506c:	0e410783          	lb	a5,228(sp)
1c005070:	d7ed                	beqz	a5,1c00505a <modelCNN_Construct+0x6c0>
1c005072:	1c00f7b7          	lui	a5,0x1c00f
1c005076:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c00507a:	1c00f7b7          	lui	a5,0x1c00f
1c00507e:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c005082:	1c00f7b7          	lui	a5,0x1c00f
1c005086:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c00508a:	4785                	li	a5,1
1c00508c:	d5be                	sw	a5,232(sp)
1c00508e:	cb82                	sw	zero,212(sp)
1c005090:	ddbe                	sw	a5,248(sp)
1c005092:	0e010223          	sb	zero,228(sp)
1c005096:	099c                	addi	a5,sp,208
1c005098:	4705                	li	a4,1
1c00509a:	4689                	li	a3,2
1c00509c:	6615                	lui	a2,0x5
1c00509e:	b9860613          	addi	a2,a2,-1128 # 4b98 <__rt_stack_size+0x4398>
1c0050a2:	962e                	add	a2,a2,a1
1c0050a4:	000285b7          	lui	a1,0x28
1c0050a8:	11858593          	addi	a1,a1,280 # 28118 <__L1Cl+0x18118>
1c0050ac:	95c2                	add	a1,a1,a6
1c0050ae:	402020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c0050b2:	0e410783          	lb	a5,228(sp)
1c0050b6:	ef89                	bnez	a5,1c0050d0 <modelCNN_Construct+0x736>
1c0050b8:	30047473          	csrrci	s0,mstatus,8
1c0050bc:	4585                	li	a1,1
1c0050be:	01c00513          	li	a0,28
1c0050c2:	56e050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c0050c6:	30041073          	csrw	mstatus,s0
1c0050ca:	0e410783          	lb	a5,228(sp)
1c0050ce:	d7ed                	beqz	a5,1c0050b8 <modelCNN_Construct+0x71e>
1c0050d0:	1c00f7b7          	lui	a5,0x1c00f
1c0050d4:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c0050d8:	1c00f7b7          	lui	a5,0x1c00f
1c0050dc:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c0050e0:	1c00f7b7          	lui	a5,0x1c00f
1c0050e4:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c0050e8:	4785                	li	a5,1
1c0050ea:	d5be                	sw	a5,232(sp)
1c0050ec:	cb82                	sw	zero,212(sp)
1c0050ee:	ddbe                	sw	a5,248(sp)
1c0050f0:	0e010223          	sb	zero,228(sp)
1c0050f4:	099c                	addi	a5,sp,208
1c0050f6:	4705                	li	a4,1
1c0050f8:	4689                	li	a3,2
1c0050fa:	6615                	lui	a2,0x5
1c0050fc:	b9c60613          	addi	a2,a2,-1124 # 4b9c <__rt_stack_size+0x439c>
1c005100:	962e                	add	a2,a2,a1
1c005102:	000285b7          	lui	a1,0x28
1c005106:	11c58593          	addi	a1,a1,284 # 2811c <__L1Cl+0x1811c>
1c00510a:	95c2                	add	a1,a1,a6
1c00510c:	3a4020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c005110:	0e410783          	lb	a5,228(sp)
1c005114:	ef89                	bnez	a5,1c00512e <modelCNN_Construct+0x794>
1c005116:	30047473          	csrrci	s0,mstatus,8
1c00511a:	4585                	li	a1,1
1c00511c:	01c00513          	li	a0,28
1c005120:	510050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c005124:	30041073          	csrw	mstatus,s0
1c005128:	0e410783          	lb	a5,228(sp)
1c00512c:	d7ed                	beqz	a5,1c005116 <modelCNN_Construct+0x77c>
1c00512e:	1c00f7b7          	lui	a5,0x1c00f
1c005132:	2f47a503          	lw	a0,756(a5) # 1c00f2f4 <HyperFlash+0x18>
1c005136:	1c00f7b7          	lui	a5,0x1c00f
1c00513a:	5d87a803          	lw	a6,1496(a5) # 1c00f5d8 <model_L3_Flash>
1c00513e:	1c00f7b7          	lui	a5,0x1c00f
1c005142:	12c7a583          	lw	a1,300(a5) # 1c00f12c <model_L2_Memory>
1c005146:	4785                	li	a5,1
1c005148:	d5be                	sw	a5,232(sp)
1c00514a:	cb82                	sw	zero,212(sp)
1c00514c:	ddbe                	sw	a5,248(sp)
1c00514e:	0e010223          	sb	zero,228(sp)
1c005152:	099c                	addi	a5,sp,208
1c005154:	4705                	li	a4,1
1c005156:	46a5                	li	a3,9
1c005158:	6615                	lui	a2,0x5
1c00515a:	b8460613          	addi	a2,a2,-1148 # 4b84 <__rt_stack_size+0x4384>
1c00515e:	962e                	add	a2,a2,a1
1c005160:	000285b7          	lui	a1,0x28
1c005164:	10458593          	addi	a1,a1,260 # 28104 <__L1Cl+0x18104>
1c005168:	95c2                	add	a1,a1,a6
1c00516a:	346020ef          	jal	ra,1c0074b0 <pi_fs_copy_async>
1c00516e:	0e410783          	lb	a5,228(sp)
1c005172:	880792e3          	bnez	a5,1c0049f6 <modelCNN_Construct+0x5c>
1c005176:	30047473          	csrrci	s0,mstatus,8
1c00517a:	4585                	li	a1,1
1c00517c:	01c00513          	li	a0,28
1c005180:	4b0050ef          	jal	ra,1c00a630 <__rt_event_execute>
1c005184:	30041073          	csrw	mstatus,s0
1c005188:	0e410783          	lb	a5,228(sp)
1c00518c:	d7ed                	beqz	a5,1c005176 <modelCNN_Construct+0x7dc>
1c00518e:	869ff06f          	j	1c0049f6 <modelCNN_Construct+0x5c>
1c005192:	4991                	li	s3,4
1c005194:	863ff06f          	j	1c0049f6 <modelCNN_Construct+0x5c>
1c005198:	4712                	lw	a4,4(sp)
1c00519a:	1c00f7b7          	lui	a5,0x1c00f
1c00519e:	62e7a223          	sw	a4,1572(a5) # 1c00f624 <model_L3_Memory>
1c0051a2:	ba85                	j	1c004b12 <modelCNN_Construct+0x178>

1c0051a4 <modelCNN>:
};
int modelCNN(
		unsigned char * __restrict__ Input_1,
		signed short * __restrict__ Output_1)

{
1c0051a4:	7179                	addi	sp,sp,-48
1c0051a6:	d606                	sw	ra,44(sp)
1c0051a8:	d422                	sw	s0,40(sp)
1c0051aa:	d226                	sw	s1,36(sp)
1c0051ac:	d04a                	sw	s2,32(sp)
1c0051ae:	ce4e                	sw	s3,28(sp)
1c0051b0:	cc52                	sw	s4,24(sp)
1c0051b2:	ca56                	sw	s5,20(sp)
1c0051b4:	c85a                	sw	s6,16(sp)
1c0051b6:	c65e                	sw	s7,12(sp)
1c0051b8:	8bae                	mv	s7,a1
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }

static inline uint32_t timer_cfg_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CFG_HI_OFFSET); }
static inline void timer_cfg_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_HI_OFFSET, value); }

static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c0051ba:	10200937          	lui	s2,0x10200
1c0051be:	40090913          	addi	s2,s2,1024 # 10200400 <__l1_end+0x2003bc>
1c0051c2:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[0] = gap_cl_readhwtimer();
1c0051c6:	1c00f437          	lui	s0,0x1c00f
1c0051ca:	60f42823          	sw	a5,1552(s0) # 1c00f610 <AT_GraphPerf>
	S1_Op_input_1_formatter(
		((unsigned char * __restrict__) Input_1), /* In */
		((signed char * __restrict__) (model_L3_Memory+144768)) /* Out */
1c0051ce:	1c00fb37          	lui	s6,0x1c00f
1c0051d2:	624b2583          	lw	a1,1572(s6) # 1c00f624 <model_L3_Memory>
1c0051d6:	00023a37          	lui	s4,0x23
1c0051da:	580a0a13          	addi	s4,s4,1408 # 23580 <__L1Cl+0x13580>
	S1_Op_input_1_formatter(
1c0051de:	95d2                	add	a1,a1,s4
1c0051e0:	c73fc0ef          	jal	ra,1c001e52 <S1_Op_input_1_formatter>
1c0051e4:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[0] = gap_cl_readhwtimer() - AT_GraphPerf[0];
1c0051e8:	61042703          	lw	a4,1552(s0)
1c0051ec:	8f99                	sub	a5,a5,a4
1c0051ee:	60f42823          	sw	a5,1552(s0)
1c0051f2:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[1] = gap_cl_readhwtimer();
1c0051f6:	61040413          	addi	s0,s0,1552
1c0051fa:	c05c                	sw	a5,4(s0)
	S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu(
1c0051fc:	1c00f9b7          	lui	s3,0x1c00f
1c005200:	12c98993          	addi	s3,s3,300 # 1c00f12c <model_L2_Memory>
1c005204:	0009a583          	lw	a1,0(s3)
		((signed char * __restrict__) (model_L2_Memory+18432)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+18976)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+19360)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+19232)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+19264)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+19296)) /* Infos */
1c005208:	6495                	lui	s1,0x5
1c00520a:	b6048813          	addi	a6,s1,-1184 # 4b60 <__rt_stack_size+0x4360>
		((signed char * __restrict__) (model_L2_Memory+19264)), /* ScaleN */
1c00520e:	b4048793          	addi	a5,s1,-1216
		((unsigned char * __restrict__) (model_L2_Memory+19232)), /* Scale */
1c005212:	b2048713          	addi	a4,s1,-1248
		((signed char * __restrict__) (model_L2_Memory+19360)), /* Out */
1c005216:	ba048a93          	addi	s5,s1,-1120
		((signed int * __restrict__) (model_L2_Memory+18976)), /* Bias */
1c00521a:	a2048613          	addi	a2,s1,-1504
		((signed char * __restrict__) (model_L2_Memory+18432)), /* Filter */
1c00521e:	80048893          	addi	a7,s1,-2048
		((signed char * __restrict__) (model_L3_Memory+144768)), /* In */
1c005222:	624b2503          	lw	a0,1572(s6)
	S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu(
1c005226:	982e                	add	a6,a6,a1
1c005228:	97ae                	add	a5,a5,a1
1c00522a:	972e                	add	a4,a4,a1
1c00522c:	015586b3          	add	a3,a1,s5
1c005230:	962e                	add	a2,a2,a1
1c005232:	95c6                	add	a1,a1,a7
1c005234:	9552                	add	a0,a0,s4
1c005236:	95efd0ef          	jal	ra,1c002394 <S2_Conv2d_32x1x3x3_MaxPool_2x2_Relu>
1c00523a:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
1c00523e:	4058                	lw	a4,4(s0)
1c005240:	8f99                	sub	a5,a5,a4
1c005242:	c05c                	sw	a5,4(s0)
1c005244:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[2] = gap_cl_readhwtimer();
1c005248:	c41c                	sw	a5,8(s0)
	S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c00524a:	0009a503          	lw	a0,0(s3)
		((signed char * __restrict__) (model_L2_Memory+0)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+18720)), /* Bias */
		((signed char * __restrict__) (model_L3_Memory+144768)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+19104)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+19168)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+19308)) /* Infos */
1c00524e:	b6c48813          	addi	a6,s1,-1172
		((signed char * __restrict__) (model_L2_Memory+19168)), /* ScaleN */
1c005252:	ae048793          	addi	a5,s1,-1312
		((unsigned char * __restrict__) (model_L2_Memory+19104)), /* Scale */
1c005256:	aa048713          	addi	a4,s1,-1376
		((signed char * __restrict__) (model_L3_Memory+144768)), /* Out */
1c00525a:	624b2683          	lw	a3,1572(s6)
		((signed int * __restrict__) (model_L2_Memory+18720)), /* Bias */
1c00525e:	92048613          	addi	a2,s1,-1760
	S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c005262:	982a                	add	a6,a6,a0
1c005264:	97aa                	add	a5,a5,a0
1c005266:	972a                	add	a4,a4,a0
1c005268:	96d2                	add	a3,a3,s4
1c00526a:	962a                	add	a2,a2,a0
1c00526c:	85aa                	mv	a1,a0
1c00526e:	9556                	add	a0,a0,s5
1c005270:	cc1fd0ef          	jal	ra,1c002f30 <S3_Conv2d_64x32x3x3_MaxPool_2x2_Relu>
1c005274:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
1c005278:	4418                	lw	a4,8(s0)
1c00527a:	8f99                	sub	a5,a5,a4
1c00527c:	c41c                	sw	a5,8(s0)
1c00527e:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[3] = gap_cl_readhwtimer();
1c005282:	c45c                	sw	a5,12(s0)
	S4_Linear_2x29x39x64(
		((signed char * __restrict__) (model_L3_Memory+144768)), /* In */
1c005284:	624b2503          	lw	a0,1572(s6)
	S4_Linear_2x29x39x64(
1c005288:	0009a603          	lw	a2,0(s3)
		((signed char * __restrict__) (model_L3_Memory+0)), /* Filter */
		((signed int * __restrict__) (model_L2_Memory+19344)), /* Bias */
		((signed char * __restrict__) (model_L2_Memory+19360)), /* Out */
		((unsigned char * __restrict__) (model_L2_Memory+19352)), /* Scale */
		((signed char * __restrict__) (model_L2_Memory+19356)), /* ScaleN */
		((signed char * __restrict__) (model_L2_Memory+19320)) /* Infos */
1c00528c:	b7848813          	addi	a6,s1,-1160
		((signed char * __restrict__) (model_L2_Memory+19356)), /* ScaleN */
1c005290:	b9c48793          	addi	a5,s1,-1124
		((unsigned char * __restrict__) (model_L2_Memory+19352)), /* Scale */
1c005294:	b9848713          	addi	a4,s1,-1128
		((signed int * __restrict__) (model_L2_Memory+19344)), /* Bias */
1c005298:	b9048593          	addi	a1,s1,-1136
	S4_Linear_2x29x39x64(
1c00529c:	9832                	add	a6,a6,a2
1c00529e:	97b2                	add	a5,a5,a2
1c0052a0:	9732                	add	a4,a4,a2
1c0052a2:	015606b3          	add	a3,a2,s5
1c0052a6:	962e                	add	a2,a2,a1
1c0052a8:	85aa                	mv	a1,a0
1c0052aa:	9552                	add	a0,a0,s4
1c0052ac:	857fe0ef          	jal	ra,1c003b02 <S4_Linear_2x29x39x64>
1c0052b0:	00892783          	lw	a5,8(s2)
	);
	AT_GraphPerf[3] = gap_cl_readhwtimer() - AT_GraphPerf[3];
1c0052b4:	4458                	lw	a4,12(s0)
1c0052b6:	8f99                	sub	a5,a5,a4
1c0052b8:	c45c                	sw	a5,12(s0)
1c0052ba:	00892783          	lw	a5,8(s2)
	AT_GraphPerf[4] = gap_cl_readhwtimer();
1c0052be:	c81c                	sw	a5,16(s0)
	S5_SoftMax(
1c0052c0:	0009a503          	lw	a0,0(s3)
		((signed char * __restrict__) (model_L2_Memory+19360)), /* In */
		((signed short * __restrict__) Output_1), /* Out */
		((signed char * __restrict__) (model_L2_Memory+19332)) /* Infos */
1c0052c4:	b8448613          	addi	a2,s1,-1148
	S5_SoftMax(
1c0052c8:	962a                	add	a2,a2,a0
1c0052ca:	85de                	mv	a1,s7
1c0052cc:	9556                	add	a0,a0,s5
1c0052ce:	c3cff0ef          	jal	ra,1c00470a <S5_SoftMax>
1c0052d2:	00892903          	lw	s2,8(s2)
	);
	AT_GraphPerf[4] = gap_cl_readhwtimer() - AT_GraphPerf[4];
1c0052d6:	481c                	lw	a5,16(s0)
1c0052d8:	40f90933          	sub	s2,s2,a5
1c0052dc:	01242823          	sw	s2,16(s0)
	return 0;
}
1c0052e0:	4501                	li	a0,0
1c0052e2:	50b2                	lw	ra,44(sp)
1c0052e4:	5422                	lw	s0,40(sp)
1c0052e6:	5492                	lw	s1,36(sp)
1c0052e8:	5902                	lw	s2,32(sp)
1c0052ea:	49f2                	lw	s3,28(sp)
1c0052ec:	4a62                	lw	s4,24(sp)
1c0052ee:	4ad2                	lw	s5,20(sp)
1c0052f0:	4b42                	lw	s6,16(sp)
1c0052f2:	4bb2                	lw	s7,12(sp)
1c0052f4:	6145                	addi	sp,sp,48
1c0052f6:	8082                	ret

1c0052f8 <KerReductIO_Compact_SQ8_1>:
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	for (int c=First; c<Last; c++) KerReduct_Activation_SQ8(In+Size*c, Out+Size*c, Size, Scale[c], ScaleN[c], ACT_LEAKYRELU, ActScale, ActScaleN, A0, B0, C0);
	gap_waitbarrier(0);
}
1c0052f8:	f1402773          	csrr	a4,mhartid
1c0052fc:	c8071733          	p.extractu	a4,a4,4,0
1c005300:	f83637b3          	p.bclr	a5,a2,28,3
1c005304:	00f037b3          	snez	a5,a5
1c005308:	00365813          	srli	a6,a2,0x3
1c00530c:	97c2                	add	a5,a5,a6
1c00530e:	02f70733          	mul	a4,a4,a5
1c005312:	00f70f33          	add	t5,a4,a5
1c005316:	04cf4f33          	p.min	t5,t5,a2
1c00531a:	40ef0f33          	sub	t5,t5,a4
1c00531e:	10d65363          	ble	a3,a2,1c005424 <KerReductIO_Compact_SQ8_1+0x12c>
1c005322:	7139                	addi	sp,sp,-64
1c005324:	de22                	sw	s0,60(sp)
1c005326:	dc26                	sw	s1,56(sp)
1c005328:	da4a                	sw	s2,52(sp)
1c00532a:	d84e                	sw	s3,48(sp)
1c00532c:	d652                	sw	s4,44(sp)
1c00532e:	d456                	sw	s5,40(sp)
1c005330:	d25a                	sw	s6,36(sp)
1c005332:	d05e                	sw	s7,32(sp)
1c005334:	ce62                	sw	s8,28(sp)
1c005336:	cc66                	sw	s9,24(sp)
1c005338:	ca6a                	sw	s10,20(sp)
1c00533a:	c86e                	sw	s11,16(sp)
1c00533c:	8bb2                	mv	s7,a2
1c00533e:	040f6f33          	p.max	t5,t5,zero
1c005342:	00261b13          	slli	s6,a2,0x2
1c005346:	ffff0793          	addi	a5,t5,-1
1c00534a:	97ba                	add	a5,a5,a4
1c00534c:	00fb0833          	add	a6,s6,a5
1c005350:	95c2                	add	a1,a1,a6
1c005352:	97b2                	add	a5,a5,a2
1c005354:	953e                	add	a0,a0,a5
1c005356:	c40f39b3          	p.bclr	s3,t5,2,0
1c00535a:	41e989b3          	sub	s3,s3,t5
1c00535e:	8fb2                	mv	t6,a2
1c005360:	4285                	li	t0,1
1c005362:	41e282b3          	sub	t0,t0,t5
1c005366:	40e283b3          	sub	t2,t0,a4
1c00536a:	4d9d                	li	s11,7
1c00536c:	4415                	li	s0,5
1c00536e:	41e40433          	sub	s0,s0,t5
1c005372:	0985                	addi	s3,s3,1
1c005374:	004f7d13          	andi	s10,t5,4
1c005378:	c40f3ab3          	p.bclr	s5,t5,2,0
1c00537c:	9aba                	add	s5,s5,a4
1c00537e:	002f7c93          	andi	s9,t5,2
1c005382:	c20f37b3          	p.bclr	a5,t5,1,0
1c005386:	97ba                	add	a5,a5,a4
1c005388:	c63e                	sw	a5,12(sp)
1c00538a:	fc1f3c33          	p.bclr	s8,t5,30,1
1c00538e:	00204a37          	lui	s4,0x204
1c005392:	200a0a13          	addi	s4,s4,512 # 204200 <__L2+0x184200>
1c005396:	a801                	j	1c0053a6 <KerReductIO_Compact_SQ8_1+0xae>
1c005398:	01ca6783          	p.elw	a5,28(s4)
1c00539c:	9fb2                	add	t6,t6,a2
1c00539e:	95da                	add	a1,a1,s6
1c0053a0:	955e                	add	a0,a0,s7
1c0053a2:	06dfd363          	ble	a3,t6,1c005408 <KerReductIO_Compact_SQ8_1+0x110>
1c0053a6:	00b38933          	add	s2,t2,a1
1c0053aa:	00a384b3          	add	s1,t2,a0
1c0053ae:	03edf963          	bleu	t5,s11,1c0053e0 <KerReductIO_Compact_SQ8_1+0xe8>
1c0053b2:	00a28333          	add	t1,t0,a0
1c0053b6:	00b408b3          	add	a7,s0,a1
1c0053ba:	00a40833          	add	a6,s0,a0
1c0053be:	00b28733          	add	a4,t0,a1
1c0053c2:	405987b3          	sub	a5,s3,t0
1c0053c6:	17e1                	addi	a5,a5,-8
1c0053c8:	838d                	srli	a5,a5,0x3
1c0053ca:	0785                	addi	a5,a5,1
1c0053cc:	0087c0fb          	lp.setup	x1,a5,1c0053dc <KerReductIO_Compact_SQ8_1+0xe4>
1c0053d0:	0088ae0b          	p.lw	t3,8(a7!)
1c0053d4:	00872e8b          	p.lw	t4,8(a4!)
1c0053d8:	01d3242b          	p.sw	t4,8(t1!)
1c0053dc:	01c8242b          	p.sw	t3,8(a6!)
1c0053e0:	000d0663          	beqz	s10,1c0053ec <KerReductIO_Compact_SQ8_1+0xf4>
1c0053e4:	21597783          	p.lw	a5,s5(s2)
1c0053e8:	00f4eaa3          	p.sw	a5,s5(s1)
1c0053ec:	000c8763          	beqz	s9,1c0053fa <KerReductIO_Compact_SQ8_1+0x102>
1c0053f0:	4732                	lw	a4,12(sp)
1c0053f2:	50e97783          	p.lhu	a5,a4(s2)
1c0053f6:	00f4d723          	p.sh	a5,a4(s1)
1c0053fa:	f80c0fe3          	beqz	s8,1c005398 <KerReductIO_Compact_SQ8_1+0xa0>
1c0053fe:	0005c783          	lbu	a5,0(a1)
1c005402:	00f50023          	sb	a5,0(a0)
1c005406:	bf49                	j	1c005398 <KerReductIO_Compact_SQ8_1+0xa0>
1c005408:	5472                	lw	s0,60(sp)
1c00540a:	54e2                	lw	s1,56(sp)
1c00540c:	5952                	lw	s2,52(sp)
1c00540e:	59c2                	lw	s3,48(sp)
1c005410:	5a32                	lw	s4,44(sp)
1c005412:	5aa2                	lw	s5,40(sp)
1c005414:	5b12                	lw	s6,36(sp)
1c005416:	5b82                	lw	s7,32(sp)
1c005418:	4c72                	lw	s8,28(sp)
1c00541a:	4ce2                	lw	s9,24(sp)
1c00541c:	4d52                	lw	s10,20(sp)
1c00541e:	4dc2                	lw	s11,16(sp)
1c005420:	6121                	addi	sp,sp,64
1c005422:	8082                	ret
1c005424:	8082                	ret

1c005426 <KerParReduct_CC_SQ8>:
1c005426:	00855683          	lhu	a3,8(a0)
1c00542a:	f1402773          	csrr	a4,mhartid
1c00542e:	c8071733          	p.extractu	a4,a4,4,0
1c005432:	f836b7b3          	p.bclr	a5,a3,28,3
1c005436:	00f037b3          	snez	a5,a5
1c00543a:	0036d613          	srli	a2,a3,0x3
1c00543e:	97b2                	add	a5,a5,a2
1c005440:	02f70733          	mul	a4,a4,a5
1c005444:	00f70833          	add	a6,a4,a5
1c005448:	04d84833          	p.min	a6,a6,a3
1c00544c:	00052e03          	lw	t3,0(a0)
1c005450:	01052e83          	lw	t4,16(a0)
1c005454:	01452f03          	lw	t5,20(a0)
1c005458:	00452303          	lw	t1,4(a0)
1c00545c:	00a55883          	lhu	a7,10(a0)
1c005460:	00c55783          	lhu	a5,12(a0)
1c005464:	02f888b3          	mul	a7,a7,a5
1c005468:	05077563          	bleu	a6,a4,1c0054b2 <KerParReduct_CC_SQ8+0x8c>
1c00546c:	9f3a                	add	t5,t5,a4
1c00546e:	00289f93          	slli	t6,a7,0x2
1c005472:	43f70e33          	p.mac	t3,a4,t6
1c005476:	43170333          	p.mac	t1,a4,a7
1c00547a:	9eba                	add	t4,t4,a4
1c00547c:	40e80833          	sub	a6,a6,a4
1c005480:	0188407b          	lp.setup	x0,a6,1c0054b0 <KerParReduct_CC_SQ8+0x8a>
1c005484:	001ec50b          	p.lbu	a0,1(t4!)
1c005488:	001f468b          	p.lbu	a3,1(t5!)
1c00548c:	02088163          	beqz	a7,1c0054ae <KerParReduct_CC_SQ8+0x88>
1c005490:	859a                	mv	a1,t1
1c005492:	8672                	mv	a2,t3
1c005494:	8746                	mv	a4,a7
1c005496:	00a740fb          	lp.setup	x1,a4,1c0054aa <KerParReduct_CC_SQ8+0x84>
1c00549a:	0046278b          	p.lw	a5,4(a2!)
1c00549e:	02a787b3          	mul	a5,a5,a0
1c0054a2:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c0054a6:	148797b3          	p.clip	a5,a5,8
1c0054aa:	00f580ab          	p.sb	a5,1(a1!)
1c0054ae:	9e7e                	add	t3,t3,t6
1c0054b0:	9346                	add	t1,t1,a7
1c0054b2:	002047b7          	lui	a5,0x204
1c0054b6:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0054ba:	01c7e703          	p.elw	a4,28(a5)
1c0054be:	8082                	ret

1c0054c0 <KerParReductIO_CC_SQ8>:
*/
extern void DumpFeaturePlanes(char *Mess, int DataSize, void *Plane, unsigned int NPlanes, unsigned int W, unsigned int Wmax, unsigned int H, unsigned int Hmax);

void KerParReductIO_CC_SQ8(KerConvLinReduct_SQ8_T *Arg)

{
1c0054c0:	1141                	addi	sp,sp,-16
1c0054c2:	c606                	sw	ra,12(sp)
	unsigned int S = Arg->Feat;
1c0054c4:	00855703          	lhu	a4,8(a0)
	unsigned int Size = Arg->W*Arg->H;
1c0054c8:	00a55783          	lhu	a5,10(a0)
1c0054cc:	00c55603          	lhu	a2,12(a0)
1c0054d0:	02c78633          	mul	a2,a5,a2
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0054d4:	f14027f3          	csrr	a5,mhartid
1c0054d8:	c80797b3          	p.extractu	a5,a5,4,0
        Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0054dc:	f83732b3          	p.bclr	t0,a4,28,3
1c0054e0:	005032b3          	snez	t0,t0
1c0054e4:	00375693          	srli	a3,a4,0x3
1c0054e8:	92b6                	add	t0,t0,a3
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c0054ea:	025787b3          	mul	a5,a5,t0
1c0054ee:	00578333          	add	t1,a5,t0
1c0054f2:	04e34333          	p.min	t1,t1,a4
	int * __restrict__ In = (int *__restrict__) Arg->In;
1c0054f6:	00052083          	lw	ra,0(a0)
1c0054fa:	00261393          	slli	t2,a2,0x2
	signed char *__restrict__ Out = (signed char *__restrict__)(In+First*Size);
1c0054fe:	8e06                	mv	t3,ra
1c005500:	42f38e33          	p.mac	t3,t2,a5
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
1c005504:	01052f03          	lw	t5,16(a0)
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
1c005508:	01452f83          	lw	t6,20(a0)
	signed char * __restrict__ Infos = (signed char *__restrict__) Arg->Infos;
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	S = Size*Max(0, Last-First);
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c00550c:	0267ff63          	bleu	t1,a5,1c00554a <KerParReductIO_CC_SQ8+0x8a>
1c005510:	9fbe                	add	t6,t6,a5
1c005512:	8ef2                	mv	t4,t3
1c005514:	9f3e                	add	t5,t5,a5
1c005516:	40f30333          	sub	t1,t1,a5
1c00551a:	0173407b          	lp.setup	x0,t1,1c005548 <KerParReductIO_CC_SQ8+0x88>
1c00551e:	001f488b          	p.lbu	a7,1(t5!)
1c005522:	001fc68b          	p.lbu	a3,1(t6!)
        for (unsigned int i=0; i<N; i++) {
1c005526:	c205                	beqz	a2,1c005546 <KerParReductIO_CC_SQ8+0x86>
1c005528:	8872                	mv	a6,t3
1c00552a:	85f6                	mv	a1,t4
1c00552c:	8732                	mv	a4,a2
1c00552e:	00a740fb          	lp.setup	x1,a4,1c005542 <KerParReductIO_CC_SQ8+0x82>
                int Acc0 = gap_clip(AT_SCALE(In[i], Scale, ScaleN), 7);
1c005532:	0045a78b          	p.lw	a5,4(a1!)
1c005536:	031787b3          	mul	a5,a5,a7
1c00553a:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c00553e:	148797b3          	p.clip	a5,a5,8
                Out[i] = Acc0;
1c005542:	00f800ab          	p.sb	a5,1(a6!)
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c005546:	9e32                	add	t3,t3,a2
1c005548:	9e9e                	add	t4,t4,t2
#if defined(__OPTIMIZE__)
static inline unsigned int evt_read32(unsigned int base, unsigned int offset)
{
  unsigned int value;
  #if !defined(__LLVM__) && ((defined(OR1K_VERSION) && OR1K_VERSION >= 5) || (defined(RISCV_VERSION) && RISCV_VERSION >= 4))
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00554a:	002047b7          	lui	a5,0x204
1c00554e:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c005552:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	// KerReductIO_Compact_SQ8(In, S, CoreId, ChunkCell*Size);
	KerReductIO_Compact_SQ8_1((signed char *__restrict__)In, (signed char *__restrict__)In, Size*ChunkCell, Size * Arg->Feat);
1c005556:	00855683          	lhu	a3,8(a0)
1c00555a:	02c686b3          	mul	a3,a3,a2
1c00555e:	02560633          	mul	a2,a2,t0
1c005562:	8586                	mv	a1,ra
1c005564:	8506                	mv	a0,ra
1c005566:	3b49                	jal	1c0052f8 <KerReductIO_Compact_SQ8_1>
}
1c005568:	40b2                	lw	ra,12(sp)
1c00556a:	0141                	addi	sp,sp,16
1c00556c:	8082                	ret

1c00556e <KerParSetBiasB32_SQ8>:
			Out[W*H*f + First + 2*i] = B; Out[W*H*f + First + 2*i+1] = B;
		}
		if (Iter&0x1) Out[W*H*f + First + Iter-1] = B;
	}
	gap_waitbarrier(0);
}
1c00556e:	4118                	lw	a4,0(a0)
1c005570:	00455303          	lhu	t1,4(a0)
1c005574:	00655883          	lhu	a7,6(a0)
1c005578:	00855603          	lhu	a2,8(a0)
1c00557c:	00c52803          	lw	a6,12(a0)
1c005580:	01054e03          	lbu	t3,16(a0)
1c005584:	f14026f3          	csrr	a3,mhartid
1c005588:	c80696b3          	p.extractu	a3,a3,4,0
1c00558c:	f83637b3          	p.bclr	a5,a2,28,3
1c005590:	00f037b3          	snez	a5,a5
1c005594:	00365593          	srli	a1,a2,0x3
1c005598:	97ae                	add	a5,a5,a1
1c00559a:	02f686b3          	mul	a3,a3,a5
1c00559e:	97b6                	add	a5,a5,a3
1c0055a0:	04c7c7b3          	p.min	a5,a5,a2
1c0055a4:	06f6f863          	bleu	a5,a3,1c005614 <KerParSetBiasB32_SQ8+0xa6>
1c0055a8:	03130333          	mul	t1,t1,a7
1c0055ac:	00231f93          	slli	t6,t1,0x2
1c0055b0:	00135313          	srli	t1,t1,0x1
1c0055b4:	ffcf8893          	addi	a7,t6,-4
1c0055b8:	00269613          	slli	a2,a3,0x2
1c0055bc:	8546                	mv	a0,a7
1c0055be:	42df8533          	p.mac	a0,t6,a3
1c0055c2:	953a                	add	a0,a0,a4
1c0055c4:	00279593          	slli	a1,a5,0x2
1c0055c8:	9832                	add	a6,a6,a2
1c0055ca:	00331f13          	slli	t5,t1,0x3
1c0055ce:	411f0f33          	sub	t5,t5,a7
1c0055d2:	4e91                	li	t4,4
1c0055d4:	411e8eb3          	sub	t4,t4,a7
1c0055d8:	8d91                	sub	a1,a1,a2
1c0055da:	15f1                	addi	a1,a1,-4
1c0055dc:	8189                	srli	a1,a1,0x2
1c0055de:	0585                	addi	a1,a1,1
1c0055e0:	0195c07b          	lp.setup	x0,a1,1c005612 <KerParSetBiasB32_SQ8+0xa4>
1c0055e4:	0048270b          	p.lw	a4,4(a6!)
1c0055e8:	01c71733          	sll	a4,a4,t3
1c0055ec:	02030163          	beqz	t1,1c00560e <KerParSetBiasB32_SQ8+0xa0>
1c0055f0:	00ae8633          	add	a2,t4,a0
1c0055f4:	411506b3          	sub	a3,a0,a7
1c0055f8:	01e887b3          	add	a5,a7,t5
1c0055fc:	17e1                	addi	a5,a5,-8
1c0055fe:	838d                	srli	a5,a5,0x3
1c005600:	0785                	addi	a5,a5,1
1c005602:	0047c0fb          	lp.setup	x1,a5,1c00560a <KerParSetBiasB32_SQ8+0x9c>
1c005606:	00e6a42b          	p.sw	a4,8(a3!)
1c00560a:	00e6242b          	p.sw	a4,8(a2!)
1c00560e:	00e56fab          	p.sw	a4,t6(a0!)
1c005612:	0001                	nop
1c005614:	002047b7          	lui	a5,0x204
1c005618:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00561c:	01c7e703          	p.elw	a4,28(a5)
1c005620:	8082                	ret

1c005622 <KerParLinearLayer_SQ8>:
**************************************************************************************************************************************/

/* Output cannnot be evaluated completly, result on 32b, Bias assumed to be set before and reduction/scaling/activation after */
void KerParLinearLayer_SQ8(KerLinear_SQ8_T *Arg)

{
1c005622:	7179                	addi	sp,sp,-48
1c005624:	d622                	sw	s0,44(sp)
1c005626:	d426                	sw	s1,40(sp)
1c005628:	d24a                	sw	s2,36(sp)
1c00562a:	d04e                	sw	s3,32(sp)
1c00562c:	ce52                	sw	s4,28(sp)
1c00562e:	cc56                	sw	s5,24(sp)
1c005630:	ca5a                	sw	s6,20(sp)
1c005632:	c85e                	sw	s7,16(sp)
1c005634:	c662                	sw	s8,12(sp)
1c005636:	c466                	sw	s9,8(sp)
	signed char * __restrict__ In = Arg->In;
1c005638:	4104                	lw	s1,0(a0)
	int TotalInDim = Arg->TotalInDim;				// Reorganize weight layout to make TotalInDim = InDim
1c00563a:	01255603          	lhu	a2,18(a0)
	unsigned int InDim = Arg->InDim, OutDim = Arg->OutDim;
1c00563e:	01055283          	lhu	t0,16(a0)
1c005642:	01455683          	lhu	a3,20(a0)
	const signed char * __restrict__ Weights = Arg->Weights;
1c005646:	00452a03          	lw	s4,4(a0)
	int * __restrict__ Out = Arg->Out;
1c00564a:	00c52903          	lw	s2,12(a0)

	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c00564e:	f1402773          	csrr	a4,mhartid
1c005652:	c8071733          	p.extractu	a4,a4,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c005656:	f836b7b3          	p.bclr	a5,a3,28,3
1c00565a:	00f037b3          	snez	a5,a5
1c00565e:	0036d593          	srli	a1,a3,0x3
1c005662:	97ae                	add	a5,a5,a1
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c005664:	02f70733          	mul	a4,a4,a5
1c005668:	97ba                	add	a5,a5,a4
1c00566a:	04d7c7b3          	p.min	a5,a5,a3
	v4s * __restrict__ VectIn = (v4s *) In;

	for (int i=First; i<Last; i++) {
1c00566e:	0cf77863          	bleu	a5,a4,1c00573e <KerParLinearLayer_SQ8+0x11c>
1c005672:	8396                	mv	t2,t0
1c005674:	00271693          	slli	a3,a4,0x2
1c005678:	8cb2                	mv	s9,a2
1c00567a:	8fd2                	mv	t6,s4
1c00567c:	42e60fb3          	p.mac	t6,a2,a4
1c005680:	00279f13          	slli	t5,a5,0x2
1c005684:	9936                	add	s2,s2,a3
1c005686:	89a6                	mv	s3,s1
1c005688:	c402bb33          	p.bclr	s6,t0,2,0
1c00568c:	9b26                	add	s6,s6,s1
		v4s * __restrict__ W = (v4s *) (&Weights[i*TotalInDim]);
		int Acc = Out[i];
		for (int j=0; j<(InDim/(4*2)); j++) {
1c00568e:	4c1d                	li	s8,7
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
			v4s C0=W[2*j], C1=W[2*j+1];
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
		}
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c005690:	0042fb93          	andi	s7,t0,4
1c005694:	c202bab3          	p.bclr	s5,t0,1,0
1c005698:	1af1                	addi	s5,s5,-4
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*TotalInDim+j];
1c00569a:	c202b2b3          	p.bclr	t0,t0,1,0
1c00569e:	40df0f33          	sub	t5,t5,a3
1c0056a2:	1f71                	addi	t5,t5,-4
1c0056a4:	002f5f13          	srli	t5,t5,0x2
1c0056a8:	0f05                	addi	t5,t5,1
1c0056aa:	a83d                	j	1c0056e8 <KerParLinearLayer_SQ8+0xc6>
1c0056ac:	0272f763          	bleu	t2,t0,1c0056da <KerParLinearLayer_SQ8+0xb8>
1c0056b0:	005486b3          	add	a3,s1,t0
1c0056b4:	9816                	add	a6,a6,t0
1c0056b6:	9852                	add	a6,a6,s4
1c0056b8:	40d98733          	sub	a4,s3,a3
1c0056bc:	971e                	add	a4,a4,t2
1c0056be:	41348633          	sub	a2,s1,s3
1c0056c2:	9616                	add	a2,a2,t0
1c0056c4:	0605                	addi	a2,a2,1
1c0056c6:	06c3ea63          	bltu	t2,a2,1c00573a <KerParLinearLayer_SQ8+0x118>
1c0056ca:	006740fb          	lp.setup	x1,a4,1c0056d6 <KerParLinearLayer_SQ8+0xb4>
1c0056ce:	0016858b          	p.lb	a1,1(a3!)
1c0056d2:	0018060b          	p.lb	a2,1(a6!)
1c0056d6:	42c587b3          	p.mac	a5,a1,a2
		Out[i] = Acc;
1c0056da:	fef92e23          	sw	a5,-4(s2)
1c0056de:	9fe6                	add	t6,t6,s9
1c0056e0:	1f7d                	addi	t5,t5,-1
1c0056e2:	000f1363          	bnez	t5,1c0056e8 <KerParLinearLayer_SQ8+0xc6>
1c0056e6:	a8a1                	j	1c00573e <KerParLinearLayer_SQ8+0x11c>
1c0056e8:	414f8833          	sub	a6,t6,s4
		v4s * __restrict__ W = (v4s *) (&Weights[i*TotalInDim]);
1c0056ec:	847e                	mv	s0,t6
		int Acc = Out[i];
1c0056ee:	0049278b          	p.lw	a5,4(s2!)
		for (int j=0; j<(InDim/(4*2)); j++) {
1c0056f2:	027c7b63          	bleu	t2,s8,1c005728 <KerParLinearLayer_SQ8+0x106>
1c0056f6:	00448e93          	addi	t4,s1,4
1c0056fa:	004f8e13          	addi	t3,t6,4
1c0056fe:	837e                	mv	t1,t6
1c005700:	88ce                	mv	a7,s3
1c005702:	413b0533          	sub	a0,s6,s3
1c005706:	1561                	addi	a0,a0,-8
1c005708:	810d                	srli	a0,a0,0x3
1c00570a:	0505                	addi	a0,a0,1
1c00570c:	00c540fb          	lp.setup	x1,a0,1c005724 <KerParLinearLayer_SQ8+0x102>
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
1c005710:	008ea68b          	p.lw	a3,8(t4!)
			v4s C0=W[2*j], C1=W[2*j+1];
1c005714:	008e270b          	p.lw	a4,8(t3!)
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
1c005718:	0088a58b          	p.lw	a1,8(a7!)
1c00571c:	0083260b          	p.lw	a2,8(t1!)
1c005720:	b8c597d7          	pv.sdotsp.b	a5,a1,a2
1c005724:	b8e697d7          	pv.sdotsp.b	a5,a3,a4
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c005728:	f80b82e3          	beqz	s7,1c0056ac <KerParLinearLayer_SQ8+0x8a>
1c00572c:	2154f703          	p.lw	a4,s5(s1)
1c005730:	21547403          	p.lw	s0,s5(s0)
1c005734:	b88717d7          	pv.sdotsp.b	a5,a4,s0
1c005738:	bf95                	j	1c0056ac <KerParLinearLayer_SQ8+0x8a>
1c00573a:	4705                	li	a4,1
1c00573c:	b779                	j	1c0056ca <KerParLinearLayer_SQ8+0xa8>
1c00573e:	002047b7          	lui	a5,0x204
1c005742:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c005746:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c00574a:	5432                	lw	s0,44(sp)
1c00574c:	54a2                	lw	s1,40(sp)
1c00574e:	5912                	lw	s2,36(sp)
1c005750:	5982                	lw	s3,32(sp)
1c005752:	4a72                	lw	s4,28(sp)
1c005754:	4ae2                	lw	s5,24(sp)
1c005756:	4b52                	lw	s6,20(sp)
1c005758:	4bc2                	lw	s7,16(sp)
1c00575a:	4c32                	lw	s8,12(sp)
1c00575c:	4ca2                	lw	s9,8(sp)
1c00575e:	6145                	addi	sp,sp,48
1c005760:	8082                	ret

1c005762 <LastDefinedOutput>:
			int *out = Out+Wo*Ho*(of);
			KerConv1x3Stride1x2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv1x3BorderStride1xN_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, 2, PadIn, PadIn);
		}
	gap_waitbarrier(0);
}
1c005762:	fff68793          	addi	a5,a3,-1
1c005766:	953e                	add	a0,a0,a5
1c005768:	9532                	add	a0,a0,a2
1c00576a:	0015d613          	srli	a2,a1,0x1
1c00576e:	8d11                	sub	a0,a0,a2
1c005770:	15fd                	addi	a1,a1,-1
1c005772:	8185                	srli	a1,a1,0x1
1c005774:	8d0d                	sub	a0,a0,a1
1c005776:	02d55533          	divu	a0,a0,a3
1c00577a:	8082                	ret

1c00577c <KerConv3x3Stride1_Body_2Out_SQ8>:
1c00577c:	7179                	addi	sp,sp,-48
1c00577e:	d622                	sw	s0,44(sp)
1c005780:	d426                	sw	s1,40(sp)
1c005782:	d24a                	sw	s2,36(sp)
1c005784:	d04e                	sw	s3,32(sp)
1c005786:	ce52                	sw	s4,28(sp)
1c005788:	cc56                	sw	s5,24(sp)
1c00578a:	ca5a                	sw	s6,20(sp)
1c00578c:	c85e                	sw	s7,16(sp)
1c00578e:	c662                	sw	s8,12(sp)
1c005790:	c466                	sw	s9,8(sp)
1c005792:	c26a                	sw	s10,4(sp)
1c005794:	c06e                	sw	s11,0(sp)
1c005796:	54c2                	lw	s1,48(sp)
1c005798:	5ae2                	lw	s5,56(sp)
1c00579a:	5b72                	lw	s6,60(sp)
1c00579c:	4306                	lw	t1,64(sp)
1c00579e:	780377d7          	pv.extract.b	a5,t1,0
1c0057a2:	1007d3b3          	p.exthz	t2,a5
1c0057a6:	78137357          	pv.extract.b	t1,t1,2
1c0057aa:	100357b3          	p.exthz	a5,t1
1c0057ae:	89c6                	mv	s3,a7
1c0057b0:	435809b3          	p.mac	s3,a6,s5
1c0057b4:	098a                	slli	s3,s3,0x2
1c0057b6:	99ae                	add	s3,s3,a1
1c0057b8:	5952                	lw	s2,52(sp)
1c0057ba:	03280933          	mul	s2,a6,s2
1c0057be:	090a                	slli	s2,s2,0x2
1c0057c0:	994e                	add	s2,s2,s3
1c0057c2:	00062303          	lw	t1,0(a2)
1c0057c6:	00362e03          	lw	t3,3(a2)
1c0057ca:	00662e83          	lw	t4,6(a2)
1c0057ce:	20d67f03          	p.lw	t5,a3(a2)
1c0057d2:	96b2                	add	a3,a3,a2
1c0057d4:	0036af83          	lw	t6,3(a3)
1c0057d8:	0066a283          	lw	t0,6(a3)
1c0057dc:	0a98f263          	bleu	s1,a7,1c005880 <KerConv3x3Stride1_Body_2Out_SQ8+0x104>
1c0057e0:	b2107357          	pv.insert.b	t1,zero,3
1c0057e4:	b2107e57          	pv.insert.b	t3,zero,3
1c0057e8:	b2107ed7          	pv.insert.b	t4,zero,3
1c0057ec:	b2107f57          	pv.insert.b	t5,zero,3
1c0057f0:	b2107fd7          	pv.insert.b	t6,zero,3
1c0057f4:	b21072d7          	pv.insert.b	t0,zero,3
1c0057f8:	40fa87b3          	sub	a5,s5,a5
1c0057fc:	02e787b3          	mul	a5,a5,a4
1c005800:	407787b3          	sub	a5,a5,t2
1c005804:	00281c93          	slli	s9,a6,0x2
1c005808:	00f88a33          	add	s4,a7,a5
1c00580c:	9a2a                	add	s4,s4,a0
1c00580e:	8d3a                	mv	s10,a4
1c005810:	00e88433          	add	s0,a7,a4
1c005814:	943e                	add	s0,s0,a5
1c005816:	942a                	add	s0,s0,a0
1c005818:	94aa                	add	s1,s1,a0
1c00581a:	94be                	add	s1,s1,a5
1c00581c:	00171c13          	slli	s8,a4,0x1
1c005820:	8bda                	mv	s7,s6
1c005822:	414484b3          	sub	s1,s1,s4
1c005826:	02c4c07b          	lp.setup	x0,s1,1c00587e <KerConv3x3Stride1_Body_2Out_SQ8+0x102>
1c00582a:	83d2                	mv	t2,s4
1c00582c:	2183f68b          	p.lw	a3,s8(t2!)
1c005830:	401c                	lw	a5,0(s0)
1c005832:	85d6                	mv	a1,s5
1c005834:	056af263          	bleu	s6,s5,1c005878 <KerConv3x3Stride1_Body_2Out_SQ8+0xfc>
1c005838:	88ca                	mv	a7,s2
1c00583a:	884e                	mv	a6,s3
1c00583c:	415b8533          	sub	a0,s7,s5
1c005840:	01b540fb          	lp.setup	x1,a0,1c005876 <KerConv3x3Stride1_Body_2Out_SQ8+0xfa>
1c005844:	00082603          	lw	a2,0(a6)
1c005848:	21a3f70b          	p.lw	a4,s10(t2!)
1c00584c:	b8669657          	pv.sdotsp.b	a2,a3,t1
1c005850:	b9c79657          	pv.sdotsp.b	a2,a5,t3
1c005854:	b9d71657          	pv.sdotsp.b	a2,a4,t4
1c005858:	0008ad83          	lw	s11,0(a7)
1c00585c:	b9e69dd7          	pv.sdotsp.b	s11,a3,t5
1c005860:	86ee                	mv	a3,s11
1c005862:	b9f796d7          	pv.sdotsp.b	a3,a5,t6
1c005866:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c00586a:	00c86cab          	p.sw	a2,s9(a6!)
1c00586e:	00d8ecab          	p.sw	a3,s9(a7!)
1c005872:	0585                	addi	a1,a1,1
1c005874:	86be                	mv	a3,a5
1c005876:	87ba                	mv	a5,a4
1c005878:	0991                	addi	s3,s3,4
1c00587a:	0911                	addi	s2,s2,4
1c00587c:	0a05                	addi	s4,s4,1
1c00587e:	0405                	addi	s0,s0,1
1c005880:	5432                	lw	s0,44(sp)
1c005882:	54a2                	lw	s1,40(sp)
1c005884:	5912                	lw	s2,36(sp)
1c005886:	5982                	lw	s3,32(sp)
1c005888:	4a72                	lw	s4,28(sp)
1c00588a:	4ae2                	lw	s5,24(sp)
1c00588c:	4b52                	lw	s6,20(sp)
1c00588e:	4bc2                	lw	s7,16(sp)
1c005890:	4c32                	lw	s8,12(sp)
1c005892:	4ca2                	lw	s9,8(sp)
1c005894:	4d12                	lw	s10,4(sp)
1c005896:	4d82                	lw	s11,0(sp)
1c005898:	6145                	addi	sp,sp,48
1c00589a:	8082                	ret

1c00589c <KerConv2x3from3x3Stride1_V_2Out_SQ8>:
1c00589c:	7179                	addi	sp,sp,-48
1c00589e:	d622                	sw	s0,44(sp)
1c0058a0:	d426                	sw	s1,40(sp)
1c0058a2:	d24a                	sw	s2,36(sp)
1c0058a4:	d04e                	sw	s3,32(sp)
1c0058a6:	ce52                	sw	s4,28(sp)
1c0058a8:	cc56                	sw	s5,24(sp)
1c0058aa:	ca5a                	sw	s6,20(sp)
1c0058ac:	c85e                	sw	s7,16(sp)
1c0058ae:	c662                	sw	s8,12(sp)
1c0058b0:	c466                	sw	s9,8(sp)
1c0058b2:	5342                	lw	t1,48(sp)
1c0058b4:	5e52                	lw	t3,52(sp)
1c0058b6:	5ee2                	lw	t4,56(sp)
1c0058b8:	0e0e8a63          	beqz	t4,1c0059ac <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x110>
1c0058bc:	00035383          	lhu	t2,0(t1)
1c0058c0:	00335283          	lhu	t0,3(t1)
1c0058c4:	00635403          	lhu	s0,6(t1)
1c0058c8:	9372                	add	t1,t1,t3
1c0058ca:	00035f83          	lhu	t6,0(t1)
1c0058ce:	00335f03          	lhu	t5,3(t1)
1c0058d2:	00635483          	lhu	s1,6(t1)
1c0058d6:	0e17a963          	p.beqimm	a5,1,1c0059c8 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x12c>
1c0058da:	40c78633          	sub	a2,a5,a2
1c0058de:	02d78333          	mul	t1,a5,a3
1c0058e2:	030a                	slli	t1,t1,0x2
1c0058e4:	989a                	add	a7,a7,t1
1c0058e6:	42b60533          	p.mac	a0,a2,a1
1c0058ea:	20b57e0b          	p.lw	t3,a1(a0!)
1c0058ee:	20b5760b          	p.lw	a2,a1(a0!)
1c0058f2:	02d70ab3          	mul	s5,a4,a3
1c0058f6:	0a8a                	slli	s5,s5,0x2
1c0058f8:	9ac6                	add	s5,s5,a7
1c0058fa:	8b3e                	mv	s6,a5
1c0058fc:	0707f363          	bleu	a6,a5,1c005962 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xc6>
1c005900:	00269b93          	slli	s7,a3,0x2
1c005904:	89d6                	mv	s3,s5
1c005906:	8946                	mv	s2,a7
1c005908:	8a2a                	mv	s4,a0
1c00590a:	8c2e                	mv	s8,a1
1c00590c:	40f806b3          	sub	a3,a6,a5
1c005910:	01b6c0fb          	lp.setup	x1,a3,1c005946 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xaa>
1c005914:	00092e83          	lw	t4,0(s2)
1c005918:	20ba730b          	p.lw	t1,a1(s4!)
1c00591c:	b87e1ed7          	pv.sdotsp.b	t4,t3,t2
1c005920:	b8561ed7          	pv.sdotsp.b	t4,a2,t0
1c005924:	b8831ed7          	pv.sdotsp.b	t4,t1,s0
1c005928:	0009ac83          	lw	s9,0(s3)
1c00592c:	b9fe1cd7          	pv.sdotsp.b	s9,t3,t6
1c005930:	8e66                	mv	t3,s9
1c005932:	b9e61e57          	pv.sdotsp.b	t3,a2,t5
1c005936:	b8931e57          	pv.sdotsp.b	t3,t1,s1
1c00593a:	01d96bab          	p.sw	t4,s7(s2!)
1c00593e:	01c9ebab          	p.sw	t3,s7(s3!)
1c005942:	0785                	addi	a5,a5,1
1c005944:	8e32                	mv	t3,a2
1c005946:	861a                	mv	a2,t1
1c005948:	fff80793          	addi	a5,a6,-1
1c00594c:	416787b3          	sub	a5,a5,s6
1c005950:	43878c33          	p.mac	s8,a5,s8
1c005954:	9562                	add	a0,a0,s8
1c005956:	41680b33          	sub	s6,a6,s6
1c00595a:	037b0bb3          	mul	s7,s6,s7
1c00595e:	98de                	add	a7,a7,s7
1c005960:	9ade                	add	s5,s5,s7
1c005962:	03070963          	beq	a4,a6,1c005994 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xf8>
1c005966:	0008a683          	lw	a3,0(a7)
1c00596a:	000aa703          	lw	a4,0(s5)
1c00596e:	00159793          	slli	a5,a1,0x1
1c005972:	8d1d                	sub	a0,a0,a5
1c005974:	411c                	lw	a5,0(a0)
1c005976:	20b57583          	p.lw	a1,a1(a0)
1c00597a:	b87796d7          	pv.sdotsp.b	a3,a5,t2
1c00597e:	b85596d7          	pv.sdotsp.b	a3,a1,t0
1c005982:	b9f79757          	pv.sdotsp.b	a4,a5,t6
1c005986:	87ba                	mv	a5,a4
1c005988:	b9e597d7          	pv.sdotsp.b	a5,a1,t5
1c00598c:	00d8a023          	sw	a3,0(a7)
1c005990:	00faa023          	sw	a5,0(s5)
1c005994:	5432                	lw	s0,44(sp)
1c005996:	54a2                	lw	s1,40(sp)
1c005998:	5912                	lw	s2,36(sp)
1c00599a:	5982                	lw	s3,32(sp)
1c00599c:	4a72                	lw	s4,28(sp)
1c00599e:	4ae2                	lw	s5,24(sp)
1c0059a0:	4b52                	lw	s6,20(sp)
1c0059a2:	4bc2                	lw	s7,16(sp)
1c0059a4:	4c32                	lw	s8,12(sp)
1c0059a6:	4ca2                	lw	s9,8(sp)
1c0059a8:	6145                	addi	sp,sp,48
1c0059aa:	8082                	ret
1c0059ac:	00135383          	lhu	t2,1(t1)
1c0059b0:	00435283          	lhu	t0,4(t1)
1c0059b4:	00735403          	lhu	s0,7(t1)
1c0059b8:	9372                	add	t1,t1,t3
1c0059ba:	00135f83          	lhu	t6,1(t1)
1c0059be:	00435f03          	lhu	t5,4(t1)
1c0059c2:	00735483          	lhu	s1,7(t1)
1c0059c6:	bf01                	j	1c0058d6 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x3a>
1c0059c8:	20b5760b          	p.lw	a2,a1(a0!)
1c0059cc:	00007e57          	pv.add.sci.b	t3,zero,0
1c0059d0:	4781                	li	a5,0
1c0059d2:	b705                	j	1c0058f2 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x56>

1c0059d4 <KerConv3x2from3x3Stride1_H_2Out_SQ8>:
1c0059d4:	4302                	lw	t1,0(sp)
1c0059d6:	4f92                	lw	t6,4(sp)
1c0059d8:	4ea2                	lw	t4,8(sp)
1c0059da:	8e3e                	mv	t3,a5
1c0059dc:	40c78633          	sub	a2,a5,a2
1c0059e0:	9532                	add	a0,a0,a2
1c0059e2:	02e683b3          	mul	t2,a3,a4
1c0059e6:	038a                	slli	t2,t2,0x2
1c0059e8:	93c6                	add	t2,t2,a7
1c0059ea:	060e8063          	beqz	t4,1c005a4a <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x76>
1c0059ee:	00032e83          	lw	t4,0(t1)
1c0059f2:	b2107ed7          	pv.insert.b	t4,zero,3
1c0059f6:	00332f03          	lw	t5,3(t1)
1c0059fa:	b2107f57          	pv.insert.b	t5,zero,3
1c0059fe:	937e                	add	t1,t1,t6
1c005a00:	00032f83          	lw	t6,0(t1)
1c005a04:	b2107fd7          	pv.insert.b	t6,zero,3
1c005a08:	00332283          	lw	t0,3(t1)
1c005a0c:	b21072d7          	pv.insert.b	t0,zero,3
1c005a10:	030e7c63          	bleu	a6,t3,1c005a48 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x74>
1c005a14:	95aa                	add	a1,a1,a0
1c005a16:	40f80833          	sub	a6,a6,a5
1c005a1a:	015840fb          	lp.setup	x1,a6,1c005a44 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x70>
1c005a1e:	0008ae03          	lw	t3,0(a7)
1c005a22:	0003a303          	lw	t1,0(t2)
1c005a26:	0015268b          	p.lw	a3,1(a0!)
1c005a2a:	0015a70b          	p.lw	a4,1(a1!)
1c005a2e:	b9d69e57          	pv.sdotsp.b	t3,a3,t4
1c005a32:	b9e71e57          	pv.sdotsp.b	t3,a4,t5
1c005a36:	b9f69357          	pv.sdotsp.b	t1,a3,t6
1c005a3a:	869a                	mv	a3,t1
1c005a3c:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c005a40:	01c8a22b          	p.sw	t3,4(a7!)
1c005a44:	00d3a22b          	p.sw	a3,4(t2!)
1c005a48:	8082                	ret
1c005a4a:	00332e83          	lw	t4,3(t1)
1c005a4e:	b2107ed7          	pv.insert.b	t4,zero,3
1c005a52:	00632f03          	lw	t5,6(t1)
1c005a56:	b2107f57          	pv.insert.b	t5,zero,3
1c005a5a:	937e                	add	t1,t1,t6
1c005a5c:	00332f83          	lw	t6,3(t1)
1c005a60:	b2107fd7          	pv.insert.b	t6,zero,3
1c005a64:	00632283          	lw	t0,6(t1)
1c005a68:	b21072d7          	pv.insert.b	t0,zero,3
1c005a6c:	b755                	j	1c005a10 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x3c>

1c005a6e <KerConv3x3BorderStride1_2Out_SQ8>:
1c005a6e:	715d                	addi	sp,sp,-80
1c005a70:	c686                	sw	ra,76(sp)
1c005a72:	c4a2                	sw	s0,72(sp)
1c005a74:	c2a6                	sw	s1,68(sp)
1c005a76:	c0ca                	sw	s2,64(sp)
1c005a78:	de4e                	sw	s3,60(sp)
1c005a7a:	dc52                	sw	s4,56(sp)
1c005a7c:	da56                	sw	s5,52(sp)
1c005a7e:	d85a                	sw	s6,48(sp)
1c005a80:	d65e                	sw	s7,44(sp)
1c005a82:	d462                	sw	s8,40(sp)
1c005a84:	d266                	sw	s9,36(sp)
1c005a86:	d06a                	sw	s10,32(sp)
1c005a88:	ce6e                	sw	s11,28(sp)
1c005a8a:	8a2a                	mv	s4,a0
1c005a8c:	8aae                	mv	s5,a1
1c005a8e:	8b32                	mv	s6,a2
1c005a90:	8bb6                	mv	s7,a3
1c005a92:	893a                	mv	s2,a4
1c005a94:	84c2                	mv	s1,a6
1c005a96:	89c6                	mv	s3,a7
1c005a98:	5786                	lw	a5,96(sp)
1c005a9a:	5416                	lw	s0,100(sp)
1c005a9c:	78047c57          	pv.extract.b	s8,s0,0
1c005aa0:	78147457          	pv.extract.b	s0,s0,2
1c005aa4:	7a07fdd7          	pv.extract.b	s11,a5,1
1c005aa8:	7817fd57          	pv.extract.b	s10,a5,2
1c005aac:	7a17fcd7          	pv.extract.b	s9,a5,3
1c005ab0:	7807f7d7          	pv.extract.b	a5,a5,0
1c005ab4:	e795                	bnez	a5,1c005ae0 <KerConv3x3BorderStride1_2Out_SQ8+0x72>
1c005ab6:	040d9163          	bnez	s11,1c005af8 <KerConv3x3BorderStride1_2Out_SQ8+0x8a>
1c005aba:	060d1363          	bnez	s10,1c005b20 <KerConv3x3BorderStride1_2Out_SQ8+0xb2>
1c005abe:	080c9063          	bnez	s9,1c005b3e <KerConv3x3BorderStride1_2Out_SQ8+0xd0>
1c005ac2:	40b6                	lw	ra,76(sp)
1c005ac4:	4426                	lw	s0,72(sp)
1c005ac6:	4496                	lw	s1,68(sp)
1c005ac8:	4906                	lw	s2,64(sp)
1c005aca:	59f2                	lw	s3,60(sp)
1c005acc:	5a62                	lw	s4,56(sp)
1c005ace:	5ad2                	lw	s5,52(sp)
1c005ad0:	5b42                	lw	s6,48(sp)
1c005ad2:	5bb2                	lw	s7,44(sp)
1c005ad4:	5c22                	lw	s8,40(sp)
1c005ad6:	5c92                	lw	s9,36(sp)
1c005ad8:	5d02                	lw	s10,32(sp)
1c005ada:	4df2                	lw	s11,28(sp)
1c005adc:	6161                	addi	sp,sp,80
1c005ade:	8082                	ret
1c005ae0:	c402                	sw	zero,8(sp)
1c005ae2:	c236                	sw	a3,4(sp)
1c005ae4:	c032                	sw	a2,0(sp)
1c005ae6:	88ae                	mv	a7,a1
1c005ae8:	4876                	lw	a6,92(sp)
1c005aea:	47e6                	lw	a5,88(sp)
1c005aec:	4756                	lw	a4,84(sp)
1c005aee:	86a6                	mv	a3,s1
1c005af0:	8622                	mv	a2,s0
1c005af2:	85ca                	mv	a1,s2
1c005af4:	3365                	jal	1c00589c <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c005af6:	b7c1                	j	1c005ab6 <KerConv3x3BorderStride1_2Out_SQ8+0x48>
1c005af8:	00249893          	slli	a7,s1,0x2
1c005afc:	18f1                	addi	a7,a7,-4
1c005afe:	47c6                	lw	a5,80(sp)
1c005b00:	41878533          	sub	a0,a5,s8
1c005b04:	4785                	li	a5,1
1c005b06:	c43e                	sw	a5,8(sp)
1c005b08:	c25e                	sw	s7,4(sp)
1c005b0a:	c05a                	sw	s6,0(sp)
1c005b0c:	98d6                	add	a7,a7,s5
1c005b0e:	4876                	lw	a6,92(sp)
1c005b10:	47e6                	lw	a5,88(sp)
1c005b12:	4756                	lw	a4,84(sp)
1c005b14:	86a6                	mv	a3,s1
1c005b16:	8622                	mv	a2,s0
1c005b18:	85ca                	mv	a1,s2
1c005b1a:	9552                	add	a0,a0,s4
1c005b1c:	3341                	jal	1c00589c <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c005b1e:	bf71                	j	1c005aba <KerConv3x3BorderStride1_2Out_SQ8+0x4c>
1c005b20:	00299893          	slli	a7,s3,0x2
1c005b24:	c402                	sw	zero,8(sp)
1c005b26:	c25e                	sw	s7,4(sp)
1c005b28:	c05a                	sw	s6,0(sp)
1c005b2a:	98d6                	add	a7,a7,s5
1c005b2c:	4846                	lw	a6,80(sp)
1c005b2e:	87ce                	mv	a5,s3
1c005b30:	4756                	lw	a4,84(sp)
1c005b32:	86a6                	mv	a3,s1
1c005b34:	8662                	mv	a2,s8
1c005b36:	85ca                	mv	a1,s2
1c005b38:	8552                	mv	a0,s4
1c005b3a:	3d69                	jal	1c0059d4 <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c005b3c:	b749                	j	1c005abe <KerConv3x3BorderStride1_2Out_SQ8+0x50>
1c005b3e:	88ce                	mv	a7,s3
1c005b40:	47f6                	lw	a5,92(sp)
1c005b42:	42f488b3          	p.mac	a7,s1,a5
1c005b46:	088a                	slli	a7,a7,0x2
1c005b48:	40878433          	sub	s0,a5,s0
1c005b4c:	4785                	li	a5,1
1c005b4e:	c43e                	sw	a5,8(sp)
1c005b50:	c25e                	sw	s7,4(sp)
1c005b52:	c05a                	sw	s6,0(sp)
1c005b54:	98d6                	add	a7,a7,s5
1c005b56:	4846                	lw	a6,80(sp)
1c005b58:	87ce                	mv	a5,s3
1c005b5a:	4756                	lw	a4,84(sp)
1c005b5c:	86a6                	mv	a3,s1
1c005b5e:	8662                	mv	a2,s8
1c005b60:	85ca                	mv	a1,s2
1c005b62:	8552                	mv	a0,s4
1c005b64:	43240533          	p.mac	a0,s0,s2
1c005b68:	35b5                	jal	1c0059d4 <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c005b6a:	bfa1                	j	1c005ac2 <KerConv3x3BorderStride1_2Out_SQ8+0x54>

1c005b6c <KerConv3x3Stride1_Body_SQ8>:
1c005b6c:	1101                	addi	sp,sp,-32
1c005b6e:	ce22                	sw	s0,28(sp)
1c005b70:	cc26                	sw	s1,24(sp)
1c005b72:	ca4a                	sw	s2,20(sp)
1c005b74:	c84e                	sw	s3,16(sp)
1c005b76:	c652                	sw	s4,12(sp)
1c005b78:	c456                	sw	s5,8(sp)
1c005b7a:	5392                	lw	t2,36(sp)
1c005b7c:	5422                	lw	s0,40(sp)
1c005b7e:	5332                	lw	t1,44(sp)
1c005b80:	78037757          	pv.extract.b	a4,t1,0
1c005b84:	78137357          	pv.extract.b	t1,t1,2
1c005b88:	10035f33          	p.exthz	t5,t1
1c005b8c:	8342                	mv	t1,a6
1c005b8e:	42778333          	p.mac	t1,a5,t2
1c005b92:	030a                	slli	t1,t1,0x2
1c005b94:	959a                	add	a1,a1,t1
1c005b96:	00062303          	lw	t1,0(a2)
1c005b9a:	00362e03          	lw	t3,3(a2)
1c005b9e:	00662e83          	lw	t4,6(a2)
1c005ba2:	09187363          	bleu	a7,a6,1c005c28 <KerConv3x3Stride1_Body_SQ8+0xbc>
1c005ba6:	100752b3          	p.exthz	t0,a4
1c005baa:	b2107357          	pv.insert.b	t1,zero,3
1c005bae:	b2107e57          	pv.insert.b	t3,zero,3
1c005bb2:	b2107ed7          	pv.insert.b	t4,zero,3
1c005bb6:	41e38733          	sub	a4,t2,t5
1c005bba:	02d70733          	mul	a4,a4,a3
1c005bbe:	40570733          	sub	a4,a4,t0
1c005bc2:	00279913          	slli	s2,a5,0x2
1c005bc6:	00e804b3          	add	s1,a6,a4
1c005bca:	94aa                	add	s1,s1,a0
1c005bcc:	89b6                	mv	s3,a3
1c005bce:	00d80fb3          	add	t6,a6,a3
1c005bd2:	9fba                	add	t6,t6,a4
1c005bd4:	9faa                	add	t6,t6,a0
1c005bd6:	011502b3          	add	t0,a0,a7
1c005bda:	92ba                	add	t0,t0,a4
1c005bdc:	00169a93          	slli	s5,a3,0x1
1c005be0:	8a22                	mv	s4,s0
1c005be2:	409282b3          	sub	t0,t0,s1
1c005be6:	0202c07b          	lp.setup	x0,t0,1c005c26 <KerConv3x3Stride1_Body_SQ8+0xba>
1c005bea:	88a6                	mv	a7,s1
1c005bec:	2158f60b          	p.lw	a2,s5(a7!)
1c005bf0:	000fa703          	lw	a4,0(t6)
1c005bf4:	8f1e                	mv	t5,t2
1c005bf6:	0283f663          	bleu	s0,t2,1c005c22 <KerConv3x3Stride1_Body_SQ8+0xb6>
1c005bfa:	882e                	mv	a6,a1
1c005bfc:	407a0533          	sub	a0,s4,t2
1c005c00:	010540fb          	lp.setup	x1,a0,1c005c20 <KerConv3x3Stride1_Body_SQ8+0xb4>
1c005c04:	00082783          	lw	a5,0(a6)
1c005c08:	2138f68b          	p.lw	a3,s3(a7!)
1c005c0c:	b86617d7          	pv.sdotsp.b	a5,a2,t1
1c005c10:	b9c717d7          	pv.sdotsp.b	a5,a4,t3
1c005c14:	b9d697d7          	pv.sdotsp.b	a5,a3,t4
1c005c18:	00f8692b          	p.sw	a5,s2(a6!)
1c005c1c:	0f05                	addi	t5,t5,1
1c005c1e:	863a                	mv	a2,a4
1c005c20:	8736                	mv	a4,a3
1c005c22:	0591                	addi	a1,a1,4
1c005c24:	0485                	addi	s1,s1,1
1c005c26:	0f85                	addi	t6,t6,1
1c005c28:	4472                	lw	s0,28(sp)
1c005c2a:	44e2                	lw	s1,24(sp)
1c005c2c:	4952                	lw	s2,20(sp)
1c005c2e:	49c2                	lw	s3,16(sp)
1c005c30:	4a32                	lw	s4,12(sp)
1c005c32:	4aa2                	lw	s5,8(sp)
1c005c34:	6105                	addi	sp,sp,32
1c005c36:	8082                	ret

1c005c38 <KerConv2x3from3x3Stride1_V_SQ8>:
1c005c38:	1141                	addi	sp,sp,-16
1c005c3a:	c622                	sw	s0,12(sp)
1c005c3c:	c426                	sw	s1,8(sp)
1c005c3e:	c24a                	sw	s2,4(sp)
1c005c40:	c04e                	sw	s3,0(sp)
1c005c42:	4342                	lw	t1,16(sp)
1c005c44:	4e52                	lw	t3,20(sp)
1c005c46:	0a0e0063          	beqz	t3,1c005ce6 <KerConv2x3from3x3Stride1_V_SQ8+0xae>
1c005c4a:	00035f83          	lhu	t6,0(t1)
1c005c4e:	00335f03          	lhu	t5,3(t1)
1c005c52:	00635283          	lhu	t0,6(t1)
1c005c56:	0817af63          	p.beqimm	a5,1,1c005cf4 <KerConv2x3from3x3Stride1_V_SQ8+0xbc>
1c005c5a:	40c78633          	sub	a2,a5,a2
1c005c5e:	02d78333          	mul	t1,a5,a3
1c005c62:	030a                	slli	t1,t1,0x2
1c005c64:	989a                	add	a7,a7,t1
1c005c66:	42b60533          	p.mac	a0,a2,a1
1c005c6a:	20b57e8b          	p.lw	t4,a1(a0!)
1c005c6e:	20b5730b          	p.lw	t1,a1(a0!)
1c005c72:	84be                	mv	s1,a5
1c005c74:	0507f363          	bleu	a6,a5,1c005cba <KerConv2x3from3x3Stride1_V_SQ8+0x82>
1c005c78:	00269993          	slli	s3,a3,0x2
1c005c7c:	86c6                	mv	a3,a7
1c005c7e:	842a                	mv	s0,a0
1c005c80:	892e                	mv	s2,a1
1c005c82:	40f803b3          	sub	t2,a6,a5
1c005c86:	00f3c0fb          	lp.setup	x1,t2,1c005ca4 <KerConv2x3from3x3Stride1_V_SQ8+0x6c>
1c005c8a:	4290                	lw	a2,0(a3)
1c005c8c:	20b47e0b          	p.lw	t3,a1(s0!)
1c005c90:	b9fe9657          	pv.sdotsp.b	a2,t4,t6
1c005c94:	b9e31657          	pv.sdotsp.b	a2,t1,t5
1c005c98:	b85e1657          	pv.sdotsp.b	a2,t3,t0
1c005c9c:	00c6e9ab          	p.sw	a2,s3(a3!)
1c005ca0:	0785                	addi	a5,a5,1
1c005ca2:	8e9a                	mv	t4,t1
1c005ca4:	8372                	mv	t1,t3
1c005ca6:	fff80793          	addi	a5,a6,-1
1c005caa:	8f85                	sub	a5,a5,s1
1c005cac:	43278933          	p.mac	s2,a5,s2
1c005cb0:	954a                	add	a0,a0,s2
1c005cb2:	409804b3          	sub	s1,a6,s1
1c005cb6:	433488b3          	p.mac	a7,s1,s3
1c005cba:	03070063          	beq	a4,a6,1c005cda <KerConv2x3from3x3Stride1_V_SQ8+0xa2>
1c005cbe:	0008a783          	lw	a5,0(a7)
1c005cc2:	00159713          	slli	a4,a1,0x1
1c005cc6:	8d19                	sub	a0,a0,a4
1c005cc8:	20b57583          	p.lw	a1,a1(a0)
1c005ccc:	4118                	lw	a4,0(a0)
1c005cce:	b9f717d7          	pv.sdotsp.b	a5,a4,t6
1c005cd2:	b9e597d7          	pv.sdotsp.b	a5,a1,t5
1c005cd6:	00f8a023          	sw	a5,0(a7)
1c005cda:	4432                	lw	s0,12(sp)
1c005cdc:	44a2                	lw	s1,8(sp)
1c005cde:	4912                	lw	s2,4(sp)
1c005ce0:	4982                	lw	s3,0(sp)
1c005ce2:	0141                	addi	sp,sp,16
1c005ce4:	8082                	ret
1c005ce6:	00135f83          	lhu	t6,1(t1)
1c005cea:	00435f03          	lhu	t5,4(t1)
1c005cee:	00735283          	lhu	t0,7(t1)
1c005cf2:	b795                	j	1c005c56 <KerConv2x3from3x3Stride1_V_SQ8+0x1e>
1c005cf4:	20b5730b          	p.lw	t1,a1(a0!)
1c005cf8:	00007ed7          	pv.add.sci.b	t4,zero,0
1c005cfc:	4781                	li	a5,0
1c005cfe:	bf95                	j	1c005c72 <KerConv2x3from3x3Stride1_V_SQ8+0x3a>

1c005d00 <KerConv3x2from3x3Stride1_H_SQ8>:
1c005d00:	4302                	lw	t1,0(sp)
1c005d02:	86ba                	mv	a3,a4
1c005d04:	40c70633          	sub	a2,a4,a2
1c005d08:	9532                	add	a0,a0,a2
1c005d0a:	02030d63          	beqz	t1,1c005d44 <KerConv3x2from3x3Stride1_H_SQ8+0x44>
1c005d0e:	0008ae03          	lw	t3,0(a7)
1c005d12:	b2107e57          	pv.insert.b	t3,zero,3
1c005d16:	0038ae83          	lw	t4,3(a7)
1c005d1a:	b2107ed7          	pv.insert.b	t4,zero,3
1c005d1e:	02f6f263          	bleu	a5,a3,1c005d42 <KerConv3x2from3x3Stride1_H_SQ8+0x42>
1c005d22:	95aa                	add	a1,a1,a0
1c005d24:	8f99                	sub	a5,a5,a4
1c005d26:	00c7c0fb          	lp.setup	x1,a5,1c005d3e <KerConv3x2from3x3Stride1_H_SQ8+0x3e>
1c005d2a:	00082683          	lw	a3,0(a6)
1c005d2e:	0015230b          	p.lw	t1,1(a0!)
1c005d32:	0015a88b          	p.lw	a7,1(a1!)
1c005d36:	b9c316d7          	pv.sdotsp.b	a3,t1,t3
1c005d3a:	b9d896d7          	pv.sdotsp.b	a3,a7,t4
1c005d3e:	00d8222b          	p.sw	a3,4(a6!)
1c005d42:	8082                	ret
1c005d44:	0038ae03          	lw	t3,3(a7)
1c005d48:	b2107e57          	pv.insert.b	t3,zero,3
1c005d4c:	0068ae83          	lw	t4,6(a7)
1c005d50:	b2107ed7          	pv.insert.b	t4,zero,3
1c005d54:	b7e9                	j	1c005d1e <KerConv3x2from3x3Stride1_H_SQ8+0x1e>

1c005d56 <KerConv3x3BorderStride1_SQ8>:
1c005d56:	715d                	addi	sp,sp,-80
1c005d58:	c686                	sw	ra,76(sp)
1c005d5a:	c4a2                	sw	s0,72(sp)
1c005d5c:	c2a6                	sw	s1,68(sp)
1c005d5e:	c0ca                	sw	s2,64(sp)
1c005d60:	de4e                	sw	s3,60(sp)
1c005d62:	dc52                	sw	s4,56(sp)
1c005d64:	da56                	sw	s5,52(sp)
1c005d66:	d85a                	sw	s6,48(sp)
1c005d68:	d65e                	sw	s7,44(sp)
1c005d6a:	d462                	sw	s8,40(sp)
1c005d6c:	d266                	sw	s9,36(sp)
1c005d6e:	d06a                	sw	s10,32(sp)
1c005d70:	ce6e                	sw	s11,28(sp)
1c005d72:	8a2a                	mv	s4,a0
1c005d74:	8aae                	mv	s5,a1
1c005d76:	8b32                	mv	s6,a2
1c005d78:	8936                	mv	s2,a3
1c005d7a:	84be                	mv	s1,a5
1c005d7c:	89c2                	mv	s3,a6
1c005d7e:	8c46                	mv	s8,a7
1c005d80:	47f6                	lw	a5,92(sp)
1c005d82:	5406                	lw	s0,96(sp)
1c005d84:	78047bd7          	pv.extract.b	s7,s0,0
1c005d88:	78147457          	pv.extract.b	s0,s0,2
1c005d8c:	7a07fdd7          	pv.extract.b	s11,a5,1
1c005d90:	7817fd57          	pv.extract.b	s10,a5,2
1c005d94:	7a17fcd7          	pv.extract.b	s9,a5,3
1c005d98:	7807f7d7          	pv.extract.b	a5,a5,0
1c005d9c:	e795                	bnez	a5,1c005dc8 <KerConv3x3BorderStride1_SQ8+0x72>
1c005d9e:	040d9063          	bnez	s11,1c005dde <KerConv3x3BorderStride1_SQ8+0x88>
1c005da2:	060d1063          	bnez	s10,1c005e02 <KerConv3x3BorderStride1_SQ8+0xac>
1c005da6:	060c9b63          	bnez	s9,1c005e1c <KerConv3x3BorderStride1_SQ8+0xc6>
1c005daa:	40b6                	lw	ra,76(sp)
1c005dac:	4426                	lw	s0,72(sp)
1c005dae:	4496                	lw	s1,68(sp)
1c005db0:	4906                	lw	s2,64(sp)
1c005db2:	59f2                	lw	s3,60(sp)
1c005db4:	5a62                	lw	s4,56(sp)
1c005db6:	5ad2                	lw	s5,52(sp)
1c005db8:	5b42                	lw	s6,48(sp)
1c005dba:	5bb2                	lw	s7,44(sp)
1c005dbc:	5c22                	lw	s8,40(sp)
1c005dbe:	5c92                	lw	s9,36(sp)
1c005dc0:	5d02                	lw	s10,32(sp)
1c005dc2:	4df2                	lw	s11,28(sp)
1c005dc4:	6161                	addi	sp,sp,80
1c005dc6:	8082                	ret
1c005dc8:	c202                	sw	zero,4(sp)
1c005dca:	c032                	sw	a2,0(sp)
1c005dcc:	88ae                	mv	a7,a1
1c005dce:	4866                	lw	a6,88(sp)
1c005dd0:	47d6                	lw	a5,84(sp)
1c005dd2:	4746                	lw	a4,80(sp)
1c005dd4:	86a6                	mv	a3,s1
1c005dd6:	8622                	mv	a2,s0
1c005dd8:	85ca                	mv	a1,s2
1c005dda:	3db9                	jal	1c005c38 <KerConv2x3from3x3Stride1_V_SQ8>
1c005ddc:	b7c9                	j	1c005d9e <KerConv3x3BorderStride1_SQ8+0x48>
1c005dde:	00249893          	slli	a7,s1,0x2
1c005de2:	18f1                	addi	a7,a7,-4
1c005de4:	417c0533          	sub	a0,s8,s7
1c005de8:	4785                	li	a5,1
1c005dea:	c23e                	sw	a5,4(sp)
1c005dec:	c05a                	sw	s6,0(sp)
1c005dee:	98d6                	add	a7,a7,s5
1c005df0:	4866                	lw	a6,88(sp)
1c005df2:	47d6                	lw	a5,84(sp)
1c005df4:	4746                	lw	a4,80(sp)
1c005df6:	86a6                	mv	a3,s1
1c005df8:	8622                	mv	a2,s0
1c005dfa:	85ca                	mv	a1,s2
1c005dfc:	9552                	add	a0,a0,s4
1c005dfe:	3d2d                	jal	1c005c38 <KerConv2x3from3x3Stride1_V_SQ8>
1c005e00:	b74d                	j	1c005da2 <KerConv3x3BorderStride1_SQ8+0x4c>
1c005e02:	00299813          	slli	a6,s3,0x2
1c005e06:	c002                	sw	zero,0(sp)
1c005e08:	88da                	mv	a7,s6
1c005e0a:	9856                	add	a6,a6,s5
1c005e0c:	87e2                	mv	a5,s8
1c005e0e:	874e                	mv	a4,s3
1c005e10:	86a6                	mv	a3,s1
1c005e12:	865e                	mv	a2,s7
1c005e14:	85ca                	mv	a1,s2
1c005e16:	8552                	mv	a0,s4
1c005e18:	35e5                	jal	1c005d00 <KerConv3x2from3x3Stride1_H_SQ8>
1c005e1a:	b771                	j	1c005da6 <KerConv3x3BorderStride1_SQ8+0x50>
1c005e1c:	884e                	mv	a6,s3
1c005e1e:	47e6                	lw	a5,88(sp)
1c005e20:	42f48833          	p.mac	a6,s1,a5
1c005e24:	080a                	slli	a6,a6,0x2
1c005e26:	40878433          	sub	s0,a5,s0
1c005e2a:	4785                	li	a5,1
1c005e2c:	c03e                	sw	a5,0(sp)
1c005e2e:	88da                	mv	a7,s6
1c005e30:	9856                	add	a6,a6,s5
1c005e32:	87e2                	mv	a5,s8
1c005e34:	874e                	mv	a4,s3
1c005e36:	86a6                	mv	a3,s1
1c005e38:	865e                	mv	a2,s7
1c005e3a:	85ca                	mv	a1,s2
1c005e3c:	8552                	mv	a0,s4
1c005e3e:	43240533          	p.mac	a0,s0,s2
1c005e42:	3d7d                	jal	1c005d00 <KerConv3x2from3x3Stride1_H_SQ8>
1c005e44:	b79d                	j	1c005daa <KerConv3x3BorderStride1_SQ8+0x54>

1c005e46 <KerConv3x3Stride2_Body_SQ8>:
1c005e46:	1101                	addi	sp,sp,-32
1c005e48:	ce22                	sw	s0,28(sp)
1c005e4a:	cc26                	sw	s1,24(sp)
1c005e4c:	ca4a                	sw	s2,20(sp)
1c005e4e:	c84e                	sw	s3,16(sp)
1c005e50:	c652                	sw	s4,12(sp)
1c005e52:	c456                	sw	s5,8(sp)
1c005e54:	5412                	lw	s0,36(sp)
1c005e56:	54a2                	lw	s1,40(sp)
1c005e58:	5332                	lw	t1,44(sp)
1c005e5a:	78037757          	pv.extract.b	a4,t1,0
1c005e5e:	78137357          	pv.extract.b	t1,t1,2
1c005e62:	100352b3          	p.exthz	t0,t1
1c005e66:	8342                	mv	t1,a6
1c005e68:	42878333          	p.mac	t1,a5,s0
1c005e6c:	030a                	slli	t1,t1,0x2
1c005e6e:	959a                	add	a1,a1,t1
1c005e70:	00062303          	lw	t1,0(a2)
1c005e74:	00362e03          	lw	t3,3(a2)
1c005e78:	00662e83          	lw	t4,6(a2)
1c005e7c:	09187763          	bleu	a7,a6,1c005f0a <KerConv3x3Stride2_Body_SQ8+0xc4>
1c005e80:	10075f33          	p.exthz	t5,a4
1c005e84:	b2107357          	pv.insert.b	t1,zero,3
1c005e88:	b2107e57          	pv.insert.b	t3,zero,3
1c005e8c:	b2107ed7          	pv.insert.b	t4,zero,3
1c005e90:	00141713          	slli	a4,s0,0x1
1c005e94:	40570733          	sub	a4,a4,t0
1c005e98:	02d702b3          	mul	t0,a4,a3
1c005e9c:	41e28733          	sub	a4,t0,t5
1c005ea0:	00279a13          	slli	s4,a5,0x2
1c005ea4:	00181393          	slli	t2,a6,0x1
1c005ea8:	93ba                	add	t2,t2,a4
1c005eaa:	93aa                	add	t2,t2,a0
1c005eac:	00189293          	slli	t0,a7,0x1
1c005eb0:	92aa                	add	t0,t0,a0
1c005eb2:	92ba                	add	t0,t0,a4
1c005eb4:	89b6                	mv	s3,a3
1c005eb6:	00169a93          	slli	s5,a3,0x1
1c005eba:	8926                	mv	s2,s1
1c005ebc:	407282b3          	sub	t0,t0,t2
1c005ec0:	12f9                	addi	t0,t0,-2
1c005ec2:	0012d293          	srli	t0,t0,0x1
1c005ec6:	0285                	addi	t0,t0,1
1c005ec8:	0202c07b          	lp.setup	x0,t0,1c005f08 <KerConv3x3Stride2_Body_SQ8+0xc2>
1c005ecc:	889e                	mv	a7,t2
1c005ece:	2138f68b          	p.lw	a3,s3(a7!)
1c005ed2:	8fc6                	mv	t6,a7
1c005ed4:	8f22                	mv	t5,s0
1c005ed6:	02947863          	bleu	s1,s0,1c005f06 <KerConv3x3Stride2_Body_SQ8+0xc0>
1c005eda:	98ce                	add	a7,a7,s3
1c005edc:	882e                	mv	a6,a1
1c005ede:	40890533          	sub	a0,s2,s0
1c005ee2:	011540fb          	lp.setup	x1,a0,1c005f04 <KerConv3x3Stride2_Body_SQ8+0xbe>
1c005ee6:	00082783          	lw	a5,0(a6)
1c005eea:	215ff60b          	p.lw	a2,s5(t6!)
1c005eee:	2158f70b          	p.lw	a4,s5(a7!)
1c005ef2:	b86697d7          	pv.sdotsp.b	a5,a3,t1
1c005ef6:	b9c617d7          	pv.sdotsp.b	a5,a2,t3
1c005efa:	b9d717d7          	pv.sdotsp.b	a5,a4,t4
1c005efe:	00f86a2b          	p.sw	a5,s4(a6!)
1c005f02:	0f05                	addi	t5,t5,1
1c005f04:	86ba                	mv	a3,a4
1c005f06:	0591                	addi	a1,a1,4
1c005f08:	0389                	addi	t2,t2,2
1c005f0a:	4472                	lw	s0,28(sp)
1c005f0c:	44e2                	lw	s1,24(sp)
1c005f0e:	4952                	lw	s2,20(sp)
1c005f10:	49c2                	lw	s3,16(sp)
1c005f12:	4a32                	lw	s4,12(sp)
1c005f14:	4aa2                	lw	s5,8(sp)
1c005f16:	6105                	addi	sp,sp,32
1c005f18:	8082                	ret

1c005f1a <KerConv2x3from3x3Stride2_V_SQ8>:
1c005f1a:	1101                	addi	sp,sp,-32
1c005f1c:	ce22                	sw	s0,28(sp)
1c005f1e:	cc26                	sw	s1,24(sp)
1c005f20:	ca4a                	sw	s2,20(sp)
1c005f22:	c84e                	sw	s3,16(sp)
1c005f24:	c652                	sw	s4,12(sp)
1c005f26:	5302                	lw	t1,32(sp)
1c005f28:	5e12                	lw	t3,36(sp)
1c005f2a:	0a0e0663          	beqz	t3,1c005fd6 <KerConv2x3from3x3Stride2_V_SQ8+0xbc>
1c005f2e:	00035f83          	lhu	t6,0(t1)
1c005f32:	00335f03          	lhu	t5,3(t1)
1c005f36:	00635283          	lhu	t0,6(t1)
1c005f3a:	0a17a563          	p.beqimm	a5,1,1c005fe4 <KerConv2x3from3x3Stride2_V_SQ8+0xca>
1c005f3e:	00179313          	slli	t1,a5,0x1
1c005f42:	40c30633          	sub	a2,t1,a2
1c005f46:	02d78333          	mul	t1,a5,a3
1c005f4a:	030a                	slli	t1,t1,0x2
1c005f4c:	989a                	add	a7,a7,t1
1c005f4e:	42b60533          	p.mac	a0,a2,a1
1c005f52:	20b57e0b          	p.lw	t3,a1(a0!)
1c005f56:	893e                	mv	s2,a5
1c005f58:	0507fb63          	bleu	a6,a5,1c005fae <KerConv2x3from3x3Stride2_V_SQ8+0x94>
1c005f5c:	00269993          	slli	s3,a3,0x2
1c005f60:	00159a13          	slli	s4,a1,0x1
1c005f64:	00b504b3          	add	s1,a0,a1
1c005f68:	86c6                	mv	a3,a7
1c005f6a:	842a                	mv	s0,a0
1c005f6c:	40f803b3          	sub	t2,a6,a5
1c005f70:	0103c0fb          	lp.setup	x1,t2,1c005f90 <KerConv2x3from3x3Stride2_V_SQ8+0x76>
1c005f74:	4290                	lw	a2,0(a3)
1c005f76:	21447e8b          	p.lw	t4,s4(s0!)
1c005f7a:	2144f30b          	p.lw	t1,s4(s1!)
1c005f7e:	b9fe1657          	pv.sdotsp.b	a2,t3,t6
1c005f82:	b9ee9657          	pv.sdotsp.b	a2,t4,t5
1c005f86:	b8531657          	pv.sdotsp.b	a2,t1,t0
1c005f8a:	00c6e9ab          	p.sw	a2,s3(a3!)
1c005f8e:	0785                	addi	a5,a5,1
1c005f90:	8e1a                	mv	t3,t1
1c005f92:	fff80793          	addi	a5,a6,-1
1c005f96:	412787b3          	sub	a5,a5,s2
1c005f9a:	86ae                	mv	a3,a1
1c005f9c:	42b786b3          	p.mac	a3,a5,a1
1c005fa0:	00169793          	slli	a5,a3,0x1
1c005fa4:	953e                	add	a0,a0,a5
1c005fa6:	41280933          	sub	s2,a6,s2
1c005faa:	433908b3          	p.mac	a7,s2,s3
1c005fae:	01070d63          	beq	a4,a6,1c005fc8 <KerConv2x3from3x3Stride2_V_SQ8+0xae>
1c005fb2:	0008a783          	lw	a5,0(a7)
1c005fb6:	4118                	lw	a4,0(a0)
1c005fb8:	8d0d                	sub	a0,a0,a1
1c005fba:	4114                	lw	a3,0(a0)
1c005fbc:	b9f697d7          	pv.sdotsp.b	a5,a3,t6
1c005fc0:	b9e717d7          	pv.sdotsp.b	a5,a4,t5
1c005fc4:	00f8a023          	sw	a5,0(a7)
1c005fc8:	4472                	lw	s0,28(sp)
1c005fca:	44e2                	lw	s1,24(sp)
1c005fcc:	4952                	lw	s2,20(sp)
1c005fce:	49c2                	lw	s3,16(sp)
1c005fd0:	4a32                	lw	s4,12(sp)
1c005fd2:	6105                	addi	sp,sp,32
1c005fd4:	8082                	ret
1c005fd6:	00135f83          	lhu	t6,1(t1)
1c005fda:	00435f03          	lhu	t5,4(t1)
1c005fde:	00735283          	lhu	t0,7(t1)
1c005fe2:	bfa1                	j	1c005f3a <KerConv2x3from3x3Stride2_V_SQ8+0x20>
1c005fe4:	00007e57          	pv.add.sci.b	t3,zero,0
1c005fe8:	4781                	li	a5,0
1c005fea:	b7b5                	j	1c005f56 <KerConv2x3from3x3Stride2_V_SQ8+0x3c>

1c005fec <KerConv3x2from3x3Stride2_H_SQ8>:
1c005fec:	4302                	lw	t1,0(sp)
1c005fee:	00171693          	slli	a3,a4,0x1
1c005ff2:	40c68633          	sub	a2,a3,a2
1c005ff6:	9532                	add	a0,a0,a2
1c005ff8:	02030f63          	beqz	t1,1c006036 <KerConv3x2from3x3Stride2_H_SQ8+0x4a>
1c005ffc:	0008a303          	lw	t1,0(a7)
1c006000:	b2107357          	pv.insert.b	t1,zero,3
1c006004:	0038ae03          	lw	t3,3(a7)
1c006008:	b2107e57          	pv.insert.b	t3,zero,3
1c00600c:	02f77463          	bleu	a5,a4,1c006034 <KerConv3x2from3x3Stride2_H_SQ8+0x48>
1c006010:	95aa                	add	a1,a1,a0
1c006012:	40e78eb3          	sub	t4,a5,a4
1c006016:	00eec0fb          	lp.setup	x1,t4,1c006032 <KerConv3x2from3x3Stride2_H_SQ8+0x46>
1c00601a:	00082783          	lw	a5,0(a6)
1c00601e:	0025288b          	p.lw	a7,2(a0!)
1c006022:	0025a68b          	p.lw	a3,2(a1!)
1c006026:	b86897d7          	pv.sdotsp.b	a5,a7,t1
1c00602a:	b9c697d7          	pv.sdotsp.b	a5,a3,t3
1c00602e:	00f8222b          	p.sw	a5,4(a6!)
1c006032:	0705                	addi	a4,a4,1
1c006034:	8082                	ret
1c006036:	0038a303          	lw	t1,3(a7)
1c00603a:	b2107357          	pv.insert.b	t1,zero,3
1c00603e:	0068ae03          	lw	t3,6(a7)
1c006042:	b2107e57          	pv.insert.b	t3,zero,3
1c006046:	b7d9                	j	1c00600c <KerConv3x2from3x3Stride2_H_SQ8+0x20>

1c006048 <KerConv3x3BorderStride2_SQ8>:
1c006048:	715d                	addi	sp,sp,-80
1c00604a:	c686                	sw	ra,76(sp)
1c00604c:	c4a2                	sw	s0,72(sp)
1c00604e:	c2a6                	sw	s1,68(sp)
1c006050:	c0ca                	sw	s2,64(sp)
1c006052:	de4e                	sw	s3,60(sp)
1c006054:	dc52                	sw	s4,56(sp)
1c006056:	da56                	sw	s5,52(sp)
1c006058:	d85a                	sw	s6,48(sp)
1c00605a:	d65e                	sw	s7,44(sp)
1c00605c:	d462                	sw	s8,40(sp)
1c00605e:	d266                	sw	s9,36(sp)
1c006060:	d06a                	sw	s10,32(sp)
1c006062:	ce6e                	sw	s11,28(sp)
1c006064:	8a2a                	mv	s4,a0
1c006066:	8aae                	mv	s5,a1
1c006068:	8b32                	mv	s6,a2
1c00606a:	8936                	mv	s2,a3
1c00606c:	84be                	mv	s1,a5
1c00606e:	89c2                	mv	s3,a6
1c006070:	8c46                	mv	s8,a7
1c006072:	47f6                	lw	a5,92(sp)
1c006074:	5406                	lw	s0,96(sp)
1c006076:	78047bd7          	pv.extract.b	s7,s0,0
1c00607a:	78147457          	pv.extract.b	s0,s0,2
1c00607e:	7a07fdd7          	pv.extract.b	s11,a5,1
1c006082:	7817fd57          	pv.extract.b	s10,a5,2
1c006086:	7a17fcd7          	pv.extract.b	s9,a5,3
1c00608a:	7807f7d7          	pv.extract.b	a5,a5,0
1c00608e:	e795                	bnez	a5,1c0060ba <KerConv3x3BorderStride2_SQ8+0x72>
1c006090:	040d9063          	bnez	s11,1c0060d0 <KerConv3x3BorderStride2_SQ8+0x88>
1c006094:	060d1263          	bnez	s10,1c0060f8 <KerConv3x3BorderStride2_SQ8+0xb0>
1c006098:	060c9d63          	bnez	s9,1c006112 <KerConv3x3BorderStride2_SQ8+0xca>
1c00609c:	40b6                	lw	ra,76(sp)
1c00609e:	4426                	lw	s0,72(sp)
1c0060a0:	4496                	lw	s1,68(sp)
1c0060a2:	4906                	lw	s2,64(sp)
1c0060a4:	59f2                	lw	s3,60(sp)
1c0060a6:	5a62                	lw	s4,56(sp)
1c0060a8:	5ad2                	lw	s5,52(sp)
1c0060aa:	5b42                	lw	s6,48(sp)
1c0060ac:	5bb2                	lw	s7,44(sp)
1c0060ae:	5c22                	lw	s8,40(sp)
1c0060b0:	5c92                	lw	s9,36(sp)
1c0060b2:	5d02                	lw	s10,32(sp)
1c0060b4:	4df2                	lw	s11,28(sp)
1c0060b6:	6161                	addi	sp,sp,80
1c0060b8:	8082                	ret
1c0060ba:	c202                	sw	zero,4(sp)
1c0060bc:	c032                	sw	a2,0(sp)
1c0060be:	88ae                	mv	a7,a1
1c0060c0:	4866                	lw	a6,88(sp)
1c0060c2:	47d6                	lw	a5,84(sp)
1c0060c4:	4746                	lw	a4,80(sp)
1c0060c6:	86a6                	mv	a3,s1
1c0060c8:	8622                	mv	a2,s0
1c0060ca:	85ca                	mv	a1,s2
1c0060cc:	35b9                	jal	1c005f1a <KerConv2x3from3x3Stride2_V_SQ8>
1c0060ce:	b7c9                	j	1c006090 <KerConv3x3BorderStride2_SQ8+0x48>
1c0060d0:	00249893          	slli	a7,s1,0x2
1c0060d4:	18f1                	addi	a7,a7,-4
1c0060d6:	001c1513          	slli	a0,s8,0x1
1c0060da:	41750533          	sub	a0,a0,s7
1c0060de:	4785                	li	a5,1
1c0060e0:	c23e                	sw	a5,4(sp)
1c0060e2:	c05a                	sw	s6,0(sp)
1c0060e4:	98d6                	add	a7,a7,s5
1c0060e6:	4866                	lw	a6,88(sp)
1c0060e8:	47d6                	lw	a5,84(sp)
1c0060ea:	4746                	lw	a4,80(sp)
1c0060ec:	86a6                	mv	a3,s1
1c0060ee:	8622                	mv	a2,s0
1c0060f0:	85ca                	mv	a1,s2
1c0060f2:	9552                	add	a0,a0,s4
1c0060f4:	351d                	jal	1c005f1a <KerConv2x3from3x3Stride2_V_SQ8>
1c0060f6:	bf79                	j	1c006094 <KerConv3x3BorderStride2_SQ8+0x4c>
1c0060f8:	00299813          	slli	a6,s3,0x2
1c0060fc:	c002                	sw	zero,0(sp)
1c0060fe:	88da                	mv	a7,s6
1c006100:	9856                	add	a6,a6,s5
1c006102:	87e2                	mv	a5,s8
1c006104:	874e                	mv	a4,s3
1c006106:	86a6                	mv	a3,s1
1c006108:	865e                	mv	a2,s7
1c00610a:	85ca                	mv	a1,s2
1c00610c:	8552                	mv	a0,s4
1c00610e:	3df9                	jal	1c005fec <KerConv3x2from3x3Stride2_H_SQ8>
1c006110:	b761                	j	1c006098 <KerConv3x3BorderStride2_SQ8+0x50>
1c006112:	884e                	mv	a6,s3
1c006114:	4766                	lw	a4,88(sp)
1c006116:	42e48833          	p.mac	a6,s1,a4
1c00611a:	080a                	slli	a6,a6,0x2
1c00611c:	00171793          	slli	a5,a4,0x1
1c006120:	40878433          	sub	s0,a5,s0
1c006124:	4785                	li	a5,1
1c006126:	c03e                	sw	a5,0(sp)
1c006128:	88da                	mv	a7,s6
1c00612a:	9856                	add	a6,a6,s5
1c00612c:	87e2                	mv	a5,s8
1c00612e:	874e                	mv	a4,s3
1c006130:	86a6                	mv	a3,s1
1c006132:	865e                	mv	a2,s7
1c006134:	85ca                	mv	a1,s2
1c006136:	8552                	mv	a0,s4
1c006138:	43240533          	p.mac	a0,s0,s2
1c00613c:	3d45                	jal	1c005fec <KerConv3x2from3x3Stride2_H_SQ8>
1c00613e:	bfb9                	j	1c00609c <KerConv3x3BorderStride2_SQ8+0x54>

1c006140 <KerParConv3x3Stride1_SQ8>:

void KerParConv3x3Stride1_SQ8(KerConv_SQ8_T *Arg)

{
1c006140:	7171                	addi	sp,sp,-176
1c006142:	d706                	sw	ra,172(sp)
1c006144:	d522                	sw	s0,168(sp)
1c006146:	d326                	sw	s1,164(sp)
1c006148:	d14a                	sw	s2,160(sp)
1c00614a:	cf4e                	sw	s3,156(sp)
1c00614c:	cd52                	sw	s4,152(sp)
1c00614e:	cb56                	sw	s5,148(sp)
1c006150:	c95a                	sw	s6,144(sp)
1c006152:	c75e                	sw	s7,140(sp)
1c006154:	c562                	sw	s8,136(sp)
1c006156:	c366                	sw	s9,132(sp)
1c006158:	c16a                	sw	s10,128(sp)
1c00615a:	deee                	sw	s11,124(sp)
1c00615c:	84aa                	mv	s1,a0
	unsigned int FS=3, S=1;
	signed char * __restrict__ In = Arg->In;
1c00615e:	4110                	lw	a2,0(a0)
1c006160:	cab2                	sw	a2,84(sp)
	unsigned int W = Arg->W;
1c006162:	00455683          	lhu	a3,4(a0)
1c006166:	d636                	sw	a3,44(sp)
	unsigned int H = Arg->H;
1c006168:	00855703          	lhu	a4,8(a0)
1c00616c:	d83a                	sw	a4,48(sp)
	int TotalInFeatures = Arg->TotalInFeatures;
1c00616e:	01055783          	lhu	a5,16(a0)
1c006172:	cebe                	sw	a5,92(sp)
	unsigned int OutFeatures = Arg->OutFeatures;
1c006174:	00e55703          	lhu	a4,14(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c006178:	4950                	lw	a2,20(a0)
1c00617a:	d2b2                	sw	a2,100(sp)
	int * __restrict__ Out = Arg->Out;
1c00617c:	4d54                	lw	a3,28(a0)
1c00617e:	d6b6                	sw	a3,108(sp)
	unsigned int CoreId = gap_coreid();
1c006180:	f1402473          	csrr	s0,mhartid
1c006184:	c8041433          	p.extractu	s0,s0,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c006188:	f83737b3          	p.bclr	a5,a4,28,3
1c00618c:	00f037b3          	snez	a5,a5
1c006190:	00375693          	srli	a3,a4,0x3
1c006194:	97b6                	add	a5,a5,a3
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c006196:	02f40433          	mul	s0,s0,a5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00619a:	97a2                	add	a5,a5,s0
1c00619c:	04e7c7b3          	p.min	a5,a5,a4
1c0061a0:	d4be                	sw	a5,104(sp)
	v4s PadIn = Arg->Pad;
1c0061a2:	02052903          	lw	s2,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c0061a6:	78097657          	pv.extract.b	a2,s2,0
1c0061aa:	00655503          	lhu	a0,6(a0)
1c0061ae:	ffe50793          	addi	a5,a0,-2
1c0061b2:	97b2                	add	a5,a5,a2
1c0061b4:	7a097757          	pv.extract.b	a4,s2,1
1c0061b8:	973e                	add	a4,a4,a5
1c0061ba:	d43a                	sw	a4,40(sp)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c0061bc:	04c74733          	p.min	a4,a4,a2
1c0061c0:	de3a                	sw	a4,60(sp)
1c0061c2:	4685                	li	a3,1
1c0061c4:	458d                	li	a1,3
1c0061c6:	d9cff0ef          	jal	ra,1c005762 <LastDefinedOutput>
1c0061ca:	57f2                	lw	a5,60(sp)
1c0061cc:	04a7eab3          	p.max	s5,a5,a0
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c0061d0:	78197657          	pv.extract.b	a2,s2,2
1c0061d4:	00a4d503          	lhu	a0,10(s1)
1c0061d8:	ffe50993          	addi	s3,a0,-2
1c0061dc:	99b2                	add	s3,s3,a2
1c0061de:	7a1977d7          	pv.extract.b	a5,s2,3
1c0061e2:	99be                	add	s3,s3,a5
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c0061e4:	04c9ca33          	p.min	s4,s3,a2
1c0061e8:	4685                	li	a3,1
1c0061ea:	458d                	li	a1,3
1c0061ec:	d76ff0ef          	jal	ra,1c005762 <LastDefinedOutput>
1c0061f0:	04aa6b33          	p.max	s6,s4,a0

	unsigned int InFeatures = Arg->InFeatures;
1c0061f4:	00c4d483          	lhu	s1,12(s1)
1c0061f8:	c2a6                	sw	s1,68(sp)
	unsigned int Iter = Max(0, Last-First);
1c0061fa:	5626                	lw	a2,104(sp)
1c0061fc:	408607b3          	sub	a5,a2,s0
1c006200:	0407e7b3          	p.max	a5,a5,zero
1c006204:	d0be                	sw	a5,96(sp)
	for (unsigned int i=0; i<Iter/2; i++) {
1c006206:	0017d693          	srli	a3,a5,0x1
1c00620a:	c4b6                	sw	a3,72(sp)
1c00620c:	cec5                	beqz	a3,1c0062c4 <KerParConv3x3Stride1_SQ8+0x184>
		unsigned int of = First + 2*i;
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c00620e:	5732                	lw	a4,44(sp)
1c006210:	57c2                	lw	a5,48(sp)
1c006212:	02f70d33          	mul	s10,a4,a5
			int *out = Out+Wo*Ho*(of);
1c006216:	5622                	lw	a2,40(sp)
1c006218:	033607b3          	mul	a5,a2,s3
1c00621c:	00279713          	slli	a4,a5,0x2
			KerConv3x3Stride1_Body_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c006220:	4676                	lw	a2,92(sp)
1c006222:	00361693          	slli	a3,a2,0x3
1c006226:	96b2                	add	a3,a3,a2
1c006228:	dc36                	sw	a3,56(sp)
1c00622a:	0686                	slli	a3,a3,0x1
1c00622c:	c6b6                	sw	a3,76(sp)
1c00622e:	5d96                	lw	s11,100(sp)
1c006230:	5662                	lw	a2,56(sp)
1c006232:	42860db3          	p.mac	s11,a2,s0
1c006236:	078e                	slli	a5,a5,0x3
1c006238:	c8be                	sw	a5,80(sp)
1c00623a:	56b6                	lw	a3,108(sp)
1c00623c:	428706b3          	p.mac	a3,a4,s0
1c006240:	c0b6                	sw	a3,64(sp)
1c006242:	00349793          	slli	a5,s1,0x3
1c006246:	97a6                	add	a5,a5,s1
1c006248:	ccbe                	sw	a5,88(sp)
	for (unsigned int i=0; i<Iter/2; i++) {
1c00624a:	4b81                	li	s7,0
			if ((int)PadIn) KerConv3x3BorderStride1_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00624c:	8cca                	mv	s9,s2
1c00624e:	a08d                	j	1c0062b0 <KerParConv3x3Stride1_SQ8+0x170>
1c006250:	94ea                	add	s1,s1,s10
1c006252:	0425                	addi	s0,s0,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c006254:	05840463          	beq	s0,s8,1c00629c <KerParConv3x3Stride1_SQ8+0x15c>
			KerConv3x3Stride1_Body_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c006258:	c84a                	sw	s2,16(sp)
1c00625a:	c65a                	sw	s6,12(sp)
1c00625c:	c452                	sw	s4,8(sp)
1c00625e:	c24e                	sw	s3,4(sp)
1c006260:	c056                	sw	s5,0(sp)
1c006262:	58f2                	lw	a7,60(sp)
1c006264:	5822                	lw	a6,40(sp)
1c006266:	57c2                	lw	a5,48(sp)
1c006268:	5732                	lw	a4,44(sp)
1c00626a:	56e2                	lw	a3,56(sp)
1c00626c:	8622                	mv	a2,s0
1c00626e:	55d2                	lw	a1,52(sp)
1c006270:	8526                	mv	a0,s1
1c006272:	d0aff0ef          	jal	ra,1c00577c <KerConv3x3Stride1_Body_2Out_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride1_2Out_SQ8(in, out, filter, TotalInFeatures*FS*FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006276:	fc0c8de3          	beqz	s9,1c006250 <KerParConv3x3Stride1_SQ8+0x110>
1c00627a:	ca4a                	sw	s2,20(sp)
1c00627c:	c84a                	sw	s2,16(sp)
1c00627e:	c65a                	sw	s6,12(sp)
1c006280:	c452                	sw	s4,8(sp)
1c006282:	c24e                	sw	s3,4(sp)
1c006284:	c056                	sw	s5,0(sp)
1c006286:	58f2                	lw	a7,60(sp)
1c006288:	5822                	lw	a6,40(sp)
1c00628a:	57c2                	lw	a5,48(sp)
1c00628c:	5732                	lw	a4,44(sp)
1c00628e:	56e2                	lw	a3,56(sp)
1c006290:	8622                	mv	a2,s0
1c006292:	55d2                	lw	a1,52(sp)
1c006294:	8526                	mv	a0,s1
1c006296:	fd8ff0ef          	jal	ra,1c005a6e <KerConv3x3BorderStride1_2Out_SQ8>
1c00629a:	bf5d                	j	1c006250 <KerParConv3x3Stride1_SQ8+0x110>
	for (unsigned int i=0; i<Iter/2; i++) {
1c00629c:	0b85                	addi	s7,s7,1
1c00629e:	46b6                	lw	a3,76(sp)
1c0062a0:	9db6                	add	s11,s11,a3
1c0062a2:	4706                	lw	a4,64(sp)
1c0062a4:	47c6                	lw	a5,80(sp)
1c0062a6:	973e                	add	a4,a4,a5
1c0062a8:	c0ba                	sw	a4,64(sp)
1c0062aa:	4626                	lw	a2,72(sp)
1c0062ac:	01760c63          	beq	a2,s7,1c0062c4 <KerParConv3x3Stride1_SQ8+0x184>
		for (unsigned int If=0; If<InFeatures; If++) {
1c0062b0:	4716                	lw	a4,68(sp)
1c0062b2:	d76d                	beqz	a4,1c00629c <KerParConv3x3Stride1_SQ8+0x15c>
			int *out = Out+Wo*Ho*(of);
1c0062b4:	4786                	lw	a5,64(sp)
1c0062b6:	da3e                	sw	a5,52(sp)
1c0062b8:	44d6                	lw	s1,84(sp)
1c0062ba:	4666                	lw	a2,88(sp)
1c0062bc:	00cd8c33          	add	s8,s11,a2
1c0062c0:	846e                	mv	s0,s11
1c0062c2:	bf59                	j	1c006258 <KerParConv3x3Stride1_SQ8+0x118>
		}
	}
	if (Iter&0x1) {
1c0062c4:	5686                	lw	a3,96(sp)
1c0062c6:	fc16b7b3          	p.bclr	a5,a3,30,1
1c0062ca:	cbc1                	beqz	a5,1c00635a <KerParConv3x3Stride1_SQ8+0x21a>
		unsigned int of = Last-1;
1c0062cc:	57a6                	lw	a5,104(sp)
1c0062ce:	fff78713          	addi	a4,a5,-1
		for (unsigned int If=0; If<InFeatures; If++) {
1c0062d2:	4616                	lw	a2,68(sp)
1c0062d4:	c259                	beqz	a2,1c00635a <KerParConv3x3Stride1_SQ8+0x21a>
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c0062d6:	56b2                	lw	a3,44(sp)
1c0062d8:	57c2                	lw	a5,48(sp)
1c0062da:	02f68d33          	mul	s10,a3,a5
1c0062de:	4676                	lw	a2,92(sp)
1c0062e0:	02e607b3          	mul	a5,a2,a4
			int *out = Out+Wo*Ho*(of);
1c0062e4:	5622                	lw	a2,40(sp)
1c0062e6:	033606b3          	mul	a3,a2,s3
1c0062ea:	068a                	slli	a3,a3,0x2
1c0062ec:	5bb6                	lw	s7,108(sp)
1c0062ee:	42e68bb3          	p.mac	s7,a3,a4
1c0062f2:	4456                	lw	s0,84(sp)
1c0062f4:	00379493          	slli	s1,a5,0x3
1c0062f8:	94be                	add	s1,s1,a5
1c0062fa:	5696                	lw	a3,100(sp)
1c0062fc:	94b6                	add	s1,s1,a3
1c0062fe:	4716                	lw	a4,68(sp)
1c006300:	97ba                	add	a5,a5,a4
1c006302:	00379c13          	slli	s8,a5,0x3
1c006306:	97e2                	add	a5,a5,s8
1c006308:	00f68c33          	add	s8,a3,a5
			KerConv3x3Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00630c:	8cca                	mv	s9,s2
1c00630e:	5df2                	lw	s11,60(sp)
1c006310:	a029                	j	1c00631a <KerParConv3x3Stride1_SQ8+0x1da>
1c006312:	946a                	add	s0,s0,s10
1c006314:	04a5                	addi	s1,s1,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c006316:	05848263          	beq	s1,s8,1c00635a <KerParConv3x3Stride1_SQ8+0x21a>
			KerConv3x3Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c00631a:	c64a                	sw	s2,12(sp)
1c00631c:	c45a                	sw	s6,8(sp)
1c00631e:	c252                	sw	s4,4(sp)
1c006320:	c04e                	sw	s3,0(sp)
1c006322:	88d6                	mv	a7,s5
1c006324:	886e                	mv	a6,s11
1c006326:	57a2                	lw	a5,40(sp)
1c006328:	5742                	lw	a4,48(sp)
1c00632a:	56b2                	lw	a3,44(sp)
1c00632c:	8626                	mv	a2,s1
1c00632e:	85de                	mv	a1,s7
1c006330:	8522                	mv	a0,s0
1c006332:	83bff0ef          	jal	ra,1c005b6c <KerConv3x3Stride1_Body_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006336:	fc0c8ee3          	beqz	s9,1c006312 <KerParConv3x3Stride1_SQ8+0x1d2>
1c00633a:	c84a                	sw	s2,16(sp)
1c00633c:	c64a                	sw	s2,12(sp)
1c00633e:	c45a                	sw	s6,8(sp)
1c006340:	c252                	sw	s4,4(sp)
1c006342:	c04e                	sw	s3,0(sp)
1c006344:	88d6                	mv	a7,s5
1c006346:	886e                	mv	a6,s11
1c006348:	57a2                	lw	a5,40(sp)
1c00634a:	5742                	lw	a4,48(sp)
1c00634c:	56b2                	lw	a3,44(sp)
1c00634e:	8626                	mv	a2,s1
1c006350:	85de                	mv	a1,s7
1c006352:	8522                	mv	a0,s0
1c006354:	a03ff0ef          	jal	ra,1c005d56 <KerConv3x3BorderStride1_SQ8>
1c006358:	bf6d                	j	1c006312 <KerParConv3x3Stride1_SQ8+0x1d2>
1c00635a:	002047b7          	lui	a5,0x204
1c00635e:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c006362:	01c7e703          	p.elw	a4,28(a5)
		}
	}
	gap_waitbarrier(0);
}
1c006366:	50ba                	lw	ra,172(sp)
1c006368:	542a                	lw	s0,168(sp)
1c00636a:	549a                	lw	s1,164(sp)
1c00636c:	590a                	lw	s2,160(sp)
1c00636e:	49fa                	lw	s3,156(sp)
1c006370:	4a6a                	lw	s4,152(sp)
1c006372:	4ada                	lw	s5,148(sp)
1c006374:	4b4a                	lw	s6,144(sp)
1c006376:	4bba                	lw	s7,140(sp)
1c006378:	4c2a                	lw	s8,136(sp)
1c00637a:	4c9a                	lw	s9,132(sp)
1c00637c:	4d0a                	lw	s10,128(sp)
1c00637e:	5df6                	lw	s11,124(sp)
1c006380:	614d                	addi	sp,sp,176
1c006382:	8082                	ret

1c006384 <KerParConv3x3Stride2_SQ8>:

void KerParConv3x3Stride2_SQ8(KerConv_SQ8_T *Arg)

{
1c006384:	7175                	addi	sp,sp,-144
1c006386:	c706                	sw	ra,140(sp)
1c006388:	c522                	sw	s0,136(sp)
1c00638a:	c326                	sw	s1,132(sp)
1c00638c:	c14a                	sw	s2,128(sp)
1c00638e:	dece                	sw	s3,124(sp)
1c006390:	dcd2                	sw	s4,120(sp)
1c006392:	dad6                	sw	s5,116(sp)
1c006394:	d8da                	sw	s6,112(sp)
1c006396:	d6de                	sw	s7,108(sp)
1c006398:	d4e2                	sw	s8,104(sp)
1c00639a:	d2e6                	sw	s9,100(sp)
1c00639c:	d0ea                	sw	s10,96(sp)
1c00639e:	ceee                	sw	s11,92(sp)
1c0063a0:	8aaa                	mv	s5,a0
	unsigned int FS=3, S=2;
	signed char * __restrict__ In = Arg->In;
1c0063a2:	4118                	lw	a4,0(a0)
1c0063a4:	c4ba                	sw	a4,72(sp)
	unsigned int W = Arg->W;
1c0063a6:	00455783          	lhu	a5,4(a0)
1c0063aa:	d63e                	sw	a5,44(sp)
	unsigned int H = Arg->H;
1c0063ac:	00855703          	lhu	a4,8(a0)
1c0063b0:	d83a                	sw	a4,48(sp)
	int TotalInFeatures = Arg->TotalInFeatures;
1c0063b2:	01055403          	lhu	s0,16(a0)
	unsigned int OutFeatures = Arg->OutFeatures;
1c0063b6:	00e55703          	lhu	a4,14(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c0063ba:	01452d83          	lw	s11,20(a0)
	int * __restrict__ Out = Arg->Out;
1c0063be:	4d44                	lw	s1,28(a0)
	unsigned int CoreId = gap_coreid();
1c0063c0:	f1402d73          	csrr	s10,mhartid
1c0063c4:	c80d1d33          	p.extractu	s10,s10,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0063c8:	f83737b3          	p.bclr	a5,a4,28,3
1c0063cc:	00f037b3          	snez	a5,a5
1c0063d0:	00375693          	srli	a3,a4,0x3
1c0063d4:	97b6                	add	a5,a5,a3
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c0063d6:	02fd0d33          	mul	s10,s10,a5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c0063da:	97ea                	add	a5,a5,s10
1c0063dc:	04e7c7b3          	p.min	a5,a5,a4
1c0063e0:	de3e                	sw	a5,60(sp)
	v4s PadIn = Arg->Pad;
1c0063e2:	02052903          	lw	s2,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c0063e6:	78097657          	pv.extract.b	a2,s2,0
1c0063ea:	00655503          	lhu	a0,6(a0)
1c0063ee:	ffd50793          	addi	a5,a0,-3
1c0063f2:	97b2                	add	a5,a5,a2
1c0063f4:	7a097757          	pv.extract.b	a4,s2,1
1c0063f8:	82e7a7db          	p.addun	a5,a5,a4,1
1c0063fc:	0785                	addi	a5,a5,1
1c0063fe:	d23e                	sw	a5,36(sp)
	return ((Pad+Stride-1)/Stride);
1c006400:	00160793          	addi	a5,a2,1
1c006404:	8385                	srli	a5,a5,0x1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c006406:	5712                	lw	a4,36(sp)
1c006408:	04f747b3          	p.min	a5,a4,a5
1c00640c:	d43e                	sw	a5,40(sp)
1c00640e:	4689                	li	a3,2
1c006410:	458d                	li	a1,3
1c006412:	b50ff0ef          	jal	ra,1c005762 <LastDefinedOutput>
1c006416:	57a2                	lw	a5,40(sp)
1c006418:	04a7e533          	p.max	a0,a5,a0
1c00641c:	da2a                	sw	a0,52(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00641e:	78197657          	pv.extract.b	a2,s2,2
1c006422:	00aad503          	lhu	a0,10(s5)
1c006426:	ffd50993          	addi	s3,a0,-3
1c00642a:	99b2                	add	s3,s3,a2
1c00642c:	7a1977d7          	pv.extract.b	a5,s2,3
1c006430:	82f9a9db          	p.addun	s3,s3,a5,1
1c006434:	0985                	addi	s3,s3,1
	return ((Pad+Stride-1)/Stride);
1c006436:	00160a13          	addi	s4,a2,1
1c00643a:	001a5a13          	srli	s4,s4,0x1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00643e:	0549ca33          	p.min	s4,s3,s4
1c006442:	4689                	li	a3,2
1c006444:	458d                	li	a1,3
1c006446:	b1cff0ef          	jal	ra,1c005762 <LastDefinedOutput>
1c00644a:	04aa6b33          	p.max	s6,s4,a0

	unsigned int InFeatures = Arg->InFeatures;
1c00644e:	00cada83          	lhu	s5,12(s5)
1c006452:	dc56                	sw	s5,56(sp)
	for (unsigned int of=First; of<Last; of++) 
1c006454:	5772                	lw	a4,60(sp)
1c006456:	0aed7063          	bleu	a4,s10,1c0064f6 <KerParConv3x3Stride2_SQ8+0x172>
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c00645a:	57b2                	lw	a5,44(sp)
1c00645c:	5742                	lw	a4,48(sp)
1c00645e:	02e78cb3          	mul	s9,a5,a4
			int *out = Out+Wo*Ho*(of);
1c006462:	5712                	lw	a4,36(sp)
1c006464:	033707b3          	mul	a5,a4,s3
1c006468:	078a                	slli	a5,a5,0x2
1c00646a:	c0be                	sw	a5,64(sp)
1c00646c:	00341793          	slli	a5,s0,0x3
1c006470:	97a2                	add	a5,a5,s0
1c006472:	c2be                	sw	a5,68(sp)
1c006474:	42fd0db3          	p.mac	s11,s10,a5
1c006478:	8aa6                	mv	s5,s1
1c00647a:	4786                	lw	a5,64(sp)
1c00647c:	42fd0ab3          	p.mac	s5,s10,a5
1c006480:	5762                	lw	a4,56(sp)
1c006482:	00371793          	slli	a5,a4,0x3
1c006486:	97ba                	add	a5,a5,a4
1c006488:	c6be                	sw	a5,76(sp)
			KerConv3x3Stride2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride2_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00648a:	8c4a                	mv	s8,s2
1c00648c:	a8a1                	j	1c0064e4 <KerParConv3x3Stride2_SQ8+0x160>
1c00648e:	94e6                	add	s1,s1,s9
1c006490:	0425                	addi	s0,s0,9
		for (unsigned int If=0; If<InFeatures; If++) {
1c006492:	05740163          	beq	s0,s7,1c0064d4 <KerParConv3x3Stride2_SQ8+0x150>
			KerConv3x3Stride2_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c006496:	c64a                	sw	s2,12(sp)
1c006498:	c45a                	sw	s6,8(sp)
1c00649a:	c252                	sw	s4,4(sp)
1c00649c:	c04e                	sw	s3,0(sp)
1c00649e:	58d2                	lw	a7,52(sp)
1c0064a0:	5822                	lw	a6,40(sp)
1c0064a2:	5792                	lw	a5,36(sp)
1c0064a4:	5742                	lw	a4,48(sp)
1c0064a6:	56b2                	lw	a3,44(sp)
1c0064a8:	8622                	mv	a2,s0
1c0064aa:	5582                	lw	a1,32(sp)
1c0064ac:	8526                	mv	a0,s1
1c0064ae:	999ff0ef          	jal	ra,1c005e46 <KerConv3x3Stride2_Body_SQ8>
			if ((int)PadIn) KerConv3x3BorderStride2_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c0064b2:	fc0c0ee3          	beqz	s8,1c00648e <KerParConv3x3Stride2_SQ8+0x10a>
1c0064b6:	c84a                	sw	s2,16(sp)
1c0064b8:	c64a                	sw	s2,12(sp)
1c0064ba:	c45a                	sw	s6,8(sp)
1c0064bc:	c252                	sw	s4,4(sp)
1c0064be:	c04e                	sw	s3,0(sp)
1c0064c0:	58d2                	lw	a7,52(sp)
1c0064c2:	5822                	lw	a6,40(sp)
1c0064c4:	5792                	lw	a5,36(sp)
1c0064c6:	5742                	lw	a4,48(sp)
1c0064c8:	56b2                	lw	a3,44(sp)
1c0064ca:	8622                	mv	a2,s0
1c0064cc:	5582                	lw	a1,32(sp)
1c0064ce:	8526                	mv	a0,s1
1c0064d0:	3ea5                	jal	1c006048 <KerConv3x3BorderStride2_SQ8>
1c0064d2:	bf75                	j	1c00648e <KerParConv3x3Stride2_SQ8+0x10a>
	for (unsigned int of=First; of<Last; of++) 
1c0064d4:	0d05                	addi	s10,s10,1
1c0064d6:	4716                	lw	a4,68(sp)
1c0064d8:	9dba                	add	s11,s11,a4
1c0064da:	4786                	lw	a5,64(sp)
1c0064dc:	9abe                	add	s5,s5,a5
1c0064de:	5772                	lw	a4,60(sp)
1c0064e0:	01a70b63          	beq	a4,s10,1c0064f6 <KerParConv3x3Stride2_SQ8+0x172>
		for (unsigned int If=0; If<InFeatures; If++) {
1c0064e4:	57e2                	lw	a5,56(sp)
1c0064e6:	d7fd                	beqz	a5,1c0064d4 <KerParConv3x3Stride2_SQ8+0x150>
			int *out = Out+Wo*Ho*(of);
1c0064e8:	d056                	sw	s5,32(sp)
1c0064ea:	44a6                	lw	s1,72(sp)
1c0064ec:	47b6                	lw	a5,76(sp)
1c0064ee:	00fd8bb3          	add	s7,s11,a5
1c0064f2:	846e                	mv	s0,s11
1c0064f4:	b74d                	j	1c006496 <KerParConv3x3Stride2_SQ8+0x112>
1c0064f6:	002047b7          	lui	a5,0x204
1c0064fa:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0064fe:	01c7e703          	p.elw	a4,28(a5)
		}
	gap_waitbarrier(0);
}
1c006502:	40ba                	lw	ra,140(sp)
1c006504:	442a                	lw	s0,136(sp)
1c006506:	449a                	lw	s1,132(sp)
1c006508:	490a                	lw	s2,128(sp)
1c00650a:	59f6                	lw	s3,124(sp)
1c00650c:	5a66                	lw	s4,120(sp)
1c00650e:	5ad6                	lw	s5,116(sp)
1c006510:	5b46                	lw	s6,112(sp)
1c006512:	5bb6                	lw	s7,108(sp)
1c006514:	5c26                	lw	s8,104(sp)
1c006516:	5c96                	lw	s9,100(sp)
1c006518:	5d06                	lw	s10,96(sp)
1c00651a:	4df6                	lw	s11,92(sp)
1c00651c:	6149                	addi	sp,sp,144
1c00651e:	8082                	ret

1c006520 <LastDefinedOutput>:
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);

	if (DoScale) KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_NONE);
1c006520:	fff68793          	addi	a5,a3,-1
1c006524:	953e                	add	a0,a0,a5
1c006526:	9532                	add	a0,a0,a2
1c006528:	0015d613          	srli	a2,a1,0x1
1c00652c:	8d11                	sub	a0,a0,a2
1c00652e:	15fd                	addi	a1,a1,-1
1c006530:	8185                	srli	a1,a1,0x1
1c006532:	8d0d                	sub	a0,a0,a1
1c006534:	02d55533          	divu	a0,a0,a3
1c006538:	8082                	ret

1c00653a <KerMaxPool2x2Stride2_SQ8>:
1c00653a:	715d                	addi	sp,sp,-80
1c00653c:	c6a2                	sw	s0,76(sp)
1c00653e:	c4a6                	sw	s1,72(sp)
1c006540:	c2ca                	sw	s2,68(sp)
1c006542:	c0ce                	sw	s3,64(sp)
1c006544:	de52                	sw	s4,60(sp)
1c006546:	dc56                	sw	s5,56(sp)
1c006548:	da5a                	sw	s6,52(sp)
1c00654a:	d85e                	sw	s7,48(sp)
1c00654c:	d662                	sw	s8,44(sp)
1c00654e:	d466                	sw	s9,40(sp)
1c006550:	d26a                	sw	s10,36(sp)
1c006552:	d06e                	sw	s11,32(sp)
1c006554:	ce32                	sw	a2,28(sp)
1c006556:	c842                	sw	a6,16(sp)
1c006558:	ca46                	sw	a7,20(sp)
1c00655a:	4346                	lw	t1,80(sp)
1c00655c:	4666                	lw	a2,88(sp)
1c00655e:	4bf6                	lw	s7,92(sp)
1c006560:	78067857          	pv.extract.b	a6,a2,0
1c006564:	c242                	sw	a6,4(sp)
1c006566:	7a0678d7          	pv.extract.b	a7,a2,1
1c00656a:	c646                	sw	a7,12(sp)
1c00656c:	78167fd7          	pv.extract.b	t6,a2,2
1c006570:	7a167657          	pv.extract.b	a2,a2,3
1c006574:	cc32                	sw	a2,24(sp)
1c006576:	780bf657          	pv.extract.b	a2,s7,0
1c00657a:	c432                	sw	a2,8(sp)
1c00657c:	781bfbd7          	pv.extract.b	s7,s7,2
1c006580:	0a080f63          	beqz	a6,1c00663e <KerMaxPool2x2Stride2_SQ8+0x104>
1c006584:	899a                	mv	s3,t1
1c006586:	4d56                	lw	s10,84(sp)
1c006588:	37a37563          	bleu	s10,t1,1c0068f2 <KerMaxPool2x2Stride2_SQ8+0x3b8>
1c00658c:	00159393          	slli	t2,a1,0x1
1c006590:	00131613          	slli	a2,t1,0x1
1c006594:	41760833          	sub	a6,a2,s7
1c006598:	8f2a                	mv	t5,a0
1c00659a:	42b80f33          	p.mac	t5,a6,a1
1c00659e:	00180613          	addi	a2,a6,1
1c0065a2:	8eaa                	mv	t4,a0
1c0065a4:	42b60eb3          	p.mac	t4,a2,a1
1c0065a8:	82ba                	mv	t0,a4
1c0065aa:	8e36                	mv	t3,a3
1c0065ac:	42e30e33          	p.mac	t3,t1,a4
1c0065b0:	889a                	mv	a7,t1
1c0065b2:	406d0833          	sub	a6,s10,t1
1c0065b6:	00c840fb          	lp.setup	x1,a6,1c0065ce <KerMaxPool2x2Stride2_SQ8+0x94>
1c0065ba:	007f760b          	p.lb	a2,t2(t5!)
1c0065be:	04066633          	p.max	a2,a2,zero
1c0065c2:	007ef40b          	p.lb	s0,t2(t4!)
1c0065c6:	04866633          	p.max	a2,a2,s0
1c0065ca:	00ce42ab          	p.sb	a2,t0(t3!)
1c0065ce:	0885                	addi	a7,a7,1
1c0065d0:	060f9963          	bnez	t6,1c006642 <KerMaxPool2x2Stride2_SQ8+0x108>
1c0065d4:	4642                	lw	a2,16(sp)
1c0065d6:	40f60ab3          	sub	s5,a2,a5
1c0065da:	001adb13          	srli	s6,s5,0x1
1c0065de:	002b1493          	slli	s1,s6,0x2
1c0065e2:	00159a13          	slli	s4,a1,0x1
1c0065e6:	00199613          	slli	a2,s3,0x1
1c0065ea:	00179293          	slli	t0,a5,0x1
1c0065ee:	4822                	lw	a6,8(sp)
1c0065f0:	410282b3          	sub	t0,t0,a6
1c0065f4:	92a6                	add	t0,t0,s1
1c0065f6:	41760833          	sub	a6,a2,s7
1c0065fa:	8416                	mv	s0,t0
1c0065fc:	42b80433          	p.mac	s0,a6,a1
1c006600:	942a                	add	s0,s0,a0
1c006602:	00180613          	addi	a2,a6,1
1c006606:	42b602b3          	p.mac	t0,a2,a1
1c00660a:	92aa                	add	t0,t0,a0
1c00660c:	8c3a                	mv	s8,a4
1c00660e:	83be                	mv	t2,a5
1c006610:	42e983b3          	p.mac	t2,s3,a4
1c006614:	93b6                	add	t2,t2,a3
1c006616:	894e                	mv	s2,s3
1c006618:	fc1abcb3          	p.bclr	s9,s5,30,1
1c00661c:	c00abab3          	p.bclr	s5,s5,0,0
1c006620:	00f68db3          	add	s11,a3,a5
1c006624:	9aee                	add	s5,s5,s11
1c006626:	413d08b3          	sub	a7,s10,s3
1c00662a:	c046                	sw	a7,0(sp)
1c00662c:	00198613          	addi	a2,s3,1
1c006630:	00cd6463          	bltu	s10,a2,1c006638 <KerMaxPool2x2Stride2_SQ8+0xfe>
1c006634:	0e0d1463          	bnez	s10,1c00671c <KerMaxPool2x2Stride2_SQ8+0x1e2>
1c006638:	4605                	li	a2,1
1c00663a:	c032                	sw	a2,0(sp)
1c00663c:	a0c5                	j	1c00671c <KerMaxPool2x2Stride2_SQ8+0x1e2>
1c00663e:	0c0f8163          	beqz	t6,1c006700 <KerMaxPool2x2Stride2_SQ8+0x1c6>
1c006642:	00179f93          	slli	t6,a5,0x1
1c006646:	4822                	lw	a6,8(sp)
1c006648:	410f8fb3          	sub	t6,t6,a6
1c00664c:	9faa                	add	t6,t6,a0
1c00664e:	4642                	lw	a2,16(sp)
1c006650:	40f602b3          	sub	t0,a2,a5
1c006654:	0012d393          	srli	t2,t0,0x1
1c006658:	04038463          	beqz	t2,1c0066a0 <KerMaxPool2x2Stride2_SQ8+0x166>
1c00665c:	00f68f33          	add	t5,a3,a5
1c006660:	00178e13          	addi	t3,a5,1
1c006664:	9e36                	add	t3,t3,a3
1c006666:	8efe                	mv	t4,t6
1c006668:	00239893          	slli	a7,t2,0x2
1c00666c:	18f1                	addi	a7,a7,-4
1c00666e:	0028d893          	srli	a7,a7,0x2
1c006672:	0885                	addi	a7,a7,1
1c006674:	0148c0fb          	lp.setup	x1,a7,1c00669c <KerMaxPool2x2Stride2_SQ8+0x162>
1c006678:	004ea60b          	p.lw	a2,4(t4!)
1c00667c:	30067657          	pv.max.sci.b	a2,a2,0
1c006680:	78067857          	pv.extract.b	a6,a2,0
1c006684:	7a067457          	pv.extract.b	s0,a2,1
1c006688:	04886833          	p.max	a6,a6,s0
1c00668c:	010f012b          	p.sb	a6,2(t5!)
1c006690:	78167857          	pv.extract.b	a6,a2,2
1c006694:	7a167657          	pv.extract.b	a2,a2,3
1c006698:	04c86633          	p.max	a2,a6,a2
1c00669c:	00ce012b          	p.sb	a2,2(t3!)
1c0066a0:	fc12b633          	p.bclr	a2,t0,30,1
1c0066a4:	c21d                	beqz	a2,1c0066ca <KerMaxPool2x2Stride2_SQ8+0x190>
1c0066a6:	00239613          	slli	a2,t2,0x2
1c0066aa:	20cff603          	p.lw	a2,a2(t6)
1c0066ae:	30067657          	pv.max.sci.b	a2,a2,0
1c0066b2:	78067857          	pv.extract.b	a6,a2,0
1c0066b6:	7a067657          	pv.extract.b	a2,a2,1
1c0066ba:	04c86633          	p.max	a2,a6,a2
1c0066be:	c002b2b3          	p.bclr	t0,t0,0,0
1c0066c2:	00f68833          	add	a6,a3,a5
1c0066c6:	00c842a3          	p.sb	a2,t0(a6)
1c0066ca:	4812                	lw	a6,4(sp)
1c0066cc:	00080863          	beqz	a6,1c0066dc <KerMaxPool2x2Stride2_SQ8+0x1a2>
1c0066d0:	00050603          	lb	a2,0(a0)
1c0066d4:	04066633          	p.max	a2,a2,zero
1c0066d8:	00c68023          	sb	a2,0(a3)
1c0066dc:	48b2                	lw	a7,12(sp)
1c0066de:	20088d63          	beqz	a7,1c0068f8 <KerMaxPool2x2Stride2_SQ8+0x3be>
1c0066e2:	00b50633          	add	a2,a0,a1
1c0066e6:	fff60603          	lb	a2,-1(a2)
1c0066ea:	04066633          	p.max	a2,a2,zero
1c0066ee:	00e68833          	add	a6,a3,a4
1c0066f2:	fec80fa3          	sb	a2,-1(a6)
1c0066f6:	899a                	mv	s3,t1
1c0066f8:	4d56                	lw	s10,84(sp)
1c0066fa:	eda36de3          	bltu	t1,s10,1c0065d4 <KerMaxPool2x2Stride2_SQ8+0x9a>
1c0066fe:	a8c5                	j	1c0067ee <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c006700:	899a                	mv	s3,t1
1c006702:	4d56                	lw	s10,84(sp)
1c006704:	eda368e3          	bltu	t1,s10,1c0065d4 <KerMaxPool2x2Stride2_SQ8+0x9a>
1c006708:	a0dd                	j	1c0067ee <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c00670a:	0905                	addi	s2,s2,1
1c00670c:	9452                	add	s0,s0,s4
1c00670e:	92d2                	add	t0,t0,s4
1c006710:	93e2                	add	t2,t2,s8
1c006712:	4802                	lw	a6,0(sp)
1c006714:	187d                	addi	a6,a6,-1
1c006716:	c042                	sw	a6,0(sp)
1c006718:	06080c63          	beqz	a6,1c006790 <KerMaxPool2x2Stride2_SQ8+0x256>
1c00671c:	040b0663          	beqz	s6,1c006768 <KerMaxPool2x2Stride2_SQ8+0x22e>
1c006720:	40928fb3          	sub	t6,t0,s1
1c006724:	00138f13          	addi	t5,t2,1
1c006728:	8e9e                	mv	t4,t2
1c00672a:	40940e33          	sub	t3,s0,s1
1c00672e:	ffc48313          	addi	t1,s1,-4
1c006732:	00235313          	srli	t1,t1,0x2
1c006736:	0305                	addi	t1,t1,1
1c006738:	016340fb          	lp.setup	x1,t1,1c006764 <KerMaxPool2x2Stride2_SQ8+0x22a>
1c00673c:	004e280b          	p.lw	a6,4(t3!)
1c006740:	004fa60b          	p.lw	a2,4(t6!)
1c006744:	30c81657          	pv.max.b	a2,a6,a2
1c006748:	78067857          	pv.extract.b	a6,a2,0
1c00674c:	7a0678d7          	pv.extract.b	a7,a2,1
1c006750:	05186833          	p.max	a6,a6,a7
1c006754:	010e812b          	p.sb	a6,2(t4!)
1c006758:	78167857          	pv.extract.b	a6,a2,2
1c00675c:	7a167657          	pv.extract.b	a2,a2,3
1c006760:	04c86633          	p.max	a2,a6,a2
1c006764:	00cf012b          	p.sb	a2,2(t5!)
1c006768:	fa0c81e3          	beqz	s9,1c00670a <KerMaxPool2x2Stride2_SQ8+0x1d0>
1c00676c:	4010                	lw	a2,0(s0)
1c00676e:	0002a803          	lw	a6,0(t0)
1c006772:	31061657          	pv.max.b	a2,a2,a6
1c006776:	78067857          	pv.extract.b	a6,a2,0
1c00677a:	7a067657          	pv.extract.b	a2,a2,1
1c00677e:	04c86633          	p.max	a2,a6,a2
1c006782:	41b38833          	sub	a6,t2,s11
1c006786:	00cac823          	p.sb	a2,a6(s5)
1c00678a:	b741                	j	1c00670a <KerMaxPool2x2Stride2_SQ8+0x1d0>
1c00678c:	4305                	li	t1,1
1c00678e:	a099                	j	1c0067d4 <KerMaxPool2x2Stride2_SQ8+0x29a>
1c006790:	4832                	lw	a6,12(sp)
1c006792:	04080e63          	beqz	a6,1c0067ee <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c006796:	00159f13          	slli	t5,a1,0x1
1c00679a:	00199613          	slli	a2,s3,0x1
1c00679e:	fff58893          	addi	a7,a1,-1
1c0067a2:	41760833          	sub	a6,a2,s7
1c0067a6:	8ec6                	mv	t4,a7
1c0067a8:	42b80eb3          	p.mac	t4,a6,a1
1c0067ac:	9eaa                	add	t4,t4,a0
1c0067ae:	00180613          	addi	a2,a6,1
1c0067b2:	42b608b3          	p.mac	a7,a2,a1
1c0067b6:	98aa                	add	a7,a7,a0
1c0067b8:	8fba                	mv	t6,a4
1c0067ba:	fff70e13          	addi	t3,a4,-1
1c0067be:	42e98e33          	p.mac	t3,s3,a4
1c0067c2:	9e36                	add	t3,t3,a3
1c0067c4:	413d0333          	sub	t1,s10,s3
1c0067c8:	00198613          	addi	a2,s3,1
1c0067cc:	fccd60e3          	bltu	s10,a2,1c00678c <KerMaxPool2x2Stride2_SQ8+0x252>
1c0067d0:	fa0d0ee3          	beqz	s10,1c00678c <KerMaxPool2x2Stride2_SQ8+0x252>
1c0067d4:	00c340fb          	lp.setup	x1,t1,1c0067ec <KerMaxPool2x2Stride2_SQ8+0x2b2>
1c0067d8:	01eef60b          	p.lb	a2,t5(t4!)
1c0067dc:	04066633          	p.max	a2,a2,zero
1c0067e0:	01e8f80b          	p.lb	a6,t5(a7!)
1c0067e4:	05066633          	p.max	a2,a2,a6
1c0067e8:	00ce4fab          	p.sb	a2,t6(t3!)
1c0067ec:	0985                	addi	s3,s3,1
1c0067ee:	48e2                	lw	a7,24(sp)
1c0067f0:	0e088363          	beqz	a7,1c0068d6 <KerMaxPool2x2Stride2_SQ8+0x39c>
1c0067f4:	4672                	lw	a2,28(sp)
1c0067f6:	fff60293          	addi	t0,a2,-1
1c0067fa:	02b282b3          	mul	t0,t0,a1
1c0067fe:	00179f93          	slli	t6,a5,0x1
1c006802:	9f96                	add	t6,t6,t0
1c006804:	4822                	lw	a6,8(sp)
1c006806:	410f8fb3          	sub	t6,t6,a6
1c00680a:	9faa                	add	t6,t6,a0
1c00680c:	4642                	lw	a2,16(sp)
1c00680e:	40f603b3          	sub	t2,a2,a5
1c006812:	0013d413          	srli	s0,t2,0x1
1c006816:	c831                	beqz	s0,1c00686a <KerMaxPool2x2Stride2_SQ8+0x330>
1c006818:	4852                	lw	a6,20(sp)
1c00681a:	fff80613          	addi	a2,a6,-1
1c00681e:	88be                	mv	a7,a5
1c006820:	42e608b3          	p.mac	a7,a2,a4
1c006824:	01168f33          	add	t5,a3,a7
1c006828:	00188613          	addi	a2,a7,1
1c00682c:	00c68e33          	add	t3,a3,a2
1c006830:	8efe                	mv	t4,t6
1c006832:	00241313          	slli	t1,s0,0x2
1c006836:	1371                	addi	t1,t1,-4
1c006838:	00235313          	srli	t1,t1,0x2
1c00683c:	0305                	addi	t1,t1,1
1c00683e:	014340fb          	lp.setup	x1,t1,1c006866 <KerMaxPool2x2Stride2_SQ8+0x32c>
1c006842:	004ea60b          	p.lw	a2,4(t4!)
1c006846:	30067657          	pv.max.sci.b	a2,a2,0
1c00684a:	78067857          	pv.extract.b	a6,a2,0
1c00684e:	7a0678d7          	pv.extract.b	a7,a2,1
1c006852:	05186833          	p.max	a6,a6,a7
1c006856:	010f012b          	p.sb	a6,2(t5!)
1c00685a:	78167857          	pv.extract.b	a6,a2,2
1c00685e:	7a167657          	pv.extract.b	a2,a2,3
1c006862:	04c86633          	p.max	a2,a6,a2
1c006866:	00ce012b          	p.sb	a2,2(t3!)
1c00686a:	fc13b633          	p.bclr	a2,t2,30,1
1c00686e:	c61d                	beqz	a2,1c00689c <KerMaxPool2x2Stride2_SQ8+0x362>
1c006870:	00241613          	slli	a2,s0,0x2
1c006874:	20cff603          	p.lw	a2,a2(t6)
1c006878:	30067657          	pv.max.sci.b	a2,a2,0
1c00687c:	78067857          	pv.extract.b	a6,a2,0
1c006880:	7a067657          	pv.extract.b	a2,a2,1
1c006884:	04c86633          	p.max	a2,a6,a2
1c006888:	48d2                	lw	a7,20(sp)
1c00688a:	fff88813          	addi	a6,a7,-1
1c00688e:	c003b3b3          	p.bclr	t2,t2,0,0
1c006892:	97b6                	add	a5,a5,a3
1c006894:	42e807b3          	p.mac	a5,a6,a4
1c006898:	00c7c3a3          	p.sb	a2,t2(a5)
1c00689c:	4612                	lw	a2,4(sp)
1c00689e:	ce11                	beqz	a2,1c0068ba <KerMaxPool2x2Stride2_SQ8+0x380>
1c0068a0:	005507b3          	add	a5,a0,t0
1c0068a4:	00078783          	lb	a5,0(a5)
1c0068a8:	0407e7b3          	p.max	a5,a5,zero
1c0068ac:	4852                	lw	a6,20(sp)
1c0068ae:	fff80613          	addi	a2,a6,-1
1c0068b2:	02e60633          	mul	a2,a2,a4
1c0068b6:	00f6c623          	p.sb	a5,a2(a3)
1c0068ba:	48b2                	lw	a7,12(sp)
1c0068bc:	00088d63          	beqz	a7,1c0068d6 <KerMaxPool2x2Stride2_SQ8+0x39c>
1c0068c0:	9516                	add	a0,a0,t0
1c0068c2:	95aa                	add	a1,a1,a0
1c0068c4:	fff58783          	lb	a5,-1(a1)
1c0068c8:	0407e7b3          	p.max	a5,a5,zero
1c0068cc:	4652                	lw	a2,20(sp)
1c0068ce:	42c706b3          	p.mac	a3,a4,a2
1c0068d2:	fef68fa3          	sb	a5,-1(a3)
1c0068d6:	4436                	lw	s0,76(sp)
1c0068d8:	44a6                	lw	s1,72(sp)
1c0068da:	4916                	lw	s2,68(sp)
1c0068dc:	4986                	lw	s3,64(sp)
1c0068de:	5a72                	lw	s4,60(sp)
1c0068e0:	5ae2                	lw	s5,56(sp)
1c0068e2:	5b52                	lw	s6,52(sp)
1c0068e4:	5bc2                	lw	s7,48(sp)
1c0068e6:	5c32                	lw	s8,44(sp)
1c0068e8:	5ca2                	lw	s9,40(sp)
1c0068ea:	5d12                	lw	s10,36(sp)
1c0068ec:	5d82                	lw	s11,32(sp)
1c0068ee:	6161                	addi	sp,sp,80
1c0068f0:	8082                	ret
1c0068f2:	ee0f8ee3          	beqz	t6,1c0067ee <KerMaxPool2x2Stride2_SQ8+0x2b4>
1c0068f6:	b3b1                	j	1c006642 <KerMaxPool2x2Stride2_SQ8+0x108>
1c0068f8:	899a                	mv	s3,t1
1c0068fa:	4d56                	lw	s10,84(sp)
1c0068fc:	cda36ce3          	bltu	t1,s10,1c0065d4 <KerMaxPool2x2Stride2_SQ8+0x9a>
1c006900:	b5fd                	j	1c0067ee <KerMaxPool2x2Stride2_SQ8+0x2b4>

1c006902 <KerAvgPool2x2Stride2_SQ8>:
1c006902:	7139                	addi	sp,sp,-64
1c006904:	de22                	sw	s0,60(sp)
1c006906:	dc26                	sw	s1,56(sp)
1c006908:	da4a                	sw	s2,52(sp)
1c00690a:	d84e                	sw	s3,48(sp)
1c00690c:	d652                	sw	s4,44(sp)
1c00690e:	d456                	sw	s5,40(sp)
1c006910:	d25a                	sw	s6,36(sp)
1c006912:	d05e                	sw	s7,32(sp)
1c006914:	ce62                	sw	s8,28(sp)
1c006916:	cc66                	sw	s9,24(sp)
1c006918:	ca6a                	sw	s10,20(sp)
1c00691a:	c86e                	sw	s11,16(sp)
1c00691c:	c632                	sw	a2,12(sp)
1c00691e:	4f86                	lw	t6,64(sp)
1c006920:	4626                	lw	a2,72(sp)
1c006922:	4ab6                	lw	s5,76(sp)
1c006924:	78067cd7          	pv.extract.b	s9,a2,0
1c006928:	7a067dd7          	pv.extract.b	s11,a2,1
1c00692c:	781673d7          	pv.extract.b	t2,a2,2
1c006930:	7a167657          	pv.extract.b	a2,a2,3
1c006934:	c432                	sw	a2,8(sp)
1c006936:	780afd57          	pv.extract.b	s10,s5,0
1c00693a:	781afad7          	pv.extract.b	s5,s5,2
1c00693e:	1c0c8363          	beqz	s9,1c006b04 <KerAvgPool2x2Stride2_SQ8+0x202>
1c006942:	8a7e                	mv	s4,t6
1c006944:	4c16                	lw	s8,68(sp)
1c006946:	238ffd63          	bleu	s8,t6,1c006b80 <KerAvgPool2x2Stride2_SQ8+0x27e>
1c00694a:	00159493          	slli	s1,a1,0x1
1c00694e:	001f9613          	slli	a2,t6,0x1
1c006952:	41560333          	sub	t1,a2,s5
1c006956:	82aa                	mv	t0,a0
1c006958:	42b302b3          	p.mac	t0,t1,a1
1c00695c:	00130613          	addi	a2,t1,1
1c006960:	8f2a                	mv	t5,a0
1c006962:	42b60f33          	p.mac	t5,a2,a1
1c006966:	843a                	mv	s0,a4
1c006968:	8eb6                	mv	t4,a3
1c00696a:	42ef8eb3          	p.mac	t4,t6,a4
1c00696e:	8e7e                	mv	t3,t6
1c006970:	41fc0333          	sub	t1,s8,t6
1c006974:	00a340fb          	lp.setup	x1,t1,1c006988 <KerAvgPool2x2Stride2_SQ8+0x86>
1c006978:	0092f60b          	p.lb	a2,s1(t0!)
1c00697c:	009f790b          	p.lb	s2,s1(t5!)
1c006980:	0526665b          	p.mac.zh.zl	a2,a2,s2,sp
1c006984:	00cec42b          	p.sb	a2,s0(t4!)
1c006988:	0e05                	addi	t3,t3,1
1c00698a:	16039f63          	bnez	t2,1c006b08 <KerAvgPool2x2Stride2_SQ8+0x206>
1c00698e:	00159b13          	slli	s6,a1,0x1
1c006992:	001a1613          	slli	a2,s4,0x1
1c006996:	41560933          	sub	s2,a2,s5
1c00699a:	02b90333          	mul	t1,s2,a1
1c00699e:	00179393          	slli	t2,a5,0x1
1c0069a2:	41a383b3          	sub	t2,t2,s10
1c0069a6:	939a                	add	t2,t2,t1
1c0069a8:	93aa                	add	t2,t2,a0
1c0069aa:	8bba                	mv	s7,a4
1c0069ac:	84b6                	mv	s1,a3
1c0069ae:	42ea04b3          	p.mac	s1,s4,a4
1c0069b2:	0905                	addi	s2,s2,1
1c0069b4:	02b90933          	mul	s2,s2,a1
1c0069b8:	40690933          	sub	s2,s2,t1
1c0069bc:	89d2                	mv	s3,s4
1c0069be:	40f80633          	sub	a2,a6,a5
1c0069c2:	c232                	sw	a2,4(sp)
1c0069c4:	1c00f637          	lui	a2,0x1c00f
1c0069c8:	ae462303          	lw	t1,-1308(a2) # 1c00eae4 <__clz_tab+0x340>
1c0069cc:	414c0433          	sub	s0,s8,s4
1c0069d0:	001a0613          	addi	a2,s4,1
1c0069d4:	1acc6263          	bltu	s8,a2,1c006b78 <KerAvgPool2x2Stride2_SQ8+0x276>
1c0069d8:	1a0c0063          	beqz	s8,1c006b78 <KerAvgPool2x2Stride2_SQ8+0x276>
1c0069dc:	0194407b          	lp.setup	x0,s0,1c006a0e <KerAvgPool2x2Stride2_SQ8+0x10c>
1c0069e0:	03078563          	beq	a5,a6,1c006a0a <KerAvgPool2x2Stride2_SQ8+0x108>
1c0069e4:	012382b3          	add	t0,t2,s2
1c0069e8:	8fa6                	mv	t6,s1
1c0069ea:	8f1e                	mv	t5,t2
1c0069ec:	4e92                	lw	t4,4(sp)
1c0069ee:	00cec0fb          	lp.setup	x1,t4,1c006a06 <KerAvgPool2x2Stride2_SQ8+0x104>
1c0069f2:	002f160b          	p.lh	a2,2(t5!)
1c0069f6:	98661657          	pv.dotsp.b	a2,a2,t1
1c0069fa:	00229e0b          	p.lh	t3,2(t0!)
1c0069fe:	b86e1657          	pv.sdotsp.b	a2,t3,t1
1c006a02:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c006a06:	00cf80ab          	p.sb	a2,1(t6!)
1c006a0a:	0985                	addi	s3,s3,1
1c006a0c:	93da                	add	t2,t2,s6
1c006a0e:	94de                	add	s1,s1,s7
1c006a10:	040d8c63          	beqz	s11,1c006a68 <KerAvgPool2x2Stride2_SQ8+0x166>
1c006a14:	00159f93          	slli	t6,a1,0x1
1c006a18:	001a1613          	slli	a2,s4,0x1
1c006a1c:	fff58e13          	addi	t3,a1,-1
1c006a20:	41560333          	sub	t1,a2,s5
1c006a24:	82f2                	mv	t0,t3
1c006a26:	42b302b3          	p.mac	t0,t1,a1
1c006a2a:	92aa                	add	t0,t0,a0
1c006a2c:	00130613          	addi	a2,t1,1
1c006a30:	42b60e33          	p.mac	t3,a2,a1
1c006a34:	9e2a                	add	t3,t3,a0
1c006a36:	83ba                	mv	t2,a4
1c006a38:	fff70f13          	addi	t5,a4,-1
1c006a3c:	42ea0f33          	p.mac	t5,s4,a4
1c006a40:	9f36                	add	t5,t5,a3
1c006a42:	414c0eb3          	sub	t4,s8,s4
1c006a46:	001a0613          	addi	a2,s4,1
1c006a4a:	12cc6963          	bltu	s8,a2,1c006b7c <KerAvgPool2x2Stride2_SQ8+0x27a>
1c006a4e:	120c0763          	beqz	s8,1c006b7c <KerAvgPool2x2Stride2_SQ8+0x27a>
1c006a52:	00aec0fb          	lp.setup	x1,t4,1c006a66 <KerAvgPool2x2Stride2_SQ8+0x164>
1c006a56:	01f2f60b          	p.lb	a2,t6(t0!)
1c006a5a:	01fe730b          	p.lb	t1,t6(t3!)
1c006a5e:	0466665b          	p.mac.zh.zl	a2,a2,t1,sp
1c006a62:	00cf43ab          	p.sb	a2,t2(t5!)
1c006a66:	0a05                	addi	s4,s4,1
1c006a68:	4622                	lw	a2,8(sp)
1c006a6a:	ce3d                	beqz	a2,1c006ae8 <KerAvgPool2x2Stride2_SQ8+0x1e6>
1c006a6c:	4632                	lw	a2,12(sp)
1c006a6e:	fff60e93          	addi	t4,a2,-1
1c006a72:	02be8eb3          	mul	t4,t4,a1
1c006a76:	00179613          	slli	a2,a5,0x1
1c006a7a:	9676                	add	a2,a2,t4
1c006a7c:	41a60633          	sub	a2,a2,s10
1c006a80:	40f80833          	sub	a6,a6,a5
1c006a84:	02080863          	beqz	a6,1c006ab4 <KerAvgPool2x2Stride2_SQ8+0x1b2>
1c006a88:	fff88313          	addi	t1,a7,-1
1c006a8c:	42e307b3          	p.mac	a5,t1,a4
1c006a90:	00c50333          	add	t1,a0,a2
1c006a94:	00f68e33          	add	t3,a3,a5
1c006a98:	1c00f7b7          	lui	a5,0x1c00f
1c006a9c:	ae47a603          	lw	a2,-1308(a5) # 1c00eae4 <__clz_tab+0x340>
1c006aa0:	008840fb          	lp.setup	x1,a6,1c006ab0 <KerAvgPool2x2Stride2_SQ8+0x1ae>
1c006aa4:	0023178b          	p.lh	a5,2(t1!)
1c006aa8:	98c797d7          	pv.dotsp.b	a5,a5,a2
1c006aac:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c006ab0:	00fe00ab          	p.sb	a5,1(t3!)
1c006ab4:	000c8e63          	beqz	s9,1c006ad0 <KerAvgPool2x2Stride2_SQ8+0x1ce>
1c006ab8:	01d507b3          	add	a5,a0,t4
1c006abc:	00078783          	lb	a5,0(a5)
1c006ac0:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c006ac4:	fff88613          	addi	a2,a7,-1
1c006ac8:	02e60633          	mul	a2,a2,a4
1c006acc:	00f6c623          	p.sb	a5,a2(a3)
1c006ad0:	000d8c63          	beqz	s11,1c006ae8 <KerAvgPool2x2Stride2_SQ8+0x1e6>
1c006ad4:	9576                	add	a0,a0,t4
1c006ad6:	95aa                	add	a1,a1,a0
1c006ad8:	fff58783          	lb	a5,-1(a1)
1c006adc:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c006ae0:	431706b3          	p.mac	a3,a4,a7
1c006ae4:	fef68fa3          	sb	a5,-1(a3)
1c006ae8:	5472                	lw	s0,60(sp)
1c006aea:	54e2                	lw	s1,56(sp)
1c006aec:	5952                	lw	s2,52(sp)
1c006aee:	59c2                	lw	s3,48(sp)
1c006af0:	5a32                	lw	s4,44(sp)
1c006af2:	5aa2                	lw	s5,40(sp)
1c006af4:	5b12                	lw	s6,36(sp)
1c006af6:	5b82                	lw	s7,32(sp)
1c006af8:	4c72                	lw	s8,28(sp)
1c006afa:	4ce2                	lw	s9,24(sp)
1c006afc:	4d52                	lw	s10,20(sp)
1c006afe:	4dc2                	lw	s11,16(sp)
1c006b00:	6121                	addi	sp,sp,64
1c006b02:	8082                	ret
1c006b04:	06038563          	beqz	t2,1c006b6e <KerAvgPool2x2Stride2_SQ8+0x26c>
1c006b08:	00179613          	slli	a2,a5,0x1
1c006b0c:	41a60633          	sub	a2,a2,s10
1c006b10:	40f80e33          	sub	t3,a6,a5
1c006b14:	020e0463          	beqz	t3,1c006b3c <KerAvgPool2x2Stride2_SQ8+0x23a>
1c006b18:	00c50eb3          	add	t4,a0,a2
1c006b1c:	00f68f33          	add	t5,a3,a5
1c006b20:	1c00f637          	lui	a2,0x1c00f
1c006b24:	ae462303          	lw	t1,-1308(a2) # 1c00eae4 <__clz_tab+0x340>
1c006b28:	008e40fb          	lp.setup	x1,t3,1c006b38 <KerAvgPool2x2Stride2_SQ8+0x236>
1c006b2c:	004ea60b          	p.lw	a2,4(t4!)
1c006b30:	98661657          	pv.dotsp.b	a2,a2,t1
1c006b34:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c006b38:	00cf00ab          	p.sb	a2,1(t5!)
1c006b3c:	000c8863          	beqz	s9,1c006b4c <KerAvgPool2x2Stride2_SQ8+0x24a>
1c006b40:	00050603          	lb	a2,0(a0)
1c006b44:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c006b48:	00c68023          	sb	a2,0(a3)
1c006b4c:	020d8d63          	beqz	s11,1c006b86 <KerAvgPool2x2Stride2_SQ8+0x284>
1c006b50:	00b50633          	add	a2,a0,a1
1c006b54:	fff60603          	lb	a2,-1(a2)
1c006b58:	0406665b          	p.mac.zh.zl	a2,a2,zero,sp
1c006b5c:	00e68333          	add	t1,a3,a4
1c006b60:	fec30fa3          	sb	a2,-1(t1)
1c006b64:	8a7e                	mv	s4,t6
1c006b66:	4c16                	lw	s8,68(sp)
1c006b68:	e38fe3e3          	bltu	t6,s8,1c00698e <KerAvgPool2x2Stride2_SQ8+0x8c>
1c006b6c:	bdf5                	j	1c006a68 <KerAvgPool2x2Stride2_SQ8+0x166>
1c006b6e:	8a7e                	mv	s4,t6
1c006b70:	4c16                	lw	s8,68(sp)
1c006b72:	e18feee3          	bltu	t6,s8,1c00698e <KerAvgPool2x2Stride2_SQ8+0x8c>
1c006b76:	bdcd                	j	1c006a68 <KerAvgPool2x2Stride2_SQ8+0x166>
1c006b78:	4405                	li	s0,1
1c006b7a:	b58d                	j	1c0069dc <KerAvgPool2x2Stride2_SQ8+0xda>
1c006b7c:	4e85                	li	t4,1
1c006b7e:	bdd1                	j	1c006a52 <KerAvgPool2x2Stride2_SQ8+0x150>
1c006b80:	ee0384e3          	beqz	t2,1c006a68 <KerAvgPool2x2Stride2_SQ8+0x166>
1c006b84:	b751                	j	1c006b08 <KerAvgPool2x2Stride2_SQ8+0x206>
1c006b86:	8a7e                	mv	s4,t6
1c006b88:	4c16                	lw	s8,68(sp)
1c006b8a:	e18fe2e3          	bltu	t6,s8,1c00698e <KerAvgPool2x2Stride2_SQ8+0x8c>
1c006b8e:	bde9                	j	1c006a68 <KerAvgPool2x2Stride2_SQ8+0x166>

1c006b90 <Ker_ActivationScale1_SQ8>:
1c006b90:	0015d793          	srli	a5,a1,0x1
1c006b94:	cba1                	beqz	a5,1c006be4 <Ker_ActivationScale1_SQ8+0x54>
1c006b96:	00150893          	addi	a7,a0,1
1c006b9a:	882a                	mv	a6,a0
1c006b9c:	c005b333          	p.bclr	t1,a1,0,0
1c006ba0:	1379                	addi	t1,t1,-2
1c006ba2:	00135313          	srli	t1,t1,0x1
1c006ba6:	0305                	addi	t1,t1,1
1c006ba8:	a839                	j	1c006bc6 <Ker_ActivationScale1_SQ8+0x36>
1c006baa:	04076733          	p.max	a4,a4,zero
1c006bae:	0407e7b3          	p.max	a5,a5,zero
1c006bb2:	00ee8023          	sb	a4,0(t4)
1c006bb6:	00fe0023          	sb	a5,0(t3)
1c006bba:	0809                	addi	a6,a6,2
1c006bbc:	0889                	addi	a7,a7,2
1c006bbe:	137d                	addi	t1,t1,-1
1c006bc0:	00031363          	bnez	t1,1c006bc6 <Ker_ActivationScale1_SQ8+0x36>
1c006bc4:	a005                	j	1c006be4 <Ker_ActivationScale1_SQ8+0x54>
1c006bc6:	8ec2                	mv	t4,a6
1c006bc8:	00080703          	lb	a4,0(a6)
1c006bcc:	8e46                	mv	t3,a7
1c006bce:	00088783          	lb	a5,0(a7)
1c006bd2:	fc162ce3          	p.beqimm	a2,1,1c006baa <Ker_ActivationScale1_SQ8+0x1a>
1c006bd6:	fc263ee3          	p.bneimm	a2,2,1c006bb2 <Ker_ActivationScale1_SQ8+0x22>
1c006bda:	14d76733          	p.clipur	a4,a4,a3
1c006bde:	14d7e7b3          	p.clipur	a5,a5,a3
1c006be2:	bfc1                	j	1c006bb2 <Ker_ActivationScale1_SQ8+0x22>
1c006be4:	fc15b7b3          	p.bclr	a5,a1,30,1
1c006be8:	cb99                	beqz	a5,1c006bfe <Ker_ActivationScale1_SQ8+0x6e>
1c006bea:	15fd                	addi	a1,a1,-1
1c006bec:	95aa                	add	a1,a1,a0
1c006bee:	00058783          	lb	a5,0(a1)
1c006bf2:	00162763          	p.beqimm	a2,1,1c006c00 <Ker_ActivationScale1_SQ8+0x70>
1c006bf6:	00262863          	p.beqimm	a2,2,1c006c06 <Ker_ActivationScale1_SQ8+0x76>
1c006bfa:	00f58023          	sb	a5,0(a1)
1c006bfe:	8082                	ret
1c006c00:	0407e7b3          	p.max	a5,a5,zero
1c006c04:	bfdd                	j	1c006bfa <Ker_ActivationScale1_SQ8+0x6a>
1c006c06:	14d7e7b3          	p.clipur	a5,a5,a3
1c006c0a:	bfc5                	j	1c006bfa <Ker_ActivationScale1_SQ8+0x6a>

1c006c0c <Ker_Activation_SQ8>:
1c006c0c:	1101                	addi	sp,sp,-32
1c006c0e:	ce22                	sw	s0,28(sp)
1c006c10:	cc26                	sw	s1,24(sp)
1c006c12:	ca4a                	sw	s2,20(sp)
1c006c14:	c84e                	sw	s3,16(sp)
1c006c16:	c652                	sw	s4,12(sp)
1c006c18:	c456                	sw	s5,8(sp)
1c006c1a:	0015d313          	srli	t1,a1,0x1
1c006c1e:	14030363          	beqz	t1,1c006d64 <Ker_Activation_SQ8+0x158>
1c006c22:	00150f13          	addi	t5,a0,1
1c006c26:	8eaa                	mv	t4,a0
1c006c28:	4389                	li	t2,2
1c006c2a:	4491                	li	s1,4
1c006c2c:	441d                	li	s0,7
1c006c2e:	c005bfb3          	p.bclr	t6,a1,0,0
1c006c32:	1ff9                	addi	t6,t6,-2
1c006c34:	001fdf93          	srli	t6,t6,0x1
1c006c38:	0f85                	addi	t6,t6,1
1c006c3a:	a0b9                	j	1c006c88 <Ker_Activation_SQ8+0x7c>
1c006c3c:	c205                	beqz	a2,1c006c5c <Ker_Activation_SQ8+0x50>
1c006c3e:	02163763          	p.bneimm	a2,1,1c006c6c <Ker_Activation_SQ8+0x60>
1c006c42:	040e6933          	p.max	s2,t3,zero
1c006c46:	02d90933          	mul	s2,s2,a3
1c006c4a:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006c4e:	040a6333          	p.max	t1,s4,zero
1c006c52:	02d30333          	mul	t1,t1,a3
1c006c56:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006c5a:	a809                	j	1c006c6c <Ker_Activation_SQ8+0x60>
1c006c5c:	02de0933          	mul	s2,t3,a3
1c006c60:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006c64:	02da0333          	mul	t1,s4,a3
1c006c68:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006c6c:	14891933          	p.clip	s2,s2,8
1c006c70:	01298023          	sb	s2,0(s3)
1c006c74:	14831333          	p.clip	t1,t1,8
1c006c78:	00628023          	sb	t1,0(t0)
1c006c7c:	0e89                	addi	t4,t4,2
1c006c7e:	0f09                	addi	t5,t5,2
1c006c80:	1ffd                	addi	t6,t6,-1
1c006c82:	000f9363          	bnez	t6,1c006c88 <Ker_Activation_SQ8+0x7c>
1c006c86:	a8f9                	j	1c006d64 <Ker_Activation_SQ8+0x158>
1c006c88:	89f6                	mv	s3,t4
1c006c8a:	000e8e03          	lb	t3,0(t4)
1c006c8e:	8972                	mv	s2,t3
1c006c90:	82fa                	mv	t0,t5
1c006c92:	000f0a03          	lb	s4,0(t5)
1c006c96:	8352                	mv	t1,s4
1c006c98:	04262b63          	p.beqimm	a2,2,1c006cee <Ker_Activation_SQ8+0xe2>
1c006c9c:	fac3f0e3          	bleu	a2,t2,1c006c3c <Ker_Activation_SQ8+0x30>
1c006ca0:	08462963          	p.beqimm	a2,4,1c006d32 <Ker_Activation_SQ8+0x126>
1c006ca4:	06966263          	bltu	a2,s1,1c006d08 <Ker_Activation_SQ8+0xfc>
1c006ca8:	fc5632e3          	p.bneimm	a2,5,1c006c6c <Ker_Activation_SQ8+0x60>
1c006cac:	c1fe1333          	p.extractu	t1,t3,0,31
1c006cb0:	03c78933          	mul	s2,a5,t3
1c006cb4:	4080695b          	p.mac.zh.sl	s2,zero,s0,zero
1c006cb8:	00133a93          	seqz	s5,t1
1c006cbc:	03230933          	mul	s2,t1,s2
1c006cc0:	43ca8933          	p.mac	s2,s5,t3
1c006cc4:	02d90933          	mul	s2,s2,a3
1c006cc8:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006ccc:	c1fa1e33          	p.extractu	t3,s4,0,31
1c006cd0:	03478333          	mul	t1,a5,s4
1c006cd4:	4080635b          	p.mac.zh.sl	t1,zero,s0,zero
1c006cd8:	001e3a93          	seqz	s5,t3
1c006cdc:	026e0333          	mul	t1,t3,t1
1c006ce0:	434a8333          	p.mac	t1,s5,s4
1c006ce4:	02d30333          	mul	t1,t1,a3
1c006ce8:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006cec:	b741                	j	1c006c6c <Ker_Activation_SQ8+0x60>
1c006cee:	14fe6933          	p.clipur	s2,t3,a5
1c006cf2:	02d90933          	mul	s2,s2,a3
1c006cf6:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006cfa:	14fa6333          	p.clipur	t1,s4,a5
1c006cfe:	02d30333          	mul	t1,t1,a3
1c006d02:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006d06:	b79d                	j	1c006c6c <Ker_Activation_SQ8+0x60>
1c006d08:	01c80933          	add	s2,a6,t3
1c006d0c:	14f96933          	p.clipur	s2,s2,a5
1c006d10:	03190933          	mul	s2,s2,a7
1c006d14:	02d90933          	mul	s2,s2,a3
1c006d18:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006d1c:	01480333          	add	t1,a6,s4
1c006d20:	14f36333          	p.clipur	t1,t1,a5
1c006d24:	03130333          	mul	t1,t1,a7
1c006d28:	02d30333          	mul	t1,t1,a3
1c006d2c:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006d30:	bf35                	j	1c006c6c <Ker_Activation_SQ8+0x60>
1c006d32:	01c80933          	add	s2,a6,t3
1c006d36:	14f96933          	p.clipur	s2,s2,a5
1c006d3a:	03190933          	mul	s2,s2,a7
1c006d3e:	03c90933          	mul	s2,s2,t3
1c006d42:	02d90933          	mul	s2,s2,a3
1c006d46:	40e0695b          	p.mac.zh.sl	s2,zero,a4,zero
1c006d4a:	01480333          	add	t1,a6,s4
1c006d4e:	14f36333          	p.clipur	t1,t1,a5
1c006d52:	03130333          	mul	t1,t1,a7
1c006d56:	03430333          	mul	t1,t1,s4
1c006d5a:	02d30333          	mul	t1,t1,a3
1c006d5e:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006d62:	b729                	j	1c006c6c <Ker_Activation_SQ8+0x60>
1c006d64:	fc15b333          	p.bclr	t1,a1,30,1
1c006d68:	06030a63          	beqz	t1,1c006ddc <Ker_Activation_SQ8+0x1d0>
1c006d6c:	15fd                	addi	a1,a1,-1
1c006d6e:	95aa                	add	a1,a1,a0
1c006d70:	00058503          	lb	a0,0(a1)
1c006d74:	832a                	mv	t1,a0
1c006d76:	06262b63          	p.beqimm	a2,2,1c006dec <Ker_Activation_SQ8+0x1e0>
1c006d7a:	4e09                	li	t3,2
1c006d7c:	02ce7c63          	bleu	a2,t3,1c006db4 <Ker_Activation_SQ8+0x1a8>
1c006d80:	08462963          	p.beqimm	a2,4,1c006e12 <Ker_Activation_SQ8+0x206>
1c006d84:	4e11                	li	t3,4
1c006d86:	07c66b63          	bltu	a2,t3,1c006dfc <Ker_Activation_SQ8+0x1f0>
1c006d8a:	04563563          	p.bneimm	a2,5,1c006dd4 <Ker_Activation_SQ8+0x1c8>
1c006d8e:	c1f51633          	p.extractu	a2,a0,0,31
1c006d92:	02f507b3          	mul	a5,a0,a5
1c006d96:	481d                	li	a6,7
1c006d98:	410067db          	p.mac.zh.sl	a5,zero,a6,zero
1c006d9c:	00163813          	seqz	a6,a2
1c006da0:	02f607b3          	mul	a5,a2,a5
1c006da4:	42a807b3          	p.mac	a5,a6,a0
1c006da8:	02d786b3          	mul	a3,a5,a3
1c006dac:	8336                	mv	t1,a3
1c006dae:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006db2:	a00d                	j	1c006dd4 <Ker_Activation_SQ8+0x1c8>
1c006db4:	ca19                	beqz	a2,1c006dca <Ker_Activation_SQ8+0x1be>
1c006db6:	00163f63          	p.bneimm	a2,1,1c006dd4 <Ker_Activation_SQ8+0x1c8>
1c006dba:	04056333          	p.max	t1,a0,zero
1c006dbe:	02d306b3          	mul	a3,t1,a3
1c006dc2:	8336                	mv	t1,a3
1c006dc4:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006dc8:	a031                	j	1c006dd4 <Ker_Activation_SQ8+0x1c8>
1c006dca:	02d506b3          	mul	a3,a0,a3
1c006dce:	8336                	mv	t1,a3
1c006dd0:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006dd4:	14831333          	p.clip	t1,t1,8
1c006dd8:	00658023          	sb	t1,0(a1)
1c006ddc:	4472                	lw	s0,28(sp)
1c006dde:	44e2                	lw	s1,24(sp)
1c006de0:	4952                	lw	s2,20(sp)
1c006de2:	49c2                	lw	s3,16(sp)
1c006de4:	4a32                	lw	s4,12(sp)
1c006de6:	4aa2                	lw	s5,8(sp)
1c006de8:	6105                	addi	sp,sp,32
1c006dea:	8082                	ret
1c006dec:	14f56333          	p.clipur	t1,a0,a5
1c006df0:	02d306b3          	mul	a3,t1,a3
1c006df4:	8336                	mv	t1,a3
1c006df6:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006dfa:	bfe9                	j	1c006dd4 <Ker_Activation_SQ8+0x1c8>
1c006dfc:	9542                	add	a0,a0,a6
1c006dfe:	14f567b3          	p.clipur	a5,a0,a5
1c006e02:	031788b3          	mul	a7,a5,a7
1c006e06:	02d886b3          	mul	a3,a7,a3
1c006e0a:	8336                	mv	t1,a3
1c006e0c:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006e10:	b7d1                	j	1c006dd4 <Ker_Activation_SQ8+0x1c8>
1c006e12:	982a                	add	a6,a6,a0
1c006e14:	14f867b3          	p.clipur	a5,a6,a5
1c006e18:	031788b3          	mul	a7,a5,a7
1c006e1c:	02a88333          	mul	t1,a7,a0
1c006e20:	02d306b3          	mul	a3,t1,a3
1c006e24:	8336                	mv	t1,a3
1c006e26:	40e0635b          	p.mac.zh.sl	t1,zero,a4,zero
1c006e2a:	b76d                	j	1c006dd4 <Ker_Activation_SQ8+0x1c8>

1c006e2c <KerParPoolActivation>:
1c006e2c:	1141                	addi	sp,sp,-16
1c006e2e:	c606                	sw	ra,12(sp)
1c006e30:	88b6                	mv	a7,a3
1c006e32:	00078683          	lb	a3,0(a5)
1c006e36:	c6d9                	beqz	a3,1c006ec4 <KerParPoolActivation+0x98>
1c006e38:	02c585b3          	mul	a1,a1,a2
1c006e3c:	03158333          	mul	t1,a1,a7
1c006e40:	41170733          	sub	a4,a4,a7
1c006e44:	02b705b3          	mul	a1,a4,a1
1c006e48:	0ff6f693          	andi	a3,a3,255
1c006e4c:	0017c703          	lbu	a4,1(a5)
1c006e50:	00278603          	lb	a2,2(a5)
1c006e54:	00378e03          	lb	t3,3(a5)
1c006e58:	00478883          	lb	a7,4(a5)
1c006e5c:	04282263          	p.beqimm	a6,2,1c006ea0 <KerParPoolActivation+0x74>
1c006e60:	4789                	li	a5,2
1c006e62:	0107ff63          	bleu	a6,a5,1c006e80 <KerParPoolActivation+0x54>
1c006e66:	04482963          	p.beqimm	a6,4,1c006eb8 <KerParPoolActivation+0x8c>
1c006e6a:	4791                	li	a5,4
1c006e6c:	04f86063          	bltu	a6,a5,1c006eac <KerParPoolActivation+0x80>
1c006e70:	04583e63          	p.bneimm	a6,5,1c006ecc <KerParPoolActivation+0xa0>
1c006e74:	8872                	mv	a6,t3
1c006e76:	87b2                	mv	a5,a2
1c006e78:	4615                	li	a2,5
1c006e7a:	951a                	add	a0,a0,t1
1c006e7c:	3b41                	jal	1c006c0c <Ker_Activation_SQ8>
1c006e7e:	a0b9                	j	1c006ecc <KerParPoolActivation+0xa0>
1c006e80:	00080a63          	beqz	a6,1c006e94 <KerParPoolActivation+0x68>
1c006e84:	04183463          	p.bneimm	a6,1,1c006ecc <KerParPoolActivation+0xa0>
1c006e88:	8872                	mv	a6,t3
1c006e8a:	87b2                	mv	a5,a2
1c006e8c:	4605                	li	a2,1
1c006e8e:	951a                	add	a0,a0,t1
1c006e90:	3bb5                	jal	1c006c0c <Ker_Activation_SQ8>
1c006e92:	a82d                	j	1c006ecc <KerParPoolActivation+0xa0>
1c006e94:	8872                	mv	a6,t3
1c006e96:	87b2                	mv	a5,a2
1c006e98:	4601                	li	a2,0
1c006e9a:	951a                	add	a0,a0,t1
1c006e9c:	3b85                	jal	1c006c0c <Ker_Activation_SQ8>
1c006e9e:	a03d                	j	1c006ecc <KerParPoolActivation+0xa0>
1c006ea0:	8872                	mv	a6,t3
1c006ea2:	87b2                	mv	a5,a2
1c006ea4:	4609                	li	a2,2
1c006ea6:	951a                	add	a0,a0,t1
1c006ea8:	3395                	jal	1c006c0c <Ker_Activation_SQ8>
1c006eaa:	a00d                	j	1c006ecc <KerParPoolActivation+0xa0>
1c006eac:	8872                	mv	a6,t3
1c006eae:	87b2                	mv	a5,a2
1c006eb0:	460d                	li	a2,3
1c006eb2:	951a                	add	a0,a0,t1
1c006eb4:	3ba1                	jal	1c006c0c <Ker_Activation_SQ8>
1c006eb6:	a819                	j	1c006ecc <KerParPoolActivation+0xa0>
1c006eb8:	8872                	mv	a6,t3
1c006eba:	87b2                	mv	a5,a2
1c006ebc:	4611                	li	a2,4
1c006ebe:	951a                	add	a0,a0,t1
1c006ec0:	33b1                	jal	1c006c0c <Ker_Activation_SQ8>
1c006ec2:	a029                	j	1c006ecc <KerParPoolActivation+0xa0>
1c006ec4:	00182763          	p.beqimm	a6,1,1c006ed2 <KerParPoolActivation+0xa6>
1c006ec8:	02282163          	p.beqimm	a6,2,1c006eea <KerParPoolActivation+0xbe>
1c006ecc:	40b2                	lw	ra,12(sp)
1c006ece:	0141                	addi	sp,sp,16
1c006ed0:	8082                	ret
1c006ed2:	02c58833          	mul	a6,a1,a2
1c006ed6:	411705b3          	sub	a1,a4,a7
1c006eda:	4681                	li	a3,0
1c006edc:	4605                	li	a2,1
1c006ede:	030585b3          	mul	a1,a1,a6
1c006ee2:	43180533          	p.mac	a0,a6,a7
1c006ee6:	316d                	jal	1c006b90 <Ker_ActivationScale1_SQ8>
1c006ee8:	b7d5                	j	1c006ecc <KerParPoolActivation+0xa0>
1c006eea:	02c58833          	mul	a6,a1,a2
1c006eee:	411705b3          	sub	a1,a4,a7
1c006ef2:	00278683          	lb	a3,2(a5)
1c006ef6:	4609                	li	a2,2
1c006ef8:	030585b3          	mul	a1,a1,a6
1c006efc:	43180533          	p.mac	a0,a6,a7
1c006f00:	3941                	jal	1c006b90 <Ker_ActivationScale1_SQ8>
1c006f02:	b7e9                	j	1c006ecc <KerParPoolActivation+0xa0>

1c006f04 <KerParPool2x2Stride2_ReLU_SQ8>:
	gap_waitbarrier(0);
}

void KerParPool2x2Stride2_ReLU_SQ8(KerPool_SQ8_T *Arg)

{
1c006f04:	7119                	addi	sp,sp,-128
1c006f06:	de86                	sw	ra,124(sp)
1c006f08:	dca2                	sw	s0,120(sp)
1c006f0a:	daa6                	sw	s1,116(sp)
1c006f0c:	d8ca                	sw	s2,112(sp)
1c006f0e:	d6ce                	sw	s3,108(sp)
1c006f10:	d4d2                	sw	s4,104(sp)
1c006f12:	d2d6                	sw	s5,100(sp)
1c006f14:	d0da                	sw	s6,96(sp)
1c006f16:	cede                	sw	s7,92(sp)
1c006f18:	cce2                	sw	s8,88(sp)
1c006f1a:	cae6                	sw	s9,84(sp)
1c006f1c:	c8ea                	sw	s10,80(sp)
1c006f1e:	c6ee                	sw	s11,76(sp)
1c006f20:	892a                	mv	s2,a0
	unsigned int FS=2,S=2;
	signed char * __restrict__ In = Arg->In;
1c006f22:	4100                	lw	s0,0(a0)
	unsigned int W = Arg->W, H = Arg->H;
1c006f24:	00a55703          	lhu	a4,10(a0)
1c006f28:	d03a                	sw	a4,32(sp)
1c006f2a:	00e55783          	lhu	a5,14(a0)
1c006f2e:	d23e                	sw	a5,36(sp)
	unsigned int Feat = Arg->Feat;
1c006f30:	00855703          	lhu	a4,8(a0)
	signed char * __restrict__ Out = Arg->Out;
1c006f34:	415c                	lw	a5,4(a0)
1c006f36:	dc3e                	sw	a5,56(sp)
	signed char * __restrict__ Infos = Arg->Infos;
1c006f38:	515c                	lw	a5,36(a0)
1c006f3a:	de3e                	sw	a5,60(sp)
	int PoolMax = Arg->PoolMax;
1c006f3c:	01254b03          	lbu	s6,18(a0)
	v4s PadIn = Arg->Pad;
1c006f40:	5104                	lw	s1,32(a0)

	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c006f42:	f1402af3          	csrr	s5,mhartid
1c006f46:	c80a9ab3          	p.extractu	s5,s5,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c006f4a:	f83737b3          	p.bclr	a5,a4,28,3
1c006f4e:	00f037b3          	snez	a5,a5
1c006f52:	00375693          	srli	a3,a4,0x3
1c006f56:	97b6                	add	a5,a5,a3
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c006f58:	02fa8ab3          	mul	s5,s5,a5
1c006f5c:	97d6                	add	a5,a5,s5
1c006f5e:	04e7c7b3          	p.min	a5,a5,a4
1c006f62:	da3e                	sw	a5,52(sp)
1c006f64:	8bbe                	mv	s7,a5

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c006f66:	7804f657          	pv.extract.b	a2,s1,0
1c006f6a:	00c55503          	lhu	a0,12(a0)
1c006f6e:	ffe50993          	addi	s3,a0,-2
1c006f72:	99b2                	add	s3,s3,a2
1c006f74:	7a04f7d7          	pv.extract.b	a5,s1,1
1c006f78:	82f9a9db          	p.addun	s3,s3,a5,1
1c006f7c:	0985                	addi	s3,s3,1
1c006f7e:	d44e                	sw	s3,40(sp)
	return ((Pad+Stride-1)/Stride);
1c006f80:	00160793          	addi	a5,a2,1
1c006f84:	8385                	srli	a5,a5,0x1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c006f86:	04f9c7b3          	p.min	a5,s3,a5
1c006f8a:	ce3e                	sw	a5,28(sp)
1c006f8c:	4689                	li	a3,2
1c006f8e:	4589                	li	a1,2
1c006f90:	d90ff0ef          	jal	ra,1c006520 <LastDefinedOutput>
1c006f94:	4772                	lw	a4,28(sp)
1c006f96:	04a76533          	p.max	a0,a4,a0
1c006f9a:	d62a                	sw	a0,44(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c006f9c:	7814f657          	pv.extract.b	a2,s1,2
1c006fa0:	01095503          	lhu	a0,16(s2)
1c006fa4:	ffe50a13          	addi	s4,a0,-2
1c006fa8:	9a32                	add	s4,s4,a2
1c006faa:	7a14f7d7          	pv.extract.b	a5,s1,3
1c006fae:	82fa2a5b          	p.addun	s4,s4,a5,1
1c006fb2:	0a05                	addi	s4,s4,1
1c006fb4:	d852                	sw	s4,48(sp)
	return ((Pad+Stride-1)/Stride);
1c006fb6:	00160913          	addi	s2,a2,1
1c006fba:	00195913          	srli	s2,s2,0x1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c006fbe:	052a4933          	p.min	s2,s4,s2
1c006fc2:	4689                	li	a3,2
1c006fc4:	4589                	li	a1,2
1c006fc6:	d5aff0ef          	jal	ra,1c006520 <LastDefinedOutput>
1c006fca:	04a96c33          	p.max	s8,s2,a0

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006fce:	040b1463          	bnez	s6,1c007016 <KerParPool2x2Stride2_ReLU_SQ8+0x112>
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c006fd2:	097af363          	bleu	s7,s5,1c007058 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
1c006fd6:	5782                	lw	a5,32(sp)
1c006fd8:	5712                	lw	a4,36(sp)
1c006fda:	02e78d33          	mul	s10,a5,a4
1c006fde:	03498cb3          	mul	s9,s3,s4
1c006fe2:	43aa8433          	p.mac	s0,s5,s10
1c006fe6:	5de2                	lw	s11,56(sp)
1c006fe8:	439a8db3          	p.mac	s11,s5,s9
1c006fec:	8b56                	mv	s6,s5
1c006fee:	c626                	sw	s1,12(sp)
1c006ff0:	c426                	sw	s1,8(sp)
1c006ff2:	c262                	sw	s8,4(sp)
1c006ff4:	c04a                	sw	s2,0(sp)
1c006ff6:	58c2                	lw	a7,48(sp)
1c006ff8:	5832                	lw	a6,44(sp)
1c006ffa:	47f2                	lw	a5,28(sp)
1c006ffc:	5722                	lw	a4,40(sp)
1c006ffe:	86ee                	mv	a3,s11
1c007000:	5612                	lw	a2,36(sp)
1c007002:	5582                	lw	a1,32(sp)
1c007004:	8522                	mv	a0,s0
1c007006:	8fdff0ef          	jal	ra,1c006902 <KerAvgPool2x2Stride2_SQ8>
1c00700a:	0b05                	addi	s6,s6,1
1c00700c:	946a                	add	s0,s0,s10
1c00700e:	9de6                	add	s11,s11,s9
1c007010:	fd6b9fe3          	bne	s7,s6,1c006fee <KerParPool2x2Stride2_ReLU_SQ8+0xea>
1c007014:	a091                	j	1c007058 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c007016:	057af163          	bleu	s7,s5,1c007058 <KerParPool2x2Stride2_ReLU_SQ8+0x154>
1c00701a:	5782                	lw	a5,32(sp)
1c00701c:	5712                	lw	a4,36(sp)
1c00701e:	02e78d33          	mul	s10,a5,a4
1c007022:	03498cb3          	mul	s9,s3,s4
1c007026:	43aa8433          	p.mac	s0,s5,s10
1c00702a:	5de2                	lw	s11,56(sp)
1c00702c:	439a8db3          	p.mac	s11,s5,s9
1c007030:	8b56                	mv	s6,s5
1c007032:	c626                	sw	s1,12(sp)
1c007034:	c426                	sw	s1,8(sp)
1c007036:	c262                	sw	s8,4(sp)
1c007038:	c04a                	sw	s2,0(sp)
1c00703a:	58c2                	lw	a7,48(sp)
1c00703c:	5832                	lw	a6,44(sp)
1c00703e:	47f2                	lw	a5,28(sp)
1c007040:	5722                	lw	a4,40(sp)
1c007042:	86ee                	mv	a3,s11
1c007044:	5612                	lw	a2,36(sp)
1c007046:	5582                	lw	a1,32(sp)
1c007048:	8522                	mv	a0,s0
1c00704a:	cf0ff0ef          	jal	ra,1c00653a <KerMaxPool2x2Stride2_SQ8>
1c00704e:	0b05                	addi	s6,s6,1
1c007050:	946a                	add	s0,s0,s10
1c007052:	9de6                	add	s11,s11,s9
1c007054:	fd6b9fe3          	bne	s7,s6,1c007032 <KerParPool2x2Stride2_ReLU_SQ8+0x12e>

	KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_RELU);
1c007058:	4805                	li	a6,1
1c00705a:	57f2                	lw	a5,60(sp)
1c00705c:	5752                	lw	a4,52(sp)
1c00705e:	86d6                	mv	a3,s5
1c007060:	8652                	mv	a2,s4
1c007062:	85ce                	mv	a1,s3
1c007064:	5562                	lw	a0,56(sp)
1c007066:	33d9                	jal	1c006e2c <KerParPoolActivation>
1c007068:	002047b7          	lui	a5,0x204
1c00706c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c007070:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
}
1c007074:	50f6                	lw	ra,124(sp)
1c007076:	5466                	lw	s0,120(sp)
1c007078:	54d6                	lw	s1,116(sp)
1c00707a:	5946                	lw	s2,112(sp)
1c00707c:	59b6                	lw	s3,108(sp)
1c00707e:	5a26                	lw	s4,104(sp)
1c007080:	5a96                	lw	s5,100(sp)
1c007082:	5b06                	lw	s6,96(sp)
1c007084:	4bf6                	lw	s7,92(sp)
1c007086:	4c66                	lw	s8,88(sp)
1c007088:	4cd6                	lw	s9,84(sp)
1c00708a:	4d46                	lw	s10,80(sp)
1c00708c:	4db6                	lw	s11,76(sp)
1c00708e:	6109                	addi	sp,sp,128
1c007090:	8082                	ret

1c007092 <KerParSoftMax_SQ8>:
}
#endif

void KerParSoftMax_SQ8(KerSoftMax_SQ8_T *Arg)

{
1c007092:	7139                	addi	sp,sp,-64
1c007094:	de22                	sw	s0,60(sp)
1c007096:	dc26                	sw	s1,56(sp)
1c007098:	da4a                	sw	s2,52(sp)
1c00709a:	d84e                	sw	s3,48(sp)
1c00709c:	d652                	sw	s4,44(sp)
1c00709e:	d456                	sw	s5,40(sp)
1c0070a0:	d25a                	sw	s6,36(sp)
1c0070a2:	d05e                	sw	s7,32(sp)
1c0070a4:	ce62                	sw	s8,28(sp)
1c0070a6:	cc66                	sw	s9,24(sp)
1c0070a8:	ca6a                	sw	s10,20(sp)
1c0070aa:	c86e                	sw	s11,16(sp)
	signed char * __restrict__ In = Arg->In;
1c0070ac:	00052f03          	lw	t5,0(a0)
	short int * __restrict__ Out = Arg->Out;
1c0070b0:	450c                	lw	a1,8(a0)
1c0070b2:	c42e                	sw	a1,8(sp)
	int N = Arg->N;
1c0070b4:	00455e83          	lhu	t4,4(a0)
	int Norm = Arg->Infos[AT_INF_BIASL_SM];
1c0070b8:	455c                	lw	a5,12(a0)
1c0070ba:	00078a03          	lb	s4,0(a5)
	static L1_CL_MEM int Reduct[8];
	int M, Sum, InvSum;
	unsigned int CoreId = gap_coreid();
1c0070be:	f1402473          	csrr	s0,mhartid
1c0070c2:	c8041433          	p.extractu	s0,s0,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0070c6:	f83eb7b3          	p.bclr	a5,t4,28,3
1c0070ca:	00f037b3          	snez	a5,a5
1c0070ce:	003ed713          	srli	a4,t4,0x3
1c0070d2:	97ba                	add	a5,a5,a4
	unsigned int ChunkCell = ChunkSize(N);
	unsigned int First = CoreId*ChunkCell;
1c0070d4:	02f40333          	mul	t1,s0,a5
	unsigned int Last  = Min(First+ChunkCell, N);
1c0070d8:	979a                	add	a5,a5,t1
1c0070da:	05d7ceb3          	p.min	t4,a5,t4
	unsigned int *Red = &Reduct[CoreId];

	/* Turns In into distribution */
	/* Find max */
	M = 0x80000000;
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c0070de:	8f9a                	mv	t6,t1
1c0070e0:	0dd37563          	bleu	t4,t1,1c0071aa <KerParSoftMax_SQ8+0x118>
1c0070e4:	006f06b3          	add	a3,t5,t1
	M = 0x80000000;
1c0070e8:	80000737          	lui	a4,0x80000
1c0070ec:	406e87b3          	sub	a5,t4,t1
1c0070f0:	0047c0fb          	lp.setup	x1,a5,1c0070f8 <KerParSoftMax_SQ8+0x66>
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c0070f4:	0016860b          	p.lb	a2,1(a3!)
1c0070f8:	04c76733          	p.max	a4,a4,a2
	Reduct[CoreId] = M;
1c0070fc:	00241793          	slli	a5,s0,0x2
1c007100:	100006b7          	lui	a3,0x10000
1c007104:	02068693          	addi	a3,a3,32 # 10000020 <Reduct.15734>
1c007108:	00e6e7a3          	p.sw	a4,a5(a3)
1c00710c:	002047b7          	lui	a5,0x204
1c007110:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c007114:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	if (CoreId==0) {
1c007118:	1e041e63          	bnez	s0,1c007314 <KerParSoftMax_SQ8+0x282>
		M = Reduct[0];
1c00711c:	10000737          	lui	a4,0x10000
1c007120:	02070713          	addi	a4,a4,32 # 10000020 <Reduct.15734>
1c007124:	0047268b          	p.lw	a3,4(a4!)
1c007128:	007250fb          	lp.setupi	x1,7,1c007130 <KerParSoftMax_SQ8+0x9e>
		for (int i=1; i<gap_ncore(); i++) M = Max(M, Reduct[i]);
1c00712c:	0047260b          	p.lw	a2,4(a4!)
1c007130:	04c6e6b3          	p.max	a3,a3,a2
		//for (int i=1; i<8; i++) M = Max(M, Reduct[i]);
		Reduct[0] = M;
1c007134:	100007b7          	lui	a5,0x10000
1c007138:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c00713c:	c394                	sw	a3,0(a5)
1c00713e:	00204737          	lui	a4,0x204
1c007142:	20070713          	addi	a4,a4,512 # 204200 <__L2+0x184200>
1c007146:	01c76683          	p.elw	a3,28(a4)
	gap_waitbarrier(0);
	/* Computes Exp(In[i]-M) for all in and sum results.
	   Since we substract max from In[i] we always have exp(X) with X<=0 thus exp(X)<=1.0
	   By definition of softmax Sum is <= 1
	*/
	M = Reduct[0];
1c00714a:	0007a983          	lw	s3,0(a5)
	Sum = 0;
	for (int i=First; i<Last; i++) {
1c00714e:	1dd36f63          	bltu	t1,t4,1c00732c <KerParSoftMax_SQ8+0x29a>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
		Out[i] = Exp; Sum += Exp;
	}
	Reduct[CoreId] = Sum;
1c007152:	040a                	slli	s0,s0,0x2
1c007154:	100007b7          	lui	a5,0x10000
1c007158:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c00715c:	0007e423          	p.sw	zero,s0(a5)
1c007160:	002047b7          	lui	a5,0x204
1c007164:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c007168:	01c7e703          	p.elw	a4,28(a5)
1c00716c:	10000737          	lui	a4,0x10000
1c007170:	02070713          	addi	a4,a4,32 # 10000020 <Reduct.15734>
	gap_waitbarrier(0);
	if (CoreId==0) {
		Sum = 0;
1c007174:	4681                	li	a3,0
1c007176:	008250fb          	lp.setupi	x1,8,1c00717e <KerParSoftMax_SQ8+0xec>
		for (int i=0; i<gap_ncore(); i++) Sum += Reduct[i];
1c00717a:	0047260b          	p.lw	a2,4(a4!)
1c00717e:	96b2                	add	a3,a3,a2
		Reduct[0] = Sum;
1c007180:	100007b7          	lui	a5,0x10000
1c007184:	02d7a023          	sw	a3,32(a5) # 10000020 <Reduct.15734>
1c007188:	002047b7          	lui	a5,0x204
1c00718c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c007190:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
	Sum = Reduct[0];
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c007194:	13d37c63          	bleu	t4,t1,1c0072cc <KerParSoftMax_SQ8+0x23a>
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c007198:	100007b7          	lui	a5,0x10000
1c00719c:	0207a783          	lw	a5,32(a5) # 10000020 <Reduct.15734>
1c0071a0:	3fff8637          	lui	a2,0x3fff8
1c0071a4:	02f64633          	div	a2,a2,a5
1c0071a8:	a8cd                	j	1c00729a <KerParSoftMax_SQ8+0x208>
	M = 0x80000000;
1c0071aa:	80000737          	lui	a4,0x80000
1c0071ae:	b7b9                	j	1c0070fc <KerParSoftMax_SQ8+0x6a>
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c0071b0:	0786                	slli	a5,a5,0x1
1c0071b2:	00fc8733          	add	a4,s9,a5
1c0071b6:	00075583          	lhu	a1,0(a4) # 80000000 <pulp__FC+0x80000001>
1c0071ba:	97e2                	add	a5,a5,s8
1c0071bc:	0007d703          	lhu	a4,0(a5)
	FractX_s = FractX; Z_s = FractX; Result = 0;
1c0071c0:	1008c8b3          	p.exths	a7,a7
1c0071c4:	002a8813          	addi	a6,s5,2
1c0071c8:	87c6                	mv	a5,a7
1c0071ca:	4501                	li	a0,0
1c0071cc:	410d8633          	sub	a2,s11,a6
1c0071d0:	1679                	addi	a2,a2,-2
1c0071d2:	8205                	srli	a2,a2,0x1
1c0071d4:	0605                	addi	a2,a2,1
1c0071d6:	008640fb          	lp.setup	x1,a2,1c0071e6 <KerParSoftMax_SQ8+0x154>
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0071da:	00285d0b          	p.lhu	s10,2(a6!)
1c0071de:	43a78533          	p.mac	a0,a5,s10
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0071e2:	9f17c7db          	p.mac.sl.zl	a5,a5,a7,a5
1c0071e6:	1007c7b3          	p.exths	a5,a5
	Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c0071ea:	1e0567db          	p.mac.zh.zl	a5,a0,zero,a5
1c0071ee:	97ca                	add	a5,a5,s2
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c0071f0:	1ee7c75b          	p.mac.zl.zl	a4,a5,a4,a5
1c0071f4:	0177f7b3          	and	a5,a5,s7
1c0071f8:	42b78733          	p.mac	a4,a5,a1
1c0071fc:	87ba                	mv	a5,a4
	if (Result && (X > 0x7FFFFFFF)) 
1c0071fe:	c319                	beqz	a4,1c007204 <KerParSoftMax_SQ8+0x172>
1c007200:	0406c663          	bltz	a3,1c00724c <KerParSoftMax_SQ8+0x1ba>
		Out[i] = Exp; Sum += Exp;
1c007204:	873e                	mv	a4,a5
1c007206:	00e2912b          	p.sh	a4,2(t0!)
1c00720a:	93be                	add	t2,t2,a5
1c00720c:	1e7d                	addi	t3,t3,-1
1c00720e:	000e1363          	bnez	t3,1c007214 <KerParSoftMax_SQ8+0x182>
1c007212:	a0b1                	j	1c00725e <KerParSoftMax_SQ8+0x1cc>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
1c007214:	001f068b          	p.lb	a3,1(t5!)
1c007218:	413686b3          	sub	a3,a3,s3
1c00721c:	014696b3          	sll	a3,a3,s4
1c007220:	8636                	mv	a2,a3
	if (!X) return 0x8000;
1c007222:	87a6                	mv	a5,s1
1c007224:	d2e5                	beqz	a3,1c007204 <KerParSoftMax_SQ8+0x172>
	Y = Abs(X);
1c007226:	04068733          	p.avg	a4,a3,zero
	IntX = (Y >> 15);
1c00722a:	40f75793          	srai	a5,a4,0xf
	FractX = (Y & 0x7FFF);
1c00722e:	012778b3          	and	a7,a4,s2
	if (gap_bitextractu(FractX, 1, 14)) {
1c007232:	01189593          	slli	a1,a7,0x11
1c007236:	0005d563          	bgez	a1,1c007240 <KerParSoftMax_SQ8+0x1ae>
		FractX -= 0x8000; IntX++;
1c00723a:	75e1                	lui	a1,0xffff8
1c00723c:	98ae                	add	a7,a7,a1
1c00723e:	0785                	addi	a5,a5,1
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c007240:	f6fb58e3          	ble	a5,s6,1c0071b0 <KerParSoftMax_SQ8+0x11e>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c007244:	00e60963          	beq	a2,a4,1c007256 <KerParSoftMax_SQ8+0x1c4>
1c007248:	4781                	li	a5,0
1c00724a:	bf6d                	j	1c007204 <KerParSoftMax_SQ8+0x172>
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c00724c:	4732                	lw	a4,12(sp)
1c00724e:	02f747b3          	div	a5,a4,a5
1c007252:	8785                	srai	a5,a5,0x1
1c007254:	bf45                	j	1c007204 <KerParSoftMax_SQ8+0x172>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c007256:	47b2                	lw	a5,12(sp)
1c007258:	b775                	j	1c007204 <KerParSoftMax_SQ8+0x172>
1c00725a:	4705                	li	a4,1
1c00725c:	a899                	j	1c0072b2 <KerParSoftMax_SQ8+0x220>
	Reduct[CoreId] = Sum;
1c00725e:	00241713          	slli	a4,s0,0x2
1c007262:	100007b7          	lui	a5,0x10000
1c007266:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c00726a:	0077e723          	p.sw	t2,a4(a5)
1c00726e:	002047b7          	lui	a5,0x204
1c007272:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c007276:	01c7e703          	p.elw	a4,28(a5)
	if (CoreId==0) {
1c00727a:	ee0409e3          	beqz	s0,1c00716c <KerParSoftMax_SQ8+0xda>
1c00727e:	002047b7          	lui	a5,0x204
1c007282:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c007286:	01c7e703          	p.elw	a4,28(a5)
	InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c00728a:	100007b7          	lui	a5,0x10000
1c00728e:	0207a783          	lw	a5,32(a5) # 10000020 <Reduct.15734>
1c007292:	3fff8637          	lui	a2,0x3fff8
1c007296:	02f64633          	div	a2,a2,a5
1c00729a:	0306                	slli	t1,t1,0x1
1c00729c:	47a2                	lw	a5,8(sp)
1c00729e:	933e                	add	t1,t1,a5
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c0072a0:	46bd                	li	a3,15
1c0072a2:	41fe8733          	sub	a4,t4,t6
1c0072a6:	001f8793          	addi	a5,t6,1
1c0072aa:	fafee8e3          	bltu	t4,a5,1c00725a <KerParSoftMax_SQ8+0x1c8>
1c0072ae:	fa0e86e3          	beqz	t4,1c00725a <KerParSoftMax_SQ8+0x1c8>
1c0072b2:	00c740fb          	lp.setup	x1,a4,1c0072ca <KerParSoftMax_SQ8+0x238>
1c0072b6:	00031783          	lh	a5,0(t1)
1c0072ba:	02c787b3          	mul	a5,a5,a2
1c0072be:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c0072c2:	040787b3          	p.avg	a5,a5,zero
1c0072c6:	00f3112b          	p.sh	a5,2(t1!)
1c0072ca:	0f85                	addi	t6,t6,1
1c0072cc:	002047b7          	lui	a5,0x204
1c0072d0:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0072d4:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);

}
1c0072d8:	5472                	lw	s0,60(sp)
1c0072da:	54e2                	lw	s1,56(sp)
1c0072dc:	5952                	lw	s2,52(sp)
1c0072de:	59c2                	lw	s3,48(sp)
1c0072e0:	5a32                	lw	s4,44(sp)
1c0072e2:	5aa2                	lw	s5,40(sp)
1c0072e4:	5b12                	lw	s6,36(sp)
1c0072e6:	5b82                	lw	s7,32(sp)
1c0072e8:	4c72                	lw	s8,28(sp)
1c0072ea:	4ce2                	lw	s9,24(sp)
1c0072ec:	4d52                	lw	s10,20(sp)
1c0072ee:	4dc2                	lw	s11,16(sp)
1c0072f0:	6121                	addi	sp,sp,64
1c0072f2:	8082                	ret
	Reduct[CoreId] = Sum;
1c0072f4:	040a                	slli	s0,s0,0x2
1c0072f6:	100007b7          	lui	a5,0x10000
1c0072fa:	02078793          	addi	a5,a5,32 # 10000020 <Reduct.15734>
1c0072fe:	0007e423          	p.sw	zero,s0(a5)
1c007302:	002047b7          	lui	a5,0x204
1c007306:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00730a:	01c7e703          	p.elw	a4,28(a5)
1c00730e:	01c7e703          	p.elw	a4,28(a5)
1c007312:	bf6d                	j	1c0072cc <KerParSoftMax_SQ8+0x23a>
1c007314:	002047b7          	lui	a5,0x204
1c007318:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00731c:	01c7e703          	p.elw	a4,28(a5)
	M = Reduct[0];
1c007320:	100007b7          	lui	a5,0x10000
1c007324:	0207a983          	lw	s3,32(a5) # 10000020 <Reduct.15734>
	for (int i=First; i<Last; i++) {
1c007328:	fdd376e3          	bleu	t4,t1,1c0072f4 <KerParSoftMax_SQ8+0x262>
1c00732c:	00131293          	slli	t0,t1,0x1
1c007330:	4722                	lw	a4,8(sp)
1c007332:	92ba                	add	t0,t0,a4
1c007334:	9f1a                	add	t5,t5,t1
	Sum = 0;
1c007336:	4381                	li	t2,0
	if (!X) return 0x8000;
1c007338:	64a1                	lui	s1,0x8
	FractX = (Y & 0x7FFF);
1c00733a:	fff48913          	addi	s2,s1,-1 # 7fff <__rt_stack_size+0x77ff>
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c00733e:	4b2d                	li	s6,11
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c007340:	1c00fcb7          	lui	s9,0x1c00f
1c007344:	b14c8c93          	addi	s9,s9,-1260 # 1c00eb14 <IntegerExpLUT>
1c007348:	1c00fc37          	lui	s8,0x1c00f
1c00734c:	afcc0c13          	addi	s8,s8,-1284 # 1c00eafc <FractionExpLUT>
1c007350:	1c00fab7          	lui	s5,0x1c00f
1c007354:	ae8a8a93          	addi	s5,s5,-1304 # 1c00eae8 <ExpCoeffLUT>
1c007358:	012a8d93          	addi	s11,s5,18
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c00735c:	6bc1                	lui	s7,0x10
1c00735e:	1bfd                	addi	s7,s7,-1
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c007360:	800007b7          	lui	a5,0x80000
1c007364:	fff7c793          	not	a5,a5
1c007368:	c63e                	sw	a5,12(sp)
		FractX -= 0x8000; IntX++;
1c00736a:	406e8e33          	sub	t3,t4,t1
1c00736e:	b55d                	j	1c007214 <KerParSoftMax_SQ8+0x182>

1c007370 <CNN_NormBW_offset_fps>:
	gap_waitbarrier(0);
}

void CNN_NormBW_offset_fps(KerNormBW_fps_T *Arg)
{
	unsigned char *__restrict__ In = Arg->In;
1c007370:	4114                	lw	a3,0(a0)
	signed char *__restrict__ Out = Arg->Out;
1c007372:	4150                	lw	a2,4(a0)
	unsigned int W = Arg->W;
	unsigned int H = Arg->H;
	unsigned int Sz = W * H;
1c007374:	451c                	lw	a5,8(a0)
1c007376:	4548                	lw	a0,12(a0)
1c007378:	02a78533          	mul	a0,a5,a0
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c00737c:	f14025f3          	csrr	a1,mhartid
1c007380:	c80595b3          	p.extractu	a1,a1,4,0
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c007384:	f8353733          	p.bclr	a4,a0,28,3
1c007388:	00e03733          	snez	a4,a4
1c00738c:	00355793          	srli	a5,a0,0x3
1c007390:	973e                	add	a4,a4,a5
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c007392:	02e585b3          	mul	a1,a1,a4
1c007396:	00e587b3          	add	a5,a1,a4
1c00739a:	04a7c7b3          	p.min	a5,a5,a0

	for (int Idx=First; Idx<Last; Idx++) {
1c00739e:	00f5fd63          	bleu	a5,a1,1c0073b8 <CNN_NormBW_offset_fps+0x48>
1c0073a2:	962e                	add	a2,a2,a1
1c0073a4:	96ae                	add	a3,a3,a1
1c0073a6:	8f8d                	sub	a5,a5,a1
1c0073a8:	0067c0fb          	lp.setup	x1,a5,1c0073b4 <CNN_NormBW_offset_fps+0x44>
		Out[Idx] = In[Idx] - 128;
1c0073ac:	0016c70b          	p.lbu	a4,1(a3!)
1c0073b0:	f8070713          	addi	a4,a4,-128
1c0073b4:	00e600ab          	p.sb	a4,1(a2!) # 3fff8001 <__l2_end+0x23fe8951>
1c0073b8:	002047b7          	lui	a5,0x204
1c0073bc:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0073c0:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c0073c4:	8082                	ret

1c0073c6 <pi_flash_open>:


int pi_flash_open(struct pi_device *device)
{
  struct pi_flash_conf *conf = (struct pi_flash_conf *)device->config;
  pi_flash_api_t *api = (pi_flash_api_t *)conf->api;
1c0073c6:	415c                	lw	a5,4(a0)
1c0073c8:	439c                	lw	a5,0(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c0073ca:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c0073ce:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c0073d0:	8302                	jr	t1

1c0073d2 <__flash_conf_init>:
}


void __flash_conf_init(struct pi_flash_conf *conf)
{
}
1c0073d2:	8082                	ret

1c0073d4 <pi_task_wait_on.isra.3>:
{
  pi_task_t task;
  int result = pi_fs_direct_read_async(file, buffer, size, pi_task_block(&task));
  pi_task_wait_on(&task);
  return result;
}
1c0073d4:	1141                	addi	sp,sp,-16
1c0073d6:	c422                	sw	s0,8(sp)
1c0073d8:	c226                	sw	s1,4(sp)
1c0073da:	c606                	sw	ra,12(sp)
1c0073dc:	c04a                	sw	s2,0(sp)
1c0073de:	842a                	mv	s0,a0
1c0073e0:	00040783          	lb	a5,0(s0)
1c0073e4:	c799                	beqz	a5,1c0073f2 <pi_task_wait_on.isra.3+0x1e>
1c0073e6:	40b2                	lw	ra,12(sp)
1c0073e8:	4422                	lw	s0,8(sp)
1c0073ea:	4492                	lw	s1,4(sp)
1c0073ec:	4902                	lw	s2,0(sp)
1c0073ee:	0141                	addi	sp,sp,16
1c0073f0:	8082                	ret
1c0073f2:	30047973          	csrrci	s2,mstatus,8
1c0073f6:	4585                	li	a1,1
1c0073f8:	01c00513          	li	a0,28
1c0073fc:	234030ef          	jal	ra,1c00a630 <__rt_event_execute>
1c007400:	30091073          	csrw	mstatus,s2
1c007404:	bff1                	j	1c0073e0 <pi_task_wait_on.isra.3+0xc>

1c007406 <pi_fs_conf_init>:
1c007406:	00052023          	sw	zero,0(a0)
1c00740a:	00052423          	sw	zero,8(a0)
1c00740e:	00050623          	sb	zero,12(a0)
1c007412:	00052823          	sw	zero,16(a0)
1c007416:	8082                	ret

1c007418 <pi_fs_mount>:
1c007418:	4158                	lw	a4,4(a0)
1c00741a:	4b1c                	lw	a5,16(a4)
1c00741c:	eb89                	bnez	a5,1c00742e <pi_fs_mount+0x16>
1c00741e:	431c                	lw	a5,0(a4)
1c007420:	cb99                	beqz	a5,1c007436 <pi_fs_mount+0x1e>
1c007422:	0017bf63          	p.bneimm	a5,1,1c007440 <pi_fs_mount+0x28>
1c007426:	1c00f7b7          	lui	a5,0x1c00f
1c00742a:	f5878793          	addi	a5,a5,-168 # 1c00ef58 <__pi_host_fs_api>
1c00742e:	0007a303          	lw	t1,0(a5)
1c007432:	c11c                	sw	a5,0(a0)
1c007434:	8302                	jr	t1
1c007436:	1c00f7b7          	lui	a5,0x1c00f
1c00743a:	f3078793          	addi	a5,a5,-208 # 1c00ef30 <__pi_read_fs_api>
1c00743e:	bfc5                	j	1c00742e <pi_fs_mount+0x16>
1c007440:	557d                	li	a0,-1
1c007442:	8082                	ret

1c007444 <pi_fs_unmount>:
1c007444:	411c                	lw	a5,0(a0)
1c007446:	0047a303          	lw	t1,4(a5)
1c00744a:	8302                	jr	t1

1c00744c <pi_fs_open>:
1c00744c:	411c                	lw	a5,0(a0)
1c00744e:	0087a303          	lw	t1,8(a5)
1c007452:	8302                	jr	t1

1c007454 <pi_fs_read_async>:
1c007454:	415c                	lw	a5,4(a0)
1c007456:	0107a303          	lw	t1,16(a5)
1c00745a:	8302                	jr	t1

1c00745c <pi_fs_read>:
1c00745c:	7175                	addi	sp,sp,-144
1c00745e:	4785                	li	a5,1
1c007460:	868a                	mv	a3,sp
1c007462:	c706                	sw	ra,140(sp)
1c007464:	c522                	sw	s0,136(sp)
1c007466:	cc3e                	sw	a5,24(sp)
1c007468:	d43e                	sw	a5,40(sp)
1c00746a:	c202                	sw	zero,4(sp)
1c00746c:	00010a23          	sb	zero,20(sp)
1c007470:	37d5                	jal	1c007454 <pi_fs_read_async>
1c007472:	842a                	mv	s0,a0
1c007474:	0848                	addi	a0,sp,20
1c007476:	3fb9                	jal	1c0073d4 <pi_task_wait_on.isra.3>
1c007478:	8522                	mv	a0,s0
1c00747a:	40ba                	lw	ra,140(sp)
1c00747c:	442a                	lw	s0,136(sp)
1c00747e:	6149                	addi	sp,sp,144
1c007480:	8082                	ret

1c007482 <pi_fs_write_async>:
1c007482:	415c                	lw	a5,4(a0)
1c007484:	0187a303          	lw	t1,24(a5)
1c007488:	8302                	jr	t1

1c00748a <pi_fs_write>:
1c00748a:	7175                	addi	sp,sp,-144
1c00748c:	4785                	li	a5,1
1c00748e:	868a                	mv	a3,sp
1c007490:	c706                	sw	ra,140(sp)
1c007492:	c522                	sw	s0,136(sp)
1c007494:	cc3e                	sw	a5,24(sp)
1c007496:	d43e                	sw	a5,40(sp)
1c007498:	c202                	sw	zero,4(sp)
1c00749a:	00010a23          	sb	zero,20(sp)
1c00749e:	37d5                	jal	1c007482 <pi_fs_write_async>
1c0074a0:	842a                	mv	s0,a0
1c0074a2:	0848                	addi	a0,sp,20
1c0074a4:	3f05                	jal	1c0073d4 <pi_task_wait_on.isra.3>
1c0074a6:	8522                	mv	a0,s0
1c0074a8:	40ba                	lw	ra,140(sp)
1c0074aa:	442a                	lw	s0,136(sp)
1c0074ac:	6149                	addi	sp,sp,144
1c0074ae:	8082                	ret

1c0074b0 <pi_fs_copy_async>:

int32_t pi_fs_copy_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc, pi_task_t *task)
{
  return file->api->copy(file, index, buffer, size, ext2loc, task);
1c0074b0:	00452803          	lw	a6,4(a0)
1c0074b4:	02082303          	lw	t1,32(a6)
1c0074b8:	8302                	jr	t1

1c0074ba <pi_flash_read_async>:
}

static inline void pi_flash_read_async(struct pi_device *device, uint32_t pi_flash_addr, void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->read_async(device, pi_flash_addr, data, size, task);
1c0074ba:	411c                	lw	a5,0(a0)
1c0074bc:	00c7a303          	lw	t1,12(a5)
1c0074c0:	8302                	jr	t1

1c0074c2 <__pi_read_fs_write>:
    return block_size;
}

static int32_t __pi_read_fs_write(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *task)
{
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c0074c2:	411c                	lw	a5,0(a0)
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c0074c4:	01852803          	lw	a6,24(a0)
{
1c0074c8:	8736                	mv	a4,a3
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c0074ca:	4794                	lw	a3,8(a5)
    unsigned int addr = file->addr + file->offset;
1c0074cc:	495c                	lw	a5,20(a0)
{
1c0074ce:	88ae                	mv	a7,a1
1c0074d0:	1141                	addi	sp,sp,-16
    unsigned int addr = file->addr + file->offset;
1c0074d2:	010785b3          	add	a1,a5,a6
    if(file->offset + size > file->fs_file.size)
1c0074d6:	00c52803          	lw	a6,12(a0)
{
1c0074da:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c0074dc:	00c78333          	add	t1,a5,a2
1c0074e0:	00687463          	bleu	t1,a6,1c0074e8 <__pi_read_fs_write+0x26>
    {
        real_size = file->fs_file.size - file->offset;
1c0074e4:	40f80633          	sub	a2,a6,a5
    }
    file->offset += real_size;
1c0074e8:	97b2                	add	a5,a5,a2
1c0074ea:	c95c                	sw	a5,20(a0)
    
    pi_flash_program_async(fs->flash, addr, (void *) buffer, real_size, task);
1c0074ec:	4288                	lw	a0,0(a3)
}

static inline void pi_flash_program_async(struct pi_device *device, uint32_t pi_flash_addr, const void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->program_async(device, pi_flash_addr, data, size, task);
1c0074ee:	86b2                	mv	a3,a2
1c0074f0:	8646                	mv	a2,a7
1c0074f2:	411c                	lw	a5,0(a0)
1c0074f4:	4b9c                	lw	a5,16(a5)
1c0074f6:	9782                	jalr	a5
    
    return 0;
}
1c0074f8:	40b2                	lw	ra,12(sp)
1c0074fa:	4501                	li	a0,0
1c0074fc:	0141                	addi	sp,sp,16
1c0074fe:	8082                	ret

1c007500 <__pi_read_fs_seek>:
static int32_t __pi_read_fs_seek(pi_fs_file_t *_file, unsigned int offset)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    //printf("[FS] File seek (file: %p, offset: 0x%x)\n", file, offset);
    
    if(offset < file->fs_file.size)
1c007500:	455c                	lw	a5,12(a0)
1c007502:	00f5f563          	bleu	a5,a1,1c00750c <__pi_read_fs_seek+0xc>
    {
        file->offset = offset;
1c007506:	c94c                	sw	a1,20(a0)
        return 0;
1c007508:	4501                	li	a0,0
1c00750a:	8082                	ret
    }
    return -1;
1c00750c:	557d                	li	a0,-1
}
1c00750e:	8082                	ret

1c007510 <__pi_read_fs_direct_read_async>:
}

static int32_t __pi_read_fs_direct_read_async(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *event)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007510:	411c                	lw	a5,0(a0)
{
1c007512:	1141                	addi	sp,sp,-16
1c007514:	c422                	sw	s0,8(sp)
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007516:	0087a803          	lw	a6,8(a5)
{
1c00751a:	8432                	mv	s0,a2
    // Mask interrupt to update file current position and get information
    //int irq = pi_irq_disable();
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c00751c:	495c                	lw	a5,20(a0)
1c00751e:	4d10                	lw	a2,24(a0)
{
1c007520:	88ae                	mv	a7,a1
1c007522:	8736                	mv	a4,a3
    unsigned int addr = file->addr + file->offset;
1c007524:	00c785b3          	add	a1,a5,a2
    if(file->offset + size > file->fs_file.size)
1c007528:	4550                	lw	a2,12(a0)
{
1c00752a:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c00752c:	008786b3          	add	a3,a5,s0
1c007530:	00d67463          	bleu	a3,a2,1c007538 <__pi_read_fs_direct_read_async+0x28>
    {
        real_size = file->fs_file.size - file->offset;
1c007534:	40f60433          	sub	s0,a2,a5
    }
    file->offset += real_size;
1c007538:	97a2                	add	a5,a5,s0
1c00753a:	c95c                	sw	a5,20(a0)
    
    //pi_irq_restore(irq);
    
    pi_flash_read_async(fs->flash, addr, (void *) buffer, real_size, event);
1c00753c:	00082503          	lw	a0,0(a6)
1c007540:	86a2                	mv	a3,s0
1c007542:	8646                	mv	a2,a7
1c007544:	3f9d                	jal	1c0074ba <pi_flash_read_async>
    
    return real_size;
}
1c007546:	8522                	mv	a0,s0
1c007548:	40b2                	lw	ra,12(sp)
1c00754a:	4422                	lw	s0,8(sp)
1c00754c:	0141                	addi	sp,sp,16
1c00754e:	8082                	ret

1c007550 <__pi_read_fs_copy_async>:


static int32_t
__pi_read_fs_copy_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc,
                        pi_task_t *task)
{
1c007550:	882a                	mv	a6,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007552:	4108                	lw	a0,0(a0)
    return pi_flash_copy_async(fs->flash, file->addr + index, buffer, size, ext2loc, task);
1c007554:	01882803          	lw	a6,24(a6)
1c007558:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_async(device, pi_flash_addr, buffer, size, ext2loc, task);
1c00755a:	95c2                	add	a1,a1,a6
1c00755c:	4108                	lw	a0,0(a0)
1c00755e:	00052883          	lw	a7,0(a0)
1c007562:	0288a303          	lw	t1,40(a7)
1c007566:	8302                	jr	t1

1c007568 <__pi_read_fs_copy_2d_async>:
}

static int32_t
__pi_read_fs_copy_2d_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, uint32_t stride,
                           uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c007568:	832a                	mv	t1,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00756a:	4108                	lw	a0,0(a0)
    return pi_flash_copy_2d_async(fs->flash, file->addr + index, buffer, size, stride, length, ext2loc, task);
1c00756c:	01832e03          	lw	t3,24(t1)
1c007570:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_2d_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, task);
1c007572:	95f2                	add	a1,a1,t3
1c007574:	4108                	lw	a0,0(a0)
1c007576:	00052303          	lw	t1,0(a0)
1c00757a:	02c32303          	lw	t1,44(t1)
1c00757e:	8302                	jr	t1

1c007580 <rt_event_enqueue>:

#if defined(__OPTIMIZE__) && defined(CORE_PULP_BUILTINS) && !defined(__LLVM__)

static inline unsigned int hal_spr_read_then_clr(unsigned int reg, unsigned int val)
{
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007580:	300476f3          	csrrci	a3,mstatus,8

static inline void __rt_event_enqueue(rt_event_t *event)
{
  rt_event_sched_t *sched = rt_event_internal_sched();
  event->next = NULL;
  if (sched->first) {
1c007584:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c007588:	00052023          	sw	zero,0(a0)
1c00758c:	01c00713          	li	a4,28
  if (sched->first) {
1c007590:	c619                	beqz	a2,1c00759e <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c007592:	435c                	lw	a5,4(a4)
1c007594:	c388                	sw	a0,0(a5)
  } else {
    sched->first = event;
  }
  sched->last = event;
1c007596:	c348                	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
}

static inline void hal_spr_write(unsigned int reg, unsigned int val)
{
  __builtin_pulp_spr_write(reg, val);
1c007598:	30069073          	csrw	mstatus,a3

static inline void rt_event_enqueue(rt_event_t *event) {
  int irq = rt_irq_disable();
  __rt_event_enqueue(event);
  rt_irq_restore(irq);
}
1c00759c:	8082                	ret
    sched->first = event;
1c00759e:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c0075a2:	bfd5                	j	1c007596 <rt_event_enqueue+0x16>

1c0075a4 <__pi_fs_free>:
    if(fs != NULL)
1c0075a4:	c91d                	beqz	a0,1c0075da <__pi_fs_free+0x36>
{
1c0075a6:	1141                	addi	sp,sp,-16
1c0075a8:	c422                	sw	s0,8(sp)
1c0075aa:	842a                	mv	s0,a0
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c0075ac:	09c52503          	lw	a0,156(a0)
{
1c0075b0:	c606                	sw	ra,12(sp)
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c0075b2:	c511                	beqz	a0,1c0075be <__pi_fs_free+0x1a>
1c0075b4:	09842783          	lw	a5,152(s0)
1c0075b8:	438c                	lw	a1,0(a5)
1c0075ba:	324030ef          	jal	ra,1c00a8de <pi_l2_free>
        if(fs->pi_fs_l2) pmsis_l2_malloc_free(fs->pi_fs_l2, sizeof(pi_fs_l2_t));
1c0075be:	09842503          	lw	a0,152(s0)
1c0075c2:	c501                	beqz	a0,1c0075ca <__pi_fs_free+0x26>
1c0075c4:	45a1                	li	a1,8
1c0075c6:	318030ef          	jal	ra,1c00a8de <pi_l2_free>
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c0075ca:	8522                	mv	a0,s0
}
1c0075cc:	4422                	lw	s0,8(sp)
1c0075ce:	40b2                	lw	ra,12(sp)
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c0075d0:	1b800593          	li	a1,440
}
1c0075d4:	0141                	addi	sp,sp,16
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c0075d6:	3080306f          	j	1c00a8de <pi_l2_free>
1c0075da:	8082                	ret

1c0075dc <__pi_read_fs_unmount>:
    __pi_fs_free(fs);
1c0075dc:	4508                	lw	a0,8(a0)
1c0075de:	b7d9                	j	1c0075a4 <__pi_fs_free>

1c0075e0 <__pi_read_fs_open>:
{
1c0075e0:	1101                	addi	sp,sp,-32
1c0075e2:	ca26                	sw	s1,20(sp)
1c0075e4:	c452                	sw	s4,8(sp)
1c0075e6:	c256                	sw	s5,4(sp)
1c0075e8:	ce06                	sw	ra,28(sp)
1c0075ea:	cc22                	sw	s0,24(sp)
1c0075ec:	c84a                	sw	s2,16(sp)
1c0075ee:	c64e                	sw	s3,12(sp)
1c0075f0:	c05a                	sw	s6,0(sp)
1c0075f2:	8a2a                	mv	s4,a0
1c0075f4:	8aae                	mv	s5,a1
    pi_read_fs_t *fs = (pi_read_fs_t *) device->data;
1c0075f6:	4504                	lw	s1,8(a0)
    if(flags == PI_FS_FLAGS_WRITE)
1c0075f8:	08163f63          	p.bneimm	a2,1,1c007696 <__pi_read_fs_open+0xb6>
        if(fs->last_created_file)
1c0075fc:	12c4a783          	lw	a5,300(s1)
1c007600:	c399                	beqz	a5,1c007606 <__pi_read_fs_open+0x26>
    return NULL;
1c007602:	4501                	li	a0,0
1c007604:	a8bd                	j	1c007682 <__pi_read_fs_open+0xa2>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c007606:	0c000513          	li	a0,192
1c00760a:	2c6030ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c00760e:	842a                	mv	s0,a0
        if(file == NULL) return NULL;
1c007610:	d96d                	beqz	a0,1c007602 <__pi_read_fs_open+0x22>
        int str_len = strlen(file_name);
1c007612:	8556                	mv	a0,s5
1c007614:	4d1050ef          	jal	ra,1c00d2e4 <strlen>
        int header_size = ((str_len + 7) & ~0x7) + 12;
1c007618:	00750913          	addi	s2,a0,7
1c00761c:	c4093933          	p.bclr	s2,s2,2,0
1c007620:	0931                	addi	s2,s2,12
        int str_len = strlen(file_name);
1c007622:	89aa                	mv	s3,a0
        uint8_t *header = pmsis_l2_malloc(header_size);
1c007624:	854a                	mv	a0,s2
1c007626:	2aa030ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
        if(header == NULL)
1c00762a:	e519                	bnez	a0,1c007638 <__pi_read_fs_open+0x58>
    pmsis_l2_malloc_free(file, sizeof(pi_read_fs_file_t));
1c00762c:	0c000593          	li	a1,192
1c007630:	8522                	mv	a0,s0
1c007632:	2ac030ef          	jal	ra,1c00a8de <pi_l2_free>
1c007636:	b7f1                	j	1c007602 <__pi_read_fs_open+0x22>
        file->header = header;
1c007638:	0aa42a23          	sw	a0,180(s0)
        file->header_size = header_size;
1c00763c:	0b242c23          	sw	s2,184(s0)
        memcpy(&file->header[12], file_name, str_len);
1c007640:	864e                	mv	a2,s3
1c007642:	85d6                	mv	a1,s5
1c007644:	0531                	addi	a0,a0,12
1c007646:	4c5050ef          	jal	ra,1c00d30a <memcpy>
        *(uint32_t *) &file->header[8] = str_len;
1c00764a:	0b442783          	lw	a5,180(s0)
1c00764e:	0137a423          	sw	s3,8(a5)
        file->addr = fs->free_flash_area + header_size;
1c007652:	1284a783          	lw	a5,296(s1)
        file->fs_file.size = 0;
1c007656:	00042623          	sw	zero,12(s0)
        file->offset = 0;
1c00765a:	00042a23          	sw	zero,20(s0)
        file->addr = fs->free_flash_area + header_size;
1c00765e:	993e                	add	s2,s2,a5
        file->cache_addr = -1;
1c007660:	57fd                	li	a5,-1
        file->addr = fs->free_flash_area + header_size;
1c007662:	01242c23          	sw	s2,24(s0)
        file->cache_addr = -1;
1c007666:	0af42823          	sw	a5,176(s0)
        fs->last_created_file = file;
1c00766a:	1284a623          	sw	s0,300(s1)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c00766e:	000a2783          	lw	a5,0(s4)
    file->fs_file.fs_data = &fs->fs_data;
1c007672:	13048493          	addi	s1,s1,304
    file->fs_file.data = file;
1c007676:	c400                	sw	s0,8(s0)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c007678:	c05c                	sw	a5,4(s0)
    file->fs_file.fs = device;
1c00767a:	01442023          	sw	s4,0(s0)
    file->fs_file.fs_data = &fs->fs_data;
1c00767e:	c804                	sw	s1,16(s0)
    return &file->fs_file;
1c007680:	8522                	mv	a0,s0
}
1c007682:	40f2                	lw	ra,28(sp)
1c007684:	4462                	lw	s0,24(sp)
1c007686:	44d2                	lw	s1,20(sp)
1c007688:	4942                	lw	s2,16(sp)
1c00768a:	49b2                	lw	s3,12(sp)
1c00768c:	4a22                	lw	s4,8(sp)
1c00768e:	4a92                	lw	s5,4(sp)
1c007690:	4b02                	lw	s6,0(sp)
1c007692:	6105                	addi	sp,sp,32
1c007694:	8082                	ret
        unsigned int *pi_fs_info = fs->pi_fs_info;
1c007696:	09c4a783          	lw	a5,156(s1)
        for (i = 0; i < nb_comps; i++)
1c00769a:	4981                	li	s3,0
        pi_fs_desc_t *desc = NULL;
1c00769c:	4901                	li	s2,0
        int nb_comps = *pi_fs_info++;
1c00769e:	0007ab03          	lw	s6,0(a5)
1c0076a2:	00478413          	addi	s0,a5,4
        for (i = 0; i < nb_comps; i++)
1c0076a6:	0569c163          	blt	s3,s6,1c0076e8 <__pi_read_fs_open+0x108>
        if(i == nb_comps) goto error;
1c0076aa:	f5698ce3          	beq	s3,s6,1c007602 <__pi_read_fs_open+0x22>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c0076ae:	0c000513          	li	a0,192
1c0076b2:	21e030ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c0076b6:	842a                	mv	s0,a0
        if(file == NULL) goto error;
1c0076b8:	d529                	beqz	a0,1c007602 <__pi_read_fs_open+0x22>
        file->cache = pmsis_l2_malloc(READ_FS_THRESHOLD_BLOCK_FULL);
1c0076ba:	08800513          	li	a0,136
1c0076be:	212030ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c0076c2:	0aa42623          	sw	a0,172(s0)
        if(file->cache == NULL) goto error1;
1c0076c6:	d13d                	beqz	a0,1c00762c <__pi_read_fs_open+0x4c>
        file->fs_file.size = desc->size;
1c0076c8:	00492783          	lw	a5,4(s2)
        file->addr = desc->addr + fs->partition_offset;
1c0076cc:	4498                	lw	a4,8(s1)
        file->header = NULL;
1c0076ce:	0a042a23          	sw	zero,180(s0)
        file->fs_file.size = desc->size;
1c0076d2:	c45c                	sw	a5,12(s0)
        file->addr = desc->addr + fs->partition_offset;
1c0076d4:	00092783          	lw	a5,0(s2)
        file->offset = 0;
1c0076d8:	00042a23          	sw	zero,20(s0)
        file->addr = desc->addr + fs->partition_offset;
1c0076dc:	97ba                	add	a5,a5,a4
1c0076de:	cc1c                	sw	a5,24(s0)
        file->cache_addr = -1;
1c0076e0:	57fd                	li	a5,-1
1c0076e2:	0af42823          	sw	a5,176(s0)
1c0076e6:	b761                	j	1c00766e <__pi_read_fs_open+0x8e>
            if(strcmp(desc->name, file_name) == 0) break;
1c0076e8:	85d6                	mv	a1,s5
1c0076ea:	00c40513          	addi	a0,s0,12
1c0076ee:	3c3050ef          	jal	ra,1c00d2b0 <strcmp>
1c0076f2:	c901                	beqz	a0,1c007702 <__pi_read_fs_open+0x122>
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c0076f4:	441c                	lw	a5,8(s0)
        for (i = 0; i < nb_comps; i++)
1c0076f6:	8922                	mv	s2,s0
1c0076f8:	0985                	addi	s3,s3,1
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c0076fa:	97a2                	add	a5,a5,s0
1c0076fc:	00c78413          	addi	s0,a5,12
1c007700:	b75d                	j	1c0076a6 <__pi_read_fs_open+0xc6>
1c007702:	8922                	mv	s2,s0
1c007704:	b76d                	j	1c0076ae <__pi_read_fs_open+0xce>

1c007706 <__pi_fs_mount_step>:
{
1c007706:	7179                	addi	sp,sp,-48
1c007708:	d226                	sw	s1,36(sp)
    switch (fs->mount_step)
1c00770a:	09052483          	lw	s1,144(a0)
{
1c00770e:	d422                	sw	s0,40(sp)
1c007710:	d606                	sw	ra,44(sp)
1c007712:	d04a                	sw	s2,32(sp)
    const pi_partition_table_t partition_table = NULL;
1c007714:	ce02                	sw	zero,28(sp)
{
1c007716:	842a                	mv	s0,a0
    switch (fs->mount_step)
1c007718:	0834a463          	p.beqimm	s1,3,1c0077a0 <__pi_fs_mount_step+0x9a>
1c00771c:	0c44a963          	p.beqimm	s1,4,1c0077ee <__pi_fs_mount_step+0xe8>
1c007720:	0614ba63          	p.bneimm	s1,1,1c007794 <__pi_fs_mount_step+0x8e>
            rc = pi_partition_table_load(fs->flash, &partition_table);
1c007724:	4108                	lw	a0,0(a0)
1c007726:	086c                	addi	a1,sp,28
1c007728:	043010ef          	jal	ra,1c008f6a <pi_partition_table_load>
            if(rc != PI_OK) goto error;
1c00772c:	ed09                	bnez	a0,1c007746 <__pi_fs_mount_step+0x40>
            readfs_partition = pi_partition_find_first(partition_table, PI_PARTITION_TYPE_DATA,
1c00772e:	4054                	lw	a3,4(s0)
1c007730:	4572                	lw	a0,28(sp)
1c007732:	08100613          	li	a2,129
1c007736:	4585                	li	a1,1
1c007738:	037010ef          	jal	ra,1c008f6e <pi_partition_find_first>
1c00773c:	892a                	mv	s2,a0
            if(readfs_partition == NULL)
1c00773e:	e901                	bnez	a0,1c00774e <__pi_fs_mount_step+0x48>
                pi_partition_table_free(partition_table);
1c007740:	4572                	lw	a0,28(sp)
1c007742:	027010ef          	jal	ra,1c008f68 <pi_partition_table_free>
    fs->error = -1;
1c007746:	57fd                	li	a5,-1
1c007748:	12f42223          	sw	a5,292(s0)
1c00774c:	a0c9                	j	1c00780e <__pi_fs_mount_step+0x108>
            fs->partition_offset = pi_partition_get_flash_offset(readfs_partition);
1c00774e:	011010ef          	jal	ra,1c008f5e <pi_partition_get_flash_offset>

/// @cond IMPLEM

static inline pi_err_t pi_partition_close(const pi_partition_t *partition)
{
    pi_l2_free((pi_partition_t *) partition, sizeof(pi_partition_t));
1c007752:	02800593          	li	a1,40
1c007756:	c408                	sw	a0,8(s0)
1c007758:	854a                	mv	a0,s2
1c00775a:	184030ef          	jal	ra,1c00a8de <pi_l2_free>
            pi_partition_table_free(partition_table);
1c00775e:	4572                	lw	a0,28(sp)
1c007760:	009010ef          	jal	ra,1c008f68 <pi_partition_table_free>
            fs->mount_step++;
1c007764:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c007768:	4008                	lw	a0,0(s0)
1c00776a:	440c                	lw	a1,8(s0)
            fs->mount_step++;
1c00776c:	0789                	addi	a5,a5,2
1c00776e:	08f42823          	sw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c007772:	09842603          	lw	a2,152(s0)


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
  task->arg[0] = (uint32_t)callback;
1c007776:	1c0077b7          	lui	a5,0x1c007
1c00777a:	70678793          	addi	a5,a5,1798 # 1c007706 <__pi_fs_mount_step>
  task->id = PI_TASK_CALLBACK_ID;
1c00777e:	02042223          	sw	zero,36(s0)
  task->arg[0] = (uint32_t)callback;
1c007782:	c81c                	sw	a5,16(s0)
  task->arg[1] = (uint32_t)arg;
1c007784:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c007786:	d844                	sw	s1,52(s0)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c007788:	02040023          	sb	zero,32(s0)
1c00778c:	00c40713          	addi	a4,s0,12
1c007790:	46a1                	li	a3,8
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c007792:	3325                	jal	1c0074ba <pi_flash_read_async>
}
1c007794:	50b2                	lw	ra,44(sp)
1c007796:	5422                	lw	s0,40(sp)
1c007798:	5492                	lw	s1,36(sp)
1c00779a:	5902                	lw	s2,32(sp)
1c00779c:	6145                	addi	sp,sp,48
1c00779e:	8082                	ret
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c0077a0:	09852783          	lw	a5,152(a0)
            int pi_fs_offset = fs->partition_offset;
1c0077a4:	4504                	lw	s1,8(a0)
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c0077a6:	4394                	lw	a3,0(a5)
1c0077a8:	069d                	addi	a3,a3,7
1c0077aa:	c406b6b3          	p.bclr	a3,a3,2,0
            fs->pi_fs_info = pmsis_l2_malloc(pi_fs_size);
1c0077ae:	8536                	mv	a0,a3
1c0077b0:	c636                	sw	a3,12(sp)
1c0077b2:	11e030ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c0077b6:	08a42e23          	sw	a0,156(s0)
1c0077ba:	862a                	mv	a2,a0
            if(fs->pi_fs_info == NULL)
1c0077bc:	46b2                	lw	a3,12(sp)
1c0077be:	d541                	beqz	a0,1c007746 <__pi_fs_mount_step+0x40>
            fs->mount_step++;
1c0077c0:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c0077c4:	4008                	lw	a0,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c0077c6:	02042223          	sw	zero,36(s0)
            fs->mount_step++;
1c0077ca:	0785                	addi	a5,a5,1
1c0077cc:	08f42823          	sw	a5,144(s0)
  task->arg[0] = (uint32_t)callback;
1c0077d0:	1c0077b7          	lui	a5,0x1c007
1c0077d4:	70678793          	addi	a5,a5,1798 # 1c007706 <__pi_fs_mount_step>
1c0077d8:	c81c                	sw	a5,16(s0)
  task->implem.keep = 1;
1c0077da:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c0077dc:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c0077de:	d85c                	sw	a5,52(s0)
1c0077e0:	02040023          	sb	zero,32(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c0077e4:	00c40713          	addi	a4,s0,12
1c0077e8:	00848593          	addi	a1,s1,8
1c0077ec:	b75d                	j	1c007792 <__pi_fs_mount_step+0x8c>
            unsigned int *pi_fs_info = fs->pi_fs_info;
1c0077ee:	09c52703          	lw	a4,156(a0)
            for (i = 0; i < nb_comps; i++)
1c0077f2:	4681                	li	a3,0
            int nb_comps = *pi_fs_info++;
1c0077f4:	00470793          	addi	a5,a4,4
1c0077f8:	430c                	lw	a1,0(a4)
            pi_fs_desc_t *desc = NULL;
1c0077fa:	4701                	li	a4,0
            for (i = 0; i < nb_comps; i++)
1c0077fc:	00b6cd63          	blt	a3,a1,1c007816 <__pi_fs_mount_step+0x110>
            if(desc == NULL)
1c007800:	e315                	bnez	a4,1c007824 <__pi_fs_mount_step+0x11e>
                fs->free_flash_area = desc->addr + desc->size;
1c007802:	12f42423          	sw	a5,296(s0)
            fs->last_created_file = NULL;
1c007806:	12042623          	sw	zero,300(s0)
            fs->error = 0;
1c00780a:	12042223          	sw	zero,292(s0)
  rt_event_enqueue(task);
1c00780e:	08c42503          	lw	a0,140(s0)
1c007812:	33bd                	jal	1c007580 <rt_event_enqueue>
1c007814:	b741                	j	1c007794 <__pi_fs_mount_step+0x8e>
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c007816:	4790                	lw	a2,8(a5)
            for (i = 0; i < nb_comps; i++)
1c007818:	873e                	mv	a4,a5
1c00781a:	0685                	addi	a3,a3,1
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c00781c:	963e                	add	a2,a2,a5
1c00781e:	00c60793          	addi	a5,a2,12
1c007822:	bfe9                	j	1c0077fc <__pi_fs_mount_step+0xf6>
                fs->free_flash_area = desc->addr + desc->size;
1c007824:	431c                	lw	a5,0(a4)
1c007826:	4358                	lw	a4,4(a4)
1c007828:	97ba                	add	a5,a5,a4
1c00782a:	bfe1                	j	1c007802 <__pi_fs_mount_step+0xfc>

1c00782c <__pi_read_fs_close>:
    if(file->header == NULL)
1c00782c:	0b452603          	lw	a2,180(a0)
{
1c007830:	1141                	addi	sp,sp,-16
1c007832:	c422                	sw	s0,8(sp)
1c007834:	c606                	sw	ra,12(sp)
1c007836:	842a                	mv	s0,a0
    if(file->header == NULL)
1c007838:	ee19                	bnez	a2,1c007856 <__pi_read_fs_close+0x2a>
        pmsis_l2_malloc_free(file->cache, READ_FS_THRESHOLD_BLOCK_FULL);
1c00783a:	0ac52503          	lw	a0,172(a0)
1c00783e:	08800593          	li	a1,136
        pi_l2_free((void *) file->header, file->header_size);
1c007842:	09c030ef          	jal	ra,1c00a8de <pi_l2_free>
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c007846:	8522                	mv	a0,s0
}
1c007848:	4422                	lw	s0,8(sp)
1c00784a:	40b2                	lw	ra,12(sp)
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c00784c:	0c000593          	li	a1,192
}
1c007850:	0141                	addi	sp,sp,16
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c007852:	08c0306f          	j	1c00a8de <pi_l2_free>
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007856:	411c                	lw	a5,0(a0)
        *(uint32_t *) &file->header[0] = file->addr;
1c007858:	4d0c                	lw	a1,24(a0)
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c00785a:	4558                	lw	a4,12(a0)
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00785c:	479c                	lw	a5,8(a5)
  api->program(device, pi_flash_addr, data, size);
1c00785e:	0b842683          	lw	a3,184(s0)
        *(uint32_t *) &file->header[0] = file->addr;
1c007862:	c20c                	sw	a1,0(a2)
        pi_flash_program(fs->flash, file->addr - file->header_size, (void *) file->header, file->header_size);
1c007864:	4388                	lw	a0,0(a5)
1c007866:	8d95                	sub	a1,a1,a3
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c007868:	c258                	sw	a4,4(a2)
1c00786a:	411c                	lw	a5,0(a0)
1c00786c:	5bdc                	lw	a5,52(a5)
1c00786e:	9782                	jalr	a5
        pi_l2_free((void *) file->header, file->header_size);
1c007870:	0b842583          	lw	a1,184(s0)
1c007874:	0b442503          	lw	a0,180(s0)
1c007878:	b7e9                	j	1c007842 <__pi_read_fs_close+0x16>

1c00787a <__pi_read_fs_mount>:
{
1c00787a:	7175                	addi	sp,sp,-144
1c00787c:	c326                	sw	s1,132(sp)
1c00787e:	c14a                	sw	s2,128(sp)
1c007880:	84aa                	mv	s1,a0
    struct pi_fs_conf *conf = (struct pi_fs_conf *) device->config;
1c007882:	00452903          	lw	s2,4(a0)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c007886:	1b800513          	li	a0,440
{
1c00788a:	c522                	sw	s0,136(sp)
1c00788c:	c706                	sw	ra,140(sp)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c00788e:	042030ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c007892:	842a                	mv	s0,a0
    if(fs == NULL) goto error;
1c007894:	e911                	bnez	a0,1c0078a8 <__pi_read_fs_mount+0x2e>
    __pi_fs_free(fs);
1c007896:	8522                	mv	a0,s0
1c007898:	3331                	jal	1c0075a4 <__pi_fs_free>
    return -1;
1c00789a:	557d                	li	a0,-1
}
1c00789c:	40ba                	lw	ra,140(sp)
1c00789e:	442a                	lw	s0,136(sp)
1c0078a0:	449a                	lw	s1,132(sp)
1c0078a2:	490a                	lw	s2,128(sp)
1c0078a4:	6149                	addi	sp,sp,144
1c0078a6:	8082                	ret
    fs->flash = conf->flash;
1c0078a8:	00492783          	lw	a5,4(s2)
    fs->pi_fs_l2 = NULL;
1c0078ac:	08052c23          	sw	zero,152(a0)
    fs->pi_fs_info = NULL;
1c0078b0:	08052e23          	sw	zero,156(a0)
    fs->flash = conf->flash;
1c0078b4:	c11c                	sw	a5,0(a0)
    fs->fs_data.cluster_reqs_first = NULL;
1c0078b6:	12052823          	sw	zero,304(a0)
    fs->pi_fs_l2 = pmsis_l2_malloc(sizeof(pi_fs_l2_t));
1c0078ba:	4521                	li	a0,8
1c0078bc:	014030ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c0078c0:	08a42c23          	sw	a0,152(s0)
    if(fs->pi_fs_l2 == NULL) goto error;
1c0078c4:	d969                	beqz	a0,1c007896 <__pi_read_fs_mount+0x1c>
    fs->mount_step = 1;
1c0078c6:	4785                	li	a5,1
1c0078c8:	08f42823          	sw	a5,144(s0)
  task->id = PI_TASK_NONE_ID;
1c0078cc:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0078ce:	d43e                	sw	a5,40(sp)
1c0078d0:	00010a23          	sb	zero,20(sp)
    fs->pending_event = pi_task_block(&task);
1c0078d4:	00010793          	mv	a5,sp
1c0078d8:	08f42623          	sw	a5,140(s0)
    fs->partition_name = conf->partition_name;
1c0078dc:	00892783          	lw	a5,8(s2)
  task->arg[0] = (uint32_t)0;
1c0078e0:	c202                	sw	zero,4(sp)
    fs->pi_fs_info = NULL;
1c0078e2:	08042e23          	sw	zero,156(s0)
    fs->partition_name = conf->partition_name;
1c0078e6:	c05c                	sw	a5,4(s0)
    device->data = (void *) fs;
1c0078e8:	c480                	sw	s0,8(s1)
    __pi_fs_mount_step((void *) fs);
1c0078ea:	8522                	mv	a0,s0
1c0078ec:	3d29                	jal	1c007706 <__pi_fs_mount_step>
  while(!task->done)
1c0078ee:	01410783          	lb	a5,20(sp)
1c0078f2:	c791                	beqz	a5,1c0078fe <__pi_read_fs_mount+0x84>
    if(fs->error)
1c0078f4:	12442783          	lw	a5,292(s0)
1c0078f8:	ffd9                	bnez	a5,1c007896 <__pi_read_fs_mount+0x1c>
    return 0;
1c0078fa:	4501                	li	a0,0
1c0078fc:	b745                	j	1c00789c <__pi_read_fs_mount+0x22>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0078fe:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007902:	4585                	li	a1,1
1c007904:	01c00513          	li	a0,28
1c007908:	529020ef          	jal	ra,1c00a630 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00790c:	30091073          	csrw	mstatus,s2
1c007910:	bff9                	j	1c0078ee <__pi_read_fs_mount+0x74>

1c007912 <__pi_fs_read_cached>:
{
1c007912:	88ae                	mv	a7,a1
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c007914:	0b052583          	lw	a1,176(a0)
{
1c007918:	1141                	addi	sp,sp,-16
1c00791a:	c226                	sw	s1,4(sp)
1c00791c:	c606                	sw	ra,12(sp)
1c00791e:	c422                	sw	s0,8(sp)
1c007920:	84ba                	mv	s1,a4
1c007922:	0ac52803          	lw	a6,172(a0)
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c007926:	00b66f63          	bltu	a2,a1,1c007944 <__pi_fs_read_cached+0x32>
    if(size > READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7)) size = READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7);
1c00792a:	f8363733          	p.bclr	a4,a2,28,3
1c00792e:	08800413          	li	s0,136
1c007932:	8c19                	sub	s0,s0,a4
1c007934:	04d45433          	p.minu	s0,s0,a3
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c007938:	008606b3          	add	a3,a2,s0
1c00793c:	08858713          	addi	a4,a1,136 # ffff8088 <pulp__FC+0xffff8089>
1c007940:	02d77a63          	bleu	a3,a4,1c007974 <__pi_fs_read_cached+0x62>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c007944:	4118                	lw	a4,0(a0)
        file->cache_addr = addr & ~0x7;
1c007946:	c40635b3          	p.bclr	a1,a2,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c00794a:	08800693          	li	a3,136
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00794e:	00872883          	lw	a7,8(a4)
        file->cache_addr = addr & ~0x7;
1c007952:	0ab52823          	sw	a1,176(a0)
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c007956:	873e                	mv	a4,a5
1c007958:	0008a503          	lw	a0,0(a7)
1c00795c:	8642                	mv	a2,a6
        return 0;
1c00795e:	4401                	li	s0,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c007960:	b5bff0ef          	jal	ra,1c0074ba <pi_flash_read_async>
        *pending = 1;
1c007964:	4785                	li	a5,1
1c007966:	c09c                	sw	a5,0(s1)
}
1c007968:	8522                	mv	a0,s0
1c00796a:	40b2                	lw	ra,12(sp)
1c00796c:	4422                	lw	s0,8(sp)
1c00796e:	4492                	lw	s1,4(sp)
1c007970:	0141                	addi	sp,sp,16
1c007972:	8082                	ret
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c007974:	40b605b3          	sub	a1,a2,a1
1c007978:	95c2                	add	a1,a1,a6
1c00797a:	8622                	mv	a2,s0
1c00797c:	8546                	mv	a0,a7
1c00797e:	18d050ef          	jal	ra,1c00d30a <memcpy>
    return __pi_fs_read_from_cache(file, buffer, addr, size);
1c007982:	b7dd                	j	1c007968 <__pi_fs_read_cached+0x56>

1c007984 <__pi_fs_read>:
{
1c007984:	7179                	addi	sp,sp,-48
1c007986:	d422                	sw	s0,40(sp)
1c007988:	d226                	sw	s1,36(sp)
1c00798a:	d04a                	sw	s2,32(sp)
1c00798c:	ca56                	sw	s5,20(sp)
1c00798e:	c85a                	sw	s6,16(sp)
1c007990:	d606                	sw	ra,44(sp)
1c007992:	8b3e                	mv	s6,a5
1c007994:	ce4e                	sw	s3,28(sp)
1c007996:	cc52                	sw	s4,24(sp)
1c007998:	c65e                	sw	s7,12(sp)
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c00799a:	47c1                	li	a5,16
{
1c00799c:	892e                	mv	s2,a1
1c00799e:	8432                	mv	s0,a2
1c0079a0:	84b6                	mv	s1,a3
1c0079a2:	8aba                	mv	s5,a4
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c0079a4:	06d7d063          	ble	a3,a5,1c007a04 <__pi_fs_read+0x80>
1c0079a8:	00b647b3          	xor	a5,a2,a1
1c0079ac:	f837b7b3          	p.bclr	a5,a5,28,3
1c0079b0:	ebb1                	bnez	a5,1c007a04 <__pi_fs_read+0x80>
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c0079b2:	08800793          	li	a5,136
1c0079b6:	06d7d763          	ble	a3,a5,1c007a24 <__pi_fs_read+0xa0>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0079ba:	411c                	lw	a5,0(a0)
1c0079bc:	0087ab83          	lw	s7,8(a5)
    int prefix_size = addr & 0x7;
1c0079c0:	f83437b3          	p.bclr	a5,s0,28,3
    if(prefix_size)
1c0079c4:	c395                	beqz	a5,1c0079e8 <__pi_fs_read+0x64>
        prefix_size = 4 - prefix_size;
1c0079c6:	4991                	li	s3,4
1c0079c8:	40f989b3          	sub	s3,s3,a5
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c0079cc:	8756                	mv	a4,s5
1c0079ce:	87da                	mv	a5,s6
1c0079d0:	86ce                	mv	a3,s3
1c0079d2:	8622                	mv	a2,s0
1c0079d4:	85ca                	mv	a1,s2
1c0079d6:	3f35                	jal	1c007912 <__pi_fs_read_cached>
        if(*pending) return read_size;
1c0079d8:	000aa783          	lw	a5,0(s5)
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c0079dc:	8a2a                	mv	s4,a0
        if(*pending) return read_size;
1c0079de:	e7bd                	bnez	a5,1c007a4c <__pi_fs_read+0xc8>
        addr += prefix_size;
1c0079e0:	944e                	add	s0,s0,s3
        buffer += prefix_size;
1c0079e2:	994e                	add	s2,s2,s3
        size -= prefix_size;
1c0079e4:	413484b3          	sub	s1,s1,s3
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c0079e8:	000ba503          	lw	a0,0(s7) # 10000 <__L1Cl>
    int block_size = size & ~0x7;
1c0079ec:	c404ba33          	p.bclr	s4,s1,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c0079f0:	875a                	mv	a4,s6
1c0079f2:	86d2                	mv	a3,s4
1c0079f4:	864a                	mv	a2,s2
1c0079f6:	85a2                	mv	a1,s0
1c0079f8:	ac3ff0ef          	jal	ra,1c0074ba <pi_flash_read_async>
    *pending = 1;
1c0079fc:	4785                	li	a5,1
1c0079fe:	00faa023          	sw	a5,0(s5)
    return block_size;
1c007a02:	a0a9                	j	1c007a4c <__pi_fs_read+0xc8>
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c007a04:	8622                	mv	a2,s0
}
1c007a06:	5422                	lw	s0,40(sp)
1c007a08:	50b2                	lw	ra,44(sp)
1c007a0a:	49f2                	lw	s3,28(sp)
1c007a0c:	4a62                	lw	s4,24(sp)
1c007a0e:	4bb2                	lw	s7,12(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c007a10:	87da                	mv	a5,s6
1c007a12:	8756                	mv	a4,s5
}
1c007a14:	4b42                	lw	s6,16(sp)
1c007a16:	4ad2                	lw	s5,20(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c007a18:	86a6                	mv	a3,s1
1c007a1a:	85ca                	mv	a1,s2
}
1c007a1c:	5492                	lw	s1,36(sp)
1c007a1e:	5902                	lw	s2,32(sp)
1c007a20:	6145                	addi	sp,sp,48
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c007a22:	bdc5                	j	1c007912 <__pi_fs_read_cached>
       addr >= file->cache_addr &&
1c007a24:	0b052583          	lw	a1,176(a0)
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c007a28:	f8b669e3          	bltu	a2,a1,1c0079ba <__pi_fs_read+0x36>
       addr + size < file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c007a2c:	00c687b3          	add	a5,a3,a2
1c007a30:	08858713          	addi	a4,a1,136
       addr >= file->cache_addr &&
1c007a34:	f8e7f3e3          	bleu	a4,a5,1c0079ba <__pi_fs_read+0x36>
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c007a38:	40b60433          	sub	s0,a2,a1
1c007a3c:	0ac52583          	lw	a1,172(a0)
1c007a40:	8636                	mv	a2,a3
1c007a42:	854a                	mv	a0,s2
1c007a44:	95a2                	add	a1,a1,s0
1c007a46:	0c5050ef          	jal	ra,1c00d30a <memcpy>
        return __pi_fs_read_from_cache(file, buffer, addr, size);
1c007a4a:	8a26                	mv	s4,s1
}
1c007a4c:	50b2                	lw	ra,44(sp)
1c007a4e:	5422                	lw	s0,40(sp)
1c007a50:	8552                	mv	a0,s4
1c007a52:	5492                	lw	s1,36(sp)
1c007a54:	5902                	lw	s2,32(sp)
1c007a56:	49f2                	lw	s3,28(sp)
1c007a58:	4a62                	lw	s4,24(sp)
1c007a5a:	4ad2                	lw	s5,20(sp)
1c007a5c:	4b42                	lw	s6,16(sp)
1c007a5e:	4bb2                	lw	s7,12(sp)
1c007a60:	6145                	addi	sp,sp,48
1c007a62:	8082                	ret

1c007a64 <__pi_read_fs_try_read>:
    if(file->pending_size == 0)
1c007a64:	0a852683          	lw	a3,168(a0)
{
1c007a68:	7179                	addi	sp,sp,-48
1c007a6a:	d422                	sw	s0,40(sp)
1c007a6c:	d606                	sw	ra,44(sp)
1c007a6e:	d226                	sw	s1,36(sp)
1c007a70:	d04a                	sw	s2,32(sp)
1c007a72:	ce4e                	sw	s3,28(sp)
    int pending = 0;
1c007a74:	c602                	sw	zero,12(sp)
{
1c007a76:	842a                	mv	s0,a0
    if(file->pending_size == 0)
1c007a78:	ee99                	bnez	a3,1c007a96 <__pi_read_fs_try_read+0x32>
            file->pending_event->implem.data[0] = file->first_read_size;
1c007a7a:	501c                	lw	a5,32(s0)
1c007a7c:	0bc42703          	lw	a4,188(s0)
1c007a80:	df98                	sw	a4,56(a5)
  rt_event_enqueue(task);
1c007a82:	5008                	lw	a0,32(s0)
1c007a84:	afdff0ef          	jal	ra,1c007580 <rt_event_enqueue>
}
1c007a88:	50b2                	lw	ra,44(sp)
1c007a8a:	5422                	lw	s0,40(sp)
1c007a8c:	5492                	lw	s1,36(sp)
1c007a8e:	5902                	lw	s2,32(sp)
1c007a90:	49f2                	lw	s3,28(sp)
1c007a92:	6145                	addi	sp,sp,48
1c007a94:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c007a96:	1c0084b7          	lui	s1,0x1c008
1c007a9a:	a6448493          	addi	s1,s1,-1436 # 1c007a64 <__pi_read_fs_try_read>
  task->id = PI_TASK_CALLBACK_ID;
1c007a9e:	02052e23          	sw	zero,60(a0)
  task->arg[0] = (uint32_t)callback;
1c007aa2:	d504                	sw	s1,40(a0)
    int size = __pi_fs_read(
1c007aa4:	4d50                	lw	a2,28(a0)
1c007aa6:	0a452583          	lw	a1,164(a0)
  task->arg[1] = (uint32_t)arg;
1c007aaa:	d448                	sw	a0,44(s0)
            pi_task_callback(&file->step_event, __pi_read_fs_try_read, (void *) file)
1c007aac:	02450913          	addi	s2,a0,36
  task->implem.keep = 1;
1c007ab0:	4985                	li	s3,1
    int size = __pi_fs_read(
1c007ab2:	87ca                	mv	a5,s2
1c007ab4:	05352623          	sw	s3,76(a0)
  task->done = 0;
1c007ab8:	02050c23          	sb	zero,56(a0)
1c007abc:	0078                	addi	a4,sp,12
1c007abe:	35d9                	jal	1c007984 <__pi_fs_read>
    file->pending_addr += size;
1c007ac0:	4c5c                	lw	a5,28(s0)
1c007ac2:	97aa                	add	a5,a5,a0
1c007ac4:	cc5c                	sw	a5,28(s0)
    file->pending_buffer += size;
1c007ac6:	0a442783          	lw	a5,164(s0)
1c007aca:	97aa                	add	a5,a5,a0
1c007acc:	0af42223          	sw	a5,164(s0)
    file->pending_size -= size;
1c007ad0:	0a842783          	lw	a5,168(s0)
1c007ad4:	40a78533          	sub	a0,a5,a0
    if(!pending)
1c007ad8:	47b2                	lw	a5,12(sp)
    file->pending_size -= size;
1c007ada:	0aa42423          	sw	a0,168(s0)
    if(!pending)
1c007ade:	f7cd                	bnez	a5,1c007a88 <__pi_read_fs_try_read+0x24>
        if(file->pending_size == 0)
1c007ae0:	dd49                	beqz	a0,1c007a7a <__pi_read_fs_try_read+0x16>
  task->id = PI_TASK_CALLBACK_ID;
1c007ae2:	02042e23          	sw	zero,60(s0)
  task->arg[0] = (uint32_t)callback;
1c007ae6:	d404                	sw	s1,40(s0)
  task->arg[1] = (uint32_t)arg;
1c007ae8:	d440                	sw	s0,44(s0)
  task->implem.keep = 1;
1c007aea:	05342623          	sw	s3,76(s0)
1c007aee:	02040c23          	sb	zero,56(s0)
  rt_event_enqueue(task);
1c007af2:	854a                	mv	a0,s2
1c007af4:	bf41                	j	1c007a84 <__pi_read_fs_try_read+0x20>

1c007af6 <__pi_read_fs_read_async>:
    if(file->offset + size > file->fs_file.size)
1c007af6:	495c                	lw	a5,20(a0)
1c007af8:	4558                	lw	a4,12(a0)
{
1c007afa:	1101                	addi	sp,sp,-32
1c007afc:	ce06                	sw	ra,28(sp)
    if(file->offset + size > file->fs_file.size)
1c007afe:	00c78833          	add	a6,a5,a2
1c007b02:	01077463          	bleu	a6,a4,1c007b0a <__pi_read_fs_read_async+0x14>
        real_size = file->fs_file.size - file->offset;
1c007b06:	40f70633          	sub	a2,a4,a5
    file->first_read_size = real_size;
1c007b0a:	0ac52e23          	sw	a2,188(a0)
1c007b0e:	00068a23          	sb	zero,20(a3)
    file->pending_addr = file->addr + file->offset;
1c007b12:	495c                	lw	a5,20(a0)
1c007b14:	4d18                	lw	a4,24(a0)
    file->pending_size = real_size;
1c007b16:	0ac52423          	sw	a2,168(a0)
    file->pending_event = event;
1c007b1a:	d114                	sw	a3,32(a0)
    file->pending_addr = file->addr + file->offset;
1c007b1c:	973e                	add	a4,a4,a5
    file->offset += real_size;
1c007b1e:	97b2                	add	a5,a5,a2
    file->pending_buffer = (unsigned int) buffer;
1c007b20:	0ab52223          	sw	a1,164(a0)
    file->pending_addr = file->addr + file->offset;
1c007b24:	cd58                	sw	a4,28(a0)
    file->offset += real_size;
1c007b26:	c95c                	sw	a5,20(a0)
    __pi_read_fs_try_read((void *) file);
1c007b28:	c632                	sw	a2,12(sp)
1c007b2a:	3f2d                	jal	1c007a64 <__pi_read_fs_try_read>
}
1c007b2c:	4632                	lw	a2,12(sp)
1c007b2e:	40f2                	lw	ra,28(sp)
1c007b30:	8532                	mv	a0,a2
1c007b32:	6105                	addi	sp,sp,32
1c007b34:	8082                	ret

1c007b36 <__pi_host_fs_mount>:
  int fd;
} pi_host_fs_file_t;

static int32_t __pi_host_fs_mount(struct pi_device *device)
{
  bsp_fs_data.cluster_reqs_first = NULL;
1c007b36:	1c00f7b7          	lui	a5,0x1c00f
1c007b3a:	3007a223          	sw	zero,772(a5) # 1c00f304 <bsp_fs_data>
  return 0;
}
1c007b3e:	4501                	li	a0,0
1c007b40:	8082                	ret

1c007b42 <__pi_host_fs_unmount>:

static void __pi_host_fs_unmount(struct pi_device *device)
{
}
1c007b42:	8082                	ret

1c007b44 <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007b44:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c007b48:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c007b4c:	00052023          	sw	zero,0(a0)
1c007b50:	01c00713          	li	a4,28
  if (sched->first) {
1c007b54:	c619                	beqz	a2,1c007b62 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c007b56:	435c                	lw	a5,4(a4)
1c007b58:	c388                	sw	a0,0(a5)
  sched->last = event;
1c007b5a:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c007b5c:	30069073          	csrw	mstatus,a3
}
1c007b60:	8082                	ret
    sched->first = event;
1c007b62:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c007b66:	bfd5                	j	1c007b5a <rt_event_enqueue+0x16>

1c007b68 <__pi_host_fs_seek>:
}

static int32_t __pi_host_fs_seek(pi_fs_file_t *arg, unsigned int offset)
{
  pi_host_fs_file_t *file = (pi_host_fs_file_t *)arg;
  return semihost_seek(file->fd, offset);
1c007b68:	4948                	lw	a0,20(a0)
1c007b6a:	1ca0206f          	j	1c009d34 <semihost_seek>

1c007b6e <__pi_host_fs_copy_2d_async>:
  else
    return __pi_host_fs_write_async(arg, buffer, size, task);
}

static int32_t __pi_host_fs_copy_2d_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c007b6e:	7179                	addi	sp,sp,-48
1c007b70:	d422                	sw	s0,40(sp)
1c007b72:	d226                	sw	s1,36(sp)
1c007b74:	d04a                	sw	s2,32(sp)
1c007b76:	ce4e                	sw	s3,28(sp)
1c007b78:	cc52                	sw	s4,24(sp)
1c007b7a:	ca56                	sw	s5,20(sp)
1c007b7c:	c85a                	sw	s6,16(sp)
1c007b7e:	c65e                	sw	s7,12(sp)
1c007b80:	c462                	sw	s8,8(sp)
1c007b82:	d606                	sw	ra,44(sp)
1c007b84:	89aa                	mv	s3,a0
1c007b86:	8a2e                	mv	s4,a1
1c007b88:	84b2                	mv	s1,a2
1c007b8a:	8b36                	mv	s6,a3
1c007b8c:	8bba                	mv	s7,a4
1c007b8e:	843e                	mv	s0,a5
1c007b90:	8c42                	mv	s8,a6
1c007b92:	8ac6                	mv	s5,a7
  unsigned int chunk;
  for (chunk=0; chunk<size; chunk+=length)
1c007b94:	4901                	li	s2,0
1c007b96:	03696163          	bltu	s2,s6,1c007bb8 <__pi_host_fs_copy_2d_async+0x4a>
1c007b9a:	8556                	mv	a0,s5
1c007b9c:	3765                	jal	1c007b44 <rt_event_enqueue>

    buffer = ((char *)buffer) + length;
    index += stride;
  }
  pi_task_push(task);
  return 0;
1c007b9e:	4501                	li	a0,0

error:
  pi_task_push(task);
  return -1;
}
1c007ba0:	50b2                	lw	ra,44(sp)
1c007ba2:	5422                	lw	s0,40(sp)
1c007ba4:	5492                	lw	s1,36(sp)
1c007ba6:	5902                	lw	s2,32(sp)
1c007ba8:	49f2                	lw	s3,28(sp)
1c007baa:	4a62                	lw	s4,24(sp)
1c007bac:	4ad2                	lw	s5,20(sp)
1c007bae:	4b42                	lw	s6,16(sp)
1c007bb0:	4bb2                	lw	s7,12(sp)
1c007bb2:	4c22                	lw	s8,8(sp)
1c007bb4:	6145                	addi	sp,sp,48
1c007bb6:	8082                	ret
    if (__pi_host_fs_seek(file, index))
1c007bb8:	85d2                	mv	a1,s4
1c007bba:	854e                	mv	a0,s3
1c007bbc:	05645433          	p.minu	s0,s0,s6
1c007bc0:	3765                	jal	1c007b68 <__pi_host_fs_seek>
1c007bc2:	e10d                	bnez	a0,1c007be4 <__pi_host_fs_copy_2d_async+0x76>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c007bc4:	8622                	mv	a2,s0
1c007bc6:	85a6                	mv	a1,s1
1c007bc8:	854e                	mv	a0,s3
    if (ext2loc)
1c007bca:	000c0a63          	beqz	s8,1c007bde <__pi_host_fs_copy_2d_async+0x70>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c007bce:	88fff0ef          	jal	ra,1c00745c <pi_fs_read>
1c007bd2:	00851963          	bne	a0,s0,1c007be4 <__pi_host_fs_copy_2d_async+0x76>
    buffer = ((char *)buffer) + length;
1c007bd6:	94a2                	add	s1,s1,s0
    index += stride;
1c007bd8:	9a5e                	add	s4,s4,s7
  for (chunk=0; chunk<size; chunk+=length)
1c007bda:	9922                	add	s2,s2,s0
1c007bdc:	bf6d                	j	1c007b96 <__pi_host_fs_copy_2d_async+0x28>
      if (pi_fs_write(file, buffer, length) != (int)length)
1c007bde:	8adff0ef          	jal	ra,1c00748a <pi_fs_write>
1c007be2:	bfc5                	j	1c007bd2 <__pi_host_fs_copy_2d_async+0x64>
1c007be4:	8556                	mv	a0,s5
1c007be6:	3fb9                	jal	1c007b44 <rt_event_enqueue>
  return -1;
1c007be8:	557d                	li	a0,-1
1c007bea:	bf5d                	j	1c007ba0 <__pi_host_fs_copy_2d_async+0x32>

1c007bec <__pi_host_fs_write_async>:
  int result = size - semihost_write(file->fd, buffer, size);
1c007bec:	4948                	lw	a0,20(a0)
{
1c007bee:	1101                	addi	sp,sp,-32
1c007bf0:	ce06                	sw	ra,28(sp)
1c007bf2:	cc22                	sw	s0,24(sp)
1c007bf4:	ca26                	sw	s1,20(sp)
  int result = size - semihost_write(file->fd, buffer, size);
1c007bf6:	c636                	sw	a3,12(sp)
{
1c007bf8:	84b2                	mv	s1,a2
  int result = size - semihost_write(file->fd, buffer, size);
1c007bfa:	11c020ef          	jal	ra,1c009d16 <semihost_write>
1c007bfe:	46b2                	lw	a3,12(sp)
1c007c00:	842a                	mv	s0,a0
1c007c02:	8536                	mv	a0,a3
1c007c04:	3781                	jal	1c007b44 <rt_event_enqueue>
}
1c007c06:	40848533          	sub	a0,s1,s0
1c007c0a:	40f2                	lw	ra,28(sp)
1c007c0c:	4462                	lw	s0,24(sp)
1c007c0e:	44d2                	lw	s1,20(sp)
1c007c10:	6105                	addi	sp,sp,32
1c007c12:	8082                	ret

1c007c14 <__pi_host_fs_read_async>:
  int result = size - semihost_read(file->fd, buffer, size);
1c007c14:	4948                	lw	a0,20(a0)
{
1c007c16:	1101                	addi	sp,sp,-32
1c007c18:	ce06                	sw	ra,28(sp)
1c007c1a:	cc22                	sw	s0,24(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c007c1c:	c636                	sw	a3,12(sp)
{
1c007c1e:	8432                	mv	s0,a2
  int result = size - semihost_read(file->fd, buffer, size);
1c007c20:	0d8020ef          	jal	ra,1c009cf8 <semihost_read>
  task->implem.data[0] = result;
1c007c24:	46b2                	lw	a3,12(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c007c26:	8c09                	sub	s0,s0,a0
  task->implem.data[0] = result;
1c007c28:	de80                	sw	s0,56(a3)
1c007c2a:	8536                	mv	a0,a3
1c007c2c:	3f21                	jal	1c007b44 <rt_event_enqueue>
}
1c007c2e:	8522                	mv	a0,s0
1c007c30:	40f2                	lw	ra,28(sp)
1c007c32:	4462                	lw	s0,24(sp)
1c007c34:	6105                	addi	sp,sp,32
1c007c36:	8082                	ret

1c007c38 <__pi_host_fs_copy_async>:
{
1c007c38:	1101                	addi	sp,sp,-32
1c007c3a:	cc22                	sw	s0,24(sp)
1c007c3c:	ca26                	sw	s1,20(sp)
  if (__pi_host_fs_seek(arg, index))
1c007c3e:	c636                	sw	a3,12(sp)
{
1c007c40:	84b2                	mv	s1,a2
  if (__pi_host_fs_seek(arg, index))
1c007c42:	c43a                	sw	a4,8(sp)
{
1c007c44:	ce06                	sw	ra,28(sp)
1c007c46:	842a                	mv	s0,a0
  if (__pi_host_fs_seek(arg, index))
1c007c48:	c23e                	sw	a5,4(sp)
1c007c4a:	3f39                	jal	1c007b68 <__pi_host_fs_seek>
1c007c4c:	4632                	lw	a2,12(sp)
1c007c4e:	4692                	lw	a3,4(sp)
1c007c50:	4722                	lw	a4,8(sp)
1c007c52:	ed11                	bnez	a0,1c007c6e <__pi_host_fs_copy_async+0x36>
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c007c54:	85a6                	mv	a1,s1
1c007c56:	8522                	mv	a0,s0
  if (ext2loc)
1c007c58:	c711                	beqz	a4,1c007c64 <__pi_host_fs_copy_async+0x2c>
}
1c007c5a:	4462                	lw	s0,24(sp)
1c007c5c:	40f2                	lw	ra,28(sp)
1c007c5e:	44d2                	lw	s1,20(sp)
1c007c60:	6105                	addi	sp,sp,32
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c007c62:	bf4d                	j	1c007c14 <__pi_host_fs_read_async>
}
1c007c64:	4462                	lw	s0,24(sp)
1c007c66:	40f2                	lw	ra,28(sp)
1c007c68:	44d2                	lw	s1,20(sp)
1c007c6a:	6105                	addi	sp,sp,32
    return __pi_host_fs_write_async(arg, buffer, size, task);
1c007c6c:	b741                	j	1c007bec <__pi_host_fs_write_async>
}
1c007c6e:	40f2                	lw	ra,28(sp)
1c007c70:	4462                	lw	s0,24(sp)
1c007c72:	44d2                	lw	s1,20(sp)
1c007c74:	557d                	li	a0,-1
1c007c76:	6105                	addi	sp,sp,32
1c007c78:	8082                	ret

1c007c7a <__pi_host_fs_direct_read_async>:
1c007c7a:	bf69                	j	1c007c14 <__pi_host_fs_read_async>

1c007c7c <__pi_host_fs_close>:
{
1c007c7c:	1141                	addi	sp,sp,-16
1c007c7e:	c422                	sw	s0,8(sp)
1c007c80:	842a                	mv	s0,a0
  semihost_close(file->fd);
1c007c82:	4948                	lw	a0,20(a0)
{
1c007c84:	c606                	sw	ra,12(sp)
  semihost_close(file->fd);
1c007c86:	06a020ef          	jal	ra,1c009cf0 <semihost_close>
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c007c8a:	8522                	mv	a0,s0
}
1c007c8c:	4422                	lw	s0,8(sp)
1c007c8e:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c007c90:	45e1                	li	a1,24
}
1c007c92:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c007c94:	44b0206f          	j	1c00a8de <pi_l2_free>

1c007c98 <__pi_host_fs_open>:
{
1c007c98:	1101                	addi	sp,sp,-32
1c007c9a:	ca26                	sw	s1,20(sp)
1c007c9c:	84aa                	mv	s1,a0
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c007c9e:	4561                	li	a0,24
{
1c007ca0:	c84a                	sw	s2,16(sp)
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c007ca2:	c632                	sw	a2,12(sp)
{
1c007ca4:	ce06                	sw	ra,28(sp)
1c007ca6:	cc22                	sw	s0,24(sp)
1c007ca8:	892e                	mv	s2,a1
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c007caa:	427020ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
  if (file == NULL) goto error;
1c007cae:	4632                	lw	a2,12(sp)
1c007cb0:	e909                	bnez	a0,1c007cc2 <__pi_host_fs_open+0x2a>
  return NULL;
1c007cb2:	4401                	li	s0,0
}
1c007cb4:	8522                	mv	a0,s0
1c007cb6:	40f2                	lw	ra,28(sp)
1c007cb8:	4462                	lw	s0,24(sp)
1c007cba:	44d2                	lw	s1,20(sp)
1c007cbc:	4942                	lw	s2,16(sp)
1c007cbe:	6105                	addi	sp,sp,32
1c007cc0:	8082                	ret
  file->header.fs = device;
1c007cc2:	c104                	sw	s1,0(a0)
1c007cc4:	842a                	mv	s0,a0
  file->fd = semihost_open(file_name, flags == PI_FS_FLAGS_WRITE ? 6 : flags == PI_FS_FLAGS_APPEND ? 8 : 0);
1c007cc6:	4599                	li	a1,6
1c007cc8:	00162663          	p.beqimm	a2,1,1c007cd4 <__pi_host_fs_open+0x3c>
1c007ccc:	45a1                	li	a1,8
1c007cce:	00262363          	p.beqimm	a2,2,1c007cd4 <__pi_host_fs_open+0x3c>
1c007cd2:	4581                	li	a1,0
1c007cd4:	854a                	mv	a0,s2
1c007cd6:	7ef010ef          	jal	ra,1c009cc4 <semihost_open>
1c007cda:	c848                	sw	a0,20(s0)
  if (file->fd == -1)
1c007cdc:	fdf52be3          	p.beqimm	a0,-1,1c007cb2 <__pi_host_fs_open+0x1a>
  file->header.api = (pi_fs_api_t *)device->api;
1c007ce0:	409c                	lw	a5,0(s1)
  file->header.data = file;
1c007ce2:	c400                	sw	s0,8(s0)
  file->header.fs = device;
1c007ce4:	c004                	sw	s1,0(s0)
  file->header.api = (pi_fs_api_t *)device->api;
1c007ce6:	c05c                	sw	a5,4(s0)
  file->header.fs_data = &bsp_fs_data;
1c007ce8:	1c00f7b7          	lui	a5,0x1c00f
1c007cec:	30478793          	addi	a5,a5,772 # 1c00f304 <bsp_fs_data>
1c007cf0:	c81c                	sw	a5,16(s0)
  return (pi_fs_file_t *)file;
1c007cf2:	b7c9                	j	1c007cb4 <__pi_host_fs_open+0x1c>

1c007cf4 <pi_camera_open>:
#include "bsp/camera.h"

int32_t pi_camera_open(struct pi_device *device)
{
  struct pi_camera_conf *conf = (struct pi_camera_conf *)device->config;
  pi_camera_api_t *api = (pi_camera_api_t *)conf->api;
1c007cf4:	415c                	lw	a5,4(a0)
1c007cf6:	43dc                	lw	a5,4(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c007cf8:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c007cfc:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c007cfe:	8302                	jr	t1

1c007d00 <pi_camera_capture>:
}



void pi_camera_capture(struct pi_device *device, void *buffer, uint32_t size)
{
1c007d00:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c007d02:	4785                	li	a5,1
1c007d04:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c007d06:	d43e                	sw	a5,40(sp)
}

static inline void pi_camera_capture_async(struct pi_device *device, void *buffer, uint32_t bufferlen, pi_task_t *task)
{
  pi_camera_api_t *api = (pi_camera_api_t *)device->api;
  api->capture_async(device, buffer, bufferlen, task);
1c007d08:	411c                	lw	a5,0(a0)
  task->done = 0;
1c007d0a:	00010a23          	sb	zero,20(sp)
1c007d0e:	c522                	sw	s0,136(sp)
1c007d10:	47dc                	lw	a5,12(a5)
1c007d12:	c706                	sw	ra,140(sp)
1c007d14:	c326                	sw	s1,132(sp)
  task->arg[0] = (uint32_t)0;
1c007d16:	c202                	sw	zero,4(sp)
1c007d18:	868a                	mv	a3,sp
1c007d1a:	9782                	jalr	a5
  while(!task->done)
1c007d1c:	01410783          	lb	a5,20(sp)
1c007d20:	c791                	beqz	a5,1c007d2c <pi_camera_capture+0x2c>
  pi_task_t task;
  pi_camera_capture_async(device, buffer, size, pi_task_block(&task));
  pi_task_wait_on(&task);
}
1c007d22:	40ba                	lw	ra,140(sp)
1c007d24:	442a                	lw	s0,136(sp)
1c007d26:	449a                	lw	s1,132(sp)
1c007d28:	6149                	addi	sp,sp,144
1c007d2a:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007d2c:	300474f3          	csrrci	s1,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c007d30:	4585                	li	a1,1
1c007d32:	01c00513          	li	a0,28
1c007d36:	0fb020ef          	jal	ra,1c00a630 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c007d3a:	30049073          	csrw	mstatus,s1
1c007d3e:	bff9                	j	1c007d1c <pi_camera_capture+0x1c>

1c007d40 <__camera_conf_init>:



void __camera_conf_init(struct pi_camera_conf *conf)
{
}
1c007d40:	8082                	ret

1c007d42 <__himax_reg_write>:
static void __himax_reg_write(himax_t *himax, uint16_t addr, uint8_t value)
{
  if (is_i2c_active())
  {
    himax->i2c_req.value = value;
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c007d42:	00859793          	slli	a5,a1,0x8
1c007d46:	81a1                	srli	a1,a1,0x8
1c007d48:	8ddd                	or	a1,a1,a5
    himax->i2c_req.value = value;
1c007d4a:	02c50f23          	sb	a2,62(a0)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c007d4e:	02b51e23          	sh	a1,60(a0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 3, PI_I2C_XFER_STOP);
1c007d52:	4681                	li	a3,0
1c007d54:	03c50593          	addi	a1,a0,60
1c007d58:	460d                	li	a2,3
1c007d5a:	03050513          	addi	a0,a0,48
1c007d5e:	5660406f          	j	1c00c2c4 <pi_i2c_write>

1c007d62 <__himax_init_regs>:
}



static void __himax_init_regs(himax_t *himax)
{
1c007d62:	1101                	addi	sp,sp,-32
1c007d64:	cc22                	sw	s0,24(sp)
1c007d66:	1c00f437          	lui	s0,0x1c00f
1c007d6a:	ca26                	sw	s1,20(sp)
1c007d6c:	c84a                	sw	s2,16(sp)
1c007d6e:	c64e                	sw	s3,12(sp)
1c007d70:	ce06                	sw	ra,28(sp)
1c007d72:	89aa                	mv	s3,a0
1c007d74:	b4c40413          	addi	s0,s0,-1204 # 1c00eb4c <__himax_reg_init>
  int32_t i;
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c007d78:	4481                	li	s1,0
1c007d7a:	04700913          	li	s2,71
  {
    __himax_reg_write(himax, __himax_reg_init[i].addr, __himax_reg_init[i].data);
1c007d7e:	00244603          	lbu	a2,2(s0)
1c007d82:	0044558b          	p.lhu	a1,4(s0!)
1c007d86:	854e                	mv	a0,s3
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c007d88:	0485                	addi	s1,s1,1
    __himax_reg_write(himax, __himax_reg_init[i].addr, __himax_reg_init[i].data);
1c007d8a:	3f65                	jal	1c007d42 <__himax_reg_write>
  for(i=0; i<(int32_t)(sizeof(__himax_reg_init)/sizeof(himax_reg_init_t)); i++)
1c007d8c:	ff2499e3          	bne	s1,s2,1c007d7e <__himax_init_regs+0x1c>
  }
}
1c007d90:	40f2                	lw	ra,28(sp)
1c007d92:	4462                	lw	s0,24(sp)
1c007d94:	44d2                	lw	s1,20(sp)
1c007d96:	4942                	lw	s2,16(sp)
1c007d98:	49b2                	lw	s3,12(sp)
1c007d9a:	6105                	addi	sp,sp,32
1c007d9c:	8082                	ret

1c007d9e <__himax_set_qqvga>:
    __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
    pi_time_wait_us(50);
  }
}

static void __himax_set_qqvga(himax_t *himax){
1c007d9e:	1141                	addi	sp,sp,-16
  __himax_reg_write(himax, HIMAX_BINNING_MODE, 0x03);
1c007da0:	460d                	li	a2,3
1c007da2:	39000593          	li	a1,912
static void __himax_set_qqvga(himax_t *himax){
1c007da6:	c606                	sw	ra,12(sp)
1c007da8:	c422                	sw	s0,8(sp)
1c007daa:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_BINNING_MODE, 0x03);
1c007dac:	3f59                	jal	1c007d42 <__himax_reg_write>
  __himax_reg_write(himax, HIMAX_READOUT_X, 0x03);
1c007dae:	8522                	mv	a0,s0
1c007db0:	460d                	li	a2,3
1c007db2:	38300593          	li	a1,899
1c007db6:	3771                	jal	1c007d42 <__himax_reg_write>
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c007db8:	8522                	mv	a0,s0
}
1c007dba:	4422                	lw	s0,8(sp)
1c007dbc:	40b2                	lw	ra,12(sp)
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c007dbe:	460d                	li	a2,3
1c007dc0:	38700593          	li	a1,903
}
1c007dc4:	0141                	addi	sp,sp,16
  __himax_reg_write(himax, HIMAX_READOUT_Y, 0x03);
1c007dc6:	bfb5                	j	1c007d42 <__himax_reg_write>

1c007dc8 <__himax_reg_set>:
}



int32_t __himax_reg_set(struct pi_device *device, uint32_t addr, uint8_t *value)
{
1c007dc8:	1141                	addi	sp,sp,-16
1c007dca:	c606                	sw	ra,12(sp)
  himax_t *himax = (himax_t *)device->data;
  __himax_reg_write(himax, addr, *value);
1c007dcc:	4508                	lw	a0,8(a0)
1c007dce:	00064603          	lbu	a2,0(a2)
1c007dd2:	1005d5b3          	p.exthz	a1,a1
1c007dd6:	37b5                	jal	1c007d42 <__himax_reg_write>
  return 0;
}
1c007dd8:	40b2                	lw	ra,12(sp)
1c007dda:	4501                	li	a0,0
1c007ddc:	0141                	addi	sp,sp,16
1c007dde:	8082                	ret

1c007de0 <__himax_reg_get>:



int32_t __himax_reg_get(struct pi_device *device, uint32_t addr, uint8_t *value)
{
1c007de0:	1141                	addi	sp,sp,-16
1c007de2:	c422                	sw	s0,8(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c007de4:	01000737          	lui	a4,0x1000
  himax_t *himax = (himax_t *)device->data;
1c007de8:	4500                	lw	s0,8(a0)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c007dea:	f0070713          	addi	a4,a4,-256 # ffff00 <__L2+0xf7ff00>
1c007dee:	00859793          	slli	a5,a1,0x8
1c007df2:	8ff9                	and	a5,a5,a4
1c007df4:	ce8595b3          	p.extractu	a1,a1,7,8
{
1c007df8:	c606                	sw	ra,12(sp)
1c007dfa:	c226                	sw	s1,4(sp)
1c007dfc:	c04a                	sw	s2,0(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c007dfe:	8ddd                	or	a1,a1,a5
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c007e00:	03040493          	addi	s1,s0,48
{
1c007e04:	8932                	mv	s2,a2
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c007e06:	02b41e23          	sh	a1,60(s0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c007e0a:	4685                	li	a3,1
1c007e0c:	03c40593          	addi	a1,s0,60
1c007e10:	4609                	li	a2,2
1c007e12:	8526                	mv	a0,s1
1c007e14:	4b0040ef          	jal	ra,1c00c2c4 <pi_i2c_write>
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c007e18:	04040593          	addi	a1,s0,64
1c007e1c:	8526                	mv	a0,s1
1c007e1e:	4681                	li	a3,0
1c007e20:	4605                	li	a2,1
1c007e22:	582040ef          	jal	ra,1c00c3a4 <pi_i2c_read>
    return *(volatile uint8_t *)&himax->i2c_read_value;
1c007e26:	04044783          	lbu	a5,64(s0)
  *value = __himax_reg_read(himax, addr);
  return 0;
}
1c007e2a:	40b2                	lw	ra,12(sp)
1c007e2c:	4422                	lw	s0,8(sp)
  *value = __himax_reg_read(himax, addr);
1c007e2e:	00f90023          	sb	a5,0(s2)
}
1c007e32:	4492                	lw	s1,4(sp)
1c007e34:	4902                	lw	s2,0(sp)
1c007e36:	4501                	li	a0,0
1c007e38:	0141                	addi	sp,sp,16
1c007e3a:	8082                	ret

1c007e3c <__himax_capture_async>:
  pi_cpi_capture_async(&himax->cpi_device, buffer, bufferlen, task);
1c007e3c:	4508                	lw	a0,8(a0)
1c007e3e:	02450513          	addi	a0,a0,36
1c007e42:	30c0406f          	j	1c00c14e <pi_cpi_capture_async>

1c007e46 <__himax_standby>:
  if (himax->is_awake)
1c007e46:	4178                	lw	a4,68(a0)
1c007e48:	cf19                	beqz	a4,1c007e66 <__himax_standby+0x20>
{
1c007e4a:	1141                	addi	sp,sp,-16
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c007e4c:	4601                	li	a2,0
1c007e4e:	10000593          	li	a1,256
{
1c007e52:	c422                	sw	s0,8(sp)
1c007e54:	c606                	sw	ra,12(sp)
1c007e56:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c007e58:	35ed                	jal	1c007d42 <__himax_reg_write>
}
1c007e5a:	40b2                	lw	ra,12(sp)
    himax->is_awake = 0;
1c007e5c:	04042223          	sw	zero,68(s0)
}
1c007e60:	4422                	lw	s0,8(sp)
1c007e62:	0141                	addi	sp,sp,16
1c007e64:	8082                	ret
1c007e66:	8082                	ret

1c007e68 <__himax_close>:
{
1c007e68:	1141                	addi	sp,sp,-16
1c007e6a:	c422                	sw	s0,8(sp)
  himax_t *himax = (himax_t *)device->data;
1c007e6c:	4500                	lw	s0,8(a0)
{
1c007e6e:	c606                	sw	ra,12(sp)
  __himax_standby(himax);
1c007e70:	8522                	mv	a0,s0
1c007e72:	3fd1                	jal	1c007e46 <__himax_standby>
  pi_cpi_close(&himax->cpi_device);
1c007e74:	02440513          	addi	a0,s0,36
1c007e78:	28e040ef          	jal	ra,1c00c106 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c007e7c:	8522                	mv	a0,s0
}
1c007e7e:	4422                	lw	s0,8(sp)
1c007e80:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c007e82:	04800593          	li	a1,72
}
1c007e86:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c007e88:	2570206f          	j	1c00a8de <pi_l2_free>

1c007e8c <__himax_reset>:
{
1c007e8c:	1101                	addi	sp,sp,-32
1c007e8e:	cc22                	sw	s0,24(sp)
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c007e90:	4605                	li	a2,1
{
1c007e92:	842a                	mv	s0,a0
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c007e94:	10300593          	li	a1,259
{
1c007e98:	ca26                	sw	s1,20(sp)
1c007e9a:	c84a                	sw	s2,16(sp)
1c007e9c:	c64e                	sw	s3,12(sp)
1c007e9e:	c452                	sw	s4,8(sp)
1c007ea0:	ce06                	sw	ra,28(sp)
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c007ea2:	4a05                	li	s4,1
  __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c007ea4:	3d79                	jal	1c007d42 <__himax_reg_write>
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c007ea6:	03040493          	addi	s1,s0,48
1c007eaa:	03c40993          	addi	s3,s0,60
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c007eae:	04040913          	addi	s2,s0,64
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c007eb2:	4685                	li	a3,1
1c007eb4:	4609                	li	a2,2
1c007eb6:	85ce                	mv	a1,s3
    himax->i2c_req.addr = ((addr >> 8) & 0xff) | ((addr & 0xff) << 8);
1c007eb8:	03441e23          	sh	s4,60(s0)
    pi_i2c_write(&himax->i2c_device, (uint8_t *)&himax->i2c_req, 2, PI_I2C_XFER_NO_STOP);
1c007ebc:	8526                	mv	a0,s1
1c007ebe:	406040ef          	jal	ra,1c00c2c4 <pi_i2c_write>
    pi_i2c_read(&himax->i2c_device, (uint8_t *)&himax->i2c_read_value, 1, PI_I2C_XFER_STOP);
1c007ec2:	4681                	li	a3,0
1c007ec4:	4605                	li	a2,1
1c007ec6:	85ca                	mv	a1,s2
1c007ec8:	8526                	mv	a0,s1
1c007eca:	4da040ef          	jal	ra,1c00c3a4 <pi_i2c_read>
    return *(volatile uint8_t *)&himax->i2c_read_value;
1c007ece:	04044783          	lbu	a5,64(s0)
1c007ed2:	0ff7f793          	andi	a5,a5,255
  while (__himax_reg_read(himax, HIMAX_MODE_SELECT) != HIMAX_STANDBY)
1c007ed6:	eb89                	bnez	a5,1c007ee8 <__himax_reset+0x5c>
}
1c007ed8:	40f2                	lw	ra,28(sp)
1c007eda:	4462                	lw	s0,24(sp)
1c007edc:	44d2                	lw	s1,20(sp)
1c007ede:	4942                	lw	s2,16(sp)
1c007ee0:	49b2                	lw	s3,12(sp)
1c007ee2:	4a22                	lw	s4,8(sp)
1c007ee4:	6105                	addi	sp,sp,32
1c007ee6:	8082                	ret
    __himax_reg_write(himax, HIMAX_SW_RESET, HIMAX_RESET);
1c007ee8:	8522                	mv	a0,s0
1c007eea:	4605                	li	a2,1
1c007eec:	10300593          	li	a1,259
1c007ef0:	3d89                	jal	1c007d42 <__himax_reg_write>
    pi_time_wait_us(50);
1c007ef2:	03200513          	li	a0,50
1c007ef6:	2c7020ef          	jal	ra,1c00a9bc <pi_time_wait_us>
1c007efa:	bf65                	j	1c007eb2 <__himax_reset+0x26>

1c007efc <__himax_open>:
{
1c007efc:	7179                	addi	sp,sp,-48
1c007efe:	d226                	sw	s1,36(sp)
1c007f00:	d04a                	sw	s2,32(sp)
  struct pi_himax_conf *conf = (struct pi_himax_conf *)device->config;
1c007f02:	4144                	lw	s1,4(a0)
{
1c007f04:	892a                	mv	s2,a0
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c007f06:	04800513          	li	a0,72
{
1c007f0a:	d606                	sw	ra,44(sp)
1c007f0c:	d422                	sw	s0,40(sp)
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c007f0e:	1c3020ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
  if (himax == NULL) return -1;
1c007f12:	12050f63          	beqz	a0,1c008050 <__himax_open+0x154>
  memcpy(&himax->conf, conf, sizeof(*conf));
1c007f16:	02400613          	li	a2,36
1c007f1a:	85a6                	mv	a1,s1
1c007f1c:	842a                	mv	s0,a0
1c007f1e:	3ec050ef          	jal	ra,1c00d30a <memcpy>
  if (bsp_himax_open(conf))
1c007f22:	8526                	mv	a0,s1
  device->data = (void *)himax;
1c007f24:	00892423          	sw	s0,8(s2)
  if (bsp_himax_open(conf))
1c007f28:	6c3010ef          	jal	ra,1c009dea <bsp_himax_open>
1c007f2c:	10051d63          	bnez	a0,1c008046 <__himax_open+0x14a>
  pi_cpi_conf_init(&cpi_conf);
1c007f30:	0028                	addi	a0,sp,8
1c007f32:	160040ef          	jal	ra,1c00c092 <pi_cpi_conf_init>
  cpi_conf.itf = conf->cpi_itf;
1c007f36:	449c                	lw	a5,8(s1)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c007f38:	02440913          	addi	s2,s0,36
1c007f3c:	854a                	mv	a0,s2
1c007f3e:	002c                	addi	a1,sp,8
  cpi_conf.itf = conf->cpi_itf;
1c007f40:	00f10623          	sb	a5,12(sp)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c007f44:	06c020ef          	jal	ra,1c009fb0 <pi_open_from_conf>
  if (pi_cpi_open(&himax->cpi_device))
1c007f48:	854a                	mv	a0,s2
1c007f4a:	152040ef          	jal	ra,1c00c09c <pi_cpi_open>
1c007f4e:	0e051c63          	bnez	a0,1c008046 <__himax_open+0x14a>
  pi_i2c_conf_init(&i2c_conf);
1c007f52:	0808                	addi	a0,sp,16
1c007f54:	58c040ef          	jal	ra,1c00c4e0 <pi_i2c_conf_init>
  i2c_conf.cs = 0x48;
1c007f58:	04800793          	li	a5,72
1c007f5c:	00f11b23          	sh	a5,22(sp)
  i2c_conf.itf = conf->i2c_itf;
1c007f60:	44dc                	lw	a5,12(s1)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c007f62:	03040493          	addi	s1,s0,48
1c007f66:	8526                	mv	a0,s1
1c007f68:	080c                	addi	a1,sp,16
  i2c_conf.itf = conf->i2c_itf;
1c007f6a:	00f10a23          	sb	a5,20(sp)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c007f6e:	042020ef          	jal	ra,1c009fb0 <pi_open_from_conf>
  if (pi_i2c_open(&himax->i2c_device))
1c007f72:	8526                	mv	a0,s1
1c007f74:	454040ef          	jal	ra,1c00c3c8 <pi_i2c_open>
1c007f78:	e561                	bnez	a0,1c008040 <__himax_open+0x144>
1c007f7a:	5450                	lw	a2,44(s0)
static inline void udma_cpi_cam_tx_cfg_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_TX_CFG_OFFSET, value); }

static inline uint32_t udma_cpi_cam_tx_initcfg_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_TX_INITCFG_OFFSET); }
static inline void udma_cpi_cam_tx_initcfg_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_TX_INITCFG_OFFSET, value); }

static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c007f7c:	4618                	lw	a4,8(a2)
}

static inline void pi_cpi_set_format(struct pi_device *device, pi_cpi_format_e format)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c007f7e:	02072783          	lw	a5,32(a4)
  reg.format = format;
1c007f82:	4695                	li	a3,5
1c007f84:	c486a7b3          	p.insert	a5,a3,2,8
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c007f88:	02f72023          	sw	a5,32(a4)
  if(himax->conf.format>PI_CAMERA_QQVGA){
1c007f8c:	4858                	lw	a4,20(s0)
1c007f8e:	4789                	li	a5,2
1c007f90:	0ae7f163          	bleu	a4,a5,1c008032 <__himax_open+0x136>
      rowlen = himax->conf.format;
1c007f94:	100757b3          	p.exthz	a5,a4

static inline void pi_cpi_set_rowlen(struct pi_device *device, uint16_t rowlen)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;
  /* the rowlen should be the weidth of each frame devided by the channel size in byte */
  udma_cpi_cam_cfg_size_set(cpi->base, UDMA_CPI_CAM_CFG_SIZE_ROWLEN(
1c007f98:	01c64703          	lbu	a4,28(a2)
1c007f9c:	4614                	lw	a3,8(a2)
1c007f9e:	e311                	bnez	a4,1c007fa2 <__himax_open+0xa6>
1c007fa0:	4705                	li	a4,1
1c007fa2:	02e7c7b3          	div	a5,a5,a4
1c007fa6:	17fd                	addi	a5,a5,-1
1c007fa8:	07c2                	slli	a5,a5,0x10

static inline uint32_t udma_cpi_cam_cfg_ur_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_UR_OFFSET); }
static inline void udma_cpi_cam_cfg_ur_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_UR_OFFSET, value); }

static inline uint32_t udma_cpi_cam_cfg_size_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_SIZE_OFFSET); }
static inline void udma_cpi_cam_cfg_size_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_SIZE_OFFSET, value); }
1c007faa:	02f6a623          	sw	a5,44(a3)
  if (himax->conf.roi.slice_en != 0)
1c007fae:	02044783          	lbu	a5,32(s0)
1c007fb2:	cfa9                	beqz	a5,1c00800c <__himax_open+0x110>
    pi_cpi_set_slice(&himax->cpi_device, himax->conf.roi.x>>div,
1c007fb4:	01845703          	lhu	a4,24(s0)
            himax->conf.roi.y,
1c007fb8:	01a45803          	lhu	a6,26(s0)
    pi_cpi_set_slice(&himax->cpi_device, himax->conf.roi.x>>div,
1c007fbc:	01c45683          	lhu	a3,28(s0)
            himax->conf.roi.h);
1c007fc0:	01e45783          	lhu	a5,30(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c007fc4:	4608                	lw	a0,8(a2)

static inline void pi_cpi_set_slice(struct pi_device *device, uint32_t x, uint32_t y, uint32_t w, uint32_t h)
{
  rt_cpi_t *cpi = (rt_cpi_t *)device->data;

  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c007fc6:	02052883          	lw	a7,32(a0)
  reg.frameslice_en = w != 0;
1c007fca:	00d035b3          	snez	a1,a3
1c007fce:	c075a8b3          	p.insert	a7,a1,0,7
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c007fd2:	03152023          	sw	a7,32(a0)
  udma_cpi_cam_cfg_glob_set(cpi->base, reg.raw);

  if (w)
1c007fd6:	ca9d                	beqz	a3,1c00800c <__himax_open+0x110>
  {
    udma_cpi_cam_cfg_ll_set(cpi->base,
      UDMA_CPI_CAM_CFG_LL_FRAMESLICE_LLX(x/(cpi->datasize ? cpi->datasize : 1)) |
1c007fd8:	01c64603          	lbu	a2,28(a2)
1c007fdc:	85b2                	mv	a1,a2
1c007fde:	e211                	bnez	a2,1c007fe2 <__himax_open+0xe6>
1c007fe0:	4605                	li	a2,1
1c007fe2:	02c75633          	divu	a2,a4,a2
      UDMA_CPI_CAM_CFG_LL_FRAMESLICE_LLY(y)
1c007fe6:	01081893          	slli	a7,a6,0x10
    udma_cpi_cam_cfg_ll_set(cpi->base,
1c007fea:	01166633          	or	a2,a2,a7
static inline void udma_cpi_cam_cfg_ll_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_LL_OFFSET, value); }
1c007fee:	02c52223          	sw	a2,36(a0)
    );

    udma_cpi_cam_cfg_ur_set(cpi->base,
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URX((x + w)/(cpi->datasize ? cpi->datasize : 1) - 1) |
1c007ff2:	96ba                	add	a3,a3,a4
1c007ff4:	872e                	mv	a4,a1
1c007ff6:	e191                	bnez	a1,1c007ffa <__himax_open+0xfe>
1c007ff8:	4705                	li	a4,1
1c007ffa:	02e6d733          	divu	a4,a3,a4
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URY(y + h - 1)
1c007ffe:	97c2                	add	a5,a5,a6
1c008000:	17fd                	addi	a5,a5,-1
1c008002:	07c2                	slli	a5,a5,0x10
      UDMA_CPI_CAM_CFG_UR_FRAMESLICE_URX((x + w)/(cpi->datasize ? cpi->datasize : 1) - 1) |
1c008004:	177d                	addi	a4,a4,-1
    udma_cpi_cam_cfg_ur_set(cpi->base,
1c008006:	8fd9                	or	a5,a5,a4
static inline void udma_cpi_cam_cfg_ur_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_UR_OFFSET, value); }
1c008008:	02f52423          	sw	a5,40(a0)
  __himax_reset(himax);
1c00800c:	8522                	mv	a0,s0
  himax->is_awake = 0;
1c00800e:	04042223          	sw	zero,68(s0)
  __himax_reset(himax);
1c008012:	3dad                	jal	1c007e8c <__himax_reset>
  __himax_init_regs(himax);
1c008014:	8522                	mv	a0,s0
1c008016:	33b1                	jal	1c007d62 <__himax_init_regs>
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c008018:	485c                	lw	a5,20(s0)
  return 0;
1c00801a:	4481                	li	s1,0
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c00801c:	0027b463          	p.bneimm	a5,2,1c008024 <__himax_open+0x128>
    __himax_set_qqvga(himax);
1c008020:	8522                	mv	a0,s0
1c008022:	3bb5                	jal	1c007d9e <__himax_set_qqvga>
}
1c008024:	50b2                	lw	ra,44(sp)
1c008026:	5422                	lw	s0,40(sp)
1c008028:	8526                	mv	a0,s1
1c00802a:	5902                	lw	s2,32(sp)
1c00802c:	5492                	lw	s1,36(sp)
1c00802e:	6145                	addi	sp,sp,48
1c008030:	8082                	ret
      rowlen = 160+2;
1c008032:	0a200793          	li	a5,162
  }else if(himax->conf.format==PI_CAMERA_QQVGA){
1c008036:	f62721e3          	p.beqimm	a4,2,1c007f98 <__himax_open+0x9c>
      rowlen = 320+4;
1c00803a:	14400793          	li	a5,324
1c00803e:	bfa9                	j	1c007f98 <__himax_open+0x9c>
  pi_cpi_close(&himax->cpi_device);
1c008040:	854a                	mv	a0,s2
1c008042:	0c4040ef          	jal	ra,1c00c106 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c008046:	04800593          	li	a1,72
1c00804a:	8522                	mv	a0,s0
1c00804c:	093020ef          	jal	ra,1c00a8de <pi_l2_free>
  if (himax == NULL) return -1;
1c008050:	54fd                	li	s1,-1
1c008052:	bfc9                	j	1c008024 <__himax_open+0x128>

1c008054 <__himax_reopen>:
{
1c008054:	7139                	addi	sp,sp,-64
1c008056:	da26                	sw	s1,52(sp)
1c008058:	d84a                	sw	s2,48(sp)
  struct pi_himax_conf *conf = (struct pi_himax_conf *)device->config;
1c00805a:	4144                	lw	s1,4(a0)
{
1c00805c:	892a                	mv	s2,a0
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c00805e:	04800513          	li	a0,72
{
1c008062:	d64e                	sw	s3,44(sp)
1c008064:	de06                	sw	ra,60(sp)
1c008066:	dc22                	sw	s0,56(sp)
1c008068:	89ae                	mv	s3,a1
  himax_t *himax = (himax_t *)pmsis_l2_malloc(sizeof(himax_t));
1c00806a:	067020ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
  if (himax == NULL) return -1;
1c00806e:	c955                	beqz	a0,1c008122 <__himax_reopen+0xce>
  memcpy(&himax->conf, conf, sizeof(*conf));
1c008070:	02400613          	li	a2,36
1c008074:	85a6                	mv	a1,s1
1c008076:	842a                	mv	s0,a0
1c008078:	292050ef          	jal	ra,1c00d30a <memcpy>
  if (bsp_himax_open(conf))
1c00807c:	8526                	mv	a0,s1
  device->data = (void *)himax;
1c00807e:	00892423          	sw	s0,8(s2)
  if (bsp_himax_open(conf))
1c008082:	569010ef          	jal	ra,1c009dea <bsp_himax_open>
1c008086:	e949                	bnez	a0,1c008118 <__himax_reopen+0xc4>
  pi_cpi_conf_init(&cpi_conf);
1c008088:	0028                	addi	a0,sp,8
1c00808a:	008040ef          	jal	ra,1c00c092 <pi_cpi_conf_init>
  cpi_conf.itf = conf->cpi_itf;
1c00808e:	449c                	lw	a5,8(s1)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c008090:	02440913          	addi	s2,s0,36
1c008094:	854a                	mv	a0,s2
1c008096:	002c                	addi	a1,sp,8
  cpi_conf.itf = conf->cpi_itf;
1c008098:	00f10623          	sb	a5,12(sp)
  pi_open_from_conf(&himax->cpi_device, &cpi_conf);
1c00809c:	715010ef          	jal	ra,1c009fb0 <pi_open_from_conf>
  if (pi_cpi_open(&himax->cpi_device))
1c0080a0:	854a                	mv	a0,s2
1c0080a2:	7fb030ef          	jal	ra,1c00c09c <pi_cpi_open>
1c0080a6:	e92d                	bnez	a0,1c008118 <__himax_reopen+0xc4>
  pi_i2c_conf_init(&i2c_conf);
1c0080a8:	0808                	addi	a0,sp,16
1c0080aa:	436040ef          	jal	ra,1c00c4e0 <pi_i2c_conf_init>
  i2c_conf.cs = 0x48;
1c0080ae:	04800793          	li	a5,72
1c0080b2:	00f11b23          	sh	a5,22(sp)
  i2c_conf.itf = conf->i2c_itf;
1c0080b6:	44dc                	lw	a5,12(s1)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c0080b8:	03040493          	addi	s1,s0,48
1c0080bc:	8526                	mv	a0,s1
1c0080be:	080c                	addi	a1,sp,16
  i2c_conf.itf = conf->i2c_itf;
1c0080c0:	00f10a23          	sb	a5,20(sp)
  pi_open_from_conf(&himax->i2c_device, &i2c_conf);
1c0080c4:	6ed010ef          	jal	ra,1c009fb0 <pi_open_from_conf>
  if (pi_i2c_open(&himax->i2c_device))
1c0080c8:	8526                	mv	a0,s1
1c0080ca:	2fe040ef          	jal	ra,1c00c3c8 <pi_i2c_open>
1c0080ce:	e131                	bnez	a0,1c008112 <__himax_reopen+0xbe>
1c0080d0:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c0080d2:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c0080d4:	02072783          	lw	a5,32(a4)
  reg.format = format;
1c0080d8:	4695                	li	a3,5
1c0080da:	c486a7b3          	p.insert	a5,a3,2,8
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c0080de:	02f72023          	sw	a5,32(a4)
  himax->is_awake = 0;
1c0080e2:	04042223          	sw	zero,68(s0)
  if(opts != PI_CAMERA_OPT_NO_REG_INIT){
1c0080e6:	0019a763          	p.beqimm	s3,1,1c0080f4 <__himax_reopen+0xa0>
    __himax_reset(himax);
1c0080ea:	8522                	mv	a0,s0
1c0080ec:	3345                	jal	1c007e8c <__himax_reset>
    __himax_init_regs(himax);
1c0080ee:	8522                	mv	a0,s0
1c0080f0:	c73ff0ef          	jal	ra,1c007d62 <__himax_init_regs>
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c0080f4:	485c                	lw	a5,20(s0)
  return 0;
1c0080f6:	4481                	li	s1,0
  if(himax->conf.format==PI_CAMERA_QQVGA){
1c0080f8:	0027b563          	p.bneimm	a5,2,1c008102 <__himax_reopen+0xae>
    __himax_set_qqvga(himax);
1c0080fc:	8522                	mv	a0,s0
1c0080fe:	ca1ff0ef          	jal	ra,1c007d9e <__himax_set_qqvga>
}
1c008102:	50f2                	lw	ra,60(sp)
1c008104:	5462                	lw	s0,56(sp)
1c008106:	8526                	mv	a0,s1
1c008108:	5942                	lw	s2,48(sp)
1c00810a:	54d2                	lw	s1,52(sp)
1c00810c:	59b2                	lw	s3,44(sp)
1c00810e:	6121                	addi	sp,sp,64
1c008110:	8082                	ret
  pi_cpi_close(&himax->cpi_device);
1c008112:	854a                	mv	a0,s2
1c008114:	7f3030ef          	jal	ra,1c00c106 <pi_cpi_close>
  pmsis_l2_malloc_free(himax, sizeof(himax_t));
1c008118:	04800593          	li	a1,72
1c00811c:	8522                	mv	a0,s0
1c00811e:	7c0020ef          	jal	ra,1c00a8de <pi_l2_free>
  if (himax == NULL) return -1;
1c008122:	54fd                	li	s1,-1
1c008124:	bff9                	j	1c008102 <__himax_reopen+0xae>

1c008126 <__himax_control>:
{
1c008126:	1141                	addi	sp,sp,-16
1c008128:	c606                	sw	ra,12(sp)
1c00812a:	c422                	sw	s0,8(sp)
1c00812c:	c226                	sw	s1,4(sp)
1c00812e:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008130:	300474f3          	csrrci	s1,mstatus,8
  switch (cmd)
1c008134:	471d                	li	a4,7
  himax_t *himax = (himax_t *)device->data;
1c008136:	4500                	lw	s0,8(a0)
  switch (cmd)
1c008138:	00b76d63          	bltu	a4,a1,1c008152 <__himax_control+0x2c>
1c00813c:	87ae                	mv	a5,a1
1c00813e:	1c00f737          	lui	a4,0x1c00f
1c008142:	078a                	slli	a5,a5,0x2
1c008144:	b2c70713          	addi	a4,a4,-1236 # 1c00eb2c <IntegerExpLUT+0x18>
1c008148:	20f77783          	p.lw	a5,a5(a4)
1c00814c:	85b2                	mv	a1,a2
1c00814e:	8782                	jr	a5
      __himax_reopen(device, open_opt);
1c008150:	3711                	jal	1c008054 <__himax_reopen>
  __builtin_pulp_spr_write(reg, val);
1c008152:	30049073          	csrw	mstatus,s1
}
1c008156:	40b2                	lw	ra,12(sp)
1c008158:	4422                	lw	s0,8(sp)
1c00815a:	4492                	lw	s1,4(sp)
1c00815c:	4902                	lw	s2,0(sp)
1c00815e:	4501                	li	a0,0
1c008160:	0141                	addi	sp,sp,16
1c008162:	8082                	ret
1c008164:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c008166:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c008168:	02072783          	lw	a5,32(a4)
  reg.en = 1;
1c00816c:	4905                	li	s2,1
1c00816e:	c1f927b3          	p.insert	a5,s2,0,31
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c008172:	02f72023          	sw	a5,32(a4)
  if (!himax->is_awake)
1c008176:	407c                	lw	a5,68(s0)
1c008178:	ffe9                	bnez	a5,1c008152 <__himax_control+0x2c>
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c00817a:	4605                	li	a2,1
1c00817c:	10000593          	li	a1,256
1c008180:	8522                	mv	a0,s0
1c008182:	bc1ff0ef          	jal	ra,1c007d42 <__himax_reg_write>
    himax->is_awake = 1;
1c008186:	05242223          	sw	s2,68(s0)
1c00818a:	b7e1                	j	1c008152 <__himax_control+0x2c>
      __himax_standby(himax);
1c00818c:	8522                	mv	a0,s0
1c00818e:	cb9ff0ef          	jal	ra,1c007e46 <__himax_standby>
1c008192:	545c                	lw	a5,44(s0)
static inline uint32_t udma_cpi_cam_cfg_glob_get(uint32_t base) { return ARCHI_READ(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET); }
1c008194:	4798                	lw	a4,8(a5)
  udma_cpi_cam_cfg_glob_t reg = { .raw =  udma_cpi_cam_cfg_glob_get(cpi->base) };
1c008196:	02072783          	lw	a5,32(a4)
  reg.en = 0;
1c00819a:	c1f027b3          	p.insert	a5,zero,0,31
static inline void udma_cpi_cam_cfg_glob_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, UDMA_CPI_CAM_CFG_GLOB_OFFSET, value); }
1c00819e:	02f72023          	sw	a5,32(a4)
1c0081a2:	bf45                	j	1c008152 <__himax_control+0x2c>
  if (!himax->is_awake)
1c0081a4:	407c                	lw	a5,68(s0)
1c0081a6:	eb89                	bnez	a5,1c0081b8 <__himax_control+0x92>
  __himax_reg_write(himax, HIMAX_MODE_SELECT, mode);
1c0081a8:	4605                	li	a2,1
1c0081aa:	10000593          	li	a1,256
1c0081ae:	8522                	mv	a0,s0
1c0081b0:	b93ff0ef          	jal	ra,1c007d42 <__himax_reg_write>
    himax->is_awake = 1;
1c0081b4:	4785                	li	a5,1
1c0081b6:	c07c                	sw	a5,68(s0)
    pi_time_wait_us(1000000);
1c0081b8:	000f4537          	lui	a0,0xf4
1c0081bc:	24050513          	addi	a0,a0,576 # f4240 <__L2+0x74240>
1c0081c0:	7fc020ef          	jal	ra,1c00a9bc <pi_time_wait_us>
    __himax_standby(himax);
1c0081c4:	8522                	mv	a0,s0
1c0081c6:	c81ff0ef          	jal	ra,1c007e46 <__himax_standby>
1c0081ca:	b761                	j	1c008152 <__himax_control+0x2c>

1c0081cc <pi_himax_conf_init>:
  .reg_set        = &__himax_reg_set,
  .reg_get        = &__himax_reg_get
};

void pi_himax_conf_init(struct pi_himax_conf *conf)
{
1c0081cc:	1141                	addi	sp,sp,-16
  conf->camera.api = &himax_api;
1c0081ce:	1c00f7b7          	lui	a5,0x1c00f
{
1c0081d2:	c422                	sw	s0,8(sp)
1c0081d4:	c606                	sw	ra,12(sp)
  conf->camera.api = &himax_api;
1c0081d6:	f8078793          	addi	a5,a5,-128 # 1c00ef80 <himax_api>
1c0081da:	c15c                	sw	a5,4(a0)
  conf->skip_pads_config = 0;
  conf->format = PI_CAMERA_QVGA; //By Default QVGA
1c0081dc:	4785                	li	a5,1
  conf->skip_pads_config = 0;
1c0081de:	00050823          	sb	zero,16(a0)
  conf->format = PI_CAMERA_QVGA; //By Default QVGA
1c0081e2:	c95c                	sw	a5,20(a0)
  conf->roi.slice_en = 0; //Disable the ROI by default.
1c0081e4:	02050023          	sb	zero,32(a0)
{
1c0081e8:	842a                	mv	s0,a0
  bsp_himax_conf_init(conf);
1c0081ea:	3e7010ef          	jal	ra,1c009dd0 <bsp_himax_conf_init>
  __camera_conf_init(&conf->camera);
1c0081ee:	8522                	mv	a0,s0
}
1c0081f0:	4422                	lw	s0,8(sp)
1c0081f2:	40b2                	lw	ra,12(sp)
1c0081f4:	0141                	addi	sp,sp,16
  __camera_conf_init(&conf->camera);
1c0081f6:	b4bff06f          	j	1c007d40 <__camera_conf_init>

1c0081fa <__rt_event_enqueue>:
  if (sched->first) {
1c0081fa:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c0081fe:	00052023          	sw	zero,0(a0)
1c008202:	01c00713          	li	a4,28
  if (sched->first) {
1c008206:	c689                	beqz	a3,1c008210 <__rt_event_enqueue+0x16>
    sched->last->next = event;
1c008208:	435c                	lw	a5,4(a4)
1c00820a:	c388                	sw	a0,0(a5)
  sched->last = event;
1c00820c:	c348                	sw	a0,4(a4)
}
1c00820e:	8082                	ret
    sched->first = event;
1c008210:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c008214:	bfe5                	j	1c00820c <__rt_event_enqueue+0x12>

1c008216 <hyperflash_ioctl>:



static int32_t hyperflash_ioctl(struct pi_device *device, uint32_t cmd, void *arg)
{
  switch (cmd)
1c008216:	e589                	bnez	a1,1c008220 <hyperflash_ioctl+0xa>
  {
    case PI_FLASH_IOCTL_INFO:
    {
      struct pi_flash_info *flash_info = (struct pi_flash_info *)arg;
      flash_info->sector_size = 1<<18;
1c008218:	000407b7          	lui	a5,0x40
1c00821c:	c21c                	sw	a5,0(a2)
      // TODO find a way to know what is on the flash, as they may be a boot binary
      flash_info->flash_start = flash_info->sector_size;
1c00821e:	c25c                	sw	a5,4(a2)
    }
  }
  return 0;
}
1c008220:	4501                	li	a0,0
1c008222:	8082                	ret

1c008224 <hyperflash_stall_task>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008224:	30047373          	csrrci	t1,mstatus,8

    restore_irq(irq);
    return 1;
  }
#else
  if (hyperflash->pending_task != NULL)
1c008228:	01852e03          	lw	t3,24(a0)
1c00822c:	020e0763          	beqz	t3,1c00825a <hyperflash_stall_task+0x36>
  {
    task->implem.data[0] = id;
1c008230:	dd90                	sw	a2,56(a1)
    task->implem.data[1] = arg0;
1c008232:	ddd4                	sw	a3,60(a1)
    task->implem.data[2] = arg1;
1c008234:	c1b8                	sw	a4,64(a1)
    task->implem.data[3] = arg2;
1c008236:	c1fc                	sw	a5,68(a1)
    task->implem.data[4] = arg3;
1c008238:	0505a423          	sw	a6,72(a1)
    task->implem.data[5] = arg4;
1c00823c:	0515a623          	sw	a7,76(a1)

    if (hyperflash->waiting_first)
1c008240:	491c                	lw	a5,16(a0)
1c008242:	cb91                	beqz	a5,1c008256 <hyperflash_stall_task+0x32>
      hyperflash->waiting_last->implem.next = task;
1c008244:	495c                	lw	a5,20(a0)
1c008246:	cfcc                	sw	a1,28(a5)
    else
      hyperflash->waiting_first = task;

    hyperflash->waiting_last = task;
1c008248:	c94c                	sw	a1,20(a0)
    task->implem.next = NULL;
1c00824a:	0005ae23          	sw	zero,28(a1)
  __builtin_pulp_spr_write(reg, val);
1c00824e:	30031073          	csrw	mstatus,t1

    restore_irq(irq);
    return 1;
1c008252:	4505                	li	a0,1
1c008254:	8082                	ret
      hyperflash->waiting_first = task;
1c008256:	c90c                	sw	a1,16(a0)
1c008258:	bfc5                	j	1c008248 <hyperflash_stall_task+0x24>
  }
#endif  /* PMSIS_DRIVERS */

  hyperflash->pending_task = task;
1c00825a:	cd0c                	sw	a1,24(a0)
1c00825c:	30031073          	csrw	mstatus,t1

  restore_irq(irq);
  return 0;
1c008260:	4501                	li	a0,0
}
1c008262:	8082                	ret

1c008264 <hyperflash_read_2d_async>:
{
1c008264:	1101                	addi	sp,sp,-32
1c008266:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008268:	4500                	lw	s0,8(a0)
{
1c00826a:	ca26                	sw	s1,20(sp)
1c00826c:	84ae                	mv	s1,a1
1c00826e:	c84a                	sw	s2,16(sp)
1c008270:	c64e                	sw	s3,12(sp)
1c008272:	c452                	sw	s4,8(sp)
1c008274:	c256                	sw	s5,4(sp)
1c008276:	c05a                	sw	s6,0(sp)
1c008278:	8932                	mv	s2,a2
1c00827a:	8b2a                	mv	s6,a0
1c00827c:	89b6                	mv	s3,a3
1c00827e:	8a3a                	mv	s4,a4
1c008280:	8abe                	mv	s5,a5
1c008282:	85c2                	mv	a1,a6
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c008284:	88be                	mv	a7,a5
1c008286:	883a                	mv	a6,a4
1c008288:	87b6                	mv	a5,a3
1c00828a:	8732                	mv	a4,a2
1c00828c:	86a6                	mv	a3,s1
1c00828e:	4619                	li	a2,6
1c008290:	8522                	mv	a0,s0
{
1c008292:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ_2D, addr, (uint32_t)data, size, stride, length))
1c008294:	3f41                	jal	1c008224 <hyperflash_stall_task>
1c008296:	e129                	bnez	a0,1c0082d8 <hyperflash_read_2d_async+0x74>
  task->arg[0] = (uint32_t)callback;
1c008298:	1c0087b7          	lui	a5,0x1c008
1c00829c:	4de78793          	addi	a5,a5,1246 # 1c0084de <hyperflash_handle_pending_task>
  task->done = 0;
1c0082a0:	02040e23          	sb	zero,60(s0)
1c0082a4:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c0082a6:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c0082a8:	03642823          	sw	s6,48(s0)
  task->implem.keep = 1;
1c0082ac:	c83c                	sw	a5,80(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c0082ae:	04042023          	sw	zero,64(s0)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0082b2:	02840813          	addi	a6,s0,40
1c0082b6:	8522                	mv	a0,s0
}
1c0082b8:	4462                	lw	s0,24(sp)
1c0082ba:	40f2                	lw	ra,28(sp)
1c0082bc:	4b02                	lw	s6,0(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0082be:	87d6                	mv	a5,s5
1c0082c0:	8752                	mv	a4,s4
}
1c0082c2:	4a92                	lw	s5,4(sp)
1c0082c4:	4a22                	lw	s4,8(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0082c6:	86ce                	mv	a3,s3
1c0082c8:	864a                	mv	a2,s2
}
1c0082ca:	49b2                	lw	s3,12(sp)
1c0082cc:	4942                	lw	s2,16(sp)
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0082ce:	85a6                	mv	a1,s1
}
1c0082d0:	44d2                	lw	s1,20(sp)
1c0082d2:	6105                	addi	sp,sp,32
  pi_hyper_read_2d_async(&hyperflash->hyper_device, addr, data, size, stride, length, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0082d4:	5530306f          	j	1c00c026 <pi_hyper_read_2d_async>
}
1c0082d8:	40f2                	lw	ra,28(sp)
1c0082da:	4462                	lw	s0,24(sp)
1c0082dc:	44d2                	lw	s1,20(sp)
1c0082de:	4942                	lw	s2,16(sp)
1c0082e0:	49b2                	lw	s3,12(sp)
1c0082e2:	4a22                	lw	s4,8(sp)
1c0082e4:	4a92                	lw	s5,4(sp)
1c0082e6:	4b02                	lw	s6,0(sp)
1c0082e8:	6105                	addi	sp,sp,32
1c0082ea:	8082                	ret

1c0082ec <hyperflash_copy_2d_async>:



static int hyperflash_copy_2d_async(struct pi_device *device, uint32_t flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  if (!ext2loc)
1c0082ec:	00080a63          	beqz	a6,1c008300 <hyperflash_copy_2d_async+0x14>
{
1c0082f0:	1141                	addi	sp,sp,-16
1c0082f2:	8846                	mv	a6,a7
1c0082f4:	c606                	sw	ra,12(sp)
    return -1;

  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c0082f6:	37bd                	jal	1c008264 <hyperflash_read_2d_async>

  return 0;
}
1c0082f8:	40b2                	lw	ra,12(sp)
  return 0;
1c0082fa:	4501                	li	a0,0
}
1c0082fc:	0141                	addi	sp,sp,16
1c0082fe:	8082                	ret
    return -1;
1c008300:	557d                	li	a0,-1
}
1c008302:	8082                	ret

1c008304 <hyperflash_set_reg_exec>:
  hyperflash->udma_buffer[0] = value;
1c008304:	00c51623          	sh	a2,12(a0)
  pi_hyper_write(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 2);
1c008308:	4689                	li	a3,2
1c00830a:	00c50613          	addi	a2,a0,12
1c00830e:	1710306f          	j	1c00bc7e <pi_hyper_write>

1c008312 <hyperflash_erase_sector_async>:
{
1c008312:	1101                	addi	sp,sp,-32
1c008314:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008316:	4500                	lw	s0,8(a0)
{
1c008318:	c64e                	sw	s3,12(sp)
1c00831a:	89ae                	mv	s3,a1
1c00831c:	c84a                	sw	s2,16(sp)
1c00831e:	85b2                	mv	a1,a2
1c008320:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c008322:	4881                	li	a7,0
1c008324:	4801                	li	a6,0
1c008326:	4781                	li	a5,0
1c008328:	4701                	li	a4,0
1c00832a:	86ce                	mv	a3,s3
1c00832c:	4609                	li	a2,2
1c00832e:	8522                	mv	a0,s0
{
1c008330:	ce06                	sw	ra,28(sp)
1c008332:	ca26                	sw	s1,20(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_SECTOR, addr, 0, 0, 0, 0))
1c008334:	3dc5                	jal	1c008224 <hyperflash_stall_task>
1c008336:	ed3d                	bnez	a0,1c0083b4 <hyperflash_erase_sector_async+0xa2>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c008338:	6485                	lui	s1,0x1
1c00833a:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c00833e:	8522                	mv	a0,s0
1c008340:	0aa00613          	li	a2,170
1c008344:	37c1                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c008346:	8522                	mv	a0,s0
1c008348:	05500613          	li	a2,85
1c00834c:	55400593          	li	a1,1364
1c008350:	3f55                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c008352:	aaa48593          	addi	a1,s1,-1366
1c008356:	8522                	mv	a0,s0
1c008358:	08000613          	li	a2,128
1c00835c:	3765                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c00835e:	aaa48593          	addi	a1,s1,-1366
1c008362:	8522                	mv	a0,s0
1c008364:	0aa00613          	li	a2,170
1c008368:	3f71                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c00836a:	8522                	mv	a0,s0
1c00836c:	05500613          	li	a2,85
1c008370:	55400593          	li	a1,1364
1c008374:	3f41                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, addr, 0x30);
1c008376:	85ce                	mv	a1,s3
1c008378:	8522                	mv	a0,s0
1c00837a:	03000613          	li	a2,48
1c00837e:	3759                	jal	1c008304 <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c008380:	1c0097b7          	lui	a5,0x1c009
1c008384:	af878793          	addi	a5,a5,-1288 # 1c008af8 <hyperflash_check_erase>
1c008388:	02040e23          	sb	zero,60(s0)
1c00838c:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00838e:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c008390:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c008394:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c008398:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c00839a:	02840513          	addi	a0,s0,40
}
1c00839e:	4462                	lw	s0,24(sp)
1c0083a0:	40f2                	lw	ra,28(sp)
1c0083a2:	44d2                	lw	s1,20(sp)
1c0083a4:	4942                	lw	s2,16(sp)
1c0083a6:	49b2                	lw	s3,12(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c0083a8:	6589                	lui	a1,0x2
1c0083aa:	71058593          	addi	a1,a1,1808 # 2710 <__rt_stack_size+0x1f10>
}
1c0083ae:	6105                	addi	sp,sp,32
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 10000);
1c0083b0:	33e0206f          	j	1c00a6ee <pi_task_push_delayed_us>
}
1c0083b4:	40f2                	lw	ra,28(sp)
1c0083b6:	4462                	lw	s0,24(sp)
1c0083b8:	44d2                	lw	s1,20(sp)
1c0083ba:	4942                	lw	s2,16(sp)
1c0083bc:	49b2                	lw	s3,12(sp)
1c0083be:	6105                	addi	sp,sp,32
1c0083c0:	8082                	ret

1c0083c2 <hyperflash_erase_chip_async>:
{
1c0083c2:	1141                	addi	sp,sp,-16
1c0083c4:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0083c6:	4500                	lw	s0,8(a0)
{
1c0083c8:	c04a                	sw	s2,0(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c0083ca:	4881                	li	a7,0
{
1c0083cc:	892a                	mv	s2,a0
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c0083ce:	4801                	li	a6,0
1c0083d0:	4781                	li	a5,0
1c0083d2:	4701                	li	a4,0
1c0083d4:	4681                	li	a3,0
1c0083d6:	4605                	li	a2,1
1c0083d8:	8522                	mv	a0,s0
{
1c0083da:	c606                	sw	ra,12(sp)
1c0083dc:	c226                	sw	s1,4(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_ERASE_CHIP, 0, 0, 0, 0, 0))
1c0083de:	3599                	jal	1c008224 <hyperflash_stall_task>
1c0083e0:	ed35                	bnez	a0,1c00845c <hyperflash_erase_chip_async+0x9a>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c0083e2:	6485                	lui	s1,0x1
1c0083e4:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c0083e8:	8522                	mv	a0,s0
1c0083ea:	0aa00613          	li	a2,170
1c0083ee:	3f19                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c0083f0:	8522                	mv	a0,s0
1c0083f2:	05500613          	li	a2,85
1c0083f6:	55400593          	li	a1,1364
1c0083fa:	3729                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x80);
1c0083fc:	aaa48593          	addi	a1,s1,-1366
1c008400:	8522                	mv	a0,s0
1c008402:	08000613          	li	a2,128
1c008406:	3dfd                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c008408:	aaa48593          	addi	a1,s1,-1366
1c00840c:	8522                	mv	a0,s0
1c00840e:	0aa00613          	li	a2,170
1c008412:	3dcd                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c008414:	8522                	mv	a0,s0
1c008416:	05500613          	li	a2,85
1c00841a:	55400593          	li	a1,1364
1c00841e:	35dd                	jal	1c008304 <hyperflash_set_reg_exec>
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x10);
1c008420:	aaa48593          	addi	a1,s1,-1366
1c008424:	8522                	mv	a0,s0
1c008426:	4641                	li	a2,16
1c008428:	3df1                	jal	1c008304 <hyperflash_set_reg_exec>
  task->arg[0] = (uint32_t)callback;
1c00842a:	1c0097b7          	lui	a5,0x1c009
1c00842e:	af878793          	addi	a5,a5,-1288 # 1c008af8 <hyperflash_check_erase>
1c008432:	02040e23          	sb	zero,60(s0)
1c008436:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c008438:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00843a:	03242823          	sw	s2,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00843e:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c008442:	c83c                	sw	a5,80(s0)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c008444:	02840513          	addi	a0,s0,40
}
1c008448:	4422                	lw	s0,8(sp)
1c00844a:	40b2                	lw	ra,12(sp)
1c00844c:	4492                	lw	s1,4(sp)
1c00844e:	4902                	lw	s2,0(sp)
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c008450:	65e1                	lui	a1,0x18
1c008452:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c008456:	0141                	addi	sp,sp,16
  pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c008458:	2960206f          	j	1c00a6ee <pi_task_push_delayed_us>
}
1c00845c:	40b2                	lw	ra,12(sp)
1c00845e:	4422                	lw	s0,8(sp)
1c008460:	4492                	lw	s1,4(sp)
1c008462:	4902                	lw	s2,0(sp)
1c008464:	0141                	addi	sp,sp,16
1c008466:	8082                	ret

1c008468 <hyperflash_read_async>:
{
1c008468:	1101                	addi	sp,sp,-32
1c00846a:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c00846c:	4500                	lw	s0,8(a0)
{
1c00846e:	ca26                	sw	s1,20(sp)
1c008470:	84ae                	mv	s1,a1
1c008472:	c84a                	sw	s2,16(sp)
1c008474:	c64e                	sw	s3,12(sp)
1c008476:	c452                	sw	s4,8(sp)
1c008478:	8932                	mv	s2,a2
1c00847a:	8a2a                	mv	s4,a0
1c00847c:	89b6                	mv	s3,a3
1c00847e:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c008480:	87b6                	mv	a5,a3
1c008482:	8732                	mv	a4,a2
1c008484:	4881                	li	a7,0
1c008486:	4801                	li	a6,0
1c008488:	86a6                	mv	a3,s1
1c00848a:	4615                	li	a2,5
1c00848c:	8522                	mv	a0,s0
{
1c00848e:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_READ, addr, (uint32_t)data, size, 0, 0))
1c008490:	d95ff0ef          	jal	ra,1c008224 <hyperflash_stall_task>
1c008494:	ed0d                	bnez	a0,1c0084ce <hyperflash_read_async+0x66>
  task->arg[0] = (uint32_t)callback;
1c008496:	1c0087b7          	lui	a5,0x1c008
1c00849a:	4de78793          	addi	a5,a5,1246 # 1c0084de <hyperflash_handle_pending_task>
1c00849e:	02040e23          	sb	zero,60(s0)
1c0084a2:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c0084a4:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c0084a6:	03442823          	sw	s4,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c0084aa:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c0084ae:	c83c                	sw	a5,80(s0)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0084b0:	02840713          	addi	a4,s0,40
1c0084b4:	8522                	mv	a0,s0
}
1c0084b6:	4462                	lw	s0,24(sp)
1c0084b8:	40f2                	lw	ra,28(sp)
1c0084ba:	4a22                	lw	s4,8(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0084bc:	86ce                	mv	a3,s3
1c0084be:	864a                	mv	a2,s2
}
1c0084c0:	49b2                	lw	s3,12(sp)
1c0084c2:	4942                	lw	s2,16(sp)
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0084c4:	85a6                	mv	a1,s1
}
1c0084c6:	44d2                	lw	s1,20(sp)
1c0084c8:	6105                	addi	sp,sp,32
  pi_hyper_read_async(&hyperflash->hyper_device, addr, data, size, pi_task_callback(&hyperflash->task, hyperflash_handle_pending_task, device));
1c0084ca:	7640306f          	j	1c00bc2e <pi_hyper_read_async>
}
1c0084ce:	40f2                	lw	ra,28(sp)
1c0084d0:	4462                	lw	s0,24(sp)
1c0084d2:	44d2                	lw	s1,20(sp)
1c0084d4:	4942                	lw	s2,16(sp)
1c0084d6:	49b2                	lw	s3,12(sp)
1c0084d8:	4a22                	lw	s4,8(sp)
1c0084da:	6105                	addi	sp,sp,32
1c0084dc:	8082                	ret

1c0084de <hyperflash_handle_pending_task>:
{
1c0084de:	1101                	addi	sp,sp,-32
1c0084e0:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0084e2:	4504                	lw	s1,8(a0)
{
1c0084e4:	cc22                	sw	s0,24(sp)
1c0084e6:	842a                	mv	s0,a0
1c0084e8:	ce06                	sw	ra,28(sp)
1c0084ea:	c84a                	sw	s2,16(sp)
1c0084ec:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0084ee:	30047973          	csrrci	s2,mstatus,8
  pi_task_enqueue(hyperflash->pending_task);
1c0084f2:	4c88                	lw	a0,24(s1)
1c0084f4:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c0084f8:	d03ff0ef          	jal	ra,1c0081fa <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c0084fc:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->waiting_first;
1c008500:	4898                	lw	a4,16(s1)
  hyperflash->pending_task = NULL;
1c008502:	0004ac23          	sw	zero,24(s1)
  if (task)
1c008506:	c319                	beqz	a4,1c00850c <hyperflash_handle_pending_task+0x2e>
    hyperflash->waiting_first = task->implem.next;
1c008508:	4f5c                	lw	a5,28(a4)
1c00850a:	c89c                	sw	a5,16(s1)
1c00850c:	30091073          	csrw	mstatus,s2
  if (task)
1c008510:	c369                	beqz	a4,1c0085d2 <hyperflash_handle_pending_task+0xf4>
    if (task->implem.data[0] == STALL_TASK_PROGRAM)
1c008512:	5f1c                	lw	a5,56(a4)
1c008514:	ef81                	bnez	a5,1c00852c <hyperflash_handle_pending_task+0x4e>
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c008516:	8522                	mv	a0,s0
}
1c008518:	4462                	lw	s0,24(sp)
1c00851a:	40f2                	lw	ra,28(sp)
1c00851c:	44d2                	lw	s1,20(sp)
1c00851e:	4942                	lw	s2,16(sp)
1c008520:	49b2                	lw	s3,12(sp)
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c008522:	4374                	lw	a3,68(a4)
1c008524:	4330                	lw	a2,64(a4)
1c008526:	5f4c                	lw	a1,60(a4)
}
1c008528:	6105                	addi	sp,sp,32
      hyperflash_program_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c00852a:	ac21                	j	1c008742 <hyperflash_program_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_CHIP)
1c00852c:	0017bb63          	p.bneimm	a5,1,1c008542 <hyperflash_handle_pending_task+0x64>
      hyperflash_erase_chip_async(device, task);
1c008530:	8522                	mv	a0,s0
}
1c008532:	4462                	lw	s0,24(sp)
1c008534:	40f2                	lw	ra,28(sp)
1c008536:	44d2                	lw	s1,20(sp)
1c008538:	4942                	lw	s2,16(sp)
1c00853a:	49b2                	lw	s3,12(sp)
      hyperflash_erase_chip_async(device, task);
1c00853c:	85ba                	mv	a1,a4
}
1c00853e:	6105                	addi	sp,sp,32
      hyperflash_erase_chip_async(device, task);
1c008540:	b549                	j	1c0083c2 <hyperflash_erase_chip_async>
    else if (task->implem.data[0] == STALL_TASK_ERASE_SECTOR)
1c008542:	0027bd63          	p.bneimm	a5,2,1c00855c <hyperflash_handle_pending_task+0x7e>
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c008546:	8522                	mv	a0,s0
}
1c008548:	4462                	lw	s0,24(sp)
1c00854a:	40f2                	lw	ra,28(sp)
1c00854c:	44d2                	lw	s1,20(sp)
1c00854e:	4942                	lw	s2,16(sp)
1c008550:	49b2                	lw	s3,12(sp)
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c008552:	5f4c                	lw	a1,60(a4)
1c008554:	863a                	mv	a2,a4
}
1c008556:	6105                	addi	sp,sp,32
      hyperflash_erase_sector_async(device, task->implem.data[1], task);
1c008558:	dbbff06f          	j	1c008312 <hyperflash_erase_sector_async>
    else if (task->implem.data[0] == STALL_TASK_REG_SET)
1c00855c:	0037bd63          	p.bneimm	a5,3,1c008576 <hyperflash_handle_pending_task+0x98>
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c008560:	8522                	mv	a0,s0
}
1c008562:	4462                	lw	s0,24(sp)
1c008564:	40f2                	lw	ra,28(sp)
1c008566:	44d2                	lw	s1,20(sp)
1c008568:	4942                	lw	s2,16(sp)
1c00856a:	49b2                	lw	s3,12(sp)
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00856c:	4330                	lw	a2,64(a4)
1c00856e:	5f4c                	lw	a1,60(a4)
1c008570:	86ba                	mv	a3,a4
}
1c008572:	6105                	addi	sp,sp,32
      hyperflash_reg_set_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c008574:	a0e9                	j	1c00863e <hyperflash_reg_set_async>
    else if (task->implem.data[0] == STALL_TASK_REG_GET)
1c008576:	0047bd63          	p.bneimm	a5,4,1c008590 <hyperflash_handle_pending_task+0xb2>
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00857a:	8522                	mv	a0,s0
}
1c00857c:	4462                	lw	s0,24(sp)
1c00857e:	40f2                	lw	ra,28(sp)
1c008580:	44d2                	lw	s1,20(sp)
1c008582:	4942                	lw	s2,16(sp)
1c008584:	49b2                	lw	s3,12(sp)
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c008586:	4330                	lw	a2,64(a4)
1c008588:	5f4c                	lw	a1,60(a4)
1c00858a:	86ba                	mv	a3,a4
}
1c00858c:	6105                	addi	sp,sp,32
      hyperflash_reg_get_async(device, task->implem.data[1], (uint8_t *)task->implem.data[2], task);
1c00858e:	a889                	j	1c0085e0 <hyperflash_reg_get_async>
    else if (task->implem.data[0] == STALL_TASK_READ)
1c008590:	0057bd63          	p.bneimm	a5,5,1c0085aa <hyperflash_handle_pending_task+0xcc>
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c008594:	8522                	mv	a0,s0
}
1c008596:	4462                	lw	s0,24(sp)
1c008598:	40f2                	lw	ra,28(sp)
1c00859a:	44d2                	lw	s1,20(sp)
1c00859c:	4942                	lw	s2,16(sp)
1c00859e:	49b2                	lw	s3,12(sp)
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c0085a0:	4374                	lw	a3,68(a4)
1c0085a2:	4330                	lw	a2,64(a4)
1c0085a4:	5f4c                	lw	a1,60(a4)
}
1c0085a6:	6105                	addi	sp,sp,32
      hyperflash_read_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task);
1c0085a8:	b5c1                	j	1c008468 <hyperflash_read_async>
    else if (task->implem.data[0] == STALL_TASK_READ_2D)
1c0085aa:	0267b463          	p.bneimm	a5,6,1c0085d2 <hyperflash_handle_pending_task+0xf4>
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c0085ae:	883a                	mv	a6,a4
1c0085b0:	8522                	mv	a0,s0
}
1c0085b2:	4462                	lw	s0,24(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c0085b4:	477c                	lw	a5,76(a4)
}
1c0085b6:	40f2                	lw	ra,28(sp)
1c0085b8:	44d2                	lw	s1,20(sp)
1c0085ba:	4942                	lw	s2,16(sp)
1c0085bc:	49b2                	lw	s3,12(sp)
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c0085be:	4738                	lw	a4,72(a4)
1c0085c0:	04482683          	lw	a3,68(a6)
1c0085c4:	04082603          	lw	a2,64(a6)
1c0085c8:	03c82583          	lw	a1,60(a6)
}
1c0085cc:	6105                	addi	sp,sp,32
      hyperflash_read_2d_async(device, task->implem.data[1], (void *)task->implem.data[2], task->implem.data[3], task->implem.data[4], task->implem.data[5], task);
1c0085ce:	c97ff06f          	j	1c008264 <hyperflash_read_2d_async>
}
1c0085d2:	40f2                	lw	ra,28(sp)
1c0085d4:	4462                	lw	s0,24(sp)
1c0085d6:	44d2                	lw	s1,20(sp)
1c0085d8:	4942                	lw	s2,16(sp)
1c0085da:	49b2                	lw	s3,12(sp)
1c0085dc:	6105                	addi	sp,sp,32
1c0085de:	8082                	ret

1c0085e0 <hyperflash_reg_get_async>:
{
1c0085e0:	1101                	addi	sp,sp,-32
1c0085e2:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0085e4:	4500                	lw	s0,8(a0)
{
1c0085e6:	c64e                	sw	s3,12(sp)
1c0085e8:	89ae                	mv	s3,a1
1c0085ea:	ca26                	sw	s1,20(sp)
1c0085ec:	c84a                	sw	s2,16(sp)
1c0085ee:	84aa                	mv	s1,a0
1c0085f0:	8932                	mv	s2,a2
1c0085f2:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c0085f4:	8732                	mv	a4,a2
1c0085f6:	4881                	li	a7,0
1c0085f8:	4801                	li	a6,0
1c0085fa:	4781                	li	a5,0
1c0085fc:	86ce                	mv	a3,s3
1c0085fe:	4611                	li	a2,4
1c008600:	8522                	mv	a0,s0
{
1c008602:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_GET, addr, (uint32_t)value, 0, 0, 0))
1c008604:	c21ff0ef          	jal	ra,1c008224 <hyperflash_stall_task>
1c008608:	e505                	bnez	a0,1c008630 <hyperflash_reg_get_async+0x50>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c00860a:	8522                	mv	a0,s0
1c00860c:	00c40613          	addi	a2,s0,12
1c008610:	85ce                	mv	a1,s3
1c008612:	4691                	li	a3,4
1c008614:	630030ef          	jal	ra,1c00bc44 <pi_hyper_read>
  return hyperflash->udma_buffer[0];
1c008618:	00c45783          	lhu	a5,12(s0)
}
1c00861c:	4462                	lw	s0,24(sp)
1c00861e:	40f2                	lw	ra,28(sp)
  *(uint16_t *)value = hyperflash_get_reg_exec(hyperflash, addr);
1c008620:	00f91023          	sh	a5,0(s2)
}
1c008624:	49b2                	lw	s3,12(sp)
1c008626:	4942                	lw	s2,16(sp)
  hyperflash_handle_pending_task(device);
1c008628:	8526                	mv	a0,s1
}
1c00862a:	44d2                	lw	s1,20(sp)
1c00862c:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c00862e:	bd45                	j	1c0084de <hyperflash_handle_pending_task>
}
1c008630:	40f2                	lw	ra,28(sp)
1c008632:	4462                	lw	s0,24(sp)
1c008634:	44d2                	lw	s1,20(sp)
1c008636:	4942                	lw	s2,16(sp)
1c008638:	49b2                	lw	s3,12(sp)
1c00863a:	6105                	addi	sp,sp,32
1c00863c:	8082                	ret

1c00863e <hyperflash_reg_set_async>:
{
1c00863e:	1101                	addi	sp,sp,-32
1c008640:	ca26                	sw	s1,20(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008642:	4504                	lw	s1,8(a0)
{
1c008644:	c84a                	sw	s2,16(sp)
1c008646:	892e                	mv	s2,a1
1c008648:	cc22                	sw	s0,24(sp)
1c00864a:	c64e                	sw	s3,12(sp)
1c00864c:	842a                	mv	s0,a0
1c00864e:	89b2                	mv	s3,a2
1c008650:	85b6                	mv	a1,a3
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c008652:	8732                	mv	a4,a2
1c008654:	4881                	li	a7,0
1c008656:	4801                	li	a6,0
1c008658:	4781                	li	a5,0
1c00865a:	86ca                	mv	a3,s2
1c00865c:	460d                	li	a2,3
1c00865e:	8526                	mv	a0,s1
{
1c008660:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_REG_SET, addr, (uint32_t)value, 0, 0, 0))
1c008662:	bc3ff0ef          	jal	ra,1c008224 <hyperflash_stall_task>
1c008666:	ed19                	bnez	a0,1c008684 <hyperflash_reg_set_async+0x46>
  hyperflash_set_reg_exec(hyperflash, addr, *(uint16_t *)value);
1c008668:	0009d603          	lhu	a2,0(s3)
1c00866c:	8526                	mv	a0,s1
1c00866e:	85ca                	mv	a1,s2
1c008670:	c95ff0ef          	jal	ra,1c008304 <hyperflash_set_reg_exec>
  hyperflash_handle_pending_task(device);
1c008674:	8522                	mv	a0,s0
}
1c008676:	4462                	lw	s0,24(sp)
1c008678:	40f2                	lw	ra,28(sp)
1c00867a:	44d2                	lw	s1,20(sp)
1c00867c:	4942                	lw	s2,16(sp)
1c00867e:	49b2                	lw	s3,12(sp)
1c008680:	6105                	addi	sp,sp,32
  hyperflash_handle_pending_task(device);
1c008682:	bdb1                	j	1c0084de <hyperflash_handle_pending_task>
}
1c008684:	40f2                	lw	ra,28(sp)
1c008686:	4462                	lw	s0,24(sp)
1c008688:	44d2                	lw	s1,20(sp)
1c00868a:	4942                	lw	s2,16(sp)
1c00868c:	49b2                	lw	s3,12(sp)
1c00868e:	6105                	addi	sp,sp,32
1c008690:	8082                	ret

1c008692 <hyperflash_program_resume>:
{
1c008692:	1101                	addi	sp,sp,-32
1c008694:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008696:	4500                	lw	s0,8(a0)
{
1c008698:	ce06                	sw	ra,28(sp)
1c00869a:	ca26                	sw	s1,20(sp)
  if (hyperflash->pending_size == 0)
1c00869c:	13042683          	lw	a3,304(s0)
{
1c0086a0:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_size == 0)
1c0086a2:	e699                	bnez	a3,1c0086b0 <hyperflash_program_resume+0x1e>
}
1c0086a4:	4462                	lw	s0,24(sp)
1c0086a6:	40f2                	lw	ra,28(sp)
1c0086a8:	44d2                	lw	s1,20(sp)
1c0086aa:	4942                	lw	s2,16(sp)
1c0086ac:	6105                	addi	sp,sp,32
    hyperflash_handle_pending_task(device);
1c0086ae:	bd05                	j	1c0084de <hyperflash_handle_pending_task>
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c0086b0:	12842783          	lw	a5,296(s0)
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c0086b4:	6905                	lui	s2,0x1
1c0086b6:	84aa                	mv	s1,a0
    unsigned int iter_size = 512 - (hyperflash->pending_hyper_addr & 0x1ff);
1c0086b8:	ec97b733          	p.bclr	a4,a5,22,9
1c0086bc:	20000793          	li	a5,512
1c0086c0:	8f99                	sub	a5,a5,a4
1c0086c2:	04f6d6b3          	p.minu	a3,a3,a5
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xAA);
1c0086c6:	aaa90593          	addi	a1,s2,-1366 # aaa <__rt_stack_size+0x2aa>
1c0086ca:	8522                	mv	a0,s0
1c0086cc:	0aa00613          	li	a2,170
1c0086d0:	c636                	sw	a3,12(sp)
1c0086d2:	c33ff0ef          	jal	ra,1c008304 <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x2AA<<1, 0x55);
1c0086d6:	8522                	mv	a0,s0
1c0086d8:	05500613          	li	a2,85
1c0086dc:	55400593          	li	a1,1364
1c0086e0:	c25ff0ef          	jal	ra,1c008304 <hyperflash_set_reg_exec>
    hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0xA0);
1c0086e4:	aaa90593          	addi	a1,s2,-1366
1c0086e8:	8522                	mv	a0,s0
1c0086ea:	0a000613          	li	a2,160
1c0086ee:	c17ff0ef          	jal	ra,1c008304 <hyperflash_set_reg_exec>
    hyperflash->pending_hyper_addr += iter_size;
1c0086f2:	46b2                	lw	a3,12(sp)
    uint32_t hyper_addr = hyperflash->pending_hyper_addr;
1c0086f4:	12842583          	lw	a1,296(s0)
    uint32_t data = hyperflash->pending_data;
1c0086f8:	12c42603          	lw	a2,300(s0)
  task->done = 0;
1c0086fc:	02040e23          	sb	zero,60(s0)
    hyperflash->pending_hyper_addr += iter_size;
1c008700:	00d587b3          	add	a5,a1,a3
1c008704:	12f42423          	sw	a5,296(s0)
    hyperflash->pending_data += iter_size;
1c008708:	00d607b3          	add	a5,a2,a3
1c00870c:	12f42623          	sw	a5,300(s0)
    hyperflash->pending_size -= iter_size;
1c008710:	13042783          	lw	a5,304(s0)
  task->arg[1] = (uint32_t)arg;
1c008714:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c008716:	04042023          	sw	zero,64(s0)
1c00871a:	8f95                	sub	a5,a5,a3
1c00871c:	12f42823          	sw	a5,304(s0)
  task->arg[0] = (uint32_t)callback;
1c008720:	1c0097b7          	lui	a5,0x1c009
1c008724:	b4a78793          	addi	a5,a5,-1206 # 1c008b4a <hyperflash_check_program>
1c008728:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c00872a:	4785                	li	a5,1
1c00872c:	c83c                	sw	a5,80(s0)
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c00872e:	02840713          	addi	a4,s0,40
1c008732:	8522                	mv	a0,s0
}
1c008734:	4462                	lw	s0,24(sp)
1c008736:	40f2                	lw	ra,28(sp)
1c008738:	44d2                	lw	s1,20(sp)
1c00873a:	4942                	lw	s2,16(sp)
1c00873c:	6105                	addi	sp,sp,32
    pi_hyper_write_async(&hyperflash->hyper_device, hyper_addr, (void *)data, iter_size, pi_task_callback(&hyperflash->task, hyperflash_check_program, device));
1c00873e:	5280306f          	j	1c00bc66 <pi_hyper_write_async>

1c008742 <hyperflash_program_async>:
{
1c008742:	1101                	addi	sp,sp,-32
1c008744:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008746:	4500                	lw	s0,8(a0)
{
1c008748:	c452                	sw	s4,8(sp)
1c00874a:	8a2e                	mv	s4,a1
1c00874c:	ca26                	sw	s1,20(sp)
1c00874e:	c84a                	sw	s2,16(sp)
1c008750:	c64e                	sw	s3,12(sp)
1c008752:	84aa                	mv	s1,a0
1c008754:	89b2                	mv	s3,a2
1c008756:	8936                	mv	s2,a3
1c008758:	85ba                	mv	a1,a4
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c00875a:	87b6                	mv	a5,a3
1c00875c:	8732                	mv	a4,a2
1c00875e:	4881                	li	a7,0
1c008760:	4801                	li	a6,0
1c008762:	86d2                	mv	a3,s4
1c008764:	4601                	li	a2,0
1c008766:	8522                	mv	a0,s0
{
1c008768:	ce06                	sw	ra,28(sp)
  if (hyperflash_stall_task(hyperflash, task, STALL_TASK_PROGRAM, hyper_addr, (uint32_t)data, size, 0, 0))
1c00876a:	abbff0ef          	jal	ra,1c008224 <hyperflash_stall_task>
1c00876e:	e105                	bnez	a0,1c00878e <hyperflash_program_async+0x4c>
  hyperflash->pending_hyper_addr = hyper_addr;
1c008770:	13442423          	sw	s4,296(s0)
  hyperflash->pending_data = (uint32_t)data;
1c008774:	13342623          	sw	s3,300(s0)
  hyperflash->pending_size = size;
1c008778:	13242823          	sw	s2,304(s0)
}
1c00877c:	4462                	lw	s0,24(sp)
1c00877e:	40f2                	lw	ra,28(sp)
1c008780:	4942                	lw	s2,16(sp)
1c008782:	49b2                	lw	s3,12(sp)
1c008784:	4a22                	lw	s4,8(sp)
  hyperflash_program_resume(device);
1c008786:	8526                	mv	a0,s1
}
1c008788:	44d2                	lw	s1,20(sp)
1c00878a:	6105                	addi	sp,sp,32
  hyperflash_program_resume(device);
1c00878c:	b719                	j	1c008692 <hyperflash_program_resume>
}
1c00878e:	40f2                	lw	ra,28(sp)
1c008790:	4462                	lw	s0,24(sp)
1c008792:	44d2                	lw	s1,20(sp)
1c008794:	4942                	lw	s2,16(sp)
1c008796:	49b2                	lw	s3,12(sp)
1c008798:	4a22                	lw	s4,8(sp)
1c00879a:	6105                	addi	sp,sp,32
1c00879c:	8082                	ret

1c00879e <hyperflash_copy_async>:
{
1c00879e:	1141                	addi	sp,sp,-16
1c0087a0:	c606                	sw	ra,12(sp)
  if (!ext2loc)
1c0087a2:	e719                	bnez	a4,1c0087b0 <hyperflash_copy_async+0x12>
    hyperflash_program_async(device, flash_addr, buffer, size, task);
1c0087a4:	873e                	mv	a4,a5
1c0087a6:	3f71                	jal	1c008742 <hyperflash_program_async>
}
1c0087a8:	40b2                	lw	ra,12(sp)
1c0087aa:	4501                	li	a0,0
1c0087ac:	0141                	addi	sp,sp,16
1c0087ae:	8082                	ret
    hyperflash_read_async(device, flash_addr, buffer, size, task);
1c0087b0:	873e                	mv	a4,a5
1c0087b2:	cb7ff0ef          	jal	ra,1c008468 <hyperflash_read_async>
1c0087b6:	bfcd                	j	1c0087a8 <hyperflash_copy_async+0xa>

1c0087b8 <hyperflash_close>:
{
1c0087b8:	1141                	addi	sp,sp,-16
1c0087ba:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0087bc:	4500                	lw	s0,8(a0)
{
1c0087be:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperflash->hyper_device);
1c0087c0:	8522                	mv	a0,s0
1c0087c2:	2d4030ef          	jal	ra,1c00ba96 <pi_hyper_close>
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c0087c6:	8522                	mv	a0,s0
}
1c0087c8:	4422                	lw	s0,8(sp)
1c0087ca:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c0087cc:	13c00593          	li	a1,316
}
1c0087d0:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c0087d2:	10c0206f          	j	1c00a8de <pi_l2_free>

1c0087d6 <hyperflash_open>:
{
1c0087d6:	7179                	addi	sp,sp,-48
1c0087d8:	d226                	sw	s1,36(sp)
1c0087da:	d04a                	sw	s2,32(sp)
1c0087dc:	84aa                	mv	s1,a0
  struct pi_hyperflash_conf *conf = (struct pi_hyperflash_conf *)device->config;
1c0087de:	00452903          	lw	s2,4(a0)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c0087e2:	13c00513          	li	a0,316
{
1c0087e6:	d606                	sw	ra,44(sp)
1c0087e8:	d422                	sw	s0,40(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)pmsis_l2_malloc(sizeof(hyperflash_t));
1c0087ea:	0e6020ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
  if (hyperflash == NULL)
1c0087ee:	c935                	beqz	a0,1c008862 <hyperflash_open+0x8c>
  device->data = (void *)hyperflash;
1c0087f0:	c488                	sw	a0,8(s1)
1c0087f2:	842a                	mv	s0,a0
  if (bsp_hyperflash_open(conf))
1c0087f4:	854a                	mv	a0,s2
1c0087f6:	5ca010ef          	jal	ra,1c009dc0 <bsp_hyperflash_open>
1c0087fa:	84aa                	mv	s1,a0
1c0087fc:	ed21                	bnez	a0,1c008854 <hyperflash_open+0x7e>
  struct pi_hyper_conf hyper_conf = {0};
1c0087fe:	4671                	li	a2,28
1c008800:	4581                	li	a1,0
1c008802:	0048                	addi	a0,sp,4
1c008804:	2f7040ef          	jal	ra,1c00d2fa <memset>
  pi_hyper_conf_init(&hyper_conf);
1c008808:	0048                	addi	a0,sp,4
1c00880a:	11c030ef          	jal	ra,1c00b926 <pi_hyper_conf_init>
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c00880e:	00492783          	lw	a5,4(s2)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c008812:	8522                	mv	a0,s0
1c008814:	004c                	addi	a1,sp,4
  hyper_conf.id = (unsigned char) conf->hyper_itf;
1c008816:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c00881a:	00892783          	lw	a5,8(s2)
  hyper_conf.type = PI_HYPER_TYPE_FLASH;
1c00881e:	c802                	sw	zero,16(sp)
  hyper_conf.cs = conf->hyper_cs;
1c008820:	c63e                	sw	a5,12(sp)
  hyper_conf.xip_en = conf->xip_en;
1c008822:	00c92783          	lw	a5,12(s2)
1c008826:	00f104a3          	sb	a5,9(sp)
  pi_open_from_conf(&hyperflash->hyper_device, &hyper_conf);
1c00882a:	786010ef          	jal	ra,1c009fb0 <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperflash->hyper_device);
1c00882e:	8522                	mv	a0,s0
1c008830:	106030ef          	jal	ra,1c00b936 <pi_hyper_open>
  if (error)
1c008834:	e105                	bnez	a0,1c008854 <hyperflash_open+0x7e>
  hyperflash->pending_task = NULL;
1c008836:	00042c23          	sw	zero,24(s0)
  hyperflash->waiting_first = NULL;
1c00883a:	00042823          	sw	zero,16(s0)
  hyperflash->erase_task = NULL;
1c00883e:	02042223          	sw	zero,36(s0)
  hyperflash->erase_waiting_first = NULL;
1c008842:	00042e23          	sw	zero,28(s0)
}
1c008846:	50b2                	lw	ra,44(sp)
1c008848:	5422                	lw	s0,40(sp)
1c00884a:	8526                	mv	a0,s1
1c00884c:	5902                	lw	s2,32(sp)
1c00884e:	5492                	lw	s1,36(sp)
1c008850:	6145                	addi	sp,sp,48
1c008852:	8082                	ret
  pmsis_l2_malloc_free(hyperflash, sizeof(hyperflash_t));
1c008854:	13c00593          	li	a1,316
1c008858:	8522                	mv	a0,s0
1c00885a:	084020ef          	jal	ra,1c00a8de <pi_l2_free>
  return -2;
1c00885e:	54f9                	li	s1,-2
1c008860:	b7dd                	j	1c008846 <hyperflash_open+0x70>
    return -1;
1c008862:	54fd                	li	s1,-1
1c008864:	b7cd                	j	1c008846 <hyperflash_open+0x70>

1c008866 <pi_task_wait_on.isra.3>:
static inline void pi_task_wait_on(struct pi_task *task)
1c008866:	1141                	addi	sp,sp,-16
1c008868:	c422                	sw	s0,8(sp)
1c00886a:	c226                	sw	s1,4(sp)
1c00886c:	c606                	sw	ra,12(sp)
1c00886e:	c04a                	sw	s2,0(sp)
1c008870:	842a                	mv	s0,a0
  while(!task->done)
1c008872:	00040783          	lb	a5,0(s0)
1c008876:	c799                	beqz	a5,1c008884 <pi_task_wait_on.isra.3+0x1e>
}
1c008878:	40b2                	lw	ra,12(sp)
1c00887a:	4422                	lw	s0,8(sp)
1c00887c:	4492                	lw	s1,4(sp)
1c00887e:	4902                	lw	s2,0(sp)
1c008880:	0141                	addi	sp,sp,16
1c008882:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008884:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c008888:	4585                	li	a1,1
1c00888a:	01c00513          	li	a0,28
1c00888e:	5a3010ef          	jal	ra,1c00a630 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c008892:	30091073          	csrw	mstatus,s2
1c008896:	bff1                	j	1c008872 <pi_task_wait_on.isra.3+0xc>

1c008898 <hyperflash_copy_2d>:
  pi_task_wait_on(&task);
  return 0;
}

static inline int hyperflash_copy_2d(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc)
{
1c008898:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00889a:	4885                	li	a7,1
1c00889c:	c706                	sw	ra,140(sp)
1c00889e:	cc46                	sw	a7,24(sp)
  task->arg[0] = (uint32_t)0;
1c0088a0:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c0088a2:	d446                	sw	a7,40(sp)
  task->done = 0;
1c0088a4:	00010a23          	sb	zero,20(sp)
  if (!ext2loc)
1c0088a8:	00080b63          	beqz	a6,1c0088be <hyperflash_copy_2d+0x26>
  hyperflash_read_2d_async(device, flash_addr, buffer, size, stride, length, task);
1c0088ac:	880a                	mv	a6,sp
1c0088ae:	9b7ff0ef          	jal	ra,1c008264 <hyperflash_read_2d_async>
  pi_task_t task;
  pi_task_block(&task);
  if (hyperflash_copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, &task))
    return -1;
  pi_task_wait_on(&task);
1c0088b2:	0848                	addi	a0,sp,20
1c0088b4:	3f4d                	jal	1c008866 <pi_task_wait_on.isra.3>
  return 0;
1c0088b6:	4501                	li	a0,0
}
1c0088b8:	40ba                	lw	ra,140(sp)
1c0088ba:	6149                	addi	sp,sp,144
1c0088bc:	8082                	ret
    return -1;
1c0088be:	557d                	li	a0,-1
1c0088c0:	bfe5                	j	1c0088b8 <hyperflash_copy_2d+0x20>

1c0088c2 <hyperflash_erase_sector>:
{
1c0088c2:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c0088c4:	4785                	li	a5,1
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c0088c6:	860a                	mv	a2,sp
{
1c0088c8:	c706                	sw	ra,140(sp)
1c0088ca:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0088cc:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c0088ce:	c202                	sw	zero,4(sp)
1c0088d0:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_sector_async(device, pi_flash_addr, pi_task_block(&task));
1c0088d4:	a3fff0ef          	jal	ra,1c008312 <hyperflash_erase_sector_async>
  pi_task_wait_on(&task);
1c0088d8:	0848                	addi	a0,sp,20
1c0088da:	3771                	jal	1c008866 <pi_task_wait_on.isra.3>
}
1c0088dc:	40ba                	lw	ra,140(sp)
1c0088de:	4501                	li	a0,0
1c0088e0:	6149                	addi	sp,sp,144
1c0088e2:	8082                	ret

1c0088e4 <hyperflash_erase_chip>:
{
1c0088e4:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c0088e6:	4785                	li	a5,1
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c0088e8:	858a                	mv	a1,sp
{
1c0088ea:	c706                	sw	ra,140(sp)
1c0088ec:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c0088ee:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c0088f0:	c202                	sw	zero,4(sp)
1c0088f2:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_chip_async(device, pi_task_block(&task));
1c0088f6:	acdff0ef          	jal	ra,1c0083c2 <hyperflash_erase_chip_async>
  pi_task_wait_on(&task);
1c0088fa:	0848                	addi	a0,sp,20
1c0088fc:	37ad                	jal	1c008866 <pi_task_wait_on.isra.3>
}
1c0088fe:	40ba                	lw	ra,140(sp)
1c008900:	4501                	li	a0,0
1c008902:	6149                	addi	sp,sp,144
1c008904:	8082                	ret

1c008906 <hyperflash_read>:
{
1c008906:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c008908:	4785                	li	a5,1
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00890a:	870a                	mv	a4,sp
{
1c00890c:	c706                	sw	ra,140(sp)
1c00890e:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008910:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008912:	c202                	sw	zero,4(sp)
1c008914:	00010a23          	sb	zero,20(sp)
  hyperflash_read_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c008918:	b51ff0ef          	jal	ra,1c008468 <hyperflash_read_async>
  pi_task_wait_on(&task);
1c00891c:	0848                	addi	a0,sp,20
1c00891e:	37a1                	jal	1c008866 <pi_task_wait_on.isra.3>
}
1c008920:	40ba                	lw	ra,140(sp)
1c008922:	4501                	li	a0,0
1c008924:	6149                	addi	sp,sp,144
1c008926:	8082                	ret

1c008928 <hyperflash_reg_get>:
{
1c008928:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00892a:	4785                	li	a5,1
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00892c:	868a                	mv	a3,sp
{
1c00892e:	c706                	sw	ra,140(sp)
1c008930:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008932:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008934:	c202                	sw	zero,4(sp)
1c008936:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_get_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00893a:	ca7ff0ef          	jal	ra,1c0085e0 <hyperflash_reg_get_async>
  pi_task_wait_on(&task);
1c00893e:	0848                	addi	a0,sp,20
1c008940:	371d                	jal	1c008866 <pi_task_wait_on.isra.3>
}
1c008942:	40ba                	lw	ra,140(sp)
1c008944:	4501                	li	a0,0
1c008946:	6149                	addi	sp,sp,144
1c008948:	8082                	ret

1c00894a <hyperflash_reg_set>:
{
1c00894a:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00894c:	4785                	li	a5,1
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00894e:	868a                	mv	a3,sp
{
1c008950:	c706                	sw	ra,140(sp)
1c008952:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008954:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008956:	c202                	sw	zero,4(sp)
1c008958:	00010a23          	sb	zero,20(sp)
  hyperflash_reg_set_async(device, pi_flash_addr, value, pi_task_block(&task));
1c00895c:	ce3ff0ef          	jal	ra,1c00863e <hyperflash_reg_set_async>
  pi_task_wait_on(&task);
1c008960:	0848                	addi	a0,sp,20
1c008962:	3711                	jal	1c008866 <pi_task_wait_on.isra.3>
}
1c008964:	40ba                	lw	ra,140(sp)
1c008966:	4501                	li	a0,0
1c008968:	6149                	addi	sp,sp,144
1c00896a:	8082                	ret

1c00896c <hyperflash_program>:
{
1c00896c:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00896e:	4785                	li	a5,1
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c008970:	870a                	mv	a4,sp
{
1c008972:	c706                	sw	ra,140(sp)
1c008974:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008976:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008978:	c202                	sw	zero,4(sp)
1c00897a:	00010a23          	sb	zero,20(sp)
  hyperflash_program_async(device, pi_flash_addr, data, size, pi_task_block(&task));
1c00897e:	dc5ff0ef          	jal	ra,1c008742 <hyperflash_program_async>
  pi_task_wait_on(&task);
1c008982:	0848                	addi	a0,sp,20
1c008984:	35cd                	jal	1c008866 <pi_task_wait_on.isra.3>
}
1c008986:	40ba                	lw	ra,140(sp)
1c008988:	4501                	li	a0,0
1c00898a:	6149                	addi	sp,sp,144
1c00898c:	8082                	ret

1c00898e <hyperflash_copy>:
{
1c00898e:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c008990:	4785                	li	a5,1
1c008992:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008994:	d43e                	sw	a5,40(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c008996:	878a                	mv	a5,sp
{
1c008998:	c522                	sw	s0,136(sp)
1c00899a:	c706                	sw	ra,140(sp)
  task->arg[0] = (uint32_t)0;
1c00899c:	c202                	sw	zero,4(sp)
1c00899e:	00010a23          	sb	zero,20(sp)
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c0089a2:	dfdff0ef          	jal	ra,1c00879e <hyperflash_copy_async>
    return -1;
1c0089a6:	547d                	li	s0,-1
  if (hyperflash_copy_async(device, pi_flash_addr, buffer, size, ext2loc, &task))
1c0089a8:	e501                	bnez	a0,1c0089b0 <hyperflash_copy+0x22>
1c0089aa:	842a                	mv	s0,a0
  pi_task_wait_on(&task);
1c0089ac:	0848                	addi	a0,sp,20
1c0089ae:	3d65                	jal	1c008866 <pi_task_wait_on.isra.3>
}
1c0089b0:	8522                	mv	a0,s0
1c0089b2:	40ba                	lw	ra,140(sp)
1c0089b4:	442a                	lw	s0,136(sp)
1c0089b6:	6149                	addi	sp,sp,144
1c0089b8:	8082                	ret

1c0089ba <hyperflash_erase_resume>:
{
1c0089ba:	1101                	addi	sp,sp,-32
1c0089bc:	cc22                	sw	s0,24(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c0089be:	4500                	lw	s0,8(a0)
{
1c0089c0:	ca26                	sw	s1,20(sp)
1c0089c2:	c84a                	sw	s2,16(sp)
  if (hyperflash->pending_erase_size == 0)
1c0089c4:	13842483          	lw	s1,312(s0)
{
1c0089c8:	ce06                	sw	ra,28(sp)
1c0089ca:	c64e                	sw	s3,12(sp)
1c0089cc:	892a                	mv	s2,a0
  if (hyperflash->pending_erase_size == 0)
1c0089ce:	ec8d                	bnez	s1,1c008a08 <hyperflash_erase_resume+0x4e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0089d0:	300474f3          	csrrci	s1,mstatus,8
  pi_task_enqueue(hyperflash->erase_task);
1c0089d4:	5048                	lw	a0,36(s0)
1c0089d6:	300479f3          	csrrci	s3,mstatus,8
  __rt_event_enqueue(event);
1c0089da:	821ff0ef          	jal	ra,1c0081fa <__rt_event_enqueue>
  __builtin_pulp_spr_write(reg, val);
1c0089de:	30099073          	csrw	mstatus,s3
  pi_task_t *task = hyperflash->erase_waiting_first;
1c0089e2:	4c54                	lw	a3,28(s0)
  hyperflash->erase_task = NULL;
1c0089e4:	02042223          	sw	zero,36(s0)
  if (task)
1c0089e8:	c299                	beqz	a3,1c0089ee <hyperflash_erase_resume+0x34>
    hyperflash->erase_waiting_first = task->implem.next;
1c0089ea:	4edc                	lw	a5,28(a3)
1c0089ec:	cc5c                	sw	a5,28(s0)
1c0089ee:	30049073          	csrw	mstatus,s1
  if (task)
1c0089f2:	c2b5                	beqz	a3,1c008a56 <hyperflash_erase_resume+0x9c>
}
1c0089f4:	4462                	lw	s0,24(sp)
1c0089f6:	40f2                	lw	ra,28(sp)
1c0089f8:	44d2                	lw	s1,20(sp)
1c0089fa:	49b2                	lw	s3,12(sp)
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c0089fc:	42b0                	lw	a2,64(a3)
1c0089fe:	5ecc                	lw	a1,60(a3)
1c008a00:	854a                	mv	a0,s2
}
1c008a02:	4942                	lw	s2,16(sp)
1c008a04:	6105                	addi	sp,sp,32
    hyperflash_erase_async(device, task->implem.data[1], task->implem.data[2], task);
1c008a06:	a8b9                	j	1c008a64 <hyperflash_erase_async>
    unsigned int iter_size = SECTOR_SIZE - (hyperflash->pending_erase_hyper_addr & (SECTOR_SIZE - 1));
1c008a08:	13442583          	lw	a1,308(s0)
1c008a0c:	000407b7          	lui	a5,0x40
  task->id = PI_TASK_CALLBACK_ID;
1c008a10:	0c042023          	sw	zero,192(s0)
1c008a14:	db25b733          	p.bclr	a4,a1,13,18
1c008a18:	8f99                	sub	a5,a5,a4
1c008a1a:	04f4d4b3          	p.minu	s1,s1,a5
  task->arg[0] = (uint32_t)callback;
1c008a1e:	1c0097b7          	lui	a5,0x1c009
1c008a22:	9ba78793          	addi	a5,a5,-1606 # 1c0089ba <hyperflash_erase_resume>
1c008a26:	0af42623          	sw	a5,172(s0)
  task->implem.keep = 1;
1c008a2a:	4785                	li	a5,1
1c008a2c:	0cf42823          	sw	a5,208(s0)
  task->arg[1] = (uint32_t)arg;
1c008a30:	0aa42823          	sw	a0,176(s0)
  task->done = 0;
1c008a34:	0a040e23          	sb	zero,188(s0)
    hyperflash_erase_sector_async(device, hyper_addr, pi_task_callback(&hyperflash->task2, hyperflash_erase_resume, device));
1c008a38:	0a840613          	addi	a2,s0,168
1c008a3c:	8d7ff0ef          	jal	ra,1c008312 <hyperflash_erase_sector_async>
    hyperflash->pending_erase_hyper_addr += iter_size;
1c008a40:	13442783          	lw	a5,308(s0)
1c008a44:	97a6                	add	a5,a5,s1
1c008a46:	12f42a23          	sw	a5,308(s0)
    hyperflash->pending_erase_size -= iter_size;
1c008a4a:	13842783          	lw	a5,312(s0)
1c008a4e:	409784b3          	sub	s1,a5,s1
1c008a52:	12942c23          	sw	s1,312(s0)
}
1c008a56:	40f2                	lw	ra,28(sp)
1c008a58:	4462                	lw	s0,24(sp)
1c008a5a:	44d2                	lw	s1,20(sp)
1c008a5c:	4942                	lw	s2,16(sp)
1c008a5e:	49b2                	lw	s3,12(sp)
1c008a60:	6105                	addi	sp,sp,32
1c008a62:	8082                	ret

1c008a64 <hyperflash_erase_async>:
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008a64:	451c                	lw	a5,8(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008a66:	30047773          	csrrci	a4,mstatus,8
  if (hyperflash->erase_task != NULL)
1c008a6a:	0247a803          	lw	a6,36(a5)
1c008a6e:	02080463          	beqz	a6,1c008a96 <hyperflash_erase_async+0x32>
    task->implem.data[0] = id;
1c008a72:	450d                	li	a0,3
1c008a74:	de88                	sw	a0,56(a3)
    task->implem.data[1] = arg0;
1c008a76:	decc                	sw	a1,60(a3)
    task->implem.data[2] = arg1;
1c008a78:	c2b0                	sw	a2,64(a3)
    task->implem.data[3] = arg2;
1c008a7a:	0406a223          	sw	zero,68(a3)
    if (hyperflash->erase_waiting_first)
1c008a7e:	4fd0                	lw	a2,28(a5)
1c008a80:	ca09                	beqz	a2,1c008a92 <hyperflash_erase_async+0x2e>
      hyperflash->erase_waiting_last->implem.next = task;
1c008a82:	5390                	lw	a2,32(a5)
1c008a84:	ce54                	sw	a3,28(a2)
    hyperflash->erase_waiting_last = task;
1c008a86:	d394                	sw	a3,32(a5)
    task->implem.next = NULL;
1c008a88:	0006ae23          	sw	zero,28(a3)
  __builtin_pulp_spr_write(reg, val);
1c008a8c:	30071073          	csrw	mstatus,a4
}
1c008a90:	8082                	ret
      hyperflash->erase_waiting_first = task;
1c008a92:	cfd4                	sw	a3,28(a5)
1c008a94:	bfcd                	j	1c008a86 <hyperflash_erase_async+0x22>
  hyperflash->erase_task = task;
1c008a96:	d3d4                	sw	a3,36(a5)
1c008a98:	30071073          	csrw	mstatus,a4
  hyperflash->pending_erase_hyper_addr = addr;
1c008a9c:	12b7aa23          	sw	a1,308(a5)
  hyperflash->pending_erase_size = size;
1c008aa0:	12c7ac23          	sw	a2,312(a5)
  hyperflash_erase_resume(device);
1c008aa4:	bf19                	j	1c0089ba <hyperflash_erase_resume>

1c008aa6 <hyperflash_erase>:
{
1c008aa6:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c008aa8:	4785                	li	a5,1
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c008aaa:	868a                	mv	a3,sp
{
1c008aac:	c706                	sw	ra,140(sp)
1c008aae:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c008ab0:	d43e                	sw	a5,40(sp)
  task->arg[0] = (uint32_t)0;
1c008ab2:	c202                	sw	zero,4(sp)
1c008ab4:	00010a23          	sb	zero,20(sp)
  hyperflash_erase_async(device, pi_flash_addr, size, &task);
1c008ab8:	3775                	jal	1c008a64 <hyperflash_erase_async>
  pi_task_wait_on(&task);
1c008aba:	0848                	addi	a0,sp,20
1c008abc:	dabff0ef          	jal	ra,1c008866 <pi_task_wait_on.isra.3>
}
1c008ac0:	40ba                	lw	ra,140(sp)
1c008ac2:	4501                	li	a0,0
1c008ac4:	6149                	addi	sp,sp,144
1c008ac6:	8082                	ret

1c008ac8 <hyperflash_get_status_reg>:
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c008ac8:	6585                	lui	a1,0x1
{
1c008aca:	1141                	addi	sp,sp,-16
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c008acc:	07000613          	li	a2,112
1c008ad0:	aaa58593          	addi	a1,a1,-1366 # aaa <__rt_stack_size+0x2aa>
{
1c008ad4:	c606                	sw	ra,12(sp)
1c008ad6:	c422                	sw	s0,8(sp)
1c008ad8:	842a                	mv	s0,a0
  hyperflash_set_reg_exec(hyperflash, 0x555<<1, 0x70);
1c008ada:	82bff0ef          	jal	ra,1c008304 <hyperflash_set_reg_exec>
  pi_hyper_read(&hyperflash->hyper_device, addr, hyperflash->udma_buffer, 4);
1c008ade:	8522                	mv	a0,s0
1c008ae0:	00c40613          	addi	a2,s0,12
1c008ae4:	4691                	li	a3,4
1c008ae6:	4581                	li	a1,0
1c008ae8:	15c030ef          	jal	ra,1c00bc44 <pi_hyper_read>
}
1c008aec:	00c45503          	lhu	a0,12(s0)
1c008af0:	40b2                	lw	ra,12(sp)
1c008af2:	4422                	lw	s0,8(sp)
1c008af4:	0141                	addi	sp,sp,16
1c008af6:	8082                	ret

1c008af8 <hyperflash_check_erase>:
{
1c008af8:	1141                	addi	sp,sp,-16
1c008afa:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008afc:	4500                	lw	s0,8(a0)
{
1c008afe:	c226                	sw	s1,4(sp)
1c008b00:	84aa                	mv	s1,a0
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c008b02:	8522                	mv	a0,s0
{
1c008b04:	c606                	sw	ra,12(sp)
  uint32_t reg_status = hyperflash_get_status_reg(hyperflash);
1c008b06:	37c9                	jal	1c008ac8 <hyperflash_get_status_reg>
  if (((reg_status >> 7) & 1) == 0)
1c008b08:	c0751533          	p.extractu	a0,a0,0,7
1c008b0c:	e905                	bnez	a0,1c008b3c <hyperflash_check_erase+0x44>
  task->arg[0] = (uint32_t)callback;
1c008b0e:	1c0097b7          	lui	a5,0x1c009
1c008b12:	af878793          	addi	a5,a5,-1288 # 1c008af8 <hyperflash_check_erase>
1c008b16:	02040e23          	sb	zero,60(s0)
1c008b1a:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c008b1c:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c008b1e:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c008b20:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c008b24:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c008b26:	02840513          	addi	a0,s0,40
}
1c008b2a:	4422                	lw	s0,8(sp)
1c008b2c:	40b2                	lw	ra,12(sp)
1c008b2e:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c008b30:	65e1                	lui	a1,0x18
1c008b32:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
}
1c008b36:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_erase, device), 100000);
1c008b38:	3b70106f          	j	1c00a6ee <pi_task_push_delayed_us>
}
1c008b3c:	4422                	lw	s0,8(sp)
1c008b3e:	40b2                	lw	ra,12(sp)
    hyperflash_handle_pending_task(device);
1c008b40:	8526                	mv	a0,s1
}
1c008b42:	4492                	lw	s1,4(sp)
1c008b44:	0141                	addi	sp,sp,16
    hyperflash_handle_pending_task(device);
1c008b46:	999ff06f          	j	1c0084de <hyperflash_handle_pending_task>

1c008b4a <hyperflash_check_program>:
{
1c008b4a:	1141                	addi	sp,sp,-16
1c008b4c:	c422                	sw	s0,8(sp)
  hyperflash_t *hyperflash = (hyperflash_t *)device->data;
1c008b4e:	4500                	lw	s0,8(a0)
{
1c008b50:	c226                	sw	s1,4(sp)
1c008b52:	84aa                	mv	s1,a0
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c008b54:	8522                	mv	a0,s0
{
1c008b56:	c606                	sw	ra,12(sp)
  if (((hyperflash_get_status_reg(hyperflash) >> 7) & 1) == 0)
1c008b58:	3f85                	jal	1c008ac8 <hyperflash_get_status_reg>
1c008b5a:	08057513          	andi	a0,a0,128
1c008b5e:	e51d                	bnez	a0,1c008b8c <hyperflash_check_program+0x42>
  task->arg[0] = (uint32_t)callback;
1c008b60:	1c0097b7          	lui	a5,0x1c009
1c008b64:	b4a78793          	addi	a5,a5,-1206 # 1c008b4a <hyperflash_check_program>
1c008b68:	02040e23          	sb	zero,60(s0)
1c008b6c:	d45c                	sw	a5,44(s0)
  task->implem.keep = 1;
1c008b6e:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c008b70:	d804                	sw	s1,48(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c008b72:	04042023          	sw	zero,64(s0)
  task->implem.keep = 1;
1c008b76:	c83c                	sw	a5,80(s0)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c008b78:	02840513          	addi	a0,s0,40
}
1c008b7c:	4422                	lw	s0,8(sp)
1c008b7e:	40b2                	lw	ra,12(sp)
1c008b80:	4492                	lw	s1,4(sp)
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c008b82:	0fa00593          	li	a1,250
}
1c008b86:	0141                	addi	sp,sp,16
    pi_task_push_delayed_us(pi_task_callback(&hyperflash->task, hyperflash_check_program, device), 250);
1c008b88:	3670106f          	j	1c00a6ee <pi_task_push_delayed_us>
}
1c008b8c:	4422                	lw	s0,8(sp)
1c008b8e:	40b2                	lw	ra,12(sp)
    hyperflash_program_resume(device);
1c008b90:	8526                	mv	a0,s1
}
1c008b92:	4492                	lw	s1,4(sp)
1c008b94:	0141                	addi	sp,sp,16
    hyperflash_program_resume(device);
1c008b96:	afdff06f          	j	1c008692 <hyperflash_program_resume>

1c008b9a <pi_hyperflash_conf_init>:
};



void pi_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
1c008b9a:	1141                	addi	sp,sp,-16
  conf->flash.api = &hyperflash_api;
1c008b9c:	1c00f7b7          	lui	a5,0x1c00f
{
1c008ba0:	c606                	sw	ra,12(sp)
1c008ba2:	c422                	sw	s0,8(sp)
  conf->flash.api = &hyperflash_api;
1c008ba4:	f9c78793          	addi	a5,a5,-100 # 1c00ef9c <hyperflash_api>
1c008ba8:	c11c                	sw	a5,0(a0)
{
1c008baa:	842a                	mv	s0,a0
  bsp_hyperflash_conf_init(conf);
1c008bac:	20a010ef          	jal	ra,1c009db6 <bsp_hyperflash_conf_init>
  __flash_conf_init(&conf->flash);
1c008bb0:	8522                	mv	a0,s0
1c008bb2:	821fe0ef          	jal	ra,1c0073d2 <__flash_conf_init>
  conf->xip_en = 0;
}
1c008bb6:	40b2                	lw	ra,12(sp)
  conf->xip_en = 0;
1c008bb8:	00042623          	sw	zero,12(s0)
}
1c008bbc:	4422                	lw	s0,8(sp)
1c008bbe:	0141                	addi	sp,sp,16
1c008bc0:	8082                	ret

1c008bc2 <hyperram_alloc>:

int hyperram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
  void *chunk;
  hyperram_t *hyperram = (hyperram_t *)device->data;
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c008bc2:	4508                	lw	a0,8(a0)
{
1c008bc4:	1101                	addi	sp,sp,-32
1c008bc6:	cc22                	sw	s0,24(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c008bc8:	0531                	addi	a0,a0,12
{
1c008bca:	842e                	mv	s0,a1
1c008bcc:	85b2                	mv	a1,a2
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c008bce:	0070                	addi	a2,sp,12
{
1c008bd0:	ce06                	sw	ra,28(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c008bd2:	244d                	jal	1c008e74 <extern_alloc>
  *addr = (uint32_t)chunk;
1c008bd4:	47b2                	lw	a5,12(sp)
  return err;
}
1c008bd6:	40f2                	lw	ra,28(sp)
  *addr = (uint32_t)chunk;
1c008bd8:	c01c                	sw	a5,0(s0)
}
1c008bda:	4462                	lw	s0,24(sp)
1c008bdc:	6105                	addi	sp,sp,32
1c008bde:	8082                	ret

1c008be0 <hyperram_free>:


int hyperram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
  hyperram_t *hyperram = (hyperram_t *)device->data;
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c008be0:	4508                	lw	a0,8(a0)
{
1c008be2:	87b2                	mv	a5,a2
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c008be4:	862e                	mv	a2,a1
1c008be6:	0531                	addi	a0,a0,12
1c008be8:	85be                	mv	a1,a5
1c008bea:	a4e5                	j	1c008ed2 <extern_free>

1c008bec <hyperram_copy_2d_async>:
{
1c008bec:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c008bee:	00080563          	beqz	a6,1c008bf8 <hyperram_copy_2d_async+0xc>
    pi_hyper_read_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c008bf2:	8846                	mv	a6,a7
1c008bf4:	4320306f          	j	1c00c026 <pi_hyper_read_2d_async>
    pi_hyper_write_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c008bf8:	8846                	mv	a6,a7
1c008bfa:	4440306f          	j	1c00c03e <pi_hyper_write_2d_async>

1c008bfe <hyperram_copy_async>:
{
1c008bfe:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c008c00:	c701                	beqz	a4,1c008c08 <hyperram_copy_async+0xa>
    pi_hyper_read_async(&hyperram->hyper_device, addr, data, size, task);
1c008c02:	873e                	mv	a4,a5
1c008c04:	02a0306f          	j	1c00bc2e <pi_hyper_read_async>
    pi_hyper_write_async(&hyperram->hyper_device, addr, data, size, task);
1c008c08:	873e                	mv	a4,a5
1c008c0a:	05c0306f          	j	1c00bc66 <pi_hyper_write_async>

1c008c0e <hyperram_close>:
{
1c008c0e:	1141                	addi	sp,sp,-16
1c008c10:	c422                	sw	s0,8(sp)
  hyperram_t *hyperram = (hyperram_t *)device->data;
1c008c12:	4500                	lw	s0,8(a0)
{
1c008c14:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperram->hyper_device);
1c008c16:	8522                	mv	a0,s0
1c008c18:	67f020ef          	jal	ra,1c00ba96 <pi_hyper_close>
  extern_alloc_deinit(&hyperram->alloc);
1c008c1c:	00c40513          	addi	a0,s0,12
1c008c20:	24b1                	jal	1c008e6c <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c008c22:	8522                	mv	a0,s0
}
1c008c24:	4422                	lw	s0,8(sp)
1c008c26:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c008c28:	45c1                	li	a1,16
}
1c008c2a:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c008c2c:	4b30106f          	j	1c00a8de <pi_l2_free>

1c008c30 <hyperram_open>:
{
1c008c30:	7139                	addi	sp,sp,-64
1c008c32:	dc22                	sw	s0,56(sp)
1c008c34:	d84a                	sw	s2,48(sp)
  struct pi_hyperram_conf *conf = (struct pi_hyperram_conf *)device->config;
1c008c36:	4140                	lw	s0,4(a0)
{
1c008c38:	892a                	mv	s2,a0
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c008c3a:	4541                	li	a0,16
{
1c008c3c:	de06                	sw	ra,60(sp)
1c008c3e:	da26                	sw	s1,52(sp)
1c008c40:	d64e                	sw	s3,44(sp)
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c008c42:	48f010ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
  if (hyperram == NULL)
1c008c46:	c141                	beqz	a0,1c008cc6 <hyperram_open+0x96>
  if (conf->reserve_addr_0)
1c008c48:	501c                	lw	a5,32(s0)
  device->data = (void *)hyperram;
1c008c4a:	00a92423          	sw	a0,8(s2)
1c008c4e:	84aa                	mv	s1,a0
  int size = conf->ram_size;
1c008c50:	4c10                	lw	a2,24(s0)
  uint32_t start_addr = 0;
1c008c52:	4581                	li	a1,0
  if (conf->reserve_addr_0)
1c008c54:	c399                	beqz	a5,1c008c5a <hyperram_open+0x2a>
    size -= 4;
1c008c56:	1671                	addi	a2,a2,-4
    start_addr = 4;
1c008c58:	4591                	li	a1,4
  if (extern_alloc_init(&hyperram->alloc, (void *)start_addr, size))
1c008c5a:	00c48993          	addi	s3,s1,12
1c008c5e:	854e                	mv	a0,s3
1c008c60:	2a6d                	jal	1c008e1a <extern_alloc_init>
1c008c62:	e901                	bnez	a0,1c008c72 <hyperram_open+0x42>
  if (bsp_hyperram_open(conf))
1c008c64:	8522                	mv	a0,s0
1c008c66:	140010ef          	jal	ra,1c009da6 <bsp_hyperram_open>
1c008c6a:	892a                	mv	s2,a0
1c008c6c:	c909                	beqz	a0,1c008c7e <hyperram_open+0x4e>
  extern_alloc_deinit(&hyperram->alloc);
1c008c6e:	854e                	mv	a0,s3
1c008c70:	2af5                	jal	1c008e6c <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c008c72:	45c1                	li	a1,16
1c008c74:	8526                	mv	a0,s1
1c008c76:	469010ef          	jal	ra,1c00a8de <pi_l2_free>
  return -2;
1c008c7a:	5979                	li	s2,-2
1c008c7c:	a82d                	j	1c008cb6 <hyperram_open+0x86>
  pi_hyper_conf_init(&hyper_conf);
1c008c7e:	0048                	addi	a0,sp,4
1c008c80:	4a7020ef          	jal	ra,1c00b926 <pi_hyper_conf_init>
  hyper_conf.burst_length = 4000;
1c008c84:	6785                	lui	a5,0x1
1c008c86:	fa078793          	addi	a5,a5,-96 # fa0 <__rt_stack_size+0x7a0>
1c008c8a:	cc3e                	sw	a5,24(sp)
  hyper_conf.id = conf->hyper_itf;
1c008c8c:	405c                	lw	a5,4(s0)
1c008c8e:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c008c92:	441c                	lw	a5,8(s0)
1c008c94:	c63e                	sw	a5,12(sp)
  hyper_conf.type = PI_HYPER_TYPE_RAM;
1c008c96:	4785                	li	a5,1
1c008c98:	c83e                	sw	a5,16(sp)
  hyper_conf.xip_en = conf->xip_en;
1c008c9a:	481c                	lw	a5,16(s0)
1c008c9c:	00f104a3          	sb	a5,9(sp)
  if (conf->baudrate)
1c008ca0:	4c5c                	lw	a5,28(s0)
1c008ca2:	c391                	beqz	a5,1c008ca6 <hyperram_open+0x76>
      hyper_conf.baudrate = conf->baudrate;
1c008ca4:	ca3e                	sw	a5,20(sp)
  pi_open_from_conf(&hyperram->hyper_device, &hyper_conf);
1c008ca6:	8526                	mv	a0,s1
1c008ca8:	004c                	addi	a1,sp,4
1c008caa:	306010ef          	jal	ra,1c009fb0 <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperram->hyper_device);
1c008cae:	8526                	mv	a0,s1
1c008cb0:	487020ef          	jal	ra,1c00b936 <pi_hyper_open>
  if (error)
1c008cb4:	fd4d                	bnez	a0,1c008c6e <hyperram_open+0x3e>
}
1c008cb6:	50f2                	lw	ra,60(sp)
1c008cb8:	5462                	lw	s0,56(sp)
1c008cba:	854a                	mv	a0,s2
1c008cbc:	54d2                	lw	s1,52(sp)
1c008cbe:	5942                	lw	s2,48(sp)
1c008cc0:	59b2                	lw	s3,44(sp)
1c008cc2:	6121                	addi	sp,sp,64
1c008cc4:	8082                	ret
      return -1;
1c008cc6:	597d                	li	s2,-1
1c008cc8:	b7fd                	j	1c008cb6 <hyperram_open+0x86>

1c008cca <pi_hyperram_conf_init>:
};


void pi_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram.api = &hyperram_api;
1c008cca:	1c00f737          	lui	a4,0x1c00f
1c008cce:	ff070713          	addi	a4,a4,-16 # 1c00eff0 <hyperram_api>
1c008cd2:	c118                	sw	a4,0(a0)
  conf->baudrate = 0;
  conf->xip_en = 0;
  conf->reserve_addr_0 = 1;
1c008cd4:	4705                	li	a4,1
  conf->baudrate = 0;
1c008cd6:	00052e23          	sw	zero,28(a0)
  conf->xip_en = 0;
1c008cda:	00052823          	sw	zero,16(a0)
  conf->reserve_addr_0 = 1;
1c008cde:	d118                	sw	a4,32(a0)
  bsp_hyperram_conf_init(conf);
1c008ce0:	0ae0106f          	j	1c009d8e <bsp_hyperram_conf_init>

1c008ce4 <__pi_ram_cluster_req>:
}


void __pi_ram_conf_init(struct pi_ram_conf *conf)
{
}
1c008ce4:	832a                	mv	t1,a0
1c008ce6:	09f34783          	lbu	a5,159(t1)
1c008cea:	1c009e37          	lui	t3,0x1c009
1c008cee:	4108                	lw	a0,0(a0)
1c008cf0:	00832583          	lw	a1,8(t1)
1c008cf4:	00432603          	lw	a2,4(t1)
1c008cf8:	00c32683          	lw	a3,12(t1)
1c008cfc:	09e34803          	lbu	a6,158(t1)
1c008d00:	01830893          	addi	a7,t1,24
1c008d04:	d54e0e13          	addi	t3,t3,-684 # 1c008d54 <__pi_ram_cluster_req_done>
1c008d08:	c78d                	beqz	a5,1c008d32 <__pi_ram_cluster_req+0x4e>
1c008d0a:	01c32e23          	sw	t3,28(t1)
1c008d0e:	02030623          	sb	zero,44(t1)
1c008d12:	4e05                	li	t3,1
1c008d14:	01032703          	lw	a4,16(t1)
1c008d18:	01432783          	lw	a5,20(t1)
1c008d1c:	02032823          	sw	zero,48(t1)
1c008d20:	02632023          	sw	t1,32(t1)
1c008d24:	05c32023          	sw	t3,64(t1)
1c008d28:	00052303          	lw	t1,0(a0)
1c008d2c:	00c32303          	lw	t1,12(t1)
1c008d30:	8302                	jr	t1
1c008d32:	4785                	li	a5,1
1c008d34:	02030623          	sb	zero,44(t1)
1c008d38:	04f32023          	sw	a5,64(t1)
1c008d3c:	411c                	lw	a5,0(a0)
1c008d3e:	02032823          	sw	zero,48(t1)
1c008d42:	01c32e23          	sw	t3,28(t1)
1c008d46:	02632023          	sw	t1,32(t1)
1c008d4a:	0087a303          	lw	t1,8(a5)
1c008d4e:	8742                	mv	a4,a6
1c008d50:	87c6                	mv	a5,a7
1c008d52:	8302                	jr	t1

1c008d54 <__pi_ram_cluster_req_done>:
1c008d54:	09d54783          	lbu	a5,157(a0)
1c008d58:	4705                	li	a4,1
1c008d5a:	08e50e23          	sb	a4,156(a0)
1c008d5e:	04078793          	addi	a5,a5,64
1c008d62:	00201737          	lui	a4,0x201
1c008d66:	07da                	slli	a5,a5,0x16
1c008d68:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c008d6c:	0007e723          	p.sw	zero,a4(a5)
1c008d70:	8082                	ret

1c008d72 <pi_ram_open>:
1c008d72:	415c                	lw	a5,4(a0)
1c008d74:	439c                	lw	a5,0(a5)
1c008d76:	0007a303          	lw	t1,0(a5)
1c008d7a:	c11c                	sw	a5,0(a0)
1c008d7c:	8302                	jr	t1

1c008d7e <pi_cl_ram_copy>:
                 uint32_t pi_ram_addr, void *addr, uint32_t size, int ext2loc, pi_cl_ram_req_t *req)
{
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
1c008d7e:	c7d4                	sw	a3,12(a5)
    req->cid = pi_cluster_id();
    req->done = 0;
    req->ext2loc = ext2loc;
1c008d80:	08e78f23          	sb	a4,158(a5)
}

static inline unsigned int cluster_id() {  int hart_id;
#if RISCV_VERSION >= 4 && !defined(RISCV_1_7)
#if PULP_CHIP_FAMILY == CHIP_GAP
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c008d84:	014026f3          	csrr	a3,uhartid
  task->arg[0] = (uint32_t)callback;
1c008d88:	1c009737          	lui	a4,0x1c009
#endif
#else
  asm("csrr %0, 0xF10" : "=r" (hart_id) : );
#endif
  // in PULP the hart id is {22'b0, cluster_id, core_id}
  return (hart_id >> 5) & 0x3f;
1c008d8c:	8695                	srai	a3,a3,0x5
1c008d8e:	ce470713          	addi	a4,a4,-796 # 1c008ce4 <__pi_ram_cluster_req>
1c008d92:	f266b6b3          	p.bclr	a3,a3,25,6
1c008d96:	cfd8                	sw	a4,28(a5)
  task->implem.keep = 1;
1c008d98:	4705                	li	a4,1
    req->device = device;
1c008d9a:	c388                	sw	a0,0(a5)
    req->addr = addr;
1c008d9c:	c3d0                	sw	a2,4(a5)
    req->pi_ram_addr = pi_ram_addr;
1c008d9e:	c78c                	sw	a1,8(a5)
    req->cid = pi_cluster_id();
1c008da0:	08d78ea3          	sb	a3,157(a5)
    req->done = 0;
1c008da4:	08078e23          	sb	zero,156(a5)
    req->is_2d = 0;
1c008da8:	08078fa3          	sb	zero,159(a5)
  task->id = PI_TASK_CALLBACK_ID;
1c008dac:	0207a823          	sw	zero,48(a5)
  task->arg[1] = (uint32_t)arg;
1c008db0:	d39c                	sw	a5,32(a5)
  task->implem.keep = 1;
1c008db2:	c3b8                	sw	a4,64(a5)
1c008db4:	02078623          	sb	zero,44(a5)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c008db8:	01878513          	addi	a0,a5,24
1c008dbc:	1350106f          	j	1c00a6f0 <pi_cl_send_task_to_fc>

1c008dc0 <pi_cl_ram_copy_2d>:
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
    req->stride = stride;
    req->length = length;
1c008dc0:	00f8aa23          	sw	a5,20(a7)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c008dc4:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c008dc8:	8795                	srai	a5,a5,0x5
1c008dca:	f267b7b3          	p.bclr	a5,a5,25,6
    req->cid = pi_cluster_id();
1c008dce:	08f88ea3          	sb	a5,157(a7)
    req->done = 0;
    req->ext2loc = ext2loc;
    req->is_2d = 1;
1c008dd2:	4785                	li	a5,1
1c008dd4:	08f88fa3          	sb	a5,159(a7)
  task->arg[0] = (uint32_t)callback;
1c008dd8:	1c0097b7          	lui	a5,0x1c009
1c008ddc:	ce478793          	addi	a5,a5,-796 # 1c008ce4 <__pi_ram_cluster_req>
1c008de0:	00f8ae23          	sw	a5,28(a7)
  task->implem.keep = 1;
1c008de4:	4785                	li	a5,1
    req->device = device;
1c008de6:	00a8a023          	sw	a0,0(a7)
    req->addr = addr;
1c008dea:	00c8a223          	sw	a2,4(a7)
    req->pi_ram_addr = pi_ram_addr;
1c008dee:	00b8a423          	sw	a1,8(a7)
    req->size = size;
1c008df2:	00d8a623          	sw	a3,12(a7)
    req->stride = stride;
1c008df6:	00e8a823          	sw	a4,16(a7)
    req->done = 0;
1c008dfa:	08088e23          	sb	zero,156(a7)
    req->ext2loc = ext2loc;
1c008dfe:	09088f23          	sb	a6,158(a7)
  task->id = PI_TASK_CALLBACK_ID;
1c008e02:	0208a823          	sw	zero,48(a7)
  task->arg[1] = (uint32_t)arg;
1c008e06:	0318a023          	sw	a7,32(a7)
  task->implem.keep = 1;
1c008e0a:	04f8a023          	sw	a5,64(a7)
1c008e0e:	02088623          	sb	zero,44(a7)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c008e12:	01888513          	addi	a0,a7,24
1c008e16:	0db0106f          	j	1c00a6f0 <pi_cl_send_task_to_fc>

1c008e1a <extern_alloc_init>:
  }
  printf("=============================================\n");
}

int extern_alloc_init(extern_alloc_t *a, void *addr, int size)
{
1c008e1a:	1101                	addi	sp,sp,-32
1c008e1c:	ca26                	sw	s1,20(sp)
1c008e1e:	ce06                	sw	ra,28(sp)
1c008e20:	cc22                	sw	s0,24(sp)
1c008e22:	84aa                	mv	s1,a0
  if (size)
1c008e24:	ce1d                	beqz	a2,1c008e62 <extern_alloc_init+0x48>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c008e26:	4531                	li	a0,12
  {
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c008e28:	00758413          	addi	s0,a1,7
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c008e2c:	c62e                	sw	a1,12(sp)
1c008e2e:	c432                	sw	a2,8(sp)
1c008e30:	2a1010ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c008e34:	c4043433          	p.bclr	s0,s0,2,0
    alloc_chunk_extern_t *chunk = __alloc_chunk();
    if (chunk == NULL) return -1;
1c008e38:	45b2                	lw	a1,12(sp)
1c008e3a:	4622                	lw	a2,8(sp)
1c008e3c:	c515                	beqz	a0,1c008e68 <extern_alloc_init+0x4e>
    size = size - (staaddr - (unsigned int)addr);
1c008e3e:	95b2                	add	a1,a1,a2
1c008e40:	8d81                	sub	a1,a1,s0
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c008e42:	4601                	li	a2,0
    if (size > 0) {
1c008e44:	00b05963          	blez	a1,1c008e56 <extern_alloc_init+0x3c>
      a->first_free = chunk;
1c008e48:	c088                	sw	a0,0(s1)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c008e4a:	c405b5b3          	p.bclr	a1,a1,2,0
1c008e4e:	c10c                	sw	a1,0(a0)
      chunk->next = NULL;
1c008e50:	00052223          	sw	zero,4(a0)
      chunk->addr = staaddr;
1c008e54:	c500                	sw	s0,8(a0)
}
1c008e56:	40f2                	lw	ra,28(sp)
1c008e58:	4462                	lw	s0,24(sp)
1c008e5a:	44d2                	lw	s1,20(sp)
1c008e5c:	8532                	mv	a0,a2
1c008e5e:	6105                	addi	sp,sp,32
1c008e60:	8082                	ret
    a->first_free = NULL;
1c008e62:	00052023          	sw	zero,0(a0)
1c008e66:	bfc5                	j	1c008e56 <extern_alloc_init+0x3c>
    if (chunk == NULL) return -1;
1c008e68:	567d                	li	a2,-1
1c008e6a:	b7f5                	j	1c008e56 <extern_alloc_init+0x3c>

1c008e6c <extern_alloc_deinit>:
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c008e6c:	4108                	lw	a0,0(a0)
1c008e6e:	45b1                	li	a1,12
1c008e70:	26f0106f          	j	1c00a8de <pi_l2_free>

1c008e74 <extern_alloc>:



int extern_alloc(extern_alloc_t *a, int size, void **chunk)
{
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c008e74:	411c                	lw	a5,0(a0)

  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c008e76:	059d                	addi	a1,a1,7
1c008e78:	c405b5b3          	p.bclr	a1,a1,2,0
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c008e7c:	4681                	li	a3,0

  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c008e7e:	c7b1                	beqz	a5,1c008eca <extern_alloc+0x56>
1c008e80:	4398                	lw	a4,0(a5)
1c008e82:	02b74863          	blt	a4,a1,1c008eb2 <extern_alloc+0x3e>
{
1c008e86:	1141                	addi	sp,sp,-16
1c008e88:	c226                	sw	s1,4(sp)
1c008e8a:	c606                	sw	ra,12(sp)
1c008e8c:	c422                	sw	s0,8(sp)
1c008e8e:	4784                	lw	s1,8(a5)

  if (pt) {
    if (pt->size == size) {
1c008e90:	02b71663          	bne	a4,a1,1c008ebc <extern_alloc+0x48>
1c008e94:	43d8                	lw	a4,4(a5)
      // Special case where the whole block disappears
      // This special case is interesting to support when we allocate aligned pages, to limit fragmentation
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c008e96:	c28d                	beqz	a3,1c008eb8 <extern_alloc+0x44>
1c008e98:	c2d8                	sw	a4,4(a3)
1c008e9a:	8432                	mv	s0,a2
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c008e9c:	45b1                	li	a1,12
1c008e9e:	853e                	mv	a0,a5
1c008ea0:	23f010ef          	jal	ra,1c00a8de <pi_l2_free>
      void *addr = (void *)pt->addr;
      __free_chunk(pt);
      *chunk = addr;
1c008ea4:	c004                	sw	s1,0(s0)
  } else {
    //warning("Not enough memory to allocate\n");
    *chunk = (void *)0xffffffff;
    return -1;
  }
}
1c008ea6:	40b2                	lw	ra,12(sp)
1c008ea8:	4422                	lw	s0,8(sp)
1c008eaa:	4492                	lw	s1,4(sp)
      return 0;
1c008eac:	4501                	li	a0,0
}
1c008eae:	0141                	addi	sp,sp,16
1c008eb0:	8082                	ret
  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c008eb2:	86be                	mv	a3,a5
1c008eb4:	43dc                	lw	a5,4(a5)
1c008eb6:	b7e1                	j	1c008e7e <extern_alloc+0xa>
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c008eb8:	c118                	sw	a4,0(a0)
1c008eba:	b7c5                	j	1c008e9a <extern_alloc+0x26>
      pt->size = pt->size - size;
1c008ebc:	40b706b3          	sub	a3,a4,a1
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c008ec0:	9726                	add	a4,a4,s1
      pt->size = pt->size - size;
1c008ec2:	c394                	sw	a3,0(a5)
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c008ec4:	8f0d                	sub	a4,a4,a1
      *chunk = result;
1c008ec6:	c218                	sw	a4,0(a2)
1c008ec8:	bff9                	j	1c008ea6 <extern_alloc+0x32>
    *chunk = (void *)0xffffffff;
1c008eca:	57fd                	li	a5,-1
1c008ecc:	c21c                	sw	a5,0(a2)
    return -1;
1c008ece:	557d                	li	a0,-1
}
1c008ed0:	8082                	ret

1c008ed2 <extern_free>:
  return 0;
}

int __attribute__((noinline)) extern_free(extern_alloc_t *a, int size, void *addr)

{
1c008ed2:	7179                	addi	sp,sp,-48
1c008ed4:	d422                	sw	s0,40(sp)
  alloc_chunk_extern_t *chunk;
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c008ed6:	4100                	lw	s0,0(a0)
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c008ed8:	059d                	addi	a1,a1,7
{
1c008eda:	d226                	sw	s1,36(sp)
1c008edc:	d04a                	sw	s2,32(sp)
1c008ede:	ce4e                	sw	s3,28(sp)
1c008ee0:	d606                	sw	ra,44(sp)
1c008ee2:	89aa                	mv	s3,a0
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c008ee4:	c405b933          	p.bclr	s2,a1,2,0
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c008ee8:	4481                	li	s1,0

  while (next && next->addr < (unsigned int)addr) {
1c008eea:	c439                	beqz	s0,1c008f38 <extern_free+0x66>
1c008eec:	441c                	lw	a5,8(s0)
1c008eee:	04c7e263          	bltu	a5,a2,1c008f32 <extern_free+0x60>
    prev = next; next = next->next; 
  }

  if (next && ((char *)addr + size) == (char *)next->addr) {
1c008ef2:	01260733          	add	a4,a2,s2
1c008ef6:	04f71163          	bne	a4,a5,1c008f38 <extern_free+0x66>
    /* Coalesce with next */
    next->size = size + next->size;
1c008efa:	400c                	lw	a1,0(s0)
    next->addr = (unsigned int)addr;
1c008efc:	c410                	sw	a2,8(s0)
    next->size = size + next->size;
1c008efe:	992e                	add	s2,s2,a1
1c008f00:	01242023          	sw	s2,0(s0)
    chunk->size = size;
    chunk->next = next;
    chunk->addr = (unsigned int)addr;
  }

  if (prev) {
1c008f04:	c8b1                	beqz	s1,1c008f58 <extern_free+0x86>
    if (((char *)prev->addr + prev->size) == (char *)addr) {
1c008f06:	4094                	lw	a3,0(s1)
1c008f08:	4498                	lw	a4,8(s1)
1c008f0a:	9736                	add	a4,a4,a3
1c008f0c:	04e61463          	bne	a2,a4,1c008f54 <extern_free+0x82>
      /* Coalesce with previous */
      prev->size += chunk->size;
1c008f10:	401c                	lw	a5,0(s0)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c008f12:	45b1                	li	a1,12
1c008f14:	8522                	mv	a0,s0
      prev->size += chunk->size;
1c008f16:	97b6                	add	a5,a5,a3
1c008f18:	c09c                	sw	a5,0(s1)
      prev->next = chunk->next;
1c008f1a:	405c                	lw	a5,4(s0)
1c008f1c:	c0dc                	sw	a5,4(s1)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c008f1e:	1c1010ef          	jal	ra,1c00a8de <pi_l2_free>
    }
  } else {
    a->first_free = chunk;
  }

  return 0;
1c008f22:	4501                	li	a0,0
}
1c008f24:	50b2                	lw	ra,44(sp)
1c008f26:	5422                	lw	s0,40(sp)
1c008f28:	5492                	lw	s1,36(sp)
1c008f2a:	5902                	lw	s2,32(sp)
1c008f2c:	49f2                	lw	s3,28(sp)
1c008f2e:	6145                	addi	sp,sp,48
1c008f30:	8082                	ret
    prev = next; next = next->next; 
1c008f32:	84a2                	mv	s1,s0
1c008f34:	4040                	lw	s0,4(s0)
1c008f36:	bf55                	j	1c008eea <extern_free+0x18>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c008f38:	4531                	li	a0,12
1c008f3a:	c632                	sw	a2,12(sp)
1c008f3c:	195010ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c008f40:	87aa                	mv	a5,a0
    if (chunk == NULL) return -1;
1c008f42:	4632                	lw	a2,12(sp)
1c008f44:	557d                	li	a0,-1
1c008f46:	dff9                	beqz	a5,1c008f24 <extern_free+0x52>
    chunk->next = next;
1c008f48:	c3c0                	sw	s0,4(a5)
    chunk->size = size;
1c008f4a:	0127a023          	sw	s2,0(a5)
    chunk->addr = (unsigned int)addr;
1c008f4e:	c790                	sw	a2,8(a5)
1c008f50:	843e                	mv	s0,a5
1c008f52:	bf4d                	j	1c008f04 <extern_free+0x32>
      prev->next = chunk;
1c008f54:	c0c0                	sw	s0,4(s1)
1c008f56:	b7f1                	j	1c008f22 <extern_free+0x50>
    a->first_free = chunk;
1c008f58:	0089a023          	sw	s0,0(s3)
1c008f5c:	b7d9                	j	1c008f22 <extern_free+0x50>

1c008f5e <pi_partition_get_flash_offset>:
        return 0;
}

uint32_t pi_partition_get_flash_offset(const pi_partition_t *partition)
{
    if(partition)
1c008f5e:	c119                	beqz	a0,1c008f64 <pi_partition_get_flash_offset+0x6>
        return partition->offset;
1c008f60:	4548                	lw	a0,12(a0)
1c008f62:	8082                	ret
    else
        return UINT32_MAX;
1c008f64:	557d                	li	a0,-1
}
1c008f66:	8082                	ret

1c008f68 <pi_partition_table_free>:

void pi_partition_table_free(pi_partition_table_t table)
{
    flash_partition_table_free((flash_partition_table_t *) table);
1c008f68:	aaf1                	j	1c009144 <flash_partition_table_free>

1c008f6a <pi_partition_table_load>:

pi_err_t pi_partition_table_load(pi_device_t *flash, const pi_partition_table_t *table)
{
    pi_err_t rc;
    
    rc = flash_partition_table_load(flash, (const flash_partition_table_t **) table, NULL);
1c008f6a:	4601                	li	a2,0
1c008f6c:	a8d1                	j	1c009040 <flash_partition_table_load>

1c008f6e <pi_partition_find_first>:

const pi_partition_t *
pi_partition_find_first(const pi_partition_table_t table, const pi_partition_type_t type,
                        const pi_partition_subtype_t subtype,
                        const char *label)
{
1c008f6e:	1141                	addi	sp,sp,-16
1c008f70:	c226                	sw	s1,4(sp)
1c008f72:	c606                	sw	ra,12(sp)
1c008f74:	c422                	sw	s0,8(sp)
1c008f76:	84aa                	mv	s1,a0
    pi_partition_t *partition;
    const flash_partition_info_t *info;
    
    info = flash_partition_find_first((const flash_partition_table_t *) table, type, subtype, label);
1c008f78:	2ac5                	jal	1c009168 <flash_partition_find_first>
    if(info == NULL)
1c008f7a:	c539                	beqz	a0,1c008fc8 <pi_partition_find_first+0x5a>
1c008f7c:	842a                	mv	s0,a0
        return NULL;
    
    partition = pi_l2_malloc(sizeof(pi_partition_t));
1c008f7e:	02800513          	li	a0,40
1c008f82:	14f010ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
    partition->type = info->type;
1c008f86:	00244783          	lbu	a5,2(s0)
    partition->subtype = info->subtype;
    partition->size = info->pos.size;
    partition->offset = info->pos.offset;
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c008f8a:	4098                	lw	a4,0(s1)
    partition->type = info->type;
1c008f8c:	c15c                	sw	a5,4(a0)
    partition->subtype = info->subtype;
1c008f8e:	00344783          	lbu	a5,3(s0)
1c008f92:	c51c                	sw	a5,8(a0)
    partition->size = info->pos.size;
1c008f94:	441c                	lw	a5,8(s0)
1c008f96:	c91c                	sw	a5,16(a0)
    partition->offset = info->pos.offset;
1c008f98:	405c                	lw	a5,4(s0)
1c008f9a:	c55c                	sw	a5,12(a0)
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c008f9c:	87aa                	mv	a5,a0
1c008f9e:	00e7aa2b          	p.sw	a4,20(a5!)
    memcpy(partition->label, info->label, 16);
1c008fa2:	4458                	lw	a4,12(s0)
1c008fa4:	c398                	sw	a4,0(a5)
1c008fa6:	481c                	lw	a5,16(s0)
1c008fa8:	cd1c                	sw	a5,24(a0)
1c008faa:	485c                	lw	a5,20(s0)
1c008fac:	cd5c                	sw	a5,28(a0)
1c008fae:	4c1c                	lw	a5,24(s0)
    partition->label[16] = 0;
1c008fb0:	02050223          	sb	zero,36(a0)
    partition->encrypted = false;
1c008fb4:	020502a3          	sb	zero,37(a0)
    memcpy(partition->label, info->label, 16);
1c008fb8:	d11c                	sw	a5,32(a0)
    partition->read_only = false;
1c008fba:	02050323          	sb	zero,38(a0)
    
    return (const pi_partition_t *) partition;
}
1c008fbe:	40b2                	lw	ra,12(sp)
1c008fc0:	4422                	lw	s0,8(sp)
1c008fc2:	4492                	lw	s1,4(sp)
1c008fc4:	0141                	addi	sp,sp,16
1c008fc6:	8082                	ret
        return NULL;
1c008fc8:	4501                	li	a0,0
1c008fca:	bfd5                	j	1c008fbe <pi_partition_find_first+0x50>

1c008fcc <flash_partition_table_verify>:

pi_err_t flash_partition_table_verify(const flash_partition_table_t *table)
{
    const flash_partition_info_t *part;
    const flash_partition_table_header_t *header = &table->header;
    const flash_partition_info_t *partition_table = table->partitions;
1c008fcc:	514c                	lw	a1,36(a0)
    MD5_CTX context;
    uint8_t digest[16];

    // Check magic number for each partition
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c008fce:	00754683          	lbu	a3,7(a0)
1c008fd2:	4781                	li	a5,0
1c008fd4:	872e                	mv	a4,a1
    {
        part = partition_table + num_parts;
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c008fd6:	1ba00613          	li	a2,442
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c008fda:	04f69663          	bne	a3,a5,1c009026 <flash_partition_table_verify+0x5a>
        {
            return PI_ERR_INVALID_STATE;
        }
    }

    if (header->crc_flags)
1c008fde:	00854783          	lbu	a5,8(a0)
1c008fe2:	cfa9                	beqz	a5,1c00903c <flash_partition_table_verify+0x70>
{
1c008fe4:	7155                	addi	sp,sp,-208
1c008fe6:	c5a2                	sw	s0,200(sp)
1c008fe8:	842a                	mv	s0,a0
    {
        MD5_Init(&context);
1c008fea:	1028                	addi	a0,sp,40
{
1c008fec:	c786                	sw	ra,204(sp)
        MD5_Init(&context);
1c008fee:	c62e                	sw	a1,12(sp)
1c008ff0:	2bb000ef          	jal	ra,1c009aaa <MD5_Init>
        MD5_Update(&context, (unsigned char *) partition_table,
                   header->nbr_of_entries * sizeof(flash_partition_info_t));
1c008ff4:	00744603          	lbu	a2,7(s0)
        MD5_Update(&context, (unsigned char *) partition_table,
1c008ff8:	45b2                	lw	a1,12(sp)
1c008ffa:	1028                	addi	a0,sp,40
1c008ffc:	0616                	slli	a2,a2,0x5
1c008ffe:	2df000ef          	jal	ra,1c009adc <MD5_Update>
        MD5_Final(digest, &context);
1c009002:	102c                	addi	a1,sp,40
1c009004:	0828                	addi	a0,sp,24
1c009006:	373000ef          	jal	ra,1c009b78 <MD5_Final>

        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c00900a:	4641                	li	a2,16
1c00900c:	082c                	addi	a1,sp,24
1c00900e:	01440513          	addi	a0,s0,20
1c009012:	2b2040ef          	jal	ra,1c00d2c4 <strncmp>
        {
            return PI_ERR_INVALID_CRC;
1c009016:	47a1                	li	a5,8
        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c009018:	e111                	bnez	a0,1c00901c <flash_partition_table_verify+0x50>
        }
    }

    return PI_OK;
1c00901a:	4781                	li	a5,0
}
1c00901c:	40be                	lw	ra,204(sp)
1c00901e:	442e                	lw	s0,200(sp)
1c009020:	853e                	mv	a0,a5
1c009022:	6169                	addi	sp,sp,208
1c009024:	8082                	ret
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c009026:	0207580b          	p.lhu	a6,32(a4!)
1c00902a:	00c81663          	bne	a6,a2,1c009036 <flash_partition_table_verify+0x6a>
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00902e:	0785                	addi	a5,a5,1
1c009030:	0ff7f793          	andi	a5,a5,255
1c009034:	b75d                	j	1c008fda <flash_partition_table_verify+0xe>
            return PI_ERR_INVALID_STATE;
1c009036:	478d                	li	a5,3
}
1c009038:	853e                	mv	a0,a5
1c00903a:	8082                	ret
    return PI_OK;
1c00903c:	4781                	li	a5,0
1c00903e:	bfed                	j	1c009038 <flash_partition_table_verify+0x6c>

1c009040 <flash_partition_table_load>:

pi_err_t flash_partition_table_load(pi_device_t *flash, const flash_partition_table_t **partition_table,
                                    uint8_t *nbr_of_entries)
{
1c009040:	1101                	addi	sp,sp,-32
1c009042:	ca26                	sw	s1,20(sp)
1c009044:	ce06                	sw	ra,28(sp)
1c009046:	cc22                	sw	s0,24(sp)
1c009048:	c84a                	sw	s2,16(sp)
1c00904a:	c64e                	sw	s3,12(sp)
1c00904c:	c452                	sw	s4,8(sp)
1c00904e:	c256                	sw	s5,4(sp)
    flash_partition_info_t *partitions = NULL;

    if(partition_table == NULL)
    {
        PARTITION_TRACE_ERR("Table argument is NULL");
        return PI_ERR_INVALID_ARG;
1c009050:	4489                	li	s1,2
    if(partition_table == NULL)
1c009052:	c9e1                	beqz	a1,1c009122 <flash_partition_table_load+0xe2>
1c009054:	892a                	mv	s2,a0
    }

// Alloc table containing header
    table = pi_l2_malloc(sizeof(*table));
1c009056:	02800513          	li	a0,40
1c00905a:	89b2                	mv	s3,a2
1c00905c:	8aae                	mv	s5,a1
1c00905e:	073010ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c009062:	842a                	mv	s0,a0
    if(table == NULL)
    {
        PARTITION_TRACE_ERR("Unable to allocate partition table in L2.");
        rc = PI_ERR_L2_NO_MEM;
1c009064:	20100493          	li	s1,513
    if(table == NULL)
1c009068:	cd4d                	beqz	a0,1c009122 <flash_partition_table_load+0xe2>
        goto mount_error;
    }

    table_offset_l2 = pi_l2_malloc(sizeof(*table_offset_l2));
1c00906a:	4511                	li	a0,4
1c00906c:	065010ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c009070:	84aa                	mv	s1,a0
    if(table_offset_l2 == NULL)
1c009072:	c171                	beqz	a0,1c009136 <flash_partition_table_load+0xf6>
  api->read(device, pi_flash_addr, data, size);
1c009074:	00092783          	lw	a5,0(s2)
1c009078:	862a                	mv	a2,a0
1c00907a:	4581                	li	a1,0
1c00907c:	5b9c                	lw	a5,48(a5)
1c00907e:	4691                	li	a3,4
1c009080:	854a                	mv	a0,s2
1c009082:	9782                	jalr	a5
        rc = PI_ERR_L2_NO_MEM;
        goto mount_error;
    }

    pi_flash_read(flash, 0, table_offset_l2, 4);
    if(*table_offset_l2 == 0)
1c009084:	0004aa03          	lw	s4,0(s1)

    return PI_OK;

    mount_error:
    if(table_offset_l2)
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c009088:	4591                	li	a1,4
1c00908a:	8526                	mv	a0,s1
    if(*table_offset_l2 == 0)
1c00908c:	0a0a0863          	beqz	s4,1c00913c <flash_partition_table_load+0xfc>
    pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c009090:	04f010ef          	jal	ra,1c00a8de <pi_l2_free>
1c009094:	00092783          	lw	a5,0(s2)
1c009098:	02000693          	li	a3,32
1c00909c:	00440613          	addi	a2,s0,4
1c0090a0:	5b9c                	lw	a5,48(a5)
1c0090a2:	85d2                	mv	a1,s4
1c0090a4:	854a                	mv	a0,s2
1c0090a6:	9782                	jalr	a5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c0090a8:	00445703          	lhu	a4,4(s0)
1c0090ac:	2ba00793          	li	a5,698
        rc = PI_ERR_NOT_FOUND;
1c0090b0:	4495                	li	s1,5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c0090b2:	04f71763          	bne	a4,a5,1c009100 <flash_partition_table_load+0xc0>
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c0090b6:	00644783          	lbu	a5,6(s0)
        rc = PI_ERR_INVALID_VERSION;
1c0090ba:	44a5                	li	s1,9
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c0090bc:	0417b263          	p.bneimm	a5,1,1c009100 <flash_partition_table_load+0xc0>
    table->partitions = pi_l2_malloc(sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0090c0:	00744503          	lbu	a0,7(s0)
1c0090c4:	0516                	slli	a0,a0,0x5
1c0090c6:	00b010ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c0090ca:	d048                	sw	a0,36(s0)
1c0090cc:	862a                	mv	a2,a0
    if(table->partitions == NULL)
1c0090ce:	c525                	beqz	a0,1c009136 <flash_partition_table_load+0xf6>
1c0090d0:	00092783          	lw	a5,0(s2)
                  sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0090d4:	00744683          	lbu	a3,7(s0)
1c0090d8:	020a0593          	addi	a1,s4,32
1c0090dc:	5b9c                	lw	a5,48(a5)
1c0090de:	0696                	slli	a3,a3,0x5
1c0090e0:	854a                	mv	a0,s2
1c0090e2:	9782                	jalr	a5
    if(table->header.crc_flags)
1c0090e4:	00844783          	lbu	a5,8(s0)
1c0090e8:	c395                	beqz	a5,1c00910c <flash_partition_table_load+0xcc>
        rc = flash_partition_table_verify(table);
1c0090ea:	8522                	mv	a0,s0
1c0090ec:	ee1ff0ef          	jal	ra,1c008fcc <flash_partition_table_verify>
1c0090f0:	84aa                	mv	s1,a0
        if(rc != PI_OK)
1c0090f2:	cd09                	beqz	a0,1c00910c <flash_partition_table_load+0xcc>
            pi_l2_free(table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0090f4:	00744583          	lbu	a1,7(s0)
1c0090f8:	5048                	lw	a0,36(s0)
1c0090fa:	0596                	slli	a1,a1,0x5
1c0090fc:	7e2010ef          	jal	ra,1c00a8de <pi_l2_free>
    if(table)
        pi_l2_free(table, sizeof(*table));
1c009100:	02800593          	li	a1,40
1c009104:	8522                	mv	a0,s0
1c009106:	7d8010ef          	jal	ra,1c00a8de <pi_l2_free>
1c00910a:	a821                	j	1c009122 <flash_partition_table_load+0xe2>
    table->flash = flash;
1c00910c:	01242023          	sw	s2,0(s0)
    *partition_table = table;
1c009110:	008aa023          	sw	s0,0(s5)
    return PI_OK;
1c009114:	4481                	li	s1,0
    if(nbr_of_entries)
1c009116:	00098663          	beqz	s3,1c009122 <flash_partition_table_load+0xe2>
        *nbr_of_entries = table->header.nbr_of_entries;
1c00911a:	00744783          	lbu	a5,7(s0)
1c00911e:	00f98023          	sb	a5,0(s3)
    return rc;
}
1c009122:	40f2                	lw	ra,28(sp)
1c009124:	4462                	lw	s0,24(sp)
1c009126:	8526                	mv	a0,s1
1c009128:	4942                	lw	s2,16(sp)
1c00912a:	44d2                	lw	s1,20(sp)
1c00912c:	49b2                	lw	s3,12(sp)
1c00912e:	4a22                	lw	s4,8(sp)
1c009130:	4a92                	lw	s5,4(sp)
1c009132:	6105                	addi	sp,sp,32
1c009134:	8082                	ret
        rc = PI_ERR_L2_NO_MEM;
1c009136:	20100493          	li	s1,513
1c00913a:	b7d9                	j	1c009100 <flash_partition_table_load+0xc0>
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00913c:	7a2010ef          	jal	ra,1c00a8de <pi_l2_free>
        rc = PI_ERR_NOT_FOUND;
1c009140:	4495                	li	s1,5
1c009142:	bf7d                	j	1c009100 <flash_partition_table_load+0xc0>

1c009144 <flash_partition_table_free>:

void flash_partition_table_free(const flash_partition_table_t *table)
{
1c009144:	1141                	addi	sp,sp,-16
1c009146:	c422                	sw	s0,8(sp)
1c009148:	c606                	sw	ra,12(sp)
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00914a:	00754583          	lbu	a1,7(a0)
{
1c00914e:	842a                	mv	s0,a0
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c009150:	5148                	lw	a0,36(a0)
1c009152:	0596                	slli	a1,a1,0x5
1c009154:	78a010ef          	jal	ra,1c00a8de <pi_l2_free>
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c009158:	8522                	mv	a0,s0
}
1c00915a:	4422                	lw	s0,8(sp)
1c00915c:	40b2                	lw	ra,12(sp)
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00915e:	02800593          	li	a1,40
}
1c009162:	0141                	addi	sp,sp,16
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c009164:	77a0106f          	j	1c00a8de <pi_l2_free>

1c009168 <flash_partition_find_first>:


const flash_partition_info_t *flash_partition_find_first(const flash_partition_table_t *table, pi_partition_type_t type,
                                                         pi_partition_subtype_t subtype, const char *label)
{
1c009168:	7179                	addi	sp,sp,-48
1c00916a:	d226                	sw	s1,36(sp)
1c00916c:	d04a                	sw	s2,32(sp)
1c00916e:	cc52                	sw	s4,24(sp)
1c009170:	ca56                	sw	s5,20(sp)
1c009172:	d606                	sw	ra,44(sp)
1c009174:	d422                	sw	s0,40(sp)
1c009176:	ce4e                	sw	s3,28(sp)
    const flash_partition_info_t *part = NULL;

    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c009178:	00754983          	lbu	s3,7(a0)
{
1c00917c:	892a                	mv	s2,a0
1c00917e:	8a2e                	mv	s4,a1
1c009180:	8ab2                	mv	s5,a2
    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c009182:	4481                	li	s1,0
1c009184:	0ff4f793          	andi	a5,s1,255
1c009188:	0137ed63          	bltu	a5,s3,1c0091a2 <flash_partition_find_first+0x3a>
        if(label == NULL)
            return part;
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
            return part;
    }
    return NULL;
1c00918c:	4401                	li	s0,0
}
1c00918e:	8522                	mv	a0,s0
1c009190:	50b2                	lw	ra,44(sp)
1c009192:	5422                	lw	s0,40(sp)
1c009194:	5492                	lw	s1,36(sp)
1c009196:	5902                	lw	s2,32(sp)
1c009198:	49f2                	lw	s3,28(sp)
1c00919a:	4a62                	lw	s4,24(sp)
1c00919c:	4ad2                	lw	s5,20(sp)
1c00919e:	6145                	addi	sp,sp,48
1c0091a0:	8082                	ret
        part = table->partitions + i;
1c0091a2:	02492783          	lw	a5,36(s2)
1c0091a6:	00549413          	slli	s0,s1,0x5
1c0091aa:	943e                	add	s0,s0,a5
        if(part->type != type || part->subtype != subtype)
1c0091ac:	00244783          	lbu	a5,2(s0)
1c0091b0:	03479063          	bne	a5,s4,1c0091d0 <flash_partition_find_first+0x68>
1c0091b4:	00344783          	lbu	a5,3(s0)
1c0091b8:	01579c63          	bne	a5,s5,1c0091d0 <flash_partition_find_first+0x68>
        if(label == NULL)
1c0091bc:	dae9                	beqz	a3,1c00918e <flash_partition_find_first+0x26>
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
1c0091be:	8536                	mv	a0,a3
1c0091c0:	4641                	li	a2,16
1c0091c2:	00c40593          	addi	a1,s0,12
1c0091c6:	c636                	sw	a3,12(sp)
1c0091c8:	0fc040ef          	jal	ra,1c00d2c4 <strncmp>
1c0091cc:	46b2                	lw	a3,12(sp)
1c0091ce:	d161                	beqz	a0,1c00918e <flash_partition_find_first+0x26>
1c0091d0:	0485                	addi	s1,s1,1
1c0091d2:	bf4d                	j	1c009184 <flash_partition_find_first+0x1c>

1c0091d4 <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c0091d4:	715d                	addi	sp,sp,-80
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
1c0091d6:	00852283          	lw	t0,8(a0)
1c0091da:	fc060613          	addi	a2,a2,-64
{
1c0091de:	de52                	sw	s4,60(sp)
1c0091e0:	dc56                	sw	s5,56(sp)
1c0091e2:	8219                	srli	a2,a2,0x6
	b = ctx->b;
1c0091e4:	00c52803          	lw	a6,12(a0)
	c = ctx->c;
1c0091e8:	01052a03          	lw	s4,16(a0)
	d = ctx->d;
1c0091ec:	01452a83          	lw	s5,20(a0)
1c0091f0:	0605                	addi	a2,a2,1
{
1c0091f2:	c6a2                	sw	s0,76(sp)
1c0091f4:	c4a6                	sw	s1,72(sp)
1c0091f6:	c2ca                	sw	s2,68(sp)
1c0091f8:	c0ce                	sw	s3,64(sp)
1c0091fa:	da5a                	sw	s6,52(sp)
1c0091fc:	d85e                	sw	s7,48(sp)
1c0091fe:	d662                	sw	s8,44(sp)
1c009200:	d466                	sw	s9,40(sp)
1c009202:	d26a                	sw	s10,36(sp)
1c009204:	d06e                	sw	s11,32(sp)
1c009206:	87aa                	mv	a5,a0
	a = ctx->a;
1c009208:	cc16                	sw	t0,24(sp)
1c00920a:	ce32                	sw	a2,28(sp)
1c00920c:	4362                	lw	t1,24(sp)
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00920e:	0005a983          	lw	s3,0(a1)
1c009212:	d76aa537          	lui	a0,0xd76aa
1c009216:	47850513          	addi	a0,a0,1144 # d76aa478 <pulp__FC+0xd76aa479>
1c00921a:	00a30733          	add	a4,t1,a0
1c00921e:	013706b3          	add	a3,a4,s3
1c009222:	015a4733          	xor	a4,s4,s5
1c009226:	01077733          	and	a4,a4,a6
1c00922a:	0537ac23          	sw	s3,88(a5)
1c00922e:	01574733          	xor	a4,a4,s5
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c009232:	41d0                	lw	a2,4(a1)
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c009234:	9736                	add	a4,a4,a3
1c009236:	e8c7b6b7          	lui	a3,0xe8c7b
1c00923a:	4365                	li	t1,25
1c00923c:	75668693          	addi	a3,a3,1878 # e8c7b756 <pulp__FC+0xe8c7b757>
1c009240:	00da8e33          	add	t3,s5,a3
1c009244:	08675733          	p.ror	a4,a4,t1
1c009248:	9742                	add	a4,a4,a6
1c00924a:	00ce06b3          	add	a3,t3,a2
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00924e:	01484e33          	xor	t3,a6,s4
1c009252:	cff0                	sw	a2,92(a5)
1c009254:	00ee7e33          	and	t3,t3,a4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c009258:	0085a883          	lw	a7,8(a1)
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00925c:	014e4e33          	xor	t3,t3,s4
1c009260:	24207bb7          	lui	s7,0x24207
1c009264:	4d51                	li	s10,20
1c009266:	9e36                	add	t3,t3,a3
1c009268:	0dbb8b93          	addi	s7,s7,219 # 242070db <__l2_end+0x81f7a2b>
1c00926c:	017a0533          	add	a0,s4,s7
1c009270:	09ae5e33          	p.ror	t3,t3,s10
1c009274:	9e3a                	add	t3,t3,a4
1c009276:	011506b3          	add	a3,a0,a7
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00927a:	00e84533          	xor	a0,a6,a4
1c00927e:	0717a023          	sw	a7,96(a5)
1c009282:	01c57533          	and	a0,a0,t3
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c009286:	00c5a283          	lw	t0,12(a1)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00928a:	01054533          	xor	a0,a0,a6
1c00928e:	c1bddc37          	lui	s8,0xc1bdd
1c009292:	4cbd                	li	s9,15
1c009294:	9536                	add	a0,a0,a3
1c009296:	eeec0c13          	addi	s8,s8,-274 # c1bdceee <pulp__FC+0xc1bdceef>
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00929a:	c432                	sw	a2,8(sp)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00929c:	09955533          	p.ror	a0,a0,s9
1c0092a0:	01880633          	add	a2,a6,s8
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c0092a4:	0657a223          	sw	t0,100(a5)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c0092a8:	9572                	add	a0,a0,t3
1c0092aa:	005606b3          	add	a3,a2,t0
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c0092ae:	01c74633          	xor	a2,a4,t3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c0092b2:	0105ad83          	lw	s11,16(a1)
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c0092b6:	8e69                	and	a2,a2,a0
1c0092b8:	8e39                	xor	a2,a2,a4
1c0092ba:	f57c1eb7          	lui	t4,0xf57c1
1c0092be:	4c29                	li	s8,10
1c0092c0:	9636                	add	a2,a2,a3
1c0092c2:	fafe8e93          	addi	t4,t4,-81 # f57c0faf <pulp__FC+0xf57c0fb0>
1c0092c6:	01dd86b3          	add	a3,s11,t4
1c0092ca:	09865633          	p.ror	a2,a2,s8
1c0092ce:	962a                	add	a2,a2,a0
1c0092d0:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c0092d2:	00ae46b3          	xor	a3,t3,a0
1c0092d6:	07b7a423          	sw	s11,104(a5)
1c0092da:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c0092dc:	49c0                	lw	s0,20(a1)
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c0092de:	01c6c6b3          	xor	a3,a3,t3
1c0092e2:	9736                	add	a4,a4,a3
1c0092e4:	4787c6b7          	lui	a3,0x4787c
1c0092e8:	62a68693          	addi	a3,a3,1578 # 4787c62a <__l2_end+0x2b86cf7a>
1c0092ec:	00d40fb3          	add	t6,s0,a3
1c0092f0:	08675733          	p.ror	a4,a4,t1
1c0092f4:	9732                	add	a4,a4,a2
1c0092f6:	9e7e                	add	t3,t3,t6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c0092f8:	00c54fb3          	xor	t6,a0,a2
1c0092fc:	00efffb3          	and	t6,t6,a4
1c009300:	d7e0                	sw	s0,108(a5)
1c009302:	00afcfb3          	xor	t6,t6,a0
1c009306:	9ff2                	add	t6,t6,t3
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c009308:	0185ae03          	lw	t3,24(a1)
1c00930c:	a8304bb7          	lui	s7,0xa8304
1c009310:	613b8b93          	addi	s7,s7,1555 # a8304613 <pulp__FC+0xa8304614>
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c009314:	c646                	sw	a7,12(sp)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c009316:	09afdfb3          	p.ror	t6,t6,s10
1c00931a:	017e08b3          	add	a7,t3,s7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00931e:	07c7a823          	sw	t3,112(a5)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c009322:	9fba                	add	t6,t6,a4
1c009324:	9546                	add	a0,a0,a7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c009326:	00e648b3          	xor	a7,a2,a4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00932a:	01c5a903          	lw	s2,28(a1)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00932e:	01f8f8b3          	and	a7,a7,t6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c009332:	c86e                	sw	s11,16(sp)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c009334:	00c8c8b3          	xor	a7,a7,a2
1c009338:	fd469db7          	lui	s11,0xfd469
1c00933c:	98aa                	add	a7,a7,a0
1c00933e:	501d8d93          	addi	s11,s11,1281 # fd469501 <pulp__FC+0xfd469502>
1c009342:	01b906b3          	add	a3,s2,s11
1c009346:	0998d8b3          	p.ror	a7,a7,s9
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00934a:	0727aa23          	sw	s2,116(a5)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00934e:	98fe                	add	a7,a7,t6
1c009350:	9636                	add	a2,a2,a3
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c009352:	01f746b3          	xor	a3,a4,t6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c009356:	0205af03          	lw	t5,32(a1)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00935a:	0116f6b3          	and	a3,a3,a7
1c00935e:	8eb9                	xor	a3,a3,a4
1c009360:	6980aeb7          	lui	t4,0x6980a
1c009364:	9636                	add	a2,a2,a3
1c009366:	8d8e8e93          	addi	t4,t4,-1832 # 698098d8 <__l2_end+0x4d7fa228>
1c00936a:	01df06b3          	add	a3,t5,t4
1c00936e:	09865633          	p.ror	a2,a2,s8
1c009372:	9646                	add	a2,a2,a7
1c009374:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c009376:	011fc6b3          	xor	a3,t6,a7
1c00937a:	07e7ac23          	sw	t5,120(a5)
1c00937e:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c009380:	51c8                	lw	a0,36(a1)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c009382:	01f6c6b3          	xor	a3,a3,t6
1c009386:	96ba                	add	a3,a3,a4
1c009388:	8b44f737          	lui	a4,0x8b44f
1c00938c:	7af70713          	addi	a4,a4,1967 # 8b44f7af <pulp__FC+0x8b44f7b0>
1c009390:	00e504b3          	add	s1,a0,a4
1c009394:	0866d6b3          	p.ror	a3,a3,t1
1c009398:	96b2                	add	a3,a3,a2
1c00939a:	9fa6                	add	t6,t6,s1
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00939c:	00c8c4b3          	xor	s1,a7,a2
1c0093a0:	8cf5                	and	s1,s1,a3
1c0093a2:	dfe8                	sw	a0,124(a5)
1c0093a4:	0114c4b3          	xor	s1,s1,a7
1c0093a8:	94fe                	add	s1,s1,t6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c0093aa:	0285af83          	lw	t6,40(a1)
1c0093ae:	7bd9                	lui	s7,0xffff6
1c0093b0:	bb1b8b93          	addi	s7,s7,-1103 # ffff5bb1 <pulp__FC+0xffff5bb2>
1c0093b4:	017f8eb3          	add	t4,t6,s7
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c0093b8:	09a4d4b3          	p.ror	s1,s1,s10
1c0093bc:	94b6                	add	s1,s1,a3
1c0093be:	98f6                	add	a7,a7,t4
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c0093c0:	00d64eb3          	xor	t4,a2,a3
1c0093c4:	009efeb3          	and	t4,t4,s1
1c0093c8:	09f7a023          	sw	t6,128(a5)
1c0093cc:	00ceceb3          	xor	t4,t4,a2
1c0093d0:	9ec6                	add	t4,t4,a7
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c0093d2:	02c5a883          	lw	a7,44(a1)
1c0093d6:	895cddb7          	lui	s11,0x895cd
1c0093da:	7bed8d93          	addi	s11,s11,1982 # 895cd7be <pulp__FC+0x895cd7bf>
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c0093de:	ca2a                	sw	a0,20(sp)
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c0093e0:	099edeb3          	p.ror	t4,t4,s9
1c0093e4:	01b88533          	add	a0,a7,s11
1c0093e8:	9ea6                	add	t4,t4,s1
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c0093ea:	0917a223          	sw	a7,132(a5)
1c0093ee:	962a                	add	a2,a2,a0
1c0093f0:	0096c533          	xor	a0,a3,s1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c0093f4:	0305a383          	lw	t2,48(a1)
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c0093f8:	01d57533          	and	a0,a0,t4
1c0093fc:	8d35                	xor	a0,a0,a3
1c0093fe:	6b901737          	lui	a4,0x6b901
1c009402:	9532                	add	a0,a0,a2
1c009404:	12270713          	addi	a4,a4,290 # 6b901122 <__l2_end+0x4f8f1a72>
1c009408:	00e38633          	add	a2,t2,a4
1c00940c:	09855533          	p.ror	a0,a0,s8
1c009410:	9576                	add	a0,a0,t4
1c009412:	96b2                	add	a3,a3,a2
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c009414:	01d4c633          	xor	a2,s1,t4
1c009418:	8e69                	and	a2,a2,a0
1c00941a:	8e25                	xor	a2,a2,s1
1c00941c:	0877a423          	sw	t2,136(a5)
1c009420:	96b2                	add	a3,a3,a2
1c009422:	0866d6b3          	p.ror	a3,a3,t1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c009426:	0345a303          	lw	t1,52(a1)
1c00942a:	fd987db7          	lui	s11,0xfd987
1c00942e:	193d8d93          	addi	s11,s11,403 # fd987193 <pulp__FC+0xfd987194>
1c009432:	01b30bb3          	add	s7,t1,s11
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c009436:	00d50733          	add	a4,a0,a3
1c00943a:	94de                	add	s1,s1,s7
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00943c:	00aecbb3          	xor	s7,t4,a0
1c009440:	00ebfbb3          	and	s7,s7,a4
1c009444:	01dbcbb3          	xor	s7,s7,t4
1c009448:	94de                	add	s1,s1,s7
1c00944a:	0867a623          	sw	t1,140(a5)
1c00944e:	09a4dbb3          	p.ror	s7,s1,s10
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c009452:	5d84                	lw	s1,56(a1)
1c009454:	a6794637          	lui	a2,0xa6794
1c009458:	38e60613          	addi	a2,a2,910 # a679438e <pulp__FC+0xa679438f>
1c00945c:	00c48b33          	add	s6,s1,a2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c009460:	9bba                	add	s7,s7,a4
1c009462:	9eda                	add	t4,t4,s6
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c009464:	00e54b33          	xor	s6,a0,a4
1c009468:	017b7b33          	and	s6,s6,s7
1c00946c:	00ab4b33          	xor	s6,s6,a0
1c009470:	0897a823          	sw	s1,144(a5)
1c009474:	9eda                	add	t4,t4,s6
1c009476:	099edb33          	p.ror	s6,t4,s9
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00947a:	03c5ae83          	lw	t4,60(a1)
1c00947e:	49b416b7          	lui	a3,0x49b41
1c009482:	82168693          	addi	a3,a3,-2015 # 49b40821 <__l2_end+0x2db31171>
1c009486:	00de8633          	add	a2,t4,a3
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00948a:	9b5e                	add	s6,s6,s7
1c00948c:	9532                	add	a0,a0,a2
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00948e:	01774633          	xor	a2,a4,s7
1c009492:	01667633          	and	a2,a2,s6
1c009496:	8e39                	xor	a2,a2,a4
1c009498:	9532                	add	a0,a0,a2
1c00949a:	09855633          	p.ror	a2,a0,s8
1c00949e:	4c22                	lw	s8,8(sp)
1c0094a0:	f61e2d37          	lui	s10,0xf61e2
1c0094a4:	562d0d13          	addi	s10,s10,1378 # f61e2562 <pulp__FC+0xf61e2563>
1c0094a8:	965a                	add	a2,a2,s6
1c0094aa:	01ac06b3          	add	a3,s8,s10
1c0094ae:	9736                	add	a4,a4,a3

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
1c0094b0:	00cb46b3          	xor	a3,s6,a2
1c0094b4:	0176f6b3          	and	a3,a3,s7
1c0094b8:	0166c6b3          	xor	a3,a3,s6
1c0094bc:	4ded                	li	s11,27
1c0094be:	96ba                	add	a3,a3,a4
1c0094c0:	c040b537          	lui	a0,0xc040b
1c0094c4:	09b6d6b3          	p.ror	a3,a3,s11
1c0094c8:	34050513          	addi	a0,a0,832 # c040b340 <pulp__FC+0xc040b341>
1c0094cc:	96b2                	add	a3,a3,a2
1c0094ce:	00ae0733          	add	a4,t3,a0
1c0094d2:	9bba                	add	s7,s7,a4
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
1c0094d4:	00d64733          	xor	a4,a2,a3
1c0094d8:	01677733          	and	a4,a4,s6
1c0094dc:	8f31                	xor	a4,a4,a2
1c0094de:	4d5d                	li	s10,23
1c0094e0:	975e                	add	a4,a4,s7
1c0094e2:	265e6bb7          	lui	s7,0x265e6
1c0094e6:	09a75733          	p.ror	a4,a4,s10
1c0094ea:	a51b8b93          	addi	s7,s7,-1455 # 265e5a51 <__l2_end+0xa5d63a1>
1c0094ee:	9736                	add	a4,a4,a3
1c0094f0:	01788533          	add	a0,a7,s7
1c0094f4:	955a                	add	a0,a0,s6
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
1c0094f6:	00e6cb33          	xor	s6,a3,a4
1c0094fa:	00cb7b33          	and	s6,s6,a2
1c0094fe:	00db4b33          	xor	s6,s6,a3
1c009502:	4cc9                	li	s9,18
1c009504:	9b2a                	add	s6,s6,a0
1c009506:	e9b6cc37          	lui	s8,0xe9b6c
1c00950a:	099b5b33          	p.ror	s6,s6,s9
1c00950e:	7aac0c13          	addi	s8,s8,1962 # e9b6c7aa <pulp__FC+0xe9b6c7ab>
1c009512:	9b3a                	add	s6,s6,a4
1c009514:	01898533          	add	a0,s3,s8
1c009518:	962a                	add	a2,a2,a0
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
1c00951a:	01674533          	xor	a0,a4,s6
1c00951e:	8d75                	and	a0,a0,a3
1c009520:	8d39                	xor	a0,a0,a4
1c009522:	4c31                	li	s8,12
1c009524:	9532                	add	a0,a0,a2
1c009526:	d62f1bb7          	lui	s7,0xd62f1
1c00952a:	09855533          	p.ror	a0,a0,s8
1c00952e:	05db8b93          	addi	s7,s7,93 # d62f105d <pulp__FC+0xd62f105e>
1c009532:	955a                	add	a0,a0,s6
1c009534:	01740633          	add	a2,s0,s7
1c009538:	96b2                	add	a3,a3,a2
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
1c00953a:	00ab4633          	xor	a2,s6,a0
1c00953e:	8e79                	and	a2,a2,a4
1c009540:	01664633          	xor	a2,a2,s6
1c009544:	96b2                	add	a3,a3,a2
1c009546:	02441bb7          	lui	s7,0x2441
1c00954a:	09b6d6b3          	p.ror	a3,a3,s11
1c00954e:	453b8b93          	addi	s7,s7,1107 # 2441453 <__L2+0x23c1453>
1c009552:	96aa                	add	a3,a3,a0
1c009554:	017f8633          	add	a2,t6,s7
1c009558:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
1c00955a:	00d54633          	xor	a2,a0,a3
1c00955e:	01667633          	and	a2,a2,s6
1c009562:	8e29                	xor	a2,a2,a0
1c009564:	9732                	add	a4,a4,a2
1c009566:	d8a1ebb7          	lui	s7,0xd8a1e
1c00956a:	09a75733          	p.ror	a4,a4,s10
1c00956e:	681b8b93          	addi	s7,s7,1665 # d8a1e681 <pulp__FC+0xd8a1e682>
1c009572:	9736                	add	a4,a4,a3
1c009574:	017e8633          	add	a2,t4,s7
1c009578:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
1c00957a:	00e6c633          	xor	a2,a3,a4
1c00957e:	8e69                	and	a2,a2,a0
1c009580:	8e35                	xor	a2,a2,a3
1c009582:	4bc2                	lw	s7,16(sp)
1c009584:	9b32                	add	s6,s6,a2
1c009586:	e7d40637          	lui	a2,0xe7d40
1c00958a:	099b5b33          	p.ror	s6,s6,s9
1c00958e:	bc860613          	addi	a2,a2,-1080 # e7d3fbc8 <pulp__FC+0xe7d3fbc9>
1c009592:	9b3a                	add	s6,s6,a4
1c009594:	965e                	add	a2,a2,s7
1c009596:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
1c009598:	01674633          	xor	a2,a4,s6
1c00959c:	8e75                	and	a2,a2,a3
1c00959e:	8e39                	xor	a2,a2,a4
1c0095a0:	9532                	add	a0,a0,a2
1c0095a2:	4652                	lw	a2,20(sp)
1c0095a4:	21e1dbb7          	lui	s7,0x21e1d
1c0095a8:	09855533          	p.ror	a0,a0,s8
1c0095ac:	de6b8b93          	addi	s7,s7,-538 # 21e1cde6 <__l2_end+0x5e0d736>
1c0095b0:	955a                	add	a0,a0,s6
1c0095b2:	9bb2                	add	s7,s7,a2
1c0095b4:	96de                	add	a3,a3,s7
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
1c0095b6:	00ab4bb3          	xor	s7,s6,a0
1c0095ba:	00ebfbb3          	and	s7,s7,a4
1c0095be:	016bcbb3          	xor	s7,s7,s6
1c0095c2:	9bb6                	add	s7,s7,a3
1c0095c4:	c3370637          	lui	a2,0xc3370
1c0095c8:	09bbdbb3          	p.ror	s7,s7,s11
1c0095cc:	7d660613          	addi	a2,a2,2006 # c33707d6 <pulp__FC+0xc33707d7>
1c0095d0:	9baa                	add	s7,s7,a0
1c0095d2:	9626                	add	a2,a2,s1
1c0095d4:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
1c0095d6:	01754633          	xor	a2,a0,s7
1c0095da:	01667633          	and	a2,a2,s6
1c0095de:	8e29                	xor	a2,a2,a0
1c0095e0:	963a                	add	a2,a2,a4
1c0095e2:	f4d51737          	lui	a4,0xf4d51
1c0095e6:	09a65633          	p.ror	a2,a2,s10
1c0095ea:	d8770713          	addi	a4,a4,-633 # f4d50d87 <pulp__FC+0xf4d50d88>
1c0095ee:	965e                	add	a2,a2,s7
1c0095f0:	9716                	add	a4,a4,t0
1c0095f2:	9b3a                	add	s6,s6,a4
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
1c0095f4:	00cbc733          	xor	a4,s7,a2
1c0095f8:	8f69                	and	a4,a4,a0
1c0095fa:	01774733          	xor	a4,a4,s7
1c0095fe:	9b3a                	add	s6,s6,a4
1c009600:	455a1737          	lui	a4,0x455a1
1c009604:	099b5b33          	p.ror	s6,s6,s9
1c009608:	4ed70713          	addi	a4,a4,1261 # 455a14ed <__l2_end+0x29591e3d>
1c00960c:	9b32                	add	s6,s6,a2
1c00960e:	977a                	add	a4,a4,t5
1c009610:	953a                	add	a0,a0,a4
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
1c009612:	01664733          	xor	a4,a2,s6
1c009616:	01777733          	and	a4,a4,s7
1c00961a:	8f31                	xor	a4,a4,a2
1c00961c:	953a                	add	a0,a0,a4
1c00961e:	a9e3f6b7          	lui	a3,0xa9e3f
1c009622:	09855533          	p.ror	a0,a0,s8
1c009626:	90568693          	addi	a3,a3,-1787 # a9e3e905 <pulp__FC+0xa9e3e906>
1c00962a:	955a                	add	a0,a0,s6
1c00962c:	969a                	add	a3,a3,t1
1c00962e:	9bb6                	add	s7,s7,a3
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
1c009630:	00ab46b3          	xor	a3,s6,a0
1c009634:	8ef1                	and	a3,a3,a2
1c009636:	0166c6b3          	xor	a3,a3,s6
1c00963a:	9bb6                	add	s7,s7,a3
1c00963c:	09bbd6b3          	p.ror	a3,s7,s11
1c009640:	4bb2                	lw	s7,12(sp)
1c009642:	fcefa737          	lui	a4,0xfcefa
1c009646:	3f870713          	addi	a4,a4,1016 # fcefa3f8 <pulp__FC+0xfcefa3f9>
1c00964a:	96aa                	add	a3,a3,a0
1c00964c:	975e                	add	a4,a4,s7
1c00964e:	963a                	add	a2,a2,a4
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
1c009650:	00d54733          	xor	a4,a0,a3
1c009654:	01677733          	and	a4,a4,s6
1c009658:	8f29                	xor	a4,a4,a0
1c00965a:	963a                	add	a2,a2,a4
1c00965c:	09a65733          	p.ror	a4,a2,s10
1c009660:	676f0637          	lui	a2,0x676f0
1c009664:	2d960613          	addi	a2,a2,729 # 676f02d9 <__l2_end+0x4b6e0c29>
1c009668:	9736                	add	a4,a4,a3
1c00966a:	964a                	add	a2,a2,s2
1c00966c:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
1c00966e:	00e6c633          	xor	a2,a3,a4
1c009672:	8e69                	and	a2,a2,a0
1c009674:	8e35                	xor	a2,a2,a3
1c009676:	9b32                	add	s6,s6,a2
1c009678:	8d2a5637          	lui	a2,0x8d2a5
1c00967c:	099b5b33          	p.ror	s6,s6,s9
1c009680:	c8a60613          	addi	a2,a2,-886 # 8d2a4c8a <pulp__FC+0x8d2a4c8b>
1c009684:	9b3a                	add	s6,s6,a4
1c009686:	961e                	add	a2,a2,t2
1c009688:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
1c00968a:	01674633          	xor	a2,a4,s6
1c00968e:	8e75                	and	a2,a2,a3
1c009690:	8e39                	xor	a2,a2,a4
1c009692:	9532                	add	a0,a0,a2
1c009694:	09855533          	p.ror	a0,a0,s8
1c009698:	fffa4637          	lui	a2,0xfffa4
1c00969c:	955a                	add	a0,a0,s6
1c00969e:	94260613          	addi	a2,a2,-1726 # fffa3942 <pulp__FC+0xfffa3943>

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
1c0096a2:	00ab4bb3          	xor	s7,s6,a0
1c0096a6:	9622                	add	a2,a2,s0
1c0096a8:	96b2                	add	a3,a3,a2
1c0096aa:	00ebc633          	xor	a2,s7,a4
1c0096ae:	4cf1                	li	s9,28
1c0096b0:	96b2                	add	a3,a3,a2
1c0096b2:	8771f637          	lui	a2,0x8771f
1c0096b6:	0996d6b3          	p.ror	a3,a3,s9
1c0096ba:	68160613          	addi	a2,a2,1665 # 8771f681 <pulp__FC+0x8771f682>
1c0096be:	96aa                	add	a3,a3,a0
1c0096c0:	967a                	add	a2,a2,t5
1c0096c2:	9732                	add	a4,a4,a2
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
1c0096c4:	00dbc633          	xor	a2,s7,a3
1c0096c8:	4c55                	li	s8,21
1c0096ca:	963a                	add	a2,a2,a4
1c0096cc:	09865633          	p.ror	a2,a2,s8
1c0096d0:	6d9d6737          	lui	a4,0x6d9d6
1c0096d4:	9636                	add	a2,a2,a3
1c0096d6:	12270713          	addi	a4,a4,290 # 6d9d6122 <__l2_end+0x519c6a72>
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
1c0096da:	00c6cd33          	xor	s10,a3,a2
1c0096de:	9746                	add	a4,a4,a7
1c0096e0:	975a                	add	a4,a4,s6
1c0096e2:	00ad4b33          	xor	s6,s10,a0
1c0096e6:	4bc1                	li	s7,16
1c0096e8:	975a                	add	a4,a4,s6
1c0096ea:	fde54b37          	lui	s6,0xfde54
1c0096ee:	09775733          	p.ror	a4,a4,s7
1c0096f2:	80cb0b13          	addi	s6,s6,-2036 # fde5380c <pulp__FC+0xfde5380d>
1c0096f6:	9732                	add	a4,a4,a2
1c0096f8:	9b26                	add	s6,s6,s1
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
1c0096fa:	00ed4d33          	xor	s10,s10,a4
1c0096fe:	955a                	add	a0,a0,s6
1c009700:	956a                	add	a0,a0,s10
1c009702:	4b25                	li	s6,9
1c009704:	09655533          	p.ror	a0,a0,s6
1c009708:	953a                	add	a0,a0,a4
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00970a:	00a74d33          	xor	s10,a4,a0
1c00970e:	4da2                	lw	s11,8(sp)
1c009710:	c06a                	sw	s10,0(sp)
1c009712:	a4befd37          	lui	s10,0xa4bef
1c009716:	a44d0d13          	addi	s10,s10,-1468 # a4beea44 <pulp__FC+0xa4beea45>
1c00971a:	9dea                	add	s11,s11,s10
1c00971c:	96ee                	add	a3,a3,s11
1c00971e:	4d82                	lw	s11,0(sp)
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c009720:	09d7aa23          	sw	t4,148(a5)
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
1c009724:	04058593          	addi	a1,a1,64
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c009728:	00cdcd33          	xor	s10,s11,a2
1c00972c:	96ea                	add	a3,a3,s10
1c00972e:	4d42                	lw	s10,16(sp)
1c009730:	4bdeddb7          	lui	s11,0x4bded
1c009734:	fa9d8d93          	addi	s11,s11,-87 # 4bdecfa9 <__l2_end+0x2fddd8f9>
1c009738:	9d6e                	add	s10,s10,s11
1c00973a:	966a                	add	a2,a2,s10
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00973c:	4d02                	lw	s10,0(sp)
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00973e:	0996d6b3          	p.ror	a3,a3,s9
1c009742:	96aa                	add	a3,a3,a0
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c009744:	00dd4db3          	xor	s11,s10,a3
1c009748:	966e                	add	a2,a2,s11
1c00974a:	09865633          	p.ror	a2,a2,s8
1c00974e:	f6bb5db7          	lui	s11,0xf6bb5
1c009752:	9636                	add	a2,a2,a3
1c009754:	b60d8d93          	addi	s11,s11,-1184 # f6bb4b60 <pulp__FC+0xf6bb4b61>
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
1c009758:	00c6cd33          	xor	s10,a3,a2
1c00975c:	9dca                	add	s11,s11,s2
1c00975e:	976e                	add	a4,a4,s11
1c009760:	00ad4db3          	xor	s11,s10,a0
1c009764:	976e                	add	a4,a4,s11
1c009766:	bebfcdb7          	lui	s11,0xbebfc
1c00976a:	09775733          	p.ror	a4,a4,s7
1c00976e:	c70d8d93          	addi	s11,s11,-912 # bebfbc70 <pulp__FC+0xbebfbc71>
1c009772:	9732                	add	a4,a4,a2
1c009774:	9dfe                	add	s11,s11,t6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
1c009776:	00ed4d33          	xor	s10,s10,a4
1c00977a:	956e                	add	a0,a0,s11
1c00977c:	956a                	add	a0,a0,s10
1c00977e:	09655533          	p.ror	a0,a0,s6
1c009782:	289b8d37          	lui	s10,0x289b8
1c009786:	953a                	add	a0,a0,a4
1c009788:	ec6d0d13          	addi	s10,s10,-314 # 289b7ec6 <__l2_end+0xc9a8816>
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
1c00978c:	00a74db3          	xor	s11,a4,a0
1c009790:	9d1a                	add	s10,s10,t1
1c009792:	96ea                	add	a3,a3,s10
1c009794:	00cdcd33          	xor	s10,s11,a2
1c009798:	9d36                	add	s10,s10,a3
1c00979a:	eaa126b7          	lui	a3,0xeaa12
1c00979e:	099d5d33          	p.ror	s10,s10,s9
1c0097a2:	7fa68693          	addi	a3,a3,2042 # eaa127fa <pulp__FC+0xeaa127fb>
1c0097a6:	9d2a                	add	s10,s10,a0
1c0097a8:	96ce                	add	a3,a3,s3
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
1c0097aa:	01adcdb3          	xor	s11,s11,s10
1c0097ae:	9636                	add	a2,a2,a3
1c0097b0:	966e                	add	a2,a2,s11
1c0097b2:	09865633          	p.ror	a2,a2,s8
1c0097b6:	d4ef3db7          	lui	s11,0xd4ef3
1c0097ba:	966a                	add	a2,a2,s10
1c0097bc:	085d8d93          	addi	s11,s11,133 # d4ef3085 <pulp__FC+0xd4ef3086>
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
1c0097c0:	00cd46b3          	xor	a3,s10,a2
1c0097c4:	9d96                	add	s11,s11,t0
1c0097c6:	976e                	add	a4,a4,s11
1c0097c8:	00a6cdb3          	xor	s11,a3,a0
1c0097cc:	9dba                	add	s11,s11,a4
1c0097ce:	04882737          	lui	a4,0x4882
1c0097d2:	097dddb3          	p.ror	s11,s11,s7
1c0097d6:	d0570713          	addi	a4,a4,-763 # 4881d05 <__L2+0x4801d05>
1c0097da:	9db2                	add	s11,s11,a2
1c0097dc:	9772                	add	a4,a4,t3
1c0097de:	953a                	add	a0,a0,a4
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
1c0097e0:	01b6c6b3          	xor	a3,a3,s11
1c0097e4:	96aa                	add	a3,a3,a0
1c0097e6:	0966d6b3          	p.ror	a3,a3,s6
1c0097ea:	96ee                	add	a3,a3,s11
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
1c0097ec:	00ddc533          	xor	a0,s11,a3
1c0097f0:	4752                	lw	a4,20(sp)
1c0097f2:	c02a                	sw	a0,0(sp)
1c0097f4:	d9d4d537          	lui	a0,0xd9d4d
1c0097f8:	03950513          	addi	a0,a0,57 # d9d4d039 <pulp__FC+0xd9d4d03a>
1c0097fc:	972a                	add	a4,a4,a0
1c0097fe:	9d3a                	add	s10,s10,a4
1c009800:	4702                	lw	a4,0(sp)
1c009802:	00c74533          	xor	a0,a4,a2
1c009806:	9d2a                	add	s10,s10,a0
1c009808:	e6dba537          	lui	a0,0xe6dba
1c00980c:	099d5cb3          	p.ror	s9,s10,s9
1c009810:	9e550513          	addi	a0,a0,-1563 # e6db99e5 <pulp__FC+0xe6db99e6>
1c009814:	9cb6                	add	s9,s9,a3
1c009816:	951e                	add	a0,a0,t2
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
1c009818:	01974733          	xor	a4,a4,s9
1c00981c:	962a                	add	a2,a2,a0
1c00981e:	963a                	add	a2,a2,a4
1c009820:	09865c33          	p.ror	s8,a2,s8
1c009824:	1fa28737          	lui	a4,0x1fa28
1c009828:	9c66                	add	s8,s8,s9
1c00982a:	cf870713          	addi	a4,a4,-776 # 1fa27cf8 <__l2_end+0x3a18648>
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
1c00982e:	018ccd33          	xor	s10,s9,s8
1c009832:	9776                	add	a4,a4,t4
1c009834:	9dba                	add	s11,s11,a4
1c009836:	00dd4733          	xor	a4,s10,a3
1c00983a:	9dba                	add	s11,s11,a4
1c00983c:	097ddbb3          	p.ror	s7,s11,s7
1c009840:	4db2                	lw	s11,12(sp)
1c009842:	c4ac5737          	lui	a4,0xc4ac5
1c009846:	66570713          	addi	a4,a4,1637 # c4ac5665 <pulp__FC+0xc4ac5666>
1c00984a:	9be2                	add	s7,s7,s8
1c00984c:	976e                	add	a4,a4,s11
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
1c00984e:	017d4d33          	xor	s10,s10,s7
1c009852:	96ba                	add	a3,a3,a4
1c009854:	f4292737          	lui	a4,0xf4292
1c009858:	96ea                	add	a3,a3,s10
1c00985a:	24470713          	addi	a4,a4,580 # f4292244 <pulp__FC+0xf4292245>
1c00985e:	0966db33          	p.ror	s6,a3,s6
1c009862:	99ba                	add	s3,s3,a4
1c009864:	9b5e                	add	s6,s6,s7
1c009866:	99e6                	add	s3,s3,s9
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
1c009868:	fffc4c93          	not	s9,s8
1c00986c:	016cecb3          	or	s9,s9,s6
1c009870:	017cccb3          	xor	s9,s9,s7
1c009874:	432b0737          	lui	a4,0x432b0
1c009878:	4669                	li	a2,26
1c00987a:	f9770713          	addi	a4,a4,-105 # 432aff97 <__l2_end+0x272a08e7>
1c00987e:	9cce                	add	s9,s9,s3
1c009880:	08ccdcb3          	p.ror	s9,s9,a2
1c009884:	993a                	add	s2,s2,a4
1c009886:	9cda                	add	s9,s9,s6
1c009888:	9962                	add	s2,s2,s8
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
1c00988a:	fffbcc13          	not	s8,s7
1c00988e:	019c6c33          	or	s8,s8,s9
1c009892:	016c4c33          	xor	s8,s8,s6
1c009896:	ab942737          	lui	a4,0xab942
1c00989a:	4559                	li	a0,22
1c00989c:	9c4a                	add	s8,s8,s2
1c00989e:	3a770713          	addi	a4,a4,935 # ab9423a7 <pulp__FC+0xab9423a8>
1c0098a2:	08ac5c33          	p.ror	s8,s8,a0
1c0098a6:	94ba                	add	s1,s1,a4
1c0098a8:	9c66                	add	s8,s8,s9
1c0098aa:	94de                	add	s1,s1,s7
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
1c0098ac:	fffb4b93          	not	s7,s6
1c0098b0:	018bebb3          	or	s7,s7,s8
1c0098b4:	019bcbb3          	xor	s7,s7,s9
1c0098b8:	fc93a737          	lui	a4,0xfc93a
1c0098bc:	4945                	li	s2,17
1c0098be:	9ba6                	add	s7,s7,s1
1c0098c0:	03970713          	addi	a4,a4,57 # fc93a039 <pulp__FC+0xfc93a03a>
1c0098c4:	9722                	add	a4,a4,s0
1c0098c6:	092bdbb3          	p.ror	s7,s7,s2
1c0098ca:	9be2                	add	s7,s7,s8
1c0098cc:	9b3a                	add	s6,s6,a4
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
1c0098ce:	fffcc713          	not	a4,s9
1c0098d2:	01776733          	or	a4,a4,s7
1c0098d6:	01874733          	xor	a4,a4,s8
1c0098da:	46ad                	li	a3,11
1c0098dc:	975a                	add	a4,a4,s6
1c0098de:	08d75733          	p.ror	a4,a4,a3
1c0098e2:	655b6437          	lui	s0,0x655b6
1c0098e6:	975e                	add	a4,a4,s7
1c0098e8:	9c340413          	addi	s0,s0,-1597 # 655b59c3 <__l2_end+0x495a6313>
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
1c0098ec:	fffc4493          	not	s1,s8
1c0098f0:	93a2                	add	t2,t2,s0
1c0098f2:	8cd9                	or	s1,s1,a4
1c0098f4:	9c9e                	add	s9,s9,t2
1c0098f6:	0174c4b3          	xor	s1,s1,s7
1c0098fa:	9ca6                	add	s9,s9,s1
1c0098fc:	08ccdcb3          	p.ror	s9,s9,a2
1c009900:	8f0cd3b7          	lui	t2,0x8f0cd
1c009904:	9cba                	add	s9,s9,a4
1c009906:	c9238393          	addi	t2,t2,-878 # 8f0ccc92 <pulp__FC+0x8f0ccc93>
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
1c00990a:	fffbc413          	not	s0,s7
1c00990e:	929e                	add	t0,t0,t2
1c009910:	01946433          	or	s0,s0,s9
1c009914:	9c16                	add	s8,s8,t0
1c009916:	8c39                	xor	s0,s0,a4
1c009918:	9c22                	add	s8,s8,s0
1c00991a:	08ac5c33          	p.ror	s8,s8,a0
1c00991e:	ffeff2b7          	lui	t0,0xffeff
1c009922:	9c66                	add	s8,s8,s9
1c009924:	47d28293          	addi	t0,t0,1149 # ffeff47d <pulp__FC+0xffeff47e>
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
1c009928:	fff74393          	not	t2,a4
1c00992c:	9f96                	add	t6,t6,t0
1c00992e:	0183e3b3          	or	t2,t2,s8
1c009932:	9bfe                	add	s7,s7,t6
1c009934:	0193c3b3          	xor	t2,t2,s9
1c009938:	42a2                	lw	t0,8(sp)
1c00993a:	9b9e                	add	s7,s7,t2
1c00993c:	85846fb7          	lui	t6,0x85846
1c009940:	092bdbb3          	p.ror	s7,s7,s2
1c009944:	dd1f8f93          	addi	t6,t6,-559 # 85845dd1 <pulp__FC+0x85845dd2>
1c009948:	9be2                	add	s7,s7,s8
1c00994a:	9f96                	add	t6,t6,t0
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
1c00994c:	fffcc293          	not	t0,s9
1c009950:	0172e2b3          	or	t0,t0,s7
1c009954:	0182c2b3          	xor	t0,t0,s8
1c009958:	977e                	add	a4,a4,t6
1c00995a:	9716                	add	a4,a4,t0
1c00995c:	08d75733          	p.ror	a4,a4,a3
1c009960:	6fa88fb7          	lui	t6,0x6fa88
1c009964:	975e                	add	a4,a4,s7
1c009966:	e4ff8f93          	addi	t6,t6,-433 # 6fa87e4f <__l2_end+0x53a7879f>
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
1c00996a:	fffc4293          	not	t0,s8
1c00996e:	9f7e                	add	t5,t5,t6
1c009970:	00e2e2b3          	or	t0,t0,a4
1c009974:	9cfa                	add	s9,s9,t5
1c009976:	0172c2b3          	xor	t0,t0,s7
1c00997a:	9c96                	add	s9,s9,t0
1c00997c:	08ccdcb3          	p.ror	s9,s9,a2
1c009980:	fe2cef37          	lui	t5,0xfe2ce
1c009984:	9cba                	add	s9,s9,a4
1c009986:	6e0f0f13          	addi	t5,t5,1760 # fe2ce6e0 <pulp__FC+0xfe2ce6e1>
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
1c00998a:	fffbcf93          	not	t6,s7
1c00998e:	9efa                	add	t4,t4,t5
1c009990:	019fefb3          	or	t6,t6,s9
1c009994:	9c76                	add	s8,s8,t4
1c009996:	00efcfb3          	xor	t6,t6,a4
1c00999a:	9c7e                	add	s8,s8,t6
1c00999c:	08ac5c33          	p.ror	s8,s8,a0
1c0099a0:	a3014eb7          	lui	t4,0xa3014
1c0099a4:	9c66                	add	s8,s8,s9
1c0099a6:	314e8e93          	addi	t4,t4,788 # a3014314 <pulp__FC+0xa3014315>
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
1c0099aa:	fff74f13          	not	t5,a4
1c0099ae:	9e76                	add	t3,t3,t4
1c0099b0:	018f6f33          	or	t5,t5,s8
1c0099b4:	9bf2                	add	s7,s7,t3
1c0099b6:	019f4f33          	xor	t5,t5,s9
1c0099ba:	9bfa                	add	s7,s7,t5
1c0099bc:	092bdbb3          	p.ror	s7,s7,s2
1c0099c0:	4e081e37          	lui	t3,0x4e081
1c0099c4:	9be2                	add	s7,s7,s8
1c0099c6:	1a1e0e13          	addi	t3,t3,417 # 4e0811a1 <__l2_end+0x32071af1>
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
1c0099ca:	fffcce93          	not	t4,s9
1c0099ce:	9372                	add	t1,t1,t3
1c0099d0:	017eeeb3          	or	t4,t4,s7
1c0099d4:	018eceb3          	xor	t4,t4,s8
1c0099d8:	971a                	add	a4,a4,t1
1c0099da:	9776                	add	a4,a4,t4
1c0099dc:	4d42                	lw	s10,16(sp)
1c0099de:	08d75733          	p.ror	a4,a4,a3
1c0099e2:	f7538337          	lui	t1,0xf7538
1c0099e6:	975e                	add	a4,a4,s7
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
1c0099e8:	fffc4e13          	not	t3,s8
1c0099ec:	e8230313          	addi	t1,t1,-382 # f7537e82 <pulp__FC+0xf7537e83>
1c0099f0:	936a                	add	t1,t1,s10
1c0099f2:	00ee6e33          	or	t3,t3,a4
1c0099f6:	017e4e33          	xor	t3,t3,s7
1c0099fa:	9c9a                	add	s9,s9,t1
1c0099fc:	9cf2                	add	s9,s9,t3
1c0099fe:	08ccd633          	p.ror	a2,s9,a2
1c009a02:	bd3af337          	lui	t1,0xbd3af
1c009a06:	963a                	add	a2,a2,a4
1c009a08:	23530313          	addi	t1,t1,565 # bd3af235 <pulp__FC+0xbd3af236>
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
1c009a0c:	fffbce13          	not	t3,s7
1c009a10:	989a                	add	a7,a7,t1
1c009a12:	00ce6e33          	or	t3,t3,a2
1c009a16:	00ee4e33          	xor	t3,t3,a4
1c009a1a:	9c46                	add	s8,s8,a7
1c009a1c:	9c72                	add	s8,s8,t3
1c009a1e:	08ac5533          	p.ror	a0,s8,a0
1c009a22:	2ad7d8b7          	lui	a7,0x2ad7d
1c009a26:	9532                	add	a0,a0,a2
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
1c009a28:	fff74313          	not	t1,a4
1c009a2c:	2bb88893          	addi	a7,a7,699 # 2ad7d2bb <__l2_end+0xed6dc0b>
1c009a30:	98ee                	add	a7,a7,s11
1c009a32:	00a36333          	or	t1,t1,a0
1c009a36:	9bc6                	add	s7,s7,a7
1c009a38:	00c34333          	xor	t1,t1,a2
1c009a3c:	9b9a                	add	s7,s7,t1
1c009a3e:	4dd2                	lw	s11,20(sp)
1c009a40:	092bd933          	p.ror	s2,s7,s2
1c009a44:	eb86d8b7          	lui	a7,0xeb86d
1c009a48:	992a                	add	s2,s2,a0
1c009a4a:	39188893          	addi	a7,a7,913 # eb86d391 <pulp__FC+0xeb86d392>
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c009a4e:	fff64313          	not	t1,a2
		a += saved_a;
1c009a52:	4e62                	lw	t3,24(sp)
	} while (size -= 64);
1c009a54:	4ef2                	lw	t4,28(sp)
1c009a56:	98ee                	add	a7,a7,s11
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c009a58:	01236333          	or	t1,t1,s2
1c009a5c:	9746                	add	a4,a4,a7
1c009a5e:	00a34333          	xor	t1,t1,a0
1c009a62:	971a                	add	a4,a4,t1
1c009a64:	08d75733          	p.ror	a4,a4,a3
		a += saved_a;
1c009a68:	9e32                	add	t3,t3,a2
	} while (size -= 64);
1c009a6a:	1efd                	addi	t4,t4,-1
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c009a6c:	974a                	add	a4,a4,s2
		a += saved_a;
1c009a6e:	cc72                	sw	t3,24(sp)
	} while (size -= 64);
1c009a70:	ce76                	sw	t4,28(sp)
		b += saved_b;
1c009a72:	983a                	add	a6,a6,a4
		c += saved_c;
1c009a74:	9a4a                	add	s4,s4,s2
		d += saved_d;
1c009a76:	9aaa                	add	s5,s5,a0
	} while (size -= 64);
1c009a78:	f80e9a63          	bnez	t4,1c00920c <body+0x38>
	ctx->b = b;
	ctx->c = c;
	ctx->d = d;

	return ptr;
}
1c009a7c:	4436                	lw	s0,76(sp)
	ctx->c = c;
1c009a7e:	0147a823          	sw	s4,16(a5)
	ctx->d = d;
1c009a82:	0157aa23          	sw	s5,20(a5)
	ctx->a = a;
1c009a86:	01c7a423          	sw	t3,8(a5)
	ctx->b = b;
1c009a8a:	0107a623          	sw	a6,12(a5)
}
1c009a8e:	44a6                	lw	s1,72(sp)
1c009a90:	4916                	lw	s2,68(sp)
1c009a92:	4986                	lw	s3,64(sp)
1c009a94:	5a72                	lw	s4,60(sp)
1c009a96:	5ae2                	lw	s5,56(sp)
1c009a98:	5b52                	lw	s6,52(sp)
1c009a9a:	5bc2                	lw	s7,48(sp)
1c009a9c:	5c32                	lw	s8,44(sp)
1c009a9e:	5ca2                	lw	s9,40(sp)
1c009aa0:	5d12                	lw	s10,36(sp)
1c009aa2:	5d82                	lw	s11,32(sp)
1c009aa4:	852e                	mv	a0,a1
1c009aa6:	6161                	addi	sp,sp,80
1c009aa8:	8082                	ret

1c009aaa <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
1c009aaa:	674527b7          	lui	a5,0x67452
1c009aae:	30178793          	addi	a5,a5,769 # 67452301 <__l2_end+0x4b442c51>
1c009ab2:	c51c                	sw	a5,8(a0)
	ctx->b = 0xefcdab89;
1c009ab4:	efcdb7b7          	lui	a5,0xefcdb
1c009ab8:	b8978793          	addi	a5,a5,-1143 # efcdab89 <pulp__FC+0xefcdab8a>
1c009abc:	c55c                	sw	a5,12(a0)
	ctx->c = 0x98badcfe;
1c009abe:	98bae7b7          	lui	a5,0x98bae
1c009ac2:	cfe78793          	addi	a5,a5,-770 # 98badcfe <pulp__FC+0x98badcff>
1c009ac6:	c91c                	sw	a5,16(a0)
	ctx->d = 0x10325476;
1c009ac8:	103257b7          	lui	a5,0x10325
1c009acc:	47678793          	addi	a5,a5,1142 # 10325476 <__l1_end+0x325432>
1c009ad0:	c95c                	sw	a5,20(a0)

	ctx->lo = 0;
1c009ad2:	00052023          	sw	zero,0(a0)
	ctx->hi = 0;
1c009ad6:	00052223          	sw	zero,4(a0)
}
1c009ada:	8082                	ret

1c009adc <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c009adc:	1101                	addi	sp,sp,-32
1c009ade:	cc22                	sw	s0,24(sp)
1c009ae0:	842a                	mv	s0,a0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
1c009ae2:	4108                	lw	a0,0(a0)
{
1c009ae4:	ca26                	sw	s1,20(sp)
1c009ae6:	c84a                	sw	s2,16(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c009ae8:	00c507b3          	add	a5,a0,a2
{
1c009aec:	ce06                	sw	ra,28(sp)
1c009aee:	c64e                	sw	s3,12(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c009af0:	c5d7b7b3          	p.bclr	a5,a5,2,29
1c009af4:	c01c                	sw	a5,0(s0)
{
1c009af6:	892e                	mv	s2,a1
1c009af8:	84b2                	mv	s1,a2
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c009afa:	00a7f563          	bleu	a0,a5,1c009b04 <MD5_Update+0x28>
		ctx->hi++;
1c009afe:	405c                	lw	a5,4(s0)
1c009b00:	0785                	addi	a5,a5,1
1c009b02:	c05c                	sw	a5,4(s0)
	ctx->hi += size >> 29;
1c009b04:	4058                	lw	a4,4(s0)
1c009b06:	01d4d793          	srli	a5,s1,0x1d

	used = saved_lo & 0x3f;
1c009b0a:	f2653533          	p.bclr	a0,a0,25,6
	ctx->hi += size >> 29;
1c009b0e:	97ba                	add	a5,a5,a4
1c009b10:	c05c                	sw	a5,4(s0)

	if (used) {
1c009b12:	c129                	beqz	a0,1c009b54 <MD5_Update+0x78>
		available = 64 - used;
1c009b14:	04000993          	li	s3,64
1c009b18:	40a989b3          	sub	s3,s3,a0
1c009b1c:	0561                	addi	a0,a0,24
1c009b1e:	9522                	add	a0,a0,s0

		if (size < available) {
1c009b20:	0134fc63          	bleu	s3,s1,1c009b38 <MD5_Update+0x5c>
			memcpy(&ctx->buffer[used], data, size);
1c009b24:	8626                	mv	a2,s1
1c009b26:	85ca                	mv	a1,s2
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
1c009b28:	4462                	lw	s0,24(sp)
1c009b2a:	40f2                	lw	ra,28(sp)
1c009b2c:	44d2                	lw	s1,20(sp)
1c009b2e:	4942                	lw	s2,16(sp)
1c009b30:	49b2                	lw	s3,12(sp)
1c009b32:	6105                	addi	sp,sp,32
	memcpy(ctx->buffer, data, size);
1c009b34:	7d60306f          	j	1c00d30a <memcpy>
		memcpy(&ctx->buffer[used], data, available);
1c009b38:	85ca                	mv	a1,s2
1c009b3a:	864e                	mv	a2,s3
1c009b3c:	7ce030ef          	jal	ra,1c00d30a <memcpy>
		body(ctx, ctx->buffer, 64);
1c009b40:	04000613          	li	a2,64
1c009b44:	01840593          	addi	a1,s0,24
1c009b48:	8522                	mv	a0,s0
		data = (const unsigned char *)data + available;
1c009b4a:	994e                	add	s2,s2,s3
		size -= available;
1c009b4c:	413484b3          	sub	s1,s1,s3
		body(ctx, ctx->buffer, 64);
1c009b50:	e84ff0ef          	jal	ra,1c0091d4 <body>
	if (size >= 64) {
1c009b54:	03f00793          	li	a5,63
1c009b58:	0097fb63          	bleu	s1,a5,1c009b6e <MD5_Update+0x92>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
1c009b5c:	ca04b633          	p.bclr	a2,s1,5,0
1c009b60:	85ca                	mv	a1,s2
1c009b62:	8522                	mv	a0,s0
1c009b64:	e70ff0ef          	jal	ra,1c0091d4 <body>
1c009b68:	892a                	mv	s2,a0
		size &= 0x3f;
1c009b6a:	f264b4b3          	p.bclr	s1,s1,25,6
	memcpy(ctx->buffer, data, size);
1c009b6e:	8626                	mv	a2,s1
1c009b70:	85ca                	mv	a1,s2
1c009b72:	01840513          	addi	a0,s0,24
1c009b76:	bf4d                	j	1c009b28 <MD5_Update+0x4c>

1c009b78 <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
1c009b78:	1141                	addi	sp,sp,-16
1c009b7a:	c226                	sw	s1,4(sp)
1c009b7c:	84aa                	mv	s1,a0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
1c009b7e:	4188                	lw	a0,0(a1)
{
1c009b80:	c422                	sw	s0,8(sp)
1c009b82:	c04a                	sw	s2,0(sp)
	used = ctx->lo & 0x3f;
1c009b84:	f2653533          	p.bclr	a0,a0,25,6

	ctx->buffer[used++] = 0x80;
1c009b88:	00a58733          	add	a4,a1,a0
{
1c009b8c:	c606                	sw	ra,12(sp)
	ctx->buffer[used++] = 0x80;
1c009b8e:	00150793          	addi	a5,a0,1
1c009b92:	f8000693          	li	a3,-128

	available = 64 - used;
1c009b96:	04000613          	li	a2,64
	ctx->buffer[used++] = 0x80;
1c009b9a:	00d70c23          	sb	a3,24(a4)
	available = 64 - used;
1c009b9e:	8e1d                	sub	a2,a2,a5

	if (available < 8) {
1c009ba0:	471d                	li	a4,7
{
1c009ba2:	842e                	mv	s0,a1
1c009ba4:	01858913          	addi	s2,a1,24
	if (available < 8) {
1c009ba8:	02c76063          	bltu	a4,a2,1c009bc8 <MD5_Final+0x50>
		memset(&ctx->buffer[used], 0, available);
1c009bac:	0565                	addi	a0,a0,25
1c009bae:	4581                	li	a1,0
1c009bb0:	9522                	add	a0,a0,s0
1c009bb2:	748030ef          	jal	ra,1c00d2fa <memset>
		body(ctx, ctx->buffer, 64);
1c009bb6:	04000613          	li	a2,64
1c009bba:	85ca                	mv	a1,s2
1c009bbc:	8522                	mv	a0,s0
1c009bbe:	e16ff0ef          	jal	ra,1c0091d4 <body>
		used = 0;
		available = 64;
1c009bc2:	04000613          	li	a2,64
		used = 0;
1c009bc6:	4781                	li	a5,0
	}

	memset(&ctx->buffer[used], 0, available - 8);
1c009bc8:	01878513          	addi	a0,a5,24
1c009bcc:	1661                	addi	a2,a2,-8
1c009bce:	4581                	li	a1,0
1c009bd0:	9522                	add	a0,a0,s0
1c009bd2:	728030ef          	jal	ra,1c00d2fa <memset>

	ctx->lo <<= 3;
1c009bd6:	401c                	lw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
1c009bd8:	85ca                	mv	a1,s2
1c009bda:	04000613          	li	a2,64
	ctx->lo <<= 3;
1c009bde:	078e                	slli	a5,a5,0x3
	OUT(&ctx->buffer[56], ctx->lo)
1c009be0:	873e                	mv	a4,a5
1c009be2:	04e40823          	sb	a4,80(s0)
1c009be6:	0087d713          	srli	a4,a5,0x8
	ctx->lo <<= 3;
1c009bea:	c01c                	sw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c009bec:	04e408a3          	sb	a4,81(s0)
1c009bf0:	0107d713          	srli	a4,a5,0x10
1c009bf4:	83e1                	srli	a5,a5,0x18
1c009bf6:	04f409a3          	sb	a5,83(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c009bfa:	405c                	lw	a5,4(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c009bfc:	04e40923          	sb	a4,82(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c009c00:	873e                	mv	a4,a5
1c009c02:	04e40a23          	sb	a4,84(s0)
1c009c06:	0087d713          	srli	a4,a5,0x8
1c009c0a:	04e40aa3          	sb	a4,85(s0)
1c009c0e:	0107d713          	srli	a4,a5,0x10
1c009c12:	83e1                	srli	a5,a5,0x18
1c009c14:	04f40ba3          	sb	a5,87(s0)
1c009c18:	04e40b23          	sb	a4,86(s0)
	body(ctx, ctx->buffer, 64);
1c009c1c:	8522                	mv	a0,s0
1c009c1e:	db6ff0ef          	jal	ra,1c0091d4 <body>

	OUT(&result[0], ctx->a)
1c009c22:	441c                	lw	a5,8(s0)
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
1c009c24:	8522                	mv	a0,s0
1c009c26:	09800613          	li	a2,152
	OUT(&result[0], ctx->a)
1c009c2a:	00f48023          	sb	a5,0(s1)
1c009c2e:	441c                	lw	a5,8(s0)
	memset(ctx, 0, sizeof(*ctx));
1c009c30:	4581                	li	a1,0
	OUT(&result[0], ctx->a)
1c009c32:	83a1                	srli	a5,a5,0x8
1c009c34:	00f480a3          	sb	a5,1(s1)
1c009c38:	00a45783          	lhu	a5,10(s0)
1c009c3c:	00f48123          	sb	a5,2(s1)
1c009c40:	00b44783          	lbu	a5,11(s0)
1c009c44:	00f481a3          	sb	a5,3(s1)
	OUT(&result[4], ctx->b)
1c009c48:	445c                	lw	a5,12(s0)
1c009c4a:	00f48223          	sb	a5,4(s1)
1c009c4e:	445c                	lw	a5,12(s0)
1c009c50:	83a1                	srli	a5,a5,0x8
1c009c52:	00f482a3          	sb	a5,5(s1)
1c009c56:	00e45783          	lhu	a5,14(s0)
1c009c5a:	00f48323          	sb	a5,6(s1)
1c009c5e:	00f44783          	lbu	a5,15(s0)
1c009c62:	00f483a3          	sb	a5,7(s1)
	OUT(&result[8], ctx->c)
1c009c66:	481c                	lw	a5,16(s0)
1c009c68:	00f48423          	sb	a5,8(s1)
1c009c6c:	481c                	lw	a5,16(s0)
1c009c6e:	83a1                	srli	a5,a5,0x8
1c009c70:	00f484a3          	sb	a5,9(s1)
1c009c74:	01245783          	lhu	a5,18(s0)
1c009c78:	00f48523          	sb	a5,10(s1)
1c009c7c:	01344783          	lbu	a5,19(s0)
1c009c80:	00f485a3          	sb	a5,11(s1)
	OUT(&result[12], ctx->d)
1c009c84:	485c                	lw	a5,20(s0)
1c009c86:	00f48623          	sb	a5,12(s1)
1c009c8a:	485c                	lw	a5,20(s0)
1c009c8c:	83a1                	srli	a5,a5,0x8
1c009c8e:	00f486a3          	sb	a5,13(s1)
1c009c92:	01645783          	lhu	a5,22(s0)
1c009c96:	00f48723          	sb	a5,14(s1)
1c009c9a:	01744783          	lbu	a5,23(s0)
1c009c9e:	00f487a3          	sb	a5,15(s1)
}
1c009ca2:	40b2                	lw	ra,12(sp)
1c009ca4:	4422                	lw	s0,8(sp)
1c009ca6:	4492                	lw	s1,4(sp)
1c009ca8:	4902                	lw	s2,0(sp)
1c009caa:	0141                	addi	sp,sp,16
	memset(ctx, 0, sizeof(*ctx));
1c009cac:	64e0306f          	j	1c00d2fa <memset>

1c009cb0 <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c009cb0:	01f01013          	slli	zero,zero,0x1f
1c009cb4:	00100073          	ebreak
1c009cb8:	40705013          	srai	zero,zero,0x7
1c009cbc:	8082                	ret

1c009cbe <semihost_write0>:
1c009cbe:	85aa                	mv	a1,a0
1c009cc0:	4511                	li	a0,4
1c009cc2:	b7fd                	j	1c009cb0 <__internal_semihost>

1c009cc4 <semihost_open>:
1c009cc4:	7139                	addi	sp,sp,-64
1c009cc6:	de06                	sw	ra,60(sp)
1c009cc8:	dc22                	sw	s0,56(sp)
1c009cca:	c62e                	sw	a1,12(sp)
1c009ccc:	842a                	mv	s0,a0
1c009cce:	616030ef          	jal	ra,1c00d2e4 <strlen>
1c009cd2:	45b2                	lw	a1,12(sp)
1c009cd4:	083c                	addi	a5,sp,24
1c009cd6:	c380                	sw	s0,0(a5)
1c009cd8:	087c                	addi	a5,sp,28
1c009cda:	c38c                	sw	a1,0(a5)
1c009cdc:	101c                	addi	a5,sp,32
1c009cde:	c388                	sw	a0,0(a5)
1c009ce0:	082c                	addi	a1,sp,24
1c009ce2:	4505                	li	a0,1
1c009ce4:	fcdff0ef          	jal	ra,1c009cb0 <__internal_semihost>
1c009ce8:	50f2                	lw	ra,60(sp)
1c009cea:	5462                	lw	s0,56(sp)
1c009cec:	6121                	addi	sp,sp,64
1c009cee:	8082                	ret

1c009cf0 <semihost_close>:
1c009cf0:	85aa                	mv	a1,a0
1c009cf2:	4509                	li	a0,2
1c009cf4:	fbdff06f          	j	1c009cb0 <__internal_semihost>

1c009cf8 <semihost_read>:
1c009cf8:	7179                	addi	sp,sp,-48
1c009cfa:	d606                	sw	ra,44(sp)
1c009cfc:	003c                	addi	a5,sp,8
1c009cfe:	c388                	sw	a0,0(a5)
1c009d00:	007c                	addi	a5,sp,12
1c009d02:	c38c                	sw	a1,0(a5)
1c009d04:	4519                	li	a0,6
1c009d06:	081c                	addi	a5,sp,16
1c009d08:	002c                	addi	a1,sp,8
1c009d0a:	c390                	sw	a2,0(a5)
1c009d0c:	fa5ff0ef          	jal	ra,1c009cb0 <__internal_semihost>
1c009d10:	50b2                	lw	ra,44(sp)
1c009d12:	6145                	addi	sp,sp,48
1c009d14:	8082                	ret

1c009d16 <semihost_write>:
1c009d16:	7179                	addi	sp,sp,-48
1c009d18:	d606                	sw	ra,44(sp)
1c009d1a:	003c                	addi	a5,sp,8
1c009d1c:	c388                	sw	a0,0(a5)
1c009d1e:	007c                	addi	a5,sp,12
1c009d20:	c38c                	sw	a1,0(a5)
1c009d22:	4515                	li	a0,5
1c009d24:	081c                	addi	a5,sp,16
1c009d26:	002c                	addi	a1,sp,8
1c009d28:	c390                	sw	a2,0(a5)
1c009d2a:	f87ff0ef          	jal	ra,1c009cb0 <__internal_semihost>
1c009d2e:	50b2                	lw	ra,44(sp)
1c009d30:	6145                	addi	sp,sp,48
1c009d32:	8082                	ret

1c009d34 <semihost_seek>:
1c009d34:	1101                	addi	sp,sp,-32
1c009d36:	c42a                	sw	a0,8(sp)
1c009d38:	c62e                	sw	a1,12(sp)
1c009d3a:	4529                	li	a0,10
1c009d3c:	002c                	addi	a1,sp,8
1c009d3e:	ce06                	sw	ra,28(sp)
1c009d40:	f71ff0ef          	jal	ra,1c009cb0 <__internal_semihost>
1c009d44:	40f2                	lw	ra,28(sp)
1c009d46:	6105                	addi	sp,sp,32
1c009d48:	8082                	ret

1c009d4a <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c009d4a:	85aa                	mv	a1,a0
1c009d4c:	4561                	li	a0,24
1c009d4e:	f63ff06f          	j	1c009cb0 <__internal_semihost>

1c009d52 <__bsp_init_pads>:
  conf->ram_start = CONFIG_SPIRAM_START;
  conf->ram_size = CONFIG_SPIRAM_SIZE;
  conf->skip_pads_config = 0;
  conf->spi_itf = CONFIG_SPIRAM_SPI_ITF;
  conf->spi_cs = CONFIG_SPIRAM_SPI_CS;
}
1c009d52:	1c00f7b7          	lui	a5,0x1c00f
1c009d56:	5e078793          	addi	a5,a5,1504 # 1c00f5e0 <__bsp_init_pads_done>
1c009d5a:	4398                	lw	a4,0(a5)
1c009d5c:	eb05                	bnez	a4,1c009d8c <__bsp_init_pads+0x3a>
1c009d5e:	1101                	addi	sp,sp,-32
1c009d60:	ce06                	sw	ra,28(sp)
1c009d62:	4705                	li	a4,1
1c009d64:	c398                	sw	a4,0(a5)
1c009d66:	000557b7          	lui	a5,0x55
1c009d6a:	50078793          	addi	a5,a5,1280 # 55500 <__L1Cl+0x45500>
1c009d6e:	c03e                	sw	a5,0(sp)
1c009d70:	0f0007b7          	lui	a5,0xf000
1c009d74:	c23e                	sw	a5,4(sp)
1c009d76:	004007b7          	lui	a5,0x400
1c009d7a:	17fd                	addi	a5,a5,-1
1c009d7c:	850a                	mv	a0,sp
1c009d7e:	c43e                	sw	a5,8(sp)
1c009d80:	c602                	sw	zero,12(sp)
1c009d82:	2c5010ef          	jal	ra,1c00b846 <pi_pad_init>
1c009d86:	40f2                	lw	ra,28(sp)
1c009d88:	6105                	addi	sp,sp,32
1c009d8a:	8082                	ret
1c009d8c:	8082                	ret

1c009d8e <bsp_hyperram_conf_init>:
1c009d8e:	008007b7          	lui	a5,0x800
1c009d92:	00052a23          	sw	zero,20(a0)
1c009d96:	cd1c                	sw	a5,24(a0)
1c009d98:	00050623          	sb	zero,12(a0)
1c009d9c:	00052223          	sw	zero,4(a0)
1c009da0:	00052423          	sw	zero,8(a0)
1c009da4:	8082                	ret

1c009da6 <bsp_hyperram_open>:
1c009da6:	1141                	addi	sp,sp,-16
1c009da8:	c606                	sw	ra,12(sp)
1c009daa:	fa9ff0ef          	jal	ra,1c009d52 <__bsp_init_pads>
1c009dae:	40b2                	lw	ra,12(sp)
1c009db0:	4501                	li	a0,0
1c009db2:	0141                	addi	sp,sp,16
1c009db4:	8082                	ret

1c009db6 <bsp_hyperflash_conf_init>:
1c009db6:	4785                	li	a5,1
1c009db8:	00052223          	sw	zero,4(a0)
1c009dbc:	c51c                	sw	a5,8(a0)
1c009dbe:	8082                	ret

1c009dc0 <bsp_hyperflash_open>:
1c009dc0:	1141                	addi	sp,sp,-16
1c009dc2:	c606                	sw	ra,12(sp)
1c009dc4:	f8fff0ef          	jal	ra,1c009d52 <__bsp_init_pads>
1c009dc8:	40b2                	lw	ra,12(sp)
1c009dca:	4501                	li	a0,0
1c009dcc:	0141                	addi	sp,sp,16
1c009dce:	8082                	ret

1c009dd0 <bsp_himax_conf_init>:
  return 0;
}


void bsp_himax_conf_init(struct pi_himax_conf *conf)
{
1c009dd0:	1101                	addi	sp,sp,-32
1c009dd2:	ce06                	sw	ra,28(sp)
  __bsp_init_pads();
1c009dd4:	c62a                	sw	a0,12(sp)
1c009dd6:	f7dff0ef          	jal	ra,1c009d52 <__bsp_init_pads>
  conf->i2c_itf = CONFIG_HIMAX_I2C_ITF;
1c009dda:	4532                	lw	a0,12(sp)
  conf->cpi_itf = CONFIG_HIMAX_CPI_ITF;
}
1c009ddc:	40f2                	lw	ra,28(sp)
  conf->i2c_itf = CONFIG_HIMAX_I2C_ITF;
1c009dde:	00052623          	sw	zero,12(a0)
  conf->cpi_itf = CONFIG_HIMAX_CPI_ITF;
1c009de2:	00052423          	sw	zero,8(a0)
}
1c009de6:	6105                	addi	sp,sp,32
1c009de8:	8082                	ret

1c009dea <bsp_himax_open>:

int bsp_himax_open(struct pi_himax_conf *conf)
{
1c009dea:	1141                	addi	sp,sp,-16
1c009dec:	c606                	sw	ra,12(sp)
  __bsp_init_pads();
1c009dee:	f65ff0ef          	jal	ra,1c009d52 <__bsp_init_pads>
  return 0;
}
1c009df2:	40b2                	lw	ra,12(sp)
1c009df4:	4501                	li	a0,0
1c009df6:	0141                	addi	sp,sp,16
1c009df8:	8082                	ret

1c009dfa <cluster_start>:
  This is useful when the mask must be updated before waiting for a specific event without modifying the other events (this saves a few instructions)
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is set in the event mask.
  */
static inline void eu_evt_maskSet(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009dfa:	002047b7          	lui	a5,0x204
1c009dfe:	00070737          	lui	a4,0x70
1c009e02:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE_PTR(base, EU_DISPATCH_FIFO_ACCESS, value);
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009e06:	0ff00713          	li	a4,255
1c009e0a:	002046b7          	lui	a3,0x204
1c009e0e:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c009e12:	20078793          	addi	a5,a5,512
1c009e16:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c009e1a:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c009e1e:	8082                	ret

1c009e20 <__rt_init>:
{
1c009e20:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c009e22:	1a104737          	lui	a4,0x1a104
1c009e26:	ce06                	sw	ra,28(sp)
1c009e28:	cc22                	sw	s0,24(sp)
1c009e2a:	ca26                	sw	s1,20(sp)
1c009e2c:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa10402c>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c009e30:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c009e34:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c009e38:	2b49                	jal	1c00a3ca <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c009e3a:	1b0007b7          	lui	a5,0x1b000
1c009e3e:	3e878793          	addi	a5,a5,1000 # 1b0003e8 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c009e42:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c009e46:	7d179073          	csrw	0x7d1,a5
1c009e4a:	1c00f737          	lui	a4,0x1c00f
1c009e4e:	11472703          	lw	a4,276(a4) # 1c00f114 <__rt_fc_stack_size>
1c009e52:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c009e54:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c009e58:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c009e5c:	2add                	jal	1c00a052 <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c009e5e:	54fd                	li	s1,-1
1c009e60:	1a1067b7          	lui	a5,0x1a106
1c009e64:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105fc0>
1c009e68:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c009e6c:	1c0005b7          	lui	a1,0x1c000
1c009e70:	44c58593          	addi	a1,a1,1100 # 1c00044c <__rt_fc_socevents_handler>
1c009e74:	456d                	li	a0,27
1c009e76:	2a3d                	jal	1c009fb4 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c009e78:	080007b7          	lui	a5,0x8000
1c009e7c:	00204737          	lui	a4,0x204
1c009e80:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009e84:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c009e88:	29a010ef          	jal	ra,1c00b122 <__rt_pmu_init>
  __rt_freq_init();
1c009e8c:	6e5000ef          	jal	ra,1c00ad70 <__rt_freq_init>
1c009e90:	002017b7          	lui	a5,0x201
1c009e94:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c009e98:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009e9a:	01402473          	csrr	s0,uhartid
1c009e9e:	1c00e4b7          	lui	s1,0x1c00e
  return (hart_id >> 5) & 0x3f;
1c009ea2:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c009ea4:	24ed                	jal	1c00a18e <__rt_utils_init>
1c009ea6:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c009eaa:	1af000ef          	jal	ra,1c00a858 <__rt_allocs_init>
1c009eae:	71448493          	addi	s1,s1,1812 # 1c00e714 <ctor_list+0x4>
  __rt_event_sched_init();
1c009eb2:	029000ef          	jal	ra,1c00a6da <__rt_event_sched_init>
  __rt_padframe_init();
1c009eb6:	3f5020ef          	jal	ra,1c00caaa <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c009eba:	0044a78b          	p.lw	a5,4(s1!)
1c009ebe:	ebad                	bnez	a5,1c009f30 <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c009ec0:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c009ec4:	4501                	li	a0,0
1c009ec6:	2c61                	jal	1c00a15e <__rt_cbsys_exec>
1c009ec8:	e539                	bnez	a0,1c009f16 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009eca:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c009ece:	8795                	srai	a5,a5,0x5
1c009ed0:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c009ed4:	02000713          	li	a4,32
1c009ed8:	0ae78363          	beq	a5,a4,1c009f7e <__rt_init+0x15e>
    rt_cluster_mount(1, cid, 0, NULL);
1c009edc:	4681                	li	a3,0
1c009ede:	4601                	li	a2,0
1c009ee0:	4581                	li	a1,0
1c009ee2:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c009ee4:	cba1                	beqz	a5,1c009f34 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c009ee6:	78c010ef          	jal	ra,1c00b672 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c009eea:	6591                	lui	a1,0x4
1c009eec:	4509                	li	a0,2
1c009eee:	0bf000ef          	jal	ra,1c00a7ac <rt_alloc>
1c009ef2:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c009ef4:	c10d                	beqz	a0,1c009f16 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c009ef6:	6805                	lui	a6,0x1
1c009ef8:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c009efc:	1c00a637          	lui	a2,0x1c00a
1c009f00:	c002                	sw	zero,0(sp)
1c009f02:	48a1                	li	a7,8
1c009f04:	87c2                	mv	a5,a6
1c009f06:	4681                	li	a3,0
1c009f08:	dfa60613          	addi	a2,a2,-518 # 1c009dfa <cluster_start>
1c009f0c:	4581                	li	a1,0
1c009f0e:	4501                	li	a0,0
1c009f10:	6d2010ef          	jal	ra,1c00b5e2 <rt_cluster_call>
1c009f14:	c52d                	beqz	a0,1c009f7e <__rt_init+0x15e>
  rt_fatal("There was an error during runtime initialization\n");
1c009f16:	1c00f537          	lui	a0,0x1c00f
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009f1a:	01402673          	csrr	a2,uhartid
1c009f1e:	85a2                	mv	a1,s0
1c009f20:	f4563633          	p.bclr	a2,a2,26,5
1c009f24:	c6850513          	addi	a0,a0,-920 # 1c00ec68 <__himax_reg_init+0x11c>
1c009f28:	70e030ef          	jal	ra,1c00d636 <printf>
1c009f2c:	68e030ef          	jal	ra,1c00d5ba <abort>
    (**fpp)();
1c009f30:	9782                	jalr	a5
1c009f32:	b761                	j	1c009eba <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c009f34:	73e010ef          	jal	ra,1c00b672 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c009f38:	6591                	lui	a1,0x4
1c009f3a:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c009f3e:	4509                	li	a0,2
1c009f40:	06d000ef          	jal	ra,1c00a7ac <rt_alloc>
    if (stacks == NULL) return -1;
1c009f44:	d969                	beqz	a0,1c009f16 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009f46:	00204737          	lui	a4,0x204
1c009f4a:	0ff00793          	li	a5,255
1c009f4e:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c009f52:	1c00e7b7          	lui	a5,0x1c00e
1c009f56:	65878793          	addi	a5,a5,1624 # 1c00e658 <__rt_set_slave_stack>
1c009f5a:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c009f5e:	08f72023          	sw	a5,128(a4)
1c009f62:	6785                	lui	a5,0x1
1c009f64:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c009f68:	08f72023          	sw	a5,128(a4)
1c009f6c:	08a72023          	sw	a0,128(a4)
}
1c009f70:	4462                	lw	s0,24(sp)
1c009f72:	40f2                	lw	ra,28(sp)
1c009f74:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c009f76:	4501                	li	a0,0
}
1c009f78:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c009f7a:	e81ff06f          	j	1c009dfa <cluster_start>
}
1c009f7e:	40f2                	lw	ra,28(sp)
1c009f80:	4462                	lw	s0,24(sp)
1c009f82:	44d2                	lw	s1,20(sp)
1c009f84:	6105                	addi	sp,sp,32
1c009f86:	8082                	ret

1c009f88 <__rt_deinit>:
{
1c009f88:	1141                	addi	sp,sp,-16
1c009f8a:	c606                	sw	ra,12(sp)
1c009f8c:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c009f8e:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c009f92:	4505                	li	a0,1
1c009f94:	1c00e437          	lui	s0,0x1c00e
1c009f98:	22d9                	jal	1c00a15e <__rt_cbsys_exec>
1c009f9a:	76440413          	addi	s0,s0,1892 # 1c00e764 <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c009f9e:	0044278b          	p.lw	a5,4(s0!)
1c009fa2:	e789                	bnez	a5,1c009fac <__rt_deinit+0x24>
}
1c009fa4:	40b2                	lw	ra,12(sp)
1c009fa6:	4422                	lw	s0,8(sp)
1c009fa8:	0141                	addi	sp,sp,16
1c009faa:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c009fac:	9782                	jalr	a5
1c009fae:	bfc5                	j	1c009f9e <__rt_deinit+0x16>

1c009fb0 <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c009fb0:	c14c                	sw	a1,4(a0)
}
1c009fb2:	8082                	ret

1c009fb4 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009fb4:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c009fb8:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c009fbc:	ca5797b3          	p.extractu	a5,a5,5,5
1c009fc0:	02e79c63          	bne	a5,a4,1c009ff8 <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c009fc4:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c009fc8:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c009fca:	8d89                	sub	a1,a1,a0
1c009fcc:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c009fce:	c14586b3          	p.extract	a3,a1,0,20
1c009fd2:	06f00793          	li	a5,111
1c009fd6:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c009fda:	d21586b3          	p.extract	a3,a1,9,1
1c009fde:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c009fe2:	c0b586b3          	p.extract	a3,a1,0,11
1c009fe6:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c009fea:	cec585b3          	p.extract	a1,a1,7,12
1c009fee:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c009ff2:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c009ff6:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c009ff8:	002007b7          	lui	a5,0x200
1c009ffc:	43b8                	lw	a4,64(a5)
1c009ffe:	b7e9                	j	1c009fc8 <rt_irq_set_handler+0x14>

1c00a000 <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c00a000:	8082                	ret

1c00a002 <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c00a002:	1b0017b7          	lui	a5,0x1b001

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c00a006:	bec7a703          	lw	a4,-1044(a5) # 1b000bec <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c00a00a:	1141                	addi	sp,sp,-16
1c00a00c:	c422                	sw	s0,8(sp)
1c00a00e:	c606                	sw	ra,12(sp)
1c00a010:	fc173733          	p.bclr	a4,a4,30,1
1c00a014:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c00a016:	c315                	beqz	a4,1c00a03a <__rt_handle_illegal_instr+0x38>
1c00a018:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a01c:	01402673          	csrr	a2,uhartid
1c00a020:	1c00f537          	lui	a0,0x1c00f
1c00a024:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c00a026:	40565593          	srai	a1,a2,0x5
1c00a02a:	f265b5b3          	p.bclr	a1,a1,25,6
1c00a02e:	f4563633          	p.bclr	a2,a2,26,5
1c00a032:	cc050513          	addi	a0,a0,-832 # 1c00ecc0 <__himax_reg_init+0x174>
1c00a036:	600030ef          	jal	ra,1c00d636 <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c00a03a:	bec42783          	lw	a5,-1044(s0)
1c00a03e:	c01797b3          	p.extractu	a5,a5,0,1
1c00a042:	c399                	beqz	a5,1c00a048 <__rt_handle_illegal_instr+0x46>
1c00a044:	576030ef          	jal	ra,1c00d5ba <abort>
  illegal_insn_handler_c();
#endif
}
1c00a048:	4422                	lw	s0,8(sp)
1c00a04a:	40b2                	lw	ra,12(sp)
1c00a04c:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c00a04e:	fb3ff06f          	j	1c00a000 <illegal_insn_handler_c>

1c00a052 <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c00a052:	57fd                	li	a5,-1
1c00a054:	00204737          	lui	a4,0x204
1c00a058:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c00a05c:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a060:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00a064:	ca5797b3          	p.extractu	a5,a5,5,5
1c00a068:	00e79763          	bne	a5,a4,1c00a076 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a06c:	57fd                	li	a5,-1
1c00a06e:	00204737          	lui	a4,0x204
1c00a072:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a076:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c00a07a:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00a07e:	ca5797b3          	p.extractu	a5,a5,5,5
1c00a082:	00e79963          	bne	a5,a4,1c00a094 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c00a086:	1c0007b7          	lui	a5,0x1c000
1c00a08a:	00078793          	mv	a5,a5
1c00a08e:	30579073          	csrw	mtvec,a5
1c00a092:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c00a094:	1c0007b7          	lui	a5,0x1c000
1c00a098:	00200737          	lui	a4,0x200
1c00a09c:	00078793          	mv	a5,a5
1c00a0a0:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c00a0a2:	8082                	ret

1c00a0a4 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c00a0a4:	300476f3          	csrrci	a3,mstatus,8
1c00a0a8:	08a54703          	lbu	a4,138(a0)
1c00a0ac:	411c                	lw	a5,0(a0)
1c00a0ae:	c321                	beqz	a4,1c00a0ee <__rt_fc_cluster_lock_req+0x4a>
1c00a0b0:	4398                	lw	a4,0(a5)
1c00a0b2:	cf09                	beqz	a4,1c00a0cc <__rt_fc_cluster_lock_req+0x28>
1c00a0b4:	43d8                	lw	a4,4(a5)
1c00a0b6:	cb09                	beqz	a4,1c00a0c8 <__rt_fc_cluster_lock_req+0x24>
1c00a0b8:	4798                	lw	a4,8(a5)
1c00a0ba:	c348                	sw	a0,4(a4)
1c00a0bc:	c788                	sw	a0,8(a5)
1c00a0be:	00052223          	sw	zero,4(a0)
1c00a0c2:	30069073          	csrw	mstatus,a3
1c00a0c6:	8082                	ret
1c00a0c8:	c3c8                	sw	a0,4(a5)
1c00a0ca:	bfcd                	j	1c00a0bc <__rt_fc_cluster_lock_req+0x18>
1c00a0cc:	4705                	li	a4,1
1c00a0ce:	08e50423          	sb	a4,136(a0)
1c00a0d2:	4705                	li	a4,1
1c00a0d4:	c398                	sw	a4,0(a5)
1c00a0d6:	08954783          	lbu	a5,137(a0)
1c00a0da:	00201737          	lui	a4,0x201
1c00a0de:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00a0e2:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c00a0e6:	07da                	slli	a5,a5,0x16
1c00a0e8:	0007e723          	p.sw	zero,a4(a5)
1c00a0ec:	bfd9                	j	1c00a0c2 <__rt_fc_cluster_lock_req+0x1e>
1c00a0ee:	43d8                	lw	a4,4(a5)
1c00a0f0:	e719                	bnez	a4,1c00a0fe <__rt_fc_cluster_lock_req+0x5a>
1c00a0f2:	0007a023          	sw	zero,0(a5)
1c00a0f6:	4785                	li	a5,1
1c00a0f8:	08f50423          	sb	a5,136(a0)
1c00a0fc:	bfe9                	j	1c00a0d6 <__rt_fc_cluster_lock_req+0x32>
1c00a0fe:	4350                	lw	a2,4(a4)
1c00a100:	c3d0                	sw	a2,4(a5)
1c00a102:	4785                	li	a5,1
1c00a104:	08f70423          	sb	a5,136(a4)
1c00a108:	08974783          	lbu	a5,137(a4)
1c00a10c:	00201737          	lui	a4,0x201
1c00a110:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00a114:	04078793          	addi	a5,a5,64
1c00a118:	07da                	slli	a5,a5,0x16
1c00a11a:	0007e723          	p.sw	zero,a4(a5)
1c00a11e:	bfe1                	j	1c00a0f6 <__rt_fc_cluster_lock_req+0x52>

1c00a120 <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c00a120:	1101                	addi	sp,sp,-32
1c00a122:	cc22                	sw	s0,24(sp)
1c00a124:	ca26                	sw	s1,20(sp)
1c00a126:	842a                	mv	s0,a0
1c00a128:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c00a12a:	4501                	li	a0,0
1c00a12c:	45b1                	li	a1,12
1c00a12e:	c632                	sw	a2,12(sp)
{
1c00a130:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c00a132:	2dad                	jal	1c00a7ac <rt_alloc>
  if (cbsys == NULL) return -1;
1c00a134:	4632                	lw	a2,12(sp)
1c00a136:	c115                	beqz	a0,1c00a15a <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c00a138:	1b0017b7          	lui	a5,0x1b001
1c00a13c:	040a                	slli	s0,s0,0x2
1c00a13e:	bf078793          	addi	a5,a5,-1040 # 1b000bf0 <cbsys_first>
1c00a142:	97a2                	add	a5,a5,s0
1c00a144:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c00a146:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c00a148:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c00a14a:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c00a14c:	c388                	sw	a0,0(a5)

  return 0;
1c00a14e:	4501                	li	a0,0
}
1c00a150:	40f2                	lw	ra,28(sp)
1c00a152:	4462                	lw	s0,24(sp)
1c00a154:	44d2                	lw	s1,20(sp)
1c00a156:	6105                	addi	sp,sp,32
1c00a158:	8082                	ret
  if (cbsys == NULL) return -1;
1c00a15a:	557d                	li	a0,-1
1c00a15c:	bfd5                	j	1c00a150 <__rt_cbsys_add+0x30>

1c00a15e <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c00a15e:	1141                	addi	sp,sp,-16
1c00a160:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c00a162:	1b001437          	lui	s0,0x1b001
1c00a166:	050a                	slli	a0,a0,0x2
1c00a168:	bf040413          	addi	s0,s0,-1040 # 1b000bf0 <cbsys_first>
1c00a16c:	20a47403          	p.lw	s0,a0(s0)
{
1c00a170:	c606                	sw	ra,12(sp)
  while (cbsys)
1c00a172:	e411                	bnez	s0,1c00a17e <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c00a174:	4501                	li	a0,0
}
1c00a176:	40b2                	lw	ra,12(sp)
1c00a178:	4422                	lw	s0,8(sp)
1c00a17a:	0141                	addi	sp,sp,16
1c00a17c:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c00a17e:	401c                	lw	a5,0(s0)
1c00a180:	4048                	lw	a0,4(s0)
1c00a182:	9782                	jalr	a5
1c00a184:	e119                	bnez	a0,1c00a18a <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c00a186:	4400                	lw	s0,8(s0)
1c00a188:	b7ed                	j	1c00a172 <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c00a18a:	557d                	li	a0,-1
1c00a18c:	b7ed                	j	1c00a176 <__rt_cbsys_exec+0x18>

1c00a18e <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c00a18e:	1b0017b7          	lui	a5,0x1b001
1c00a192:	bf078793          	addi	a5,a5,-1040 # 1b000bf0 <cbsys_first>
1c00a196:	0007a023          	sw	zero,0(a5)
1c00a19a:	0007a223          	sw	zero,4(a5)
1c00a19e:	0007a423          	sw	zero,8(a5)
1c00a1a2:	0007a623          	sw	zero,12(a5)
1c00a1a6:	0007a823          	sw	zero,16(a5)
1c00a1aa:	0007aa23          	sw	zero,20(a5)
  }
}
1c00a1ae:	8082                	ret

1c00a1b0 <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c00a1b0:	1141                	addi	sp,sp,-16
1c00a1b2:	c422                	sw	s0,8(sp)
1c00a1b4:	842a                	mv	s0,a0
1c00a1b6:	c606                	sw	ra,12(sp)
1c00a1b8:	c226                	sw	s1,4(sp)
1c00a1ba:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a1bc:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c00a1c0:	401c                	lw	a5,0(s0)
1c00a1c2:	eb99                	bnez	a5,1c00a1d8 <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c00a1c4:	4785                	li	a5,1
1c00a1c6:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c00a1c8:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c00a1cc:	40b2                	lw	ra,12(sp)
1c00a1ce:	4422                	lw	s0,8(sp)
1c00a1d0:	4492                	lw	s1,4(sp)
1c00a1d2:	4902                	lw	s2,0(sp)
1c00a1d4:	0141                	addi	sp,sp,16
1c00a1d6:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c00a1d8:	4585                	li	a1,1
1c00a1da:	01c00513          	li	a0,28
1c00a1de:	2989                	jal	1c00a630 <__rt_event_execute>
1c00a1e0:	b7c5                	j	1c00a1c0 <__rt_fc_lock+0x10>

1c00a1e2 <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a1e2:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c00a1e6:	415c                	lw	a5,4(a0)
1c00a1e8:	e791                	bnez	a5,1c00a1f4 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c00a1ea:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00a1ee:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c00a1f2:	8082                	ret
    lock->waiting = req->next;
1c00a1f4:	43d8                	lw	a4,4(a5)
1c00a1f6:	c158                	sw	a4,4(a0)
    req->done = 1;
1c00a1f8:	4705                	li	a4,1
1c00a1fa:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c00a1fe:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c00a202:	00201737          	lui	a4,0x201
1c00a206:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00a20a:	04078793          	addi	a5,a5,64
1c00a20e:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00a210:	0007e723          	p.sw	zero,a4(a5)
1c00a214:	bfe9                	j	1c00a1ee <__rt_fc_unlock+0xc>

1c00a216 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a216:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00a21a:	8795                	srai	a5,a5,0x5
1c00a21c:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c00a220:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c00a224:	4785                	li	a5,1
1c00a226:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c00a22a:	1c00a7b7          	lui	a5,0x1c00a
1c00a22e:	0a478793          	addi	a5,a5,164 # 1c00a0a4 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c00a232:	c188                	sw	a0,0(a1)
  req->done = 0;
1c00a234:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c00a238:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c00a23c:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c00a240:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00a242:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00a244:	05a1                	addi	a1,a1,8

// This function will push an event from cluster to FC and the event callback
// will be executed directly from within the interrupt handler
static inline void __rt_cluster_push_fc_irq_event(rt_event_t *event)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c00a246:	c005c533          	p.bset	a0,a1,0,0
1c00a24a:	2b00106f          	j	1c00b4fa <__rt_cluster_push_fc_event>

1c00a24e <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a24e:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00a252:	8795                	srai	a5,a5,0x5
1c00a254:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c00a258:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c00a25c:	1c00a7b7          	lui	a5,0x1c00a
1c00a260:	0a478793          	addi	a5,a5,164 # 1c00a0a4 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c00a264:	c188                	sw	a0,0(a1)
  req->done = 0;
1c00a266:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c00a26a:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c00a26e:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c00a272:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c00a276:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00a278:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00a27a:	05a1                	addi	a1,a1,8
1c00a27c:	c005c533          	p.bset	a0,a1,0,0
1c00a280:	27a0106f          	j	1c00b4fa <__rt_cluster_push_fc_event>

1c00a284 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c00a284:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c00a288:	00052023          	sw	zero,0(a0)
1c00a28c:	01c00713          	li	a4,28
1c00a290:	c689                	beqz	a3,1c00a29a <__rt_event_enqueue+0x16>
1c00a292:	435c                	lw	a5,4(a4)
1c00a294:	c388                	sw	a0,0(a5)
1c00a296:	c348                	sw	a0,4(a4)
1c00a298:	8082                	ret
1c00a29a:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00a29e:	bfe5                	j	1c00a296 <__rt_event_enqueue+0x12>

1c00a2a0 <__rt_bridge_check_bridge_req.part.5>:
1c00a2a0:	1c00f737          	lui	a4,0x1c00f
1c00a2a4:	05070793          	addi	a5,a4,80 # 1c00f050 <__hal_debug_struct>
1c00a2a8:	0a47a783          	lw	a5,164(a5)
1c00a2ac:	05070713          	addi	a4,a4,80
1c00a2b0:	c789                	beqz	a5,1c00a2ba <__rt_bridge_check_bridge_req.part.5+0x1a>
1c00a2b2:	4f94                	lw	a3,24(a5)
1c00a2b4:	e681                	bnez	a3,1c00a2bc <__rt_bridge_check_bridge_req.part.5+0x1c>
1c00a2b6:	0af72623          	sw	a5,172(a4)
1c00a2ba:	8082                	ret
1c00a2bc:	479c                	lw	a5,8(a5)
1c00a2be:	bfcd                	j	1c00a2b0 <__rt_bridge_check_bridge_req.part.5+0x10>

1c00a2c0 <__rt_bridge_wait>:
1c00a2c0:	014027f3          	csrr	a5,uhartid
1c00a2c4:	02000713          	li	a4,32
1c00a2c8:	ca5797b3          	p.extractu	a5,a5,5,5
1c00a2cc:	02e79c63          	bne	a5,a4,1c00a304 <__rt_bridge_wait+0x44>
1c00a2d0:	1141                	addi	sp,sp,-16
1c00a2d2:	c422                	sw	s0,8(sp)
1c00a2d4:	1a106437          	lui	s0,0x1a106
1c00a2d8:	c606                	sw	ra,12(sp)
1c00a2da:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105fc0>
1c00a2de:	c187b7b3          	p.bclr	a5,a5,0,24
1c00a2e2:	00f42223          	sw	a5,4(s0)
1c00a2e6:	4585                	li	a1,1
1c00a2e8:	03800513          	li	a0,56
1c00a2ec:	187000ef          	jal	ra,1c00ac72 <__rt_periph_wait_event>
1c00a2f0:	00442783          	lw	a5,4(s0)
1c00a2f4:	c187c7b3          	p.bset	a5,a5,0,24
1c00a2f8:	00f42223          	sw	a5,4(s0)
1c00a2fc:	40b2                	lw	ra,12(sp)
1c00a2fe:	4422                	lw	s0,8(sp)
1c00a300:	0141                	addi	sp,sp,16
1c00a302:	8082                	ret
1c00a304:	8082                	ret

1c00a306 <__rt_bridge_handle_notif>:
1c00a306:	1141                	addi	sp,sp,-16
1c00a308:	c422                	sw	s0,8(sp)
1c00a30a:	1c00f437          	lui	s0,0x1c00f
1c00a30e:	05040793          	addi	a5,s0,80 # 1c00f050 <__hal_debug_struct>
1c00a312:	0a47a783          	lw	a5,164(a5)
1c00a316:	c606                	sw	ra,12(sp)
1c00a318:	c226                	sw	s1,4(sp)
1c00a31a:	c04a                	sw	s2,0(sp)
1c00a31c:	05040413          	addi	s0,s0,80
1c00a320:	c399                	beqz	a5,1c00a326 <__rt_bridge_handle_notif+0x20>
1c00a322:	4bd8                	lw	a4,20(a5)
1c00a324:	e31d                	bnez	a4,1c00a34a <__rt_bridge_handle_notif+0x44>
1c00a326:	0b442783          	lw	a5,180(s0)
1c00a32a:	c791                	beqz	a5,1c00a336 <__rt_bridge_handle_notif+0x30>
1c00a32c:	43a8                	lw	a0,64(a5)
1c00a32e:	0a042a23          	sw	zero,180(s0)
1c00a332:	f53ff0ef          	jal	ra,1c00a284 <__rt_event_enqueue>
1c00a336:	0ac42783          	lw	a5,172(s0)
1c00a33a:	ef85                	bnez	a5,1c00a372 <__rt_bridge_handle_notif+0x6c>
1c00a33c:	4422                	lw	s0,8(sp)
1c00a33e:	40b2                	lw	ra,12(sp)
1c00a340:	4492                	lw	s1,4(sp)
1c00a342:	4902                	lw	s2,0(sp)
1c00a344:	0141                	addi	sp,sp,16
1c00a346:	f5bff06f          	j	1c00a2a0 <__rt_bridge_check_bridge_req.part.5>
1c00a34a:	4784                	lw	s1,8(a5)
1c00a34c:	4fd8                	lw	a4,28(a5)
1c00a34e:	0a942223          	sw	s1,164(s0)
1c00a352:	cb01                	beqz	a4,1c00a362 <__rt_bridge_handle_notif+0x5c>
1c00a354:	0b042703          	lw	a4,176(s0)
1c00a358:	c798                	sw	a4,8(a5)
1c00a35a:	0af42823          	sw	a5,176(s0)
1c00a35e:	87a6                	mv	a5,s1
1c00a360:	b7c1                	j	1c00a320 <__rt_bridge_handle_notif+0x1a>
1c00a362:	43a8                	lw	a0,64(a5)
1c00a364:	30047973          	csrrci	s2,mstatus,8
1c00a368:	f1dff0ef          	jal	ra,1c00a284 <__rt_event_enqueue>
1c00a36c:	30091073          	csrw	mstatus,s2
1c00a370:	b7fd                	j	1c00a35e <__rt_bridge_handle_notif+0x58>
1c00a372:	40b2                	lw	ra,12(sp)
1c00a374:	4422                	lw	s0,8(sp)
1c00a376:	4492                	lw	s1,4(sp)
1c00a378:	4902                	lw	s2,0(sp)
1c00a37a:	0141                	addi	sp,sp,16
1c00a37c:	8082                	ret

1c00a37e <__rt_bridge_check_connection>:
1c00a37e:	1c00f6b7          	lui	a3,0x1c00f
1c00a382:	05068693          	addi	a3,a3,80 # 1c00f050 <__hal_debug_struct>
1c00a386:	469c                	lw	a5,8(a3)
1c00a388:	e3a1                	bnez	a5,1c00a3c8 <__rt_bridge_check_connection+0x4a>
1c00a38a:	1a1047b7          	lui	a5,0x1a104
1c00a38e:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104030>
1c00a392:	4398                	lw	a4,0(a5)
1c00a394:	8325                	srli	a4,a4,0x9
1c00a396:	f8373733          	p.bclr	a4,a4,28,3
1c00a39a:	02773763          	p.bneimm	a4,7,1c00a3c8 <__rt_bridge_check_connection+0x4a>
1c00a39e:	1141                	addi	sp,sp,-16
1c00a3a0:	c422                	sw	s0,8(sp)
1c00a3a2:	c606                	sw	ra,12(sp)
1c00a3a4:	4705                	li	a4,1
1c00a3a6:	c698                	sw	a4,8(a3)
1c00a3a8:	4709                	li	a4,2
1c00a3aa:	c398                	sw	a4,0(a5)
1c00a3ac:	843e                	mv	s0,a5
1c00a3ae:	401c                	lw	a5,0(s0)
1c00a3b0:	83a5                	srli	a5,a5,0x9
1c00a3b2:	f837b7b3          	p.bclr	a5,a5,28,3
1c00a3b6:	0077a663          	p.beqimm	a5,7,1c00a3c2 <__rt_bridge_check_connection+0x44>
1c00a3ba:	40b2                	lw	ra,12(sp)
1c00a3bc:	4422                	lw	s0,8(sp)
1c00a3be:	0141                	addi	sp,sp,16
1c00a3c0:	8082                	ret
1c00a3c2:	effff0ef          	jal	ra,1c00a2c0 <__rt_bridge_wait>
1c00a3c6:	b7e5                	j	1c00a3ae <__rt_bridge_check_connection+0x30>
1c00a3c8:	8082                	ret

1c00a3ca <__rt_bridge_set_available>:
1c00a3ca:	1c00f7b7          	lui	a5,0x1c00f
1c00a3ce:	05078793          	addi	a5,a5,80 # 1c00f050 <__hal_debug_struct>
1c00a3d2:	4798                	lw	a4,8(a5)
1c00a3d4:	1a1047b7          	lui	a5,0x1a104
1c00a3d8:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104030>
1c00a3dc:	e701                	bnez	a4,1c00a3e4 <__rt_bridge_set_available+0x1a>
1c00a3de:	4721                	li	a4,8
1c00a3e0:	c398                	sw	a4,0(a5)
1c00a3e2:	8082                	ret
1c00a3e4:	4709                	li	a4,2
1c00a3e6:	bfed                	j	1c00a3e0 <__rt_bridge_set_available+0x16>

1c00a3e8 <__rt_bridge_send_notif>:
1c00a3e8:	1141                	addi	sp,sp,-16
1c00a3ea:	c606                	sw	ra,12(sp)
1c00a3ec:	f93ff0ef          	jal	ra,1c00a37e <__rt_bridge_check_connection>
1c00a3f0:	1c00f7b7          	lui	a5,0x1c00f
1c00a3f4:	05078793          	addi	a5,a5,80 # 1c00f050 <__hal_debug_struct>
1c00a3f8:	479c                	lw	a5,8(a5)
1c00a3fa:	c789                	beqz	a5,1c00a404 <__rt_bridge_send_notif+0x1c>
1c00a3fc:	1a1047b7          	lui	a5,0x1a104
1c00a400:	4719                	li	a4,6
1c00a402:	dbf8                	sw	a4,116(a5)
1c00a404:	40b2                	lw	ra,12(sp)
1c00a406:	0141                	addi	sp,sp,16
1c00a408:	8082                	ret

1c00a40a <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c00a40a:	1141                	addi	sp,sp,-16
1c00a40c:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c00a40e:	f71ff0ef          	jal	ra,1c00a37e <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c00a412:	1c00f7b7          	lui	a5,0x1c00f
1c00a416:	05078793          	addi	a5,a5,80 # 1c00f050 <__hal_debug_struct>
1c00a41a:	479c                	lw	a5,8(a5)
1c00a41c:	c789                	beqz	a5,1c00a426 <__rt_bridge_clear_notif+0x1c>
  {
    __rt_bridge_set_available();
  }
}
1c00a41e:	40b2                	lw	ra,12(sp)
1c00a420:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c00a422:	fa9ff06f          	j	1c00a3ca <__rt_bridge_set_available>
}
1c00a426:	40b2                	lw	ra,12(sp)
1c00a428:	0141                	addi	sp,sp,16
1c00a42a:	8082                	ret

1c00a42c <__rt_bridge_printf_flush>:
{
1c00a42c:	1141                	addi	sp,sp,-16
1c00a42e:	c422                	sw	s0,8(sp)
1c00a430:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c00a432:	1c00f437          	lui	s0,0x1c00f
  __rt_bridge_check_connection();
1c00a436:	f49ff0ef          	jal	ra,1c00a37e <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00a43a:	05040793          	addi	a5,s0,80 # 1c00f050 <__hal_debug_struct>
1c00a43e:	479c                	lw	a5,8(a5)
1c00a440:	c39d                	beqz	a5,1c00a466 <__rt_bridge_printf_flush+0x3a>
1c00a442:	05040413          	addi	s0,s0,80
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c00a446:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c00a448:	e399                	bnez	a5,1c00a44e <__rt_bridge_printf_flush+0x22>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c00a44a:	4c1c                	lw	a5,24(s0)
1c00a44c:	cf89                	beqz	a5,1c00a466 <__rt_bridge_printf_flush+0x3a>
      __rt_bridge_send_notif();
1c00a44e:	f9bff0ef          	jal	ra,1c00a3e8 <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c00a452:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c00a454:	e791                	bnez	a5,1c00a460 <__rt_bridge_printf_flush+0x34>
}
1c00a456:	4422                	lw	s0,8(sp)
1c00a458:	40b2                	lw	ra,12(sp)
1c00a45a:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c00a45c:	fafff06f          	j	1c00a40a <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c00a460:	e61ff0ef          	jal	ra,1c00a2c0 <__rt_bridge_wait>
1c00a464:	b7fd                	j	1c00a452 <__rt_bridge_printf_flush+0x26>
}
1c00a466:	40b2                	lw	ra,12(sp)
1c00a468:	4422                	lw	s0,8(sp)
1c00a46a:	0141                	addi	sp,sp,16
1c00a46c:	8082                	ret

1c00a46e <__rt_bridge_req_shutdown>:
{
1c00a46e:	1141                	addi	sp,sp,-16
1c00a470:	c606                	sw	ra,12(sp)
1c00a472:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c00a474:	f0bff0ef          	jal	ra,1c00a37e <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00a478:	1c00f7b7          	lui	a5,0x1c00f
1c00a47c:	05078793          	addi	a5,a5,80 # 1c00f050 <__hal_debug_struct>
1c00a480:	479c                	lw	a5,8(a5)
1c00a482:	c7a9                	beqz	a5,1c00a4cc <__rt_bridge_req_shutdown+0x5e>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00a484:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c00a488:	fa5ff0ef          	jal	ra,1c00a42c <__rt_bridge_printf_flush>
1c00a48c:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00a490:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c00a492:	83a5                	srli	a5,a5,0x9
1c00a494:	f837b7b3          	p.bclr	a5,a5,28,3
1c00a498:	0277ae63          	p.beqimm	a5,7,1c00a4d4 <__rt_bridge_req_shutdown+0x66>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00a49c:	4791                	li	a5,4
1c00a49e:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00a4a0:	1a104437          	lui	s0,0x1a104
1c00a4a4:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00a4a8:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c00a4aa:	83a5                	srli	a5,a5,0x9
1c00a4ac:	f837b7b3          	p.bclr	a5,a5,28,3
1c00a4b0:	0277b563          	p.bneimm	a5,7,1c00a4da <__rt_bridge_req_shutdown+0x6c>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00a4b4:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00a4b8:	1a104437          	lui	s0,0x1a104
1c00a4bc:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104030>
1c00a4c0:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c00a4c2:	83a5                	srli	a5,a5,0x9
1c00a4c4:	f837b7b3          	p.bclr	a5,a5,28,3
1c00a4c8:	0077ac63          	p.beqimm	a5,7,1c00a4e0 <__rt_bridge_req_shutdown+0x72>
}
1c00a4cc:	40b2                	lw	ra,12(sp)
1c00a4ce:	4422                	lw	s0,8(sp)
1c00a4d0:	0141                	addi	sp,sp,16
1c00a4d2:	8082                	ret
      __rt_bridge_wait();
1c00a4d4:	dedff0ef          	jal	ra,1c00a2c0 <__rt_bridge_wait>
1c00a4d8:	bf65                	j	1c00a490 <__rt_bridge_req_shutdown+0x22>
      __rt_bridge_wait();
1c00a4da:	de7ff0ef          	jal	ra,1c00a2c0 <__rt_bridge_wait>
1c00a4de:	b7e9                	j	1c00a4a8 <__rt_bridge_req_shutdown+0x3a>
      __rt_bridge_wait();
1c00a4e0:	de1ff0ef          	jal	ra,1c00a2c0 <__rt_bridge_wait>
1c00a4e4:	bff1                	j	1c00a4c0 <__rt_bridge_req_shutdown+0x52>

1c00a4e6 <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c00a4e6:	1c00f7b7          	lui	a5,0x1c00f
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00a4ea:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c00a4ee:	05078793          	addi	a5,a5,80 # 1c00f050 <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00a4f2:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ff9f0>
1c00a4f6:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c00a4fa:	4705                	li	a4,1
  bridge->first_req = 0;
1c00a4fc:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c00a500:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c00a504:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c00a508:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c00a50c:	00400793          	li	a5,4
1c00a510:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c00a514:	0007a023          	sw	zero,0(a5)
}
1c00a518:	8082                	ret

1c00a51a <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c00a51a:	1141                	addi	sp,sp,-16
1c00a51c:	c422                	sw	s0,8(sp)
1c00a51e:	c606                	sw	ra,12(sp)
1c00a520:	842a                	mv	s0,a0
1c00a522:	02052223          	sw	zero,36(a0)
1c00a526:	02052423          	sw	zero,40(a0)
1c00a52a:	45c1                	li	a1,16
1c00a52c:	4501                	li	a0,0
1c00a52e:	2cbd                	jal	1c00a7ac <rt_alloc>
1c00a530:	dc68                	sw	a0,124(s0)
1c00a532:	02042a23          	sw	zero,52(s0)
1c00a536:	00042223          	sw	zero,4(s0)
1c00a53a:	40b2                	lw	ra,12(sp)
1c00a53c:	4422                	lw	s0,8(sp)
1c00a53e:	0141                	addi	sp,sp,16
1c00a540:	8082                	ret

1c00a542 <__rt_wait_event_prepare_blocking>:
1c00a542:	01800793          	li	a5,24
1c00a546:	4388                	lw	a0,0(a5)
1c00a548:	4118                	lw	a4,0(a0)
1c00a54a:	02052423          	sw	zero,40(a0)
1c00a54e:	00052223          	sw	zero,4(a0)
1c00a552:	c398                	sw	a4,0(a5)
1c00a554:	4785                	li	a5,1
1c00a556:	d15c                	sw	a5,36(a0)
1c00a558:	8082                	ret

1c00a55a <rt_event_alloc>:
1c00a55a:	1101                	addi	sp,sp,-32
1c00a55c:	c64e                	sw	s3,12(sp)
1c00a55e:	89ae                	mv	s3,a1
1c00a560:	ce06                	sw	ra,28(sp)
1c00a562:	cc22                	sw	s0,24(sp)
1c00a564:	ca26                	sw	s1,20(sp)
1c00a566:	c84a                	sw	s2,16(sp)
1c00a568:	c452                	sw	s4,8(sp)
1c00a56a:	c256                	sw	s5,4(sp)
1c00a56c:	30047a73          	csrrci	s4,mstatus,8
1c00a570:	014027f3          	csrr	a5,uhartid
1c00a574:	8795                	srai	a5,a5,0x5
1c00a576:	f267b7b3          	p.bclr	a5,a5,25,6
1c00a57a:	02000713          	li	a4,32
1c00a57e:	00278513          	addi	a0,a5,2
1c00a582:	00e79363          	bne	a5,a4,1c00a588 <rt_event_alloc+0x2e>
1c00a586:	4505                	li	a0,1
1c00a588:	00799593          	slli	a1,s3,0x7
1c00a58c:	2405                	jal	1c00a7ac <rt_alloc>
1c00a58e:	842a                	mv	s0,a0
1c00a590:	557d                	li	a0,-1
1c00a592:	c819                	beqz	s0,1c00a5a8 <rt_event_alloc+0x4e>
1c00a594:	01800493          	li	s1,24
1c00a598:	4901                	li	s2,0
1c00a59a:	00448a93          	addi	s5,s1,4
1c00a59e:	01394e63          	blt	s2,s3,1c00a5ba <rt_event_alloc+0x60>
1c00a5a2:	300a1073          	csrw	mstatus,s4
1c00a5a6:	4501                	li	a0,0
1c00a5a8:	40f2                	lw	ra,28(sp)
1c00a5aa:	4462                	lw	s0,24(sp)
1c00a5ac:	44d2                	lw	s1,20(sp)
1c00a5ae:	4942                	lw	s2,16(sp)
1c00a5b0:	49b2                	lw	s3,12(sp)
1c00a5b2:	4a22                	lw	s4,8(sp)
1c00a5b4:	4a92                	lw	s5,4(sp)
1c00a5b6:	6105                	addi	sp,sp,32
1c00a5b8:	8082                	ret
1c00a5ba:	8522                	mv	a0,s0
1c00a5bc:	85d6                	mv	a1,s5
1c00a5be:	f5dff0ef          	jal	ra,1c00a51a <__rt_event_init>
1c00a5c2:	409c                	lw	a5,0(s1)
1c00a5c4:	0905                	addi	s2,s2,1
1c00a5c6:	c01c                	sw	a5,0(s0)
1c00a5c8:	c080                	sw	s0,0(s1)
1c00a5ca:	08040413          	addi	s0,s0,128
1c00a5ce:	bfc1                	j	1c00a59e <rt_event_alloc+0x44>

1c00a5d0 <rt_event_get>:
1c00a5d0:	30047773          	csrrci	a4,mstatus,8
1c00a5d4:	01800793          	li	a5,24
1c00a5d8:	4388                	lw	a0,0(a5)
1c00a5da:	c509                	beqz	a0,1c00a5e4 <rt_event_get+0x14>
1c00a5dc:	4114                	lw	a3,0(a0)
1c00a5de:	c14c                	sw	a1,4(a0)
1c00a5e0:	c510                	sw	a2,8(a0)
1c00a5e2:	c394                	sw	a3,0(a5)
1c00a5e4:	30071073          	csrw	mstatus,a4
1c00a5e8:	8082                	ret

1c00a5ea <rt_event_get_blocking>:
1c00a5ea:	30047773          	csrrci	a4,mstatus,8
1c00a5ee:	01800793          	li	a5,24
1c00a5f2:	4388                	lw	a0,0(a5)
1c00a5f4:	c909                	beqz	a0,1c00a606 <rt_event_get_blocking+0x1c>
1c00a5f6:	4114                	lw	a3,0(a0)
1c00a5f8:	00052223          	sw	zero,4(a0)
1c00a5fc:	00052423          	sw	zero,8(a0)
1c00a600:	c394                	sw	a3,0(a5)
1c00a602:	4785                	li	a5,1
1c00a604:	d15c                	sw	a5,36(a0)
1c00a606:	30071073          	csrw	mstatus,a4
1c00a60a:	8082                	ret

1c00a60c <rt_event_push>:
1c00a60c:	30047773          	csrrci	a4,mstatus,8
1c00a610:	01800693          	li	a3,24
1c00a614:	42d4                	lw	a3,4(a3)
1c00a616:	00052023          	sw	zero,0(a0)
1c00a61a:	01800793          	li	a5,24
1c00a61e:	e691                	bnez	a3,1c00a62a <rt_event_push+0x1e>
1c00a620:	c3c8                	sw	a0,4(a5)
1c00a622:	c788                	sw	a0,8(a5)
1c00a624:	30071073          	csrw	mstatus,a4
1c00a628:	8082                	ret
1c00a62a:	4794                	lw	a3,8(a5)
1c00a62c:	c288                	sw	a0,0(a3)
1c00a62e:	bfd5                	j	1c00a622 <rt_event_push+0x16>

1c00a630 <__rt_event_execute>:
1c00a630:	1141                	addi	sp,sp,-16
1c00a632:	c422                	sw	s0,8(sp)
1c00a634:	01800793          	li	a5,24
1c00a638:	43dc                	lw	a5,4(a5)
1c00a63a:	c606                	sw	ra,12(sp)
1c00a63c:	c226                	sw	s1,4(sp)
1c00a63e:	01800413          	li	s0,24
1c00a642:	ef81                	bnez	a5,1c00a65a <__rt_event_execute+0x2a>
1c00a644:	c1b9                	beqz	a1,1c00a68a <__rt_event_execute+0x5a>
1c00a646:	002047b7          	lui	a5,0x204
1c00a64a:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c00a64e:	300467f3          	csrrsi	a5,mstatus,8
1c00a652:	300477f3          	csrrci	a5,mstatus,8
1c00a656:	405c                	lw	a5,4(s0)
1c00a658:	cb8d                	beqz	a5,1c00a68a <__rt_event_execute+0x5a>
1c00a65a:	4485                	li	s1,1
1c00a65c:	4398                	lw	a4,0(a5)
1c00a65e:	5794                	lw	a3,40(a5)
1c00a660:	00978a23          	sb	s1,20(a5)
1c00a664:	c058                	sw	a4,4(s0)
1c00a666:	4788                	lw	a0,8(a5)
1c00a668:	43d8                	lw	a4,4(a5)
1c00a66a:	e691                	bnez	a3,1c00a676 <__rt_event_execute+0x46>
1c00a66c:	53d4                	lw	a3,36(a5)
1c00a66e:	e681                	bnez	a3,1c00a676 <__rt_event_execute+0x46>
1c00a670:	4014                	lw	a3,0(s0)
1c00a672:	c394                	sw	a3,0(a5)
1c00a674:	c01c                	sw	a5,0(s0)
1c00a676:	0207a223          	sw	zero,36(a5)
1c00a67a:	c711                	beqz	a4,1c00a686 <__rt_event_execute+0x56>
1c00a67c:	300467f3          	csrrsi	a5,mstatus,8
1c00a680:	9702                	jalr	a4
1c00a682:	300477f3          	csrrci	a5,mstatus,8
1c00a686:	405c                	lw	a5,4(s0)
1c00a688:	fbf1                	bnez	a5,1c00a65c <__rt_event_execute+0x2c>
1c00a68a:	40b2                	lw	ra,12(sp)
1c00a68c:	4422                	lw	s0,8(sp)
1c00a68e:	4492                	lw	s1,4(sp)
1c00a690:	0141                	addi	sp,sp,16
1c00a692:	8082                	ret

1c00a694 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c00a694:	1141                	addi	sp,sp,-16
1c00a696:	c422                	sw	s0,8(sp)
1c00a698:	c606                	sw	ra,12(sp)
1c00a69a:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c00a69c:	505c                	lw	a5,36(s0)
1c00a69e:	ef81                	bnez	a5,1c00a6b6 <__rt_wait_event+0x22>
1c00a6a0:	585c                	lw	a5,52(s0)
1c00a6a2:	eb91                	bnez	a5,1c00a6b6 <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c00a6a4:	01800793          	li	a5,24
1c00a6a8:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c00a6aa:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c00a6ac:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c00a6ae:	c380                	sw	s0,0(a5)
}
1c00a6b0:	4422                	lw	s0,8(sp)
1c00a6b2:	0141                	addi	sp,sp,16
1c00a6b4:	8082                	ret
    __rt_event_execute(NULL, 1);
1c00a6b6:	4585                	li	a1,1
1c00a6b8:	4501                	li	a0,0
1c00a6ba:	f77ff0ef          	jal	ra,1c00a630 <__rt_event_execute>
1c00a6be:	bff9                	j	1c00a69c <__rt_wait_event+0x8>

1c00a6c0 <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c00a6c0:	1141                	addi	sp,sp,-16
1c00a6c2:	c606                	sw	ra,12(sp)
1c00a6c4:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a6c6:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c00a6ca:	fcbff0ef          	jal	ra,1c00a694 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00a6ce:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c00a6d2:	40b2                	lw	ra,12(sp)
1c00a6d4:	4422                	lw	s0,8(sp)
1c00a6d6:	0141                	addi	sp,sp,16
1c00a6d8:	8082                	ret

1c00a6da <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c00a6da:	01800513          	li	a0,24
1c00a6de:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c00a6e2:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c00a6e6:	4585                	li	a1,1
1c00a6e8:	0511                	addi	a0,a0,4
1c00a6ea:	e71ff06f          	j	1c00a55a <rt_event_alloc>

1c00a6ee <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c00a6ee:	ac05                	j	1c00a91e <rt_event_push_delayed>

1c00a6f0 <pi_cl_send_task_to_fc>:
}

static inline void __rt_task_init_from_cluster(pi_task_t *task)
{
  task->implem.keep = 1;
1c00a6f0:	4785                	li	a5,1
1c00a6f2:	d51c                	sw	a5,40(a0)
#ifdef ARCHI_HAS_CLUSTER

void pi_cl_send_task_to_fc(pi_task_t *task)
{
  __rt_task_init_from_cluster(task);
  __rt_cluster_push_fc_event(task);
1c00a6f4:	6070006f          	j	1c00b4fa <__rt_cluster_push_fc_event>

1c00a6f8 <rt_user_alloc_init>:


void rt_free(rt_alloc_e flags, void *_chunk, int size)
{
#if defined(ARCHI_HAS_L1)
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c00a6f8:	00758793          	addi	a5,a1,7
1c00a6fc:	c407b7b3          	p.bclr	a5,a5,2,0
1c00a700:	40b785b3          	sub	a1,a5,a1
1c00a704:	c11c                	sw	a5,0(a0)
1c00a706:	8e0d                	sub	a2,a2,a1
1c00a708:	00c05763          	blez	a2,1c00a716 <rt_user_alloc_init+0x1e>
1c00a70c:	c4063633          	p.bclr	a2,a2,2,0
1c00a710:	c390                	sw	a2,0(a5)
1c00a712:	0007a223          	sw	zero,4(a5)
1c00a716:	8082                	ret

1c00a718 <rt_user_alloc>:
1c00a718:	411c                	lw	a5,0(a0)
1c00a71a:	059d                	addi	a1,a1,7
1c00a71c:	c405b5b3          	p.bclr	a1,a1,2,0
1c00a720:	4701                	li	a4,0
1c00a722:	cb89                	beqz	a5,1c00a734 <rt_user_alloc+0x1c>
1c00a724:	4394                	lw	a3,0(a5)
1c00a726:	43d0                	lw	a2,4(a5)
1c00a728:	00b6c863          	blt	a3,a1,1c00a738 <rt_user_alloc+0x20>
1c00a72c:	00b69b63          	bne	a3,a1,1c00a742 <rt_user_alloc+0x2a>
1c00a730:	c719                	beqz	a4,1c00a73e <rt_user_alloc+0x26>
1c00a732:	c350                	sw	a2,4(a4)
1c00a734:	853e                	mv	a0,a5
1c00a736:	8082                	ret
1c00a738:	873e                	mv	a4,a5
1c00a73a:	87b2                	mv	a5,a2
1c00a73c:	b7dd                	j	1c00a722 <rt_user_alloc+0xa>
1c00a73e:	c110                	sw	a2,0(a0)
1c00a740:	bfd5                	j	1c00a734 <rt_user_alloc+0x1c>
1c00a742:	00b78833          	add	a6,a5,a1
1c00a746:	40b685b3          	sub	a1,a3,a1
1c00a74a:	00b82023          	sw	a1,0(a6)
1c00a74e:	00c82223          	sw	a2,4(a6)
1c00a752:	c701                	beqz	a4,1c00a75a <rt_user_alloc+0x42>
1c00a754:	01072223          	sw	a6,4(a4)
1c00a758:	bff1                	j	1c00a734 <rt_user_alloc+0x1c>
1c00a75a:	01052023          	sw	a6,0(a0)
1c00a75e:	bfd9                	j	1c00a734 <rt_user_alloc+0x1c>

1c00a760 <rt_user_free>:
1c00a760:	411c                	lw	a5,0(a0)
1c00a762:	061d                	addi	a2,a2,7
1c00a764:	c4063633          	p.bclr	a2,a2,2,0
1c00a768:	4701                	li	a4,0
1c00a76a:	c399                	beqz	a5,1c00a770 <rt_user_free+0x10>
1c00a76c:	02b7e763          	bltu	a5,a1,1c00a79a <rt_user_free+0x3a>
1c00a770:	00c586b3          	add	a3,a1,a2
1c00a774:	02d79663          	bne	a5,a3,1c00a7a0 <rt_user_free+0x40>
1c00a778:	4394                	lw	a3,0(a5)
1c00a77a:	43dc                	lw	a5,4(a5)
1c00a77c:	9636                	add	a2,a2,a3
1c00a77e:	c190                	sw	a2,0(a1)
1c00a780:	c1dc                	sw	a5,4(a1)
1c00a782:	c31d                	beqz	a4,1c00a7a8 <rt_user_free+0x48>
1c00a784:	4314                	lw	a3,0(a4)
1c00a786:	00d707b3          	add	a5,a4,a3
1c00a78a:	00f59d63          	bne	a1,a5,1c00a7a4 <rt_user_free+0x44>
1c00a78e:	419c                	lw	a5,0(a1)
1c00a790:	97b6                	add	a5,a5,a3
1c00a792:	c31c                	sw	a5,0(a4)
1c00a794:	41dc                	lw	a5,4(a1)
1c00a796:	c35c                	sw	a5,4(a4)
1c00a798:	8082                	ret
1c00a79a:	873e                	mv	a4,a5
1c00a79c:	43dc                	lw	a5,4(a5)
1c00a79e:	b7f1                	j	1c00a76a <rt_user_free+0xa>
1c00a7a0:	c190                	sw	a2,0(a1)
1c00a7a2:	bff9                	j	1c00a780 <rt_user_free+0x20>
1c00a7a4:	c34c                	sw	a1,4(a4)
1c00a7a6:	8082                	ret
1c00a7a8:	c10c                	sw	a1,0(a0)
1c00a7aa:	8082                	ret

1c00a7ac <rt_alloc>:
1c00a7ac:	4785                	li	a5,1
1c00a7ae:	00a7fb63          	bleu	a0,a5,1c00a7c4 <rt_alloc+0x18>
1c00a7b2:	1c00f7b7          	lui	a5,0x1c00f
1c00a7b6:	6287a783          	lw	a5,1576(a5) # 1c00f628 <__rt_alloc_l1>
1c00a7ba:	1579                	addi	a0,a0,-2
1c00a7bc:	050a                	slli	a0,a0,0x2
1c00a7be:	953e                	add	a0,a0,a5
1c00a7c0:	f59ff06f          	j	1c00a718 <rt_user_alloc>
1c00a7c4:	00153763          	p.bneimm	a0,1,1c00a7d2 <rt_alloc+0x26>
1c00a7c8:	1c00f537          	lui	a0,0x1c00f
1c00a7cc:	63050513          	addi	a0,a0,1584 # 1c00f630 <__rt_alloc_fc_tcdm>
1c00a7d0:	bfc5                	j	1c00a7c0 <rt_alloc+0x14>
1c00a7d2:	1c00f537          	lui	a0,0x1c00f
1c00a7d6:	62c50513          	addi	a0,a0,1580 # 1c00f62c <__rt_alloc_l2>
1c00a7da:	b7dd                	j	1c00a7c0 <rt_alloc+0x14>

1c00a7dc <rt_free>:
1c00a7dc:	4785                	li	a5,1
1c00a7de:	00a7fb63          	bleu	a0,a5,1c00a7f4 <rt_free+0x18>
1c00a7e2:	1c00f7b7          	lui	a5,0x1c00f
1c00a7e6:	6287a783          	lw	a5,1576(a5) # 1c00f628 <__rt_alloc_l1>
1c00a7ea:	1579                	addi	a0,a0,-2
1c00a7ec:	050a                	slli	a0,a0,0x2
1c00a7ee:	953e                	add	a0,a0,a5
1c00a7f0:	f71ff06f          	j	1c00a760 <rt_user_free>
1c00a7f4:	c511                	beqz	a0,1c00a800 <rt_free+0x24>
1c00a7f6:	1c00f537          	lui	a0,0x1c00f
1c00a7fa:	63050513          	addi	a0,a0,1584 # 1c00f630 <__rt_alloc_fc_tcdm>
1c00a7fe:	bfcd                	j	1c00a7f0 <rt_free+0x14>
1c00a800:	1c00f537          	lui	a0,0x1c00f
1c00a804:	62c50513          	addi	a0,a0,1580 # 1c00f62c <__rt_alloc_l2>
1c00a808:	b7e5                	j	1c00a7f0 <rt_free+0x14>

1c00a80a <__rt_alloc_init_l1>:
1c00a80a:	1c00f7b7          	lui	a5,0x1c00f
1c00a80e:	6287a703          	lw	a4,1576(a5) # 1c00f628 <__rt_alloc_l1>
1c00a812:	100007b7          	lui	a5,0x10000
1c00a816:	01651593          	slli	a1,a0,0x16
1c00a81a:	6641                	lui	a2,0x10
1c00a81c:	050a                	slli	a0,a0,0x2
1c00a81e:	04478793          	addi	a5,a5,68 # 10000044 <__l1_end>
1c00a822:	fbc60613          	addi	a2,a2,-68 # ffbc <__l1_heap_size>
1c00a826:	95be                	add	a1,a1,a5
1c00a828:	953a                	add	a0,a0,a4
1c00a82a:	ecfff06f          	j	1c00a6f8 <rt_user_alloc_init>

1c00a82e <__rt_alloc_init_l1_for_fc>:
1c00a82e:	100005b7          	lui	a1,0x10000
1c00a832:	01651793          	slli	a5,a0,0x16
1c00a836:	04458593          	addi	a1,a1,68 # 10000044 <__l1_end>
1c00a83a:	00b78733          	add	a4,a5,a1
1c00a83e:	050a                	slli	a0,a0,0x2
1c00a840:	0791                	addi	a5,a5,4
1c00a842:	6641                	lui	a2,0x10
1c00a844:	1c00f6b7          	lui	a3,0x1c00f
1c00a848:	fb860613          	addi	a2,a2,-72 # ffb8 <__rt_stack_size+0xf7b8>
1c00a84c:	95be                	add	a1,a1,a5
1c00a84e:	953a                	add	a0,a0,a4
1c00a850:	62e6a423          	sw	a4,1576(a3) # 1c00f628 <__rt_alloc_l1>
1c00a854:	ea5ff06f          	j	1c00a6f8 <rt_user_alloc_init>

1c00a858 <__rt_allocs_init>:
1c00a858:	1c00f5b7          	lui	a1,0x1c00f
1c00a85c:	6b058793          	addi	a5,a1,1712 # 1c00f6b0 <__l2_end>
1c00a860:	1c080637          	lui	a2,0x1c080
1c00a864:	1c00f537          	lui	a0,0x1c00f
1c00a868:	1141                	addi	sp,sp,-16
1c00a86a:	8e1d                	sub	a2,a2,a5
1c00a86c:	6b058593          	addi	a1,a1,1712
1c00a870:	62c50513          	addi	a0,a0,1580 # 1c00f62c <__rt_alloc_l2>
1c00a874:	c606                	sw	ra,12(sp)
1c00a876:	c422                	sw	s0,8(sp)
1c00a878:	e81ff0ef          	jal	ra,1c00a6f8 <rt_user_alloc_init>
1c00a87c:	1b0015b7          	lui	a1,0x1b001
1c00a880:	42058793          	addi	a5,a1,1056 # 1b001420 <__fc_tcdm_end>
1c00a884:	1b004637          	lui	a2,0x1b004
1c00a888:	1c00f437          	lui	s0,0x1c00f
1c00a88c:	8e1d                	sub	a2,a2,a5
1c00a88e:	42058593          	addi	a1,a1,1056
1c00a892:	63040513          	addi	a0,s0,1584 # 1c00f630 <__rt_alloc_fc_tcdm>
1c00a896:	e63ff0ef          	jal	ra,1c00a6f8 <rt_user_alloc_init>
1c00a89a:	014027f3          	csrr	a5,uhartid
1c00a89e:	ca5797b3          	p.extractu	a5,a5,5,5
1c00a8a2:	e799                	bnez	a5,1c00a8b0 <__rt_allocs_init+0x58>
1c00a8a4:	4422                	lw	s0,8(sp)
1c00a8a6:	40b2                	lw	ra,12(sp)
1c00a8a8:	4501                	li	a0,0
1c00a8aa:	0141                	addi	sp,sp,16
1c00a8ac:	f83ff06f          	j	1c00a82e <__rt_alloc_init_l1_for_fc>
1c00a8b0:	63040513          	addi	a0,s0,1584
1c00a8b4:	4591                	li	a1,4
1c00a8b6:	e63ff0ef          	jal	ra,1c00a718 <rt_user_alloc>
1c00a8ba:	40b2                	lw	ra,12(sp)
1c00a8bc:	4422                	lw	s0,8(sp)
1c00a8be:	1c00f7b7          	lui	a5,0x1c00f
1c00a8c2:	62a7a423          	sw	a0,1576(a5) # 1c00f628 <__rt_alloc_l1>
1c00a8c6:	0141                	addi	sp,sp,16
1c00a8c8:	8082                	ret

1c00a8ca <pi_cl_l1_malloc>:
1c00a8ca:	4509                	li	a0,2
1c00a8cc:	ee1ff06f          	j	1c00a7ac <rt_alloc>

1c00a8d0 <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c00a8d0:	85aa                	mv	a1,a0
1c00a8d2:	1c00f537          	lui	a0,0x1c00f
1c00a8d6:	62c50513          	addi	a0,a0,1580 # 1c00f62c <__rt_alloc_l2>
1c00a8da:	e3fff06f          	j	1c00a718 <rt_user_alloc>

1c00a8de <pi_l2_free>:
    if (base < (unsigned int)rt_l2_priv0_base() + rt_l2_priv0_size()) a = &__rt_alloc_l2[0];
    else if (base < (unsigned int)rt_l2_priv1_base() + rt_l2_priv1_size()) a = &__rt_alloc_l2[1];
    else a = &__rt_alloc_l2[2];
    rt_user_free(a, _chunk, size);
#else
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c00a8de:	862e                	mv	a2,a1
1c00a8e0:	85aa                	mv	a1,a0
1c00a8e2:	1c00f537          	lui	a0,0x1c00f
1c00a8e6:	62c50513          	addi	a0,a0,1580 # 1c00f62c <__rt_alloc_l2>
1c00a8ea:	e77ff06f          	j	1c00a760 <rt_user_free>

1c00a8ee <__rt_time_poweroff>:
  {
    timer->current_time += timer->period;
    __rt_event_set_pending(timer->event);
    rt_event_push_delayed(timer->event, timer->current_time - rt_time_get_us());
  }
}
1c00a8ee:	002007b7          	lui	a5,0x200
1c00a8f2:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a8f6:	0087a783          	lw	a5,8(a5)
1c00a8fa:	1c00f737          	lui	a4,0x1c00f
1c00a8fe:	5ef72223          	sw	a5,1508(a4) # 1c00f5e4 <timer_count>
1c00a902:	4501                	li	a0,0
1c00a904:	8082                	ret

1c00a906 <__rt_time_poweron>:
1c00a906:	1c00f7b7          	lui	a5,0x1c00f
1c00a90a:	5e47a703          	lw	a4,1508(a5) # 1c00f5e4 <timer_count>
1c00a90e:	002007b7          	lui	a5,0x200
1c00a912:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a916:	00e7a423          	sw	a4,8(a5)
1c00a91a:	4501                	li	a0,0
1c00a91c:	8082                	ret

1c00a91e <rt_event_push_delayed>:
1c00a91e:	30047373          	csrrci	t1,mstatus,8
1c00a922:	1c00f637          	lui	a2,0x1c00f
1c00a926:	63462703          	lw	a4,1588(a2) # 1c00f634 <first_delayed>
1c00a92a:	002007b7          	lui	a5,0x200
1c00a92e:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a932:	0087a783          	lw	a5,8(a5)
1c00a936:	46f9                	li	a3,30
1c00a938:	0405e5b3          	p.max	a1,a1,zero
1c00a93c:	02d5c5b3          	div	a1,a1,a3
1c00a940:	800006b7          	lui	a3,0x80000
1c00a944:	fff6c693          	not	a3,a3
1c00a948:	00d7f833          	and	a6,a5,a3
1c00a94c:	0585                	addi	a1,a1,1
1c00a94e:	97ae                	add	a5,a5,a1
1c00a950:	dd1c                	sw	a5,56(a0)
1c00a952:	982e                	add	a6,a6,a1
1c00a954:	4781                	li	a5,0
1c00a956:	c719                	beqz	a4,1c00a964 <rt_event_push_delayed+0x46>
1c00a958:	03872883          	lw	a7,56(a4)
1c00a95c:	00d8f8b3          	and	a7,a7,a3
1c00a960:	0108e863          	bltu	a7,a6,1c00a970 <rt_event_push_delayed+0x52>
1c00a964:	cb89                	beqz	a5,1c00a976 <rt_event_push_delayed+0x58>
1c00a966:	cfc8                	sw	a0,28(a5)
1c00a968:	cd58                	sw	a4,28(a0)
1c00a96a:	30031073          	csrw	mstatus,t1
1c00a96e:	8082                	ret
1c00a970:	87ba                	mv	a5,a4
1c00a972:	4f58                	lw	a4,28(a4)
1c00a974:	b7cd                	j	1c00a956 <rt_event_push_delayed+0x38>
1c00a976:	002007b7          	lui	a5,0x200
1c00a97a:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a97e:	62a62a23          	sw	a0,1588(a2)
1c00a982:	cd58                	sw	a4,28(a0)
1c00a984:	0087a703          	lw	a4,8(a5)
1c00a988:	95ba                	add	a1,a1,a4
1c00a98a:	00b7a823          	sw	a1,16(a5)
1c00a98e:	08500713          	li	a4,133
1c00a992:	00e7a023          	sw	a4,0(a5)
1c00a996:	bfd1                	j	1c00a96a <rt_event_push_delayed+0x4c>

1c00a998 <rt_time_wait_us>:
{
1c00a998:	1101                	addi	sp,sp,-32
1c00a99a:	85aa                	mv	a1,a0
  rt_event_t *event = rt_event_get_blocking(NULL);
1c00a99c:	4501                	li	a0,0
{
1c00a99e:	ce06                	sw	ra,28(sp)
1c00a9a0:	cc22                	sw	s0,24(sp)
  rt_event_t *event = rt_event_get_blocking(NULL);
1c00a9a2:	c62e                	sw	a1,12(sp)
1c00a9a4:	c47ff0ef          	jal	ra,1c00a5ea <rt_event_get_blocking>
  rt_event_push_delayed(event, time_us);
1c00a9a8:	45b2                	lw	a1,12(sp)
  rt_event_t *event = rt_event_get_blocking(NULL);
1c00a9aa:	842a                	mv	s0,a0
  rt_event_push_delayed(event, time_us);
1c00a9ac:	f73ff0ef          	jal	ra,1c00a91e <rt_event_push_delayed>
  rt_event_wait(event);
1c00a9b0:	8522                	mv	a0,s0
}
1c00a9b2:	4462                	lw	s0,24(sp)
1c00a9b4:	40f2                	lw	ra,28(sp)
1c00a9b6:	6105                	addi	sp,sp,32
  rt_event_wait(event);
1c00a9b8:	d09ff06f          	j	1c00a6c0 <rt_event_wait>

1c00a9bc <pi_time_wait_us>:
  rt_time_wait_us(time_us);
1c00a9bc:	fddff06f          	j	1c00a998 <rt_time_wait_us>

1c00a9c0 <__rt_time_init>:
  first_delayed = NULL;
1c00a9c0:	1c00f7b7          	lui	a5,0x1c00f
1c00a9c4:	6207aa23          	sw	zero,1588(a5) # 1c00f634 <first_delayed>
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00a9c8:	002007b7          	lui	a5,0x200
{
1c00a9cc:	1141                	addi	sp,sp,-16
1c00a9ce:	08300713          	li	a4,131
1c00a9d2:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c00a9d6:	c606                	sw	ra,12(sp)
1c00a9d8:	c422                	sw	s0,8(sp)
1c00a9da:	00e7a023          	sw	a4,0(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c00a9de:	1c00b5b7          	lui	a1,0x1c00b
1c00a9e2:	a4c58593          	addi	a1,a1,-1460 # 1c00aa4c <__rt_timer_handler>
1c00a9e6:	452d                	li	a0,11
1c00a9e8:	dccff0ef          	jal	ra,1c009fb4 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00a9ec:	6785                	lui	a5,0x1
1c00a9ee:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00a9f2:	00204737          	lui	a4,0x204
1c00a9f6:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a9fa:	00f72423          	sw	a5,8(a4)
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00a9fe:	1c00b5b7          	lui	a1,0x1c00b
1c00aa02:	4601                	li	a2,0
1c00aa04:	8ee58593          	addi	a1,a1,-1810 # 1c00a8ee <__rt_time_poweroff>
1c00aa08:	4509                	li	a0,2
1c00aa0a:	f16ff0ef          	jal	ra,1c00a120 <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00aa0e:	1c00b5b7          	lui	a1,0x1c00b
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c00aa12:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c00aa14:	4601                	li	a2,0
1c00aa16:	90658593          	addi	a1,a1,-1786 # 1c00a906 <__rt_time_poweron>
1c00aa1a:	450d                	li	a0,3
1c00aa1c:	f04ff0ef          	jal	ra,1c00a120 <__rt_cbsys_add>
1c00aa20:	8d41                	or	a0,a0,s0
  if (err) rt_fatal("Unable to initialize time driver\n");
1c00aa22:	c10d                	beqz	a0,1c00aa44 <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00aa24:	01402673          	csrr	a2,uhartid
1c00aa28:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00aa2c:	40565593          	srai	a1,a2,0x5
1c00aa30:	f265b5b3          	p.bclr	a1,a1,25,6
1c00aa34:	f4563633          	p.bclr	a2,a2,26,5
1c00aa38:	d1c50513          	addi	a0,a0,-740 # 1c00ed1c <__himax_reg_init+0x1d0>
1c00aa3c:	3fb020ef          	jal	ra,1c00d636 <printf>
1c00aa40:	37b020ef          	jal	ra,1c00d5ba <abort>
}
1c00aa44:	40b2                	lw	ra,12(sp)
1c00aa46:	4422                	lw	s0,8(sp)
1c00aa48:	0141                	addi	sp,sp,16
1c00aa4a:	8082                	ret

1c00aa4c <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c00aa4c:	7179                	addi	sp,sp,-48
1c00aa4e:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c00aa50:	1c00f637          	lui	a2,0x1c00f
{
1c00aa54:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c00aa56:	63462783          	lw	a5,1588(a2) # 1c00f634 <first_delayed>
{
1c00aa5a:	ce36                	sw	a3,28(sp)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00aa5c:	002006b7          	lui	a3,0x200
1c00aa60:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c00aa64:	d61a                	sw	t1,44(sp)
1c00aa66:	d42a                	sw	a0,40(sp)
1c00aa68:	d22e                	sw	a1,36(sp)
1c00aa6a:	cc3a                	sw	a4,24(sp)
1c00aa6c:	c842                	sw	a6,16(sp)
1c00aa6e:	c646                	sw	a7,12(sp)
1c00aa70:	c472                	sw	t3,8(sp)
1c00aa72:	c276                	sw	t4,4(sp)
1c00aa74:	0086a683          	lw	a3,8(a3)
1c00aa78:	01c00593          	li	a1,28
1c00aa7c:	01c02503          	lw	a0,28(zero) # 1c <__rt_sched>
1c00aa80:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00aa82:	80000337          	lui	t1,0x80000
1c00aa86:	4801                	li	a6,0
1c00aa88:	4881                	li	a7,0
1c00aa8a:	01c00e93          	li	t4,28
1c00aa8e:	ffe34313          	xori	t1,t1,-2
1c00aa92:	e7ad                	bnez	a5,1c00aafc <__rt_timer_handler+0xb0>
1c00aa94:	00088463          	beqz	a7,1c00aa9c <__rt_timer_handler+0x50>
1c00aa98:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00aa9c:	00080463          	beqz	a6,1c00aaa4 <__rt_timer_handler+0x58>
1c00aaa0:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00aaa4:	002007b7          	lui	a5,0x200
1c00aaa8:	08100713          	li	a4,129
1c00aaac:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c00aab0:	62062a23          	sw	zero,1588(a2)
1c00aab4:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c00aab8:	6785                	lui	a5,0x1
1c00aaba:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00aabe:	00204737          	lui	a4,0x204
1c00aac2:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c00aac6:	5332                	lw	t1,44(sp)
1c00aac8:	5522                	lw	a0,40(sp)
1c00aaca:	5592                	lw	a1,36(sp)
1c00aacc:	5602                	lw	a2,32(sp)
1c00aace:	46f2                	lw	a3,28(sp)
1c00aad0:	4762                	lw	a4,24(sp)
1c00aad2:	47d2                	lw	a5,20(sp)
1c00aad4:	4842                	lw	a6,16(sp)
1c00aad6:	48b2                	lw	a7,12(sp)
1c00aad8:	4e22                	lw	t3,8(sp)
1c00aada:	4e92                	lw	t4,4(sp)
1c00aadc:	6145                	addi	sp,sp,48
1c00aade:	30200073          	mret
  event->next = NULL;
1c00aae2:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c00aae6:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c00aaea:	c511                	beqz	a0,1c00aaf6 <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c00aaec:	c19c                	sw	a5,0(a1)
    event = next;
1c00aaee:	85be                	mv	a1,a5
1c00aaf0:	4805                	li	a6,1
1c00aaf2:	87f2                	mv	a5,t3
1c00aaf4:	bf79                	j	1c00aa92 <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c00aaf6:	853e                	mv	a0,a5
1c00aaf8:	4885                	li	a7,1
1c00aafa:	bfd5                	j	1c00aaee <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c00aafc:	0387ae03          	lw	t3,56(a5)
1c00ab00:	41c68e33          	sub	t3,a3,t3
1c00ab04:	fdc37fe3          	bleu	t3,t1,1c00aae2 <__rt_timer_handler+0x96>
1c00ab08:	00088463          	beqz	a7,1c00ab10 <__rt_timer_handler+0xc4>
1c00ab0c:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00ab10:	00080463          	beqz	a6,1c00ab18 <__rt_timer_handler+0xcc>
1c00ab14:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00ab18:	00200737          	lui	a4,0x200
1c00ab1c:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c00ab20:	62f62a23          	sw	a5,1588(a2)
1c00ab24:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c00ab28:	5f9c                	lw	a5,56(a5)
1c00ab2a:	40d786b3          	sub	a3,a5,a3
1c00ab2e:	96b2                	add	a3,a3,a2

static inline uint32_t timer_cnt_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_HI_OFFSET); }
static inline void timer_cnt_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CNT_HI_OFFSET, value); }

static inline uint32_t timer_cmp_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_LO_OFFSET); }
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c00ab30:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c00ab34:	08500793          	li	a5,133
1c00ab38:	00f72023          	sw	a5,0(a4)
}
1c00ab3c:	b769                	j	1c00aac6 <__rt_timer_handler+0x7a>

1c00ab3e <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c00ab3e:	7179                	addi	sp,sp,-48
1c00ab40:	d422                	sw	s0,40(sp)
1c00ab42:	842a                	mv	s0,a0
1c00ab44:	d606                	sw	ra,44(sp)
1c00ab46:	d226                	sw	s1,36(sp)
1c00ab48:	d04a                	sw	s2,32(sp)
1c00ab4a:	30047973          	csrrci	s2,mstatus,8
1c00ab4e:	4015d493          	srai	s1,a1,0x1
1c00ab52:	1a102537          	lui	a0,0x1a102
1c00ab56:	049e                	slli	s1,s1,0x7
1c00ab58:	94aa                	add	s1,s1,a0
1c00ab5a:	00459513          	slli	a0,a1,0x4
1c00ab5e:	8941                	andi	a0,a0,16
1c00ab60:	94aa                	add	s1,s1,a0
1c00ab62:	853e                	mv	a0,a5
1c00ab64:	ef89                	bnez	a5,1c00ab7e <rt_periph_copy+0x40>
1c00ab66:	ce2e                	sw	a1,28(sp)
1c00ab68:	cc32                	sw	a2,24(sp)
1c00ab6a:	ca36                	sw	a3,20(sp)
1c00ab6c:	c83a                	sw	a4,16(sp)
1c00ab6e:	c63e                	sw	a5,12(sp)
1c00ab70:	9d3ff0ef          	jal	ra,1c00a542 <__rt_wait_event_prepare_blocking>
1c00ab74:	47b2                	lw	a5,12(sp)
1c00ab76:	4742                	lw	a4,16(sp)
1c00ab78:	46d2                	lw	a3,20(sp)
1c00ab7a:	4662                	lw	a2,24(sp)
1c00ab7c:	45f2                	lw	a1,28(sp)
1c00ab7e:	e419                	bnez	s0,1c00ab8c <rt_periph_copy+0x4e>
1c00ab80:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa101ff4>
1c00ab84:	04052223          	sw	zero,68(a0)
1c00ab88:	04052a23          	sw	zero,84(a0)
1c00ab8c:	00c42803          	lw	a6,12(s0)
1c00ab90:	c054                	sw	a3,4(s0)
1c00ab92:	cc08                	sw	a0,24(s0)
1c00ab94:	f6483833          	p.bclr	a6,a6,27,4
1c00ab98:	4891                	li	a7,4
1c00ab9a:	c0474733          	p.bset	a4,a4,0,4
1c00ab9e:	0908e163          	bltu	a7,a6,1c00ac20 <rt_periph_copy+0xe2>
1c00aba2:	03000893          	li	a7,48
1c00aba6:	0596                	slli	a1,a1,0x5
1c00aba8:	98ae                	add	a7,a7,a1
1c00abaa:	0008a303          	lw	t1,0(a7)
1c00abae:	00042a23          	sw	zero,20(s0)
1c00abb2:	03000813          	li	a6,48
1c00abb6:	02031b63          	bnez	t1,1c00abec <rt_periph_copy+0xae>
1c00abba:	0088a023          	sw	s0,0(a7)
1c00abbe:	00b808b3          	add	a7,a6,a1
1c00abc2:	0088a303          	lw	t1,8(a7)
1c00abc6:	0088a223          	sw	s0,4(a7)
1c00abca:	02031663          	bnez	t1,1c00abf6 <rt_periph_copy+0xb8>
1c00abce:	00848893          	addi	a7,s1,8
1c00abd2:	0008a883          	lw	a7,0(a7)
1c00abd6:	0208f893          	andi	a7,a7,32
1c00abda:	00089e63          	bnez	a7,1c00abf6 <rt_periph_copy+0xb8>
1c00abde:	00c4a023          	sw	a2,0(s1)
1c00abe2:	00d4a223          	sw	a3,4(s1)
1c00abe6:	00e4a423          	sw	a4,8(s1)
1c00abea:	a005                	j	1c00ac0a <rt_periph_copy+0xcc>
1c00abec:	0048a883          	lw	a7,4(a7)
1c00abf0:	0088aa23          	sw	s0,20(a7)
1c00abf4:	b7e9                	j	1c00abbe <rt_periph_copy+0x80>
1c00abf6:	00042823          	sw	zero,16(s0)
1c00abfa:	c010                	sw	a2,0(s0)
1c00abfc:	c054                	sw	a3,4(s0)
1c00abfe:	c418                	sw	a4,8(s0)
1c00ac00:	00031563          	bnez	t1,1c00ac0a <rt_periph_copy+0xcc>
1c00ac04:	982e                	add	a6,a6,a1
1c00ac06:	00882423          	sw	s0,8(a6)
1c00ac0a:	e399                	bnez	a5,1c00ac10 <rt_periph_copy+0xd2>
1c00ac0c:	a89ff0ef          	jal	ra,1c00a694 <__rt_wait_event>
1c00ac10:	30091073          	csrw	mstatus,s2
1c00ac14:	50b2                	lw	ra,44(sp)
1c00ac16:	5422                	lw	s0,40(sp)
1c00ac18:	5492                	lw	s1,36(sp)
1c00ac1a:	5902                	lw	s2,32(sp)
1c00ac1c:	6145                	addi	sp,sp,48
1c00ac1e:	8082                	ret
1c00ac20:	fe6835e3          	p.bneimm	a6,6,1c00ac0a <rt_periph_copy+0xcc>
1c00ac24:	03000893          	li	a7,48
1c00ac28:	0596                	slli	a1,a1,0x5
1c00ac2a:	98ae                	add	a7,a7,a1
1c00ac2c:	0008a303          	lw	t1,0(a7)
1c00ac30:	00042a23          	sw	zero,20(s0)
1c00ac34:	03000813          	li	a6,48
1c00ac38:	00031f63          	bnez	t1,1c00ac56 <rt_periph_copy+0x118>
1c00ac3c:	0088a023          	sw	s0,0(a7)
1c00ac40:	95c2                	add	a1,a1,a6
1c00ac42:	c1c0                	sw	s0,4(a1)
1c00ac44:	00031e63          	bnez	t1,1c00ac60 <rt_periph_copy+0x122>
1c00ac48:	02442803          	lw	a6,36(s0)
1c00ac4c:	1a1025b7          	lui	a1,0x1a102
1c00ac50:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa10215c>
1c00ac54:	b769                	j	1c00abde <rt_periph_copy+0xa0>
1c00ac56:	0048a883          	lw	a7,4(a7)
1c00ac5a:	0088aa23          	sw	s0,20(a7)
1c00ac5e:	b7cd                	j	1c00ac40 <rt_periph_copy+0x102>
1c00ac60:	c418                	sw	a4,8(s0)
1c00ac62:	4598                	lw	a4,8(a1)
1c00ac64:	c010                	sw	a2,0(s0)
1c00ac66:	c054                	sw	a3,4(s0)
1c00ac68:	00042823          	sw	zero,16(s0)
1c00ac6c:	ff59                	bnez	a4,1c00ac0a <rt_periph_copy+0xcc>
1c00ac6e:	c580                	sw	s0,8(a1)
1c00ac70:	bf69                	j	1c00ac0a <rt_periph_copy+0xcc>

1c00ac72 <__rt_periph_wait_event>:
1c00ac72:	30047673          	csrrci	a2,mstatus,8
1c00ac76:	477d                	li	a4,31
1c00ac78:	4781                	li	a5,0
1c00ac7a:	00a75463          	ble	a0,a4,1c00ac82 <__rt_periph_wait_event+0x10>
1c00ac7e:	1501                	addi	a0,a0,-32
1c00ac80:	4785                	li	a5,1
1c00ac82:	00279713          	slli	a4,a5,0x2
1c00ac86:	4685                	li	a3,1
1c00ac88:	03000793          	li	a5,48
1c00ac8c:	00a696b3          	sll	a3,a3,a0
1c00ac90:	97ba                	add	a5,a5,a4
1c00ac92:	00204837          	lui	a6,0x204
1c00ac96:	2807a703          	lw	a4,640(a5)
1c00ac9a:	8f75                	and	a4,a4,a3
1c00ac9c:	cf19                	beqz	a4,1c00acba <__rt_periph_wait_event+0x48>
1c00ac9e:	c999                	beqz	a1,1c00acb4 <__rt_periph_wait_event+0x42>
1c00aca0:	2807a683          	lw	a3,640(a5)
1c00aca4:	4705                	li	a4,1
1c00aca6:	00a71533          	sll	a0,a4,a0
1c00acaa:	fff54513          	not	a0,a0
1c00acae:	8d75                	and	a0,a0,a3
1c00acb0:	28a7a023          	sw	a0,640(a5)
1c00acb4:	30061073          	csrw	mstatus,a2
1c00acb8:	8082                	ret
1c00acba:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c00acbe:	30046773          	csrrsi	a4,mstatus,8
1c00acc2:	30047773          	csrrci	a4,mstatus,8
1c00acc6:	bfc1                	j	1c00ac96 <__rt_periph_wait_event+0x24>

1c00acc8 <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c00acc8:	1c000537          	lui	a0,0x1c000
1c00accc:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00acd0:	4601                	li	a2,0
1c00acd2:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c00acd6:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c00acda:	30c50513          	addi	a0,a0,780 # 1c00030c <udma_event_handler>
1c00acde:	014950fb          	lp.setupi	x1,20,1c00ad02 <__rt_periph_init+0x3a>
1c00ace2:	40165793          	srai	a5,a2,0x1
1c00ace6:	00461813          	slli	a6,a2,0x4
1c00acea:	079e                	slli	a5,a5,0x7
1c00acec:	97c6                	add	a5,a5,a7
1c00acee:	01087813          	andi	a6,a6,16
1c00acf2:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c00acf4:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c00acf8:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c00acfc:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c00acfe:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c00ad00:	0605                	addi	a2,a2,1
1c00ad02:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c00ad06:	1c0006b7          	lui	a3,0x1c000
1c00ad0a:	28870613          	addi	a2,a4,648
1c00ad0e:	4b668693          	addi	a3,a3,1206 # 1c0004b6 <__rt_soc_evt_no_udma>
1c00ad12:	00a250fb          	lp.setupi	x1,10,1c00ad1a <__rt_periph_init+0x52>
1c00ad16:	00d6222b          	p.sw	a3,4(a2!)
1c00ad1a:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c00ad1c:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c00ad20:	28072223          	sw	zero,644(a4)
}
1c00ad24:	8082                	ret

1c00ad26 <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c00ad26:	1141                	addi	sp,sp,-16
1c00ad28:	c226                	sw	s1,4(sp)
1c00ad2a:	84ae                	mv	s1,a1
1c00ad2c:	c606                	sw	ra,12(sp)
1c00ad2e:	c422                	sw	s0,8(sp)
1c00ad30:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ad32:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00ad36:	1c00f437          	lui	s0,0x1c00f
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c00ad3a:	00153f63          	p.bneimm	a0,1,1c00ad58 <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00ad3e:	63840413          	addi	s0,s0,1592 # 1c00f638 <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c00ad42:	294d                	jal	1c00b1f4 <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c00ad44:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c00ad46:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c00ad4a:	40b2                	lw	ra,12(sp)
1c00ad4c:	4422                	lw	s0,8(sp)
1c00ad4e:	4492                	lw	s1,4(sp)
1c00ad50:	4902                	lw	s2,0(sp)
1c00ad52:	4501                	li	a0,0
1c00ad54:	0141                	addi	sp,sp,16
1c00ad56:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c00ad58:	4511                	li	a0,4
1c00ad5a:	c04ff0ef          	jal	ra,1c00a15e <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c00ad5e:	85a6                	mv	a1,s1
1c00ad60:	4501                	li	a0,0
1c00ad62:	2949                	jal	1c00b1f4 <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00ad64:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c00ad66:	62942c23          	sw	s1,1592(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c00ad6a:	bf4ff0ef          	jal	ra,1c00a15e <__rt_cbsys_exec>
1c00ad6e:	bfe1                	j	1c00ad46 <rt_freq_set_and_get+0x20>

1c00ad70 <__rt_freq_init>:

void __rt_freq_init()
{
1c00ad70:	1141                	addi	sp,sp,-16
1c00ad72:	c422                	sw	s0,8(sp)
1c00ad74:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c00ad76:	29b5                	jal	1c00b1f2 <__rt_flls_constructor>
  return __rt_platform;
1c00ad78:	1c00f7b7          	lui	a5,0x1c00f

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00ad7c:	1207a783          	lw	a5,288(a5) # 1c00f120 <__rt_platform>
1c00ad80:	1c00f437          	lui	s0,0x1c00f
1c00ad84:	0017ae63          	p.beqimm	a5,1,1c00ada0 <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c00ad88:	4501                	li	a0,0
1c00ad8a:	2991                	jal	1c00b1de <__rt_fll_init>
1c00ad8c:	62a42c23          	sw	a0,1592(s0) # 1c00f638 <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c00ad90:	63840413          	addi	s0,s0,1592
1c00ad94:	00042223          	sw	zero,4(s0)

}
1c00ad98:	40b2                	lw	ra,12(sp)
1c00ad9a:	4422                	lw	s0,8(sp)
1c00ad9c:	0141                	addi	sp,sp,16
1c00ad9e:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c00ada0:	026267b7          	lui	a5,0x2626
1c00ada4:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c00ada8:	62f42c23          	sw	a5,1592(s0)
1c00adac:	b7d5                	j	1c00ad90 <__rt_freq_init+0x20>

1c00adae <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c00adae:	100517b3          	p.fl1	a5,a0
1c00adb2:	4769                	li	a4,26
1c00adb4:	8f1d                	sub	a4,a4,a5
1c00adb6:	4785                	li	a5,1
1c00adb8:	04f76733          	p.max	a4,a4,a5
1c00adbc:	47a1                	li	a5,8
1c00adbe:	04f74733          	p.min	a4,a4,a5
1c00adc2:	fff70693          	addi	a3,a4,-1
1c00adc6:	00f55793          	srli	a5,a0,0xf
1c00adca:	00d797b3          	sll	a5,a5,a3
1c00adce:	c19c                	sw	a5,0(a1)
1c00add0:	07be                	slli	a5,a5,0xf
1c00add2:	c218                	sw	a4,0(a2)
1c00add4:	00d7d533          	srl	a0,a5,a3
1c00add8:	8082                	ret

1c00adda <soc_eu_fcEventMask_setEvent>:
1c00adda:	47fd                	li	a5,31
1c00addc:	4721                	li	a4,8
1c00adde:	00f50463          	beq	a0,a5,1c00ade6 <soc_eu_fcEventMask_setEvent+0xc>
1c00ade2:	1501                	addi	a0,a0,-32
1c00ade4:	4711                	li	a4,4
1c00ade6:	1a1066b7          	lui	a3,0x1a106
1c00adea:	20e6f603          	p.lw	a2,a4(a3)
1c00adee:	4785                	li	a5,1
1c00adf0:	00a79533          	sll	a0,a5,a0
1c00adf4:	fff54513          	not	a0,a0
1c00adf8:	8d71                	and	a0,a0,a2
1c00adfa:	00a6e723          	p.sw	a0,a4(a3)
1c00adfe:	8082                	ret

1c00ae00 <__rt_pmu_cluster_power_down>:
1c00ae00:	1c00f7b7          	lui	a5,0x1c00f
1c00ae04:	1207a783          	lw	a5,288(a5) # 1c00f120 <__rt_platform>
1c00ae08:	0817a363          	p.beqimm	a5,1,1c00ae8e <__rt_pmu_cluster_power_down+0x8e>
1c00ae0c:	1141                	addi	sp,sp,-16
1c00ae0e:	1a1046b7          	lui	a3,0x1a104
1c00ae12:	c606                	sw	ra,12(sp)
1c00ae14:	c422                	sw	s0,8(sp)
1c00ae16:	c226                	sw	s1,4(sp)
1c00ae18:	c04a                	sw	s2,0(sp)
1c00ae1a:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa10402c>
1c00ae1e:	1c00f737          	lui	a4,0x1c00f
1c00ae22:	13870713          	addi	a4,a4,312 # 1c00f138 <SystemStateToSCUFastSeq>
1c00ae26:	00874783          	lbu	a5,8(a4)
1c00ae2a:	8436                	mv	s0,a3
1c00ae2c:	c0079933          	p.extractu	s2,a5,0,0
1c00ae30:	04193963          	p.bneimm	s2,1,1c00ae82 <__rt_pmu_cluster_power_down+0x82>
1c00ae34:	01069613          	slli	a2,a3,0x10
1c00ae38:	04064563          	bltz	a2,1c00ae82 <__rt_pmu_cluster_power_down+0x82>
1c00ae3c:	c007b7b3          	p.bclr	a5,a5,0,0
1c00ae40:	c0a92433          	p.insert	s0,s2,0,10
1c00ae44:	1a1044b7          	lui	s1,0x1a104
1c00ae48:	00f70423          	sb	a5,8(a4)
1c00ae4c:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa10402c>
1c00ae50:	4585                	li	a1,1
1c00ae52:	02300513          	li	a0,35
1c00ae56:	e1dff0ef          	jal	ra,1c00ac72 <__rt_periph_wait_event>
1c00ae5a:	4785                	li	a5,1
1c00ae5c:	00f4a623          	sw	a5,12(s1)
1c00ae60:	c0302433          	p.insert	s0,zero,0,3
1c00ae64:	0684a823          	sw	s0,112(s1)
1c00ae68:	c0d92433          	p.insert	s0,s2,0,13
1c00ae6c:	0684a823          	sw	s0,112(s1)
1c00ae70:	4422                	lw	s0,8(sp)
1c00ae72:	40b2                	lw	ra,12(sp)
1c00ae74:	4492                	lw	s1,4(sp)
1c00ae76:	4902                	lw	s2,0(sp)
1c00ae78:	4585                	li	a1,1
1c00ae7a:	457d                	li	a0,31
1c00ae7c:	0141                	addi	sp,sp,16
1c00ae7e:	df5ff06f          	j	1c00ac72 <__rt_periph_wait_event>
1c00ae82:	40b2                	lw	ra,12(sp)
1c00ae84:	4422                	lw	s0,8(sp)
1c00ae86:	4492                	lw	s1,4(sp)
1c00ae88:	4902                	lw	s2,0(sp)
1c00ae8a:	0141                	addi	sp,sp,16
1c00ae8c:	8082                	ret
1c00ae8e:	8082                	ret

1c00ae90 <SetFllFrequency>:
1c00ae90:	7179                	addi	sp,sp,-48
1c00ae92:	d422                	sw	s0,40(sp)
1c00ae94:	d226                	sw	s1,36(sp)
1c00ae96:	1c00f437          	lui	s0,0x1c00f
1c00ae9a:	84aa                	mv	s1,a0
1c00ae9c:	d606                	sw	ra,44(sp)
1c00ae9e:	852e                	mv	a0,a1
1c00aea0:	13840413          	addi	s0,s0,312 # 1c00f138 <SystemStateToSCUFastSeq>
1c00aea4:	0014be63          	p.bneimm	s1,1,1c00aec0 <SetFllFrequency+0x30>
1c00aea8:	00844783          	lbu	a5,8(s0)
1c00aeac:	c0079733          	p.extractu	a4,a5,0,0
1c00aeb0:	08172763          	p.beqimm	a4,1,1c00af3e <SetFllFrequency+0xae>
1c00aeb4:	4501                	li	a0,0
1c00aeb6:	50b2                	lw	ra,44(sp)
1c00aeb8:	5422                	lw	s0,40(sp)
1c00aeba:	5492                	lw	s1,36(sp)
1c00aebc:	6145                	addi	sp,sp,48
1c00aebe:	8082                	ret
1c00aec0:	ce2d                	beqz	a2,1c00af3a <SetFllFrequency+0xaa>
1c00aec2:	00844783          	lbu	a5,8(s0)
1c00aec6:	03200713          	li	a4,50
1c00aeca:	c21797b3          	p.extractu	a5,a5,1,1
1c00aece:	97a2                	add	a5,a5,s0
1c00aed0:	00a7c783          	lbu	a5,10(a5)
1c00aed4:	00e787db          	p.mac	a5,a5,a4,zero
1c00aed8:	22678793          	addi	a5,a5,550
1c00aedc:	ecad                	bnez	s1,1c00af56 <SetFllFrequency+0xc6>
1c00aede:	0007a6b7          	lui	a3,0x7a
1c00aee2:	eb237737          	lui	a4,0xeb237
1c00aee6:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c00aeea:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c00aeee:	42d78733          	p.mac	a4,a5,a3
1c00aef2:	fcb761e3          	bltu	a4,a1,1c00aeb4 <SetFllFrequency+0x24>
1c00aef6:	c62a                	sw	a0,12(sp)
1c00aef8:	d76ff0ef          	jal	ra,1c00a46e <__rt_bridge_req_shutdown>
1c00aefc:	4532                	lw	a0,12(sp)
1c00aefe:	0870                	addi	a2,sp,28
1c00af00:	082c                	addi	a1,sp,24
1c00af02:	eadff0ef          	jal	ra,1c00adae <SetFllMultDivFactors>
1c00af06:	4762                	lw	a4,24(sp)
1c00af08:	800007b7          	lui	a5,0x80000
1c00af0c:	1a1006b7          	lui	a3,0x1a100
1c00af10:	de0727b3          	p.insert	a5,a4,15,0
1c00af14:	4772                	lw	a4,28(sp)
1c00af16:	c7a727b3          	p.insert	a5,a4,3,26
1c00af1a:	00449713          	slli	a4,s1,0x4
1c00af1e:	0711                	addi	a4,a4,4
1c00af20:	00f6e723          	p.sw	a5,a4(a3)
1c00af24:	00249793          	slli	a5,s1,0x2
1c00af28:	943e                	add	s0,s0,a5
1c00af2a:	d008                	sw	a0,32(s0)
1c00af2c:	c808                	sw	a0,16(s0)
1c00af2e:	f4c1                	bnez	s1,1c00aeb6 <SetFllFrequency+0x26>
1c00af30:	c62a                	sw	a0,12(sp)
1c00af32:	c98ff0ef          	jal	ra,1c00a3ca <__rt_bridge_set_available>
1c00af36:	4532                	lw	a0,12(sp)
1c00af38:	bfbd                	j	1c00aeb6 <SetFllFrequency+0x26>
1c00af3a:	f0f1                	bnez	s1,1c00aefe <SetFllFrequency+0x6e>
1c00af3c:	bf6d                	j	1c00aef6 <SetFllFrequency+0x66>
1c00af3e:	d261                	beqz	a2,1c00aefe <SetFllFrequency+0x6e>
1c00af40:	c21797b3          	p.extractu	a5,a5,1,1
1c00af44:	97a2                	add	a5,a5,s0
1c00af46:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c00af4a:	03200713          	li	a4,50
1c00af4e:	00e787db          	p.mac	a5,a5,a4,zero
1c00af52:	22678793          	addi	a5,a5,550
1c00af56:	0006b6b7          	lui	a3,0x6b
1c00af5a:	eaf5a737          	lui	a4,0xeaf5a
1c00af5e:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c00af62:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c00af66:	42d78733          	p.mac	a4,a5,a3
1c00af6a:	f8a77ae3          	bleu	a0,a4,1c00aefe <SetFllFrequency+0x6e>
1c00af6e:	b799                	j	1c00aeb4 <SetFllFrequency+0x24>

1c00af70 <InitOneFll>:
1c00af70:	7179                	addi	sp,sp,-48
1c00af72:	00451713          	slli	a4,a0,0x4
1c00af76:	ce4e                	sw	s3,28(sp)
1c00af78:	1a1007b7          	lui	a5,0x1a100
1c00af7c:	00470993          	addi	s3,a4,4
1c00af80:	d606                	sw	ra,44(sp)
1c00af82:	d422                	sw	s0,40(sp)
1c00af84:	d226                	sw	s1,36(sp)
1c00af86:	d04a                	sw	s2,32(sp)
1c00af88:	2137f783          	p.lw	a5,s3(a5)
1c00af8c:	1c00f437          	lui	s0,0x1c00f
1c00af90:	13840413          	addi	s0,s0,312 # 1c00f138 <SystemStateToSCUFastSeq>
1c00af94:	00251913          	slli	s2,a0,0x2
1c00af98:	c585                	beqz	a1,1c00afc0 <InitOneFll+0x50>
1c00af9a:	c7a79733          	p.extractu	a4,a5,3,26
1c00af9e:	1007d7b3          	p.exthz	a5,a5
1c00afa2:	07be                	slli	a5,a5,0xf
1c00afa4:	c701                	beqz	a4,1c00afac <InitOneFll+0x3c>
1c00afa6:	177d                	addi	a4,a4,-1
1c00afa8:	00e7d7b3          	srl	a5,a5,a4
1c00afac:	944a                	add	s0,s0,s2
1c00afae:	d01c                	sw	a5,32(s0)
1c00afb0:	c81c                	sw	a5,16(s0)
1c00afb2:	50b2                	lw	ra,44(sp)
1c00afb4:	5422                	lw	s0,40(sp)
1c00afb6:	5492                	lw	s1,36(sp)
1c00afb8:	5902                	lw	s2,32(sp)
1c00afba:	49f2                	lw	s3,28(sp)
1c00afbc:	6145                	addi	sp,sp,48
1c00afbe:	8082                	ret
1c00afc0:	0007d363          	bgez	a5,1c00afc6 <InitOneFll+0x56>
1c00afc4:	c105                	beqz	a0,1c00afe4 <InitOneFll+0x74>
1c00afc6:	810047b7          	lui	a5,0x81004
1c00afca:	1a1006b7          	lui	a3,0x1a100
1c00afce:	00870613          	addi	a2,a4,8
1c00afd2:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c00afd6:	00f6e623          	p.sw	a5,a2(a3)
1c00afda:	014c04b7          	lui	s1,0x14c0
1c00afde:	0731                	addi	a4,a4,12
1c00afe0:	0096e723          	p.sw	s1,a4(a3)
1c00afe4:	02faf537          	lui	a0,0x2faf
1c00afe8:	0070                	addi	a2,sp,12
1c00afea:	002c                	addi	a1,sp,8
1c00afec:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c00aff0:	dbfff0ef          	jal	ra,1c00adae <SetFllMultDivFactors>
1c00aff4:	47a2                	lw	a5,8(sp)
1c00aff6:	c00004b7          	lui	s1,0xc0000
1c00affa:	de07a4b3          	p.insert	s1,a5,15,0
1c00affe:	47b2                	lw	a5,12(sp)
1c00b000:	c7a7a4b3          	p.insert	s1,a5,3,26
1c00b004:	1a1007b7          	lui	a5,0x1a100
1c00b008:	0097e9a3          	p.sw	s1,s3(a5)
1c00b00c:	944a                	add	s0,s0,s2
1c00b00e:	d008                	sw	a0,32(s0)
1c00b010:	c808                	sw	a0,16(s0)
1c00b012:	b745                	j	1c00afb2 <InitOneFll+0x42>

1c00b014 <__rt_pmu_cluster_power_up>:
1c00b014:	1141                	addi	sp,sp,-16
1c00b016:	c226                	sw	s1,4(sp)
1c00b018:	1c00f4b7          	lui	s1,0x1c00f
1c00b01c:	c606                	sw	ra,12(sp)
1c00b01e:	c422                	sw	s0,8(sp)
1c00b020:	c04a                	sw	s2,0(sp)
1c00b022:	13848793          	addi	a5,s1,312 # 1c00f138 <SystemStateToSCUFastSeq>
1c00b026:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fffc4>
1c00b02a:	4501                	li	a0,0
1c00b02c:	c00797b3          	p.extractu	a5,a5,0,0
1c00b030:	e785                	bnez	a5,1c00b058 <__rt_pmu_cluster_power_up+0x44>
1c00b032:	1c00f7b7          	lui	a5,0x1c00f
1c00b036:	1207a783          	lw	a5,288(a5) # 1c00f120 <__rt_platform>
1c00b03a:	13848493          	addi	s1,s1,312
1c00b03e:	0217b363          	p.bneimm	a5,1,1c00b064 <__rt_pmu_cluster_power_up+0x50>
1c00b042:	1a1047b7          	lui	a5,0x1a104
1c00b046:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103fc8>
1c00b04a:	0084c783          	lbu	a5,8(s1)
1c00b04e:	4505                	li	a0,1
1c00b050:	c007c7b3          	p.bset	a5,a5,0,0
1c00b054:	00f48423          	sb	a5,8(s1)
1c00b058:	40b2                	lw	ra,12(sp)
1c00b05a:	4422                	lw	s0,8(sp)
1c00b05c:	4492                	lw	s1,4(sp)
1c00b05e:	4902                	lw	s2,0(sp)
1c00b060:	0141                	addi	sp,sp,16
1c00b062:	8082                	ret
1c00b064:	1a104437          	lui	s0,0x1a104
1c00b068:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa10402c>
1c00b06c:	c0a417b3          	p.extractu	a5,s0,0,10
1c00b070:	ef89                	bnez	a5,1c00b08a <__rt_pmu_cluster_power_up+0x76>
1c00b072:	4785                	li	a5,1
1c00b074:	c0a7a433          	p.insert	s0,a5,0,10
1c00b078:	1a1047b7          	lui	a5,0x1a104
1c00b07c:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10402c>
1c00b080:	4585                	li	a1,1
1c00b082:	02300513          	li	a0,35
1c00b086:	bedff0ef          	jal	ra,1c00ac72 <__rt_periph_wait_event>
1c00b08a:	4785                	li	a5,1
1c00b08c:	c037a433          	p.insert	s0,a5,0,3
1c00b090:	1a104937          	lui	s2,0x1a104
1c00b094:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa10402c>
1c00b098:	4585                	li	a1,1
1c00b09a:	457d                	li	a0,31
1c00b09c:	bd7ff0ef          	jal	ra,1c00ac72 <__rt_periph_wait_event>
1c00b0a0:	00092623          	sw	zero,12(s2)
1c00b0a4:	c0d02433          	p.insert	s0,zero,0,13
1c00b0a8:	06892823          	sw	s0,112(s2)
1c00b0ac:	c0a02433          	p.insert	s0,zero,0,10
1c00b0b0:	06892823          	sw	s0,112(s2)
1c00b0b4:	4585                	li	a1,1
1c00b0b6:	02300513          	li	a0,35
1c00b0ba:	bb9ff0ef          	jal	ra,1c00ac72 <__rt_periph_wait_event>
1c00b0be:	01c4c783          	lbu	a5,28(s1)
1c00b0c2:	0207f793          	andi	a5,a5,32
1c00b0c6:	e789                	bnez	a5,1c00b0d0 <__rt_pmu_cluster_power_up+0xbc>
1c00b0c8:	4581                	li	a1,0
1c00b0ca:	4505                	li	a0,1
1c00b0cc:	ea5ff0ef          	jal	ra,1c00af70 <InitOneFll>
1c00b0d0:	c0e44433          	p.bset	s0,s0,0,14
1c00b0d4:	1a1047b7          	lui	a5,0x1a104
1c00b0d8:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10402c>
1c00b0dc:	b7bd                	j	1c00b04a <__rt_pmu_cluster_power_up+0x36>

1c00b0de <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c00b0de:	1141                	addi	sp,sp,-16
1c00b0e0:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00b0e2:	1c00f437          	lui	s0,0x1c00f
{
1c00b0e6:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00b0e8:	13840413          	addi	s0,s0,312 # 1c00f138 <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c00b0ec:	b82ff0ef          	jal	ra,1c00a46e <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00b0f0:	01c44583          	lbu	a1,28(s0)
1c00b0f4:	4501                	li	a0,0
1c00b0f6:	c04595b3          	p.extractu	a1,a1,0,4
1c00b0fa:	e77ff0ef          	jal	ra,1c00af70 <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c00b0fe:	00844783          	lbu	a5,8(s0)
1c00b102:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c00b106:	0017b963          	p.bneimm	a5,1,1c00b118 <InitFlls+0x3a>
1c00b10a:	01c44583          	lbu	a1,28(s0)
1c00b10e:	4505                	li	a0,1
1c00b110:	c05595b3          	p.extractu	a1,a1,0,5
1c00b114:	e5dff0ef          	jal	ra,1c00af70 <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c00b118:	4422                	lw	s0,8(sp)
1c00b11a:	40b2                	lw	ra,12(sp)
1c00b11c:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c00b11e:	aacff06f          	j	1c00a3ca <__rt_bridge_set_available>

1c00b122 <__rt_pmu_init>:
1c00b122:	1c00f7b7          	lui	a5,0x1c00f
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c00b126:	1207a783          	lw	a5,288(a5) # 1c00f120 <__rt_platform>
1c00b12a:	0a17a963          	p.beqimm	a5,1,1c00b1dc <__rt_pmu_init+0xba>
{
1c00b12e:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c00b130:	1c00f7b7          	lui	a5,0x1c00f
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c00b134:	1a104637          	lui	a2,0x1a104
{
1c00b138:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c00b13a:	6407a023          	sw	zero,1600(a5) # 1c00f640 <__rt_wakeup_use_fast>
1c00b13e:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa1040bc>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c00b142:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c00b146:	1c00f7b7          	lui	a5,0x1c00f
1c00b14a:	13878793          	addi	a5,a5,312 # 1c00f138 <SystemStateToSCUFastSeq>
1c00b14e:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00b150:	c2e696b3          	p.extractu	a3,a3,1,14
1c00b154:	96be                	add	a3,a3,a5
1c00b156:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa0fffe4>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c00b15a:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c00b15e:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c00b162:	c80716b3          	p.extractu	a3,a4,4,0
1c00b166:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00b16a:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00b16e:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c00b172:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c00b176:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c00b17a:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c00b17e:	4705                	li	a4,1
1c00b180:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c00b184:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00b188:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c00b18c:	f53ff0ef          	jal	ra,1c00b0de <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c00b190:	457d                	li	a0,31
1c00b192:	c49ff0ef          	jal	ra,1c00adda <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c00b196:	02000513          	li	a0,32
1c00b19a:	c41ff0ef          	jal	ra,1c00adda <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c00b19e:	02100513          	li	a0,33
1c00b1a2:	c39ff0ef          	jal	ra,1c00adda <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c00b1a6:	02200513          	li	a0,34
1c00b1aa:	c31ff0ef          	jal	ra,1c00adda <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c00b1ae:	02300513          	li	a0,35
1c00b1b2:	c29ff0ef          	jal	ra,1c00adda <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c00b1b6:	02400513          	li	a0,36
1c00b1ba:	c21ff0ef          	jal	ra,1c00adda <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c00b1be:	02500513          	li	a0,37
1c00b1c2:	c19ff0ef          	jal	ra,1c00adda <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c00b1c6:	1a1077b7          	lui	a5,0x1a107
1c00b1ca:	471d                	li	a4,7
1c00b1cc:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106fc8>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c00b1d0:	4761                	li	a4,24
1c00b1d2:	00e7a823          	sw	a4,16(a5)
}
1c00b1d6:	40b2                	lw	ra,12(sp)
1c00b1d8:	0141                	addi	sp,sp,16
1c00b1da:	8082                	ret
1c00b1dc:	8082                	ret

1c00b1de <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c00b1de:	00251793          	slli	a5,a0,0x2
1c00b1e2:	1c00f537          	lui	a0,0x1c00f
1c00b1e6:	13850513          	addi	a0,a0,312 # 1c00f138 <SystemStateToSCUFastSeq>
1c00b1ea:	953e                	add	a0,a0,a5
}
1c00b1ec:	5108                	lw	a0,32(a0)
1c00b1ee:	8082                	ret

1c00b1f0 <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c00b1f0:	8082                	ret

1c00b1f2 <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c00b1f2:	8082                	ret

1c00b1f4 <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c00b1f4:	4601                	li	a2,0
1c00b1f6:	c9bff06f          	j	1c00ae90 <SetFllFrequency>

1c00b1fa <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c00b1fa:	04050713          	addi	a4,a0,64
1c00b1fe:	00400793          	li	a5,4
1c00b202:	01671613          	slli	a2,a4,0x16
1c00b206:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c00b20a:	1c00f6b7          	lui	a3,0x1c00f
1c00b20e:	97b2                	add	a5,a5,a2
1c00b210:	67068693          	addi	a3,a3,1648 # 1c00f670 <_bss_end>
1c00b214:	04000713          	li	a4,64
1c00b218:	8f95                	sub	a5,a5,a3
1c00b21a:	00f685b3          	add	a1,a3,a5
1c00b21e:	02e04963          	bgtz	a4,1c00b250 <__rt_init_cluster_data+0x56>
1c00b222:	1c00f7b7          	lui	a5,0x1c00f
1c00b226:	02800713          	li	a4,40
1c00b22a:	64878793          	addi	a5,a5,1608 # 1c00f648 <__rt_fc_cluster_data>
1c00b22e:	42e507b3          	p.mac	a5,a0,a4
1c00b232:	00201737          	lui	a4,0x201
1c00b236:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00b23a:	9732                	add	a4,a4,a2
1c00b23c:	cb98                	sw	a4,16(a5)
1c00b23e:	00400713          	li	a4,4
1c00b242:	e6c73733          	p.bclr	a4,a4,19,12
1c00b246:	9732                	add	a4,a4,a2
1c00b248:	0007a423          	sw	zero,8(a5)
1c00b24c:	cbd8                	sw	a4,20(a5)
1c00b24e:	8082                	ret
1c00b250:	0046a80b          	p.lw	a6,4(a3!)
1c00b254:	1771                	addi	a4,a4,-4
1c00b256:	0105a023          	sw	a6,0(a1)
1c00b25a:	b7c1                	j	1c00b21a <__rt_init_cluster_data+0x20>

1c00b25c <__rt_cluster_init>:
1c00b25c:	1c00f537          	lui	a0,0x1c00f
1c00b260:	1141                	addi	sp,sp,-16
1c00b262:	02800613          	li	a2,40
1c00b266:	4581                	li	a1,0
1c00b268:	64850513          	addi	a0,a0,1608 # 1c00f648 <__rt_fc_cluster_data>
1c00b26c:	c606                	sw	ra,12(sp)
1c00b26e:	08c020ef          	jal	ra,1c00d2fa <memset>
1c00b272:	1c00e5b7          	lui	a1,0x1c00e
1c00b276:	67c58593          	addi	a1,a1,1660 # 1c00e67c <__rt_dma_2d>
1c00b27a:	4525                	li	a0,9
1c00b27c:	d39fe0ef          	jal	ra,1c009fb4 <rt_irq_set_handler>
1c00b280:	1c0005b7          	lui	a1,0x1c000
1c00b284:	1cc58593          	addi	a1,a1,460 # 1c0001cc <__rt_remote_enqueue_event>
1c00b288:	4505                	li	a0,1
1c00b28a:	d2bfe0ef          	jal	ra,1c009fb4 <rt_irq_set_handler>
1c00b28e:	4789                	li	a5,2
1c00b290:	00204737          	lui	a4,0x204
1c00b294:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00b298:	00f72423          	sw	a5,8(a4)
1c00b29c:	1c0005b7          	lui	a1,0x1c000
1c00b2a0:	19458593          	addi	a1,a1,404 # 1c000194 <__rt_bridge_enqueue_event>
1c00b2a4:	4511                	li	a0,4
1c00b2a6:	d0ffe0ef          	jal	ra,1c009fb4 <rt_irq_set_handler>
1c00b2aa:	47c1                	li	a5,16
1c00b2ac:	00204737          	lui	a4,0x204
1c00b2b0:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00b2b4:	00f72423          	sw	a5,8(a4)
1c00b2b8:	40b2                	lw	ra,12(sp)
1c00b2ba:	4501                	li	a0,0
1c00b2bc:	0141                	addi	sp,sp,16
1c00b2be:	8082                	ret

1c00b2c0 <__rt_cluster_mount_step>:
{
1c00b2c0:	7179                	addi	sp,sp,-48
1c00b2c2:	ce4e                	sw	s3,28(sp)
1c00b2c4:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00b2c6:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c00b2ca:	00400993          	li	s3,4
1c00b2ce:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c00b2d2:	d422                	sw	s0,40(sp)
1c00b2d4:	d606                	sw	ra,44(sp)
1c00b2d6:	d226                	sw	s1,36(sp)
1c00b2d8:	d04a                	sw	s2,32(sp)
1c00b2da:	ca56                	sw	s5,20(sp)
1c00b2dc:	842a                	mv	s0,a0
1c00b2de:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00b2e2:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c00b2e6:	4c5c                	lw	a5,28(s0)
1c00b2e8:	0217ad63          	p.beqimm	a5,1,1c00b322 <__rt_cluster_mount_step+0x62>
1c00b2ec:	0c27a663          	p.beqimm	a5,2,1c00b3b8 <__rt_cluster_mount_step+0xf8>
1c00b2f0:	e3e1                	bnez	a5,1c00b3b0 <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c00b2f2:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c00b2f4:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c00b2f8:	eb01                	bnez	a4,1c00b308 <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00b2fa:	5048                	lw	a0,36(s0)
1c00b2fc:	006c                	addi	a1,sp,12
    int pending = 0;
1c00b2fe:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00b300:	d15ff0ef          	jal	ra,1c00b014 <__rt_pmu_cluster_power_up>
    return pending;
1c00b304:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00b306:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c00b308:	4c58                	lw	a4,28(s0)
1c00b30a:	0705                	addi	a4,a4,1
1c00b30c:	cc58                	sw	a4,28(s0)
  while(!end)
1c00b30e:	dfe1                	beqz	a5,1c00b2e6 <__rt_cluster_mount_step+0x26>
}
1c00b310:	50b2                	lw	ra,44(sp)
1c00b312:	5422                	lw	s0,40(sp)
1c00b314:	5492                	lw	s1,36(sp)
1c00b316:	5902                	lw	s2,32(sp)
1c00b318:	49f2                	lw	s3,28(sp)
1c00b31a:	4a62                	lw	s4,24(sp)
1c00b31c:	4ad2                	lw	s5,20(sp)
1c00b31e:	6145                	addi	sp,sp,48
1c00b320:	8082                	ret
1c00b322:	02042a83          	lw	s5,32(s0)
1c00b326:	040a8493          	addi	s1,s5,64
1c00b32a:	04da                	slli	s1,s1,0x16
1c00b32c:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c00b330:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c00b334:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c00b338:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c00b33c:	100007b7          	lui	a5,0x10000
1c00b340:	0407a023          	sw	zero,64(a5) # 10000040 <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c00b344:	1c00f7b7          	lui	a5,0x1c00f
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00b348:	1207a783          	lw	a5,288(a5) # 1c00f120 <__rt_platform>
1c00b34c:	0017af63          	p.beqimm	a5,1,1c00b36a <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c00b350:	4505                	li	a0,1
1c00b352:	e8dff0ef          	jal	ra,1c00b1de <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c00b356:	1c00f7b7          	lui	a5,0x1c00f
1c00b35a:	63878793          	addi	a5,a5,1592 # 1c00f638 <__rt_freq_domains>
1c00b35e:	43cc                	lw	a1,4(a5)
      if (freq)
1c00b360:	c9b1                	beqz	a1,1c00b3b4 <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c00b362:	4601                	li	a2,0
1c00b364:	4505                	li	a0,1
1c00b366:	9c1ff0ef          	jal	ra,1c00ad26 <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c00b36a:	00200937          	lui	s2,0x200
1c00b36e:	01248733          	add	a4,s1,s2
1c00b372:	4785                	li	a5,1
1c00b374:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c00b378:	8556                	mv	a0,s5
1c00b37a:	e81ff0ef          	jal	ra,1c00b1fa <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c00b37e:	8556                	mv	a0,s5
1c00b380:	c8aff0ef          	jal	ra,1c00a80a <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c00b384:	002017b7          	lui	a5,0x201
1c00b388:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00b38c:	577d                	li	a4,-1
1c00b38e:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c00b392:	00e4e7a3          	p.sw	a4,a5(s1)
1c00b396:	9926                	add	s2,s2,s1
1c00b398:	008250fb          	lp.setupi	x1,8,1c00b3a0 <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00b39c:	0149222b          	p.sw	s4,4(s2!)
1c00b3a0:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00b3a2:	002007b7          	lui	a5,0x200
1c00b3a6:	07a1                	addi	a5,a5,8
1c00b3a8:	0ff00713          	li	a4,255
1c00b3ac:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c00b3b0:	4781                	li	a5,0
1c00b3b2:	bf99                	j	1c00b308 <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c00b3b4:	c3c8                	sw	a0,4(a5)
1c00b3b6:	bf55                	j	1c00b36a <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c00b3b8:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c00b3ba:	5bd8                	lw	a4,52(a5)
1c00b3bc:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c00b3be:	57d8                	lw	a4,44(a5)
1c00b3c0:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c00b3c2:	5b98                	lw	a4,48(a5)
1c00b3c4:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c00b3c6:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c00b3ca:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c00b3cc:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00b3d0:	01c00693          	li	a3,28
  event->next = NULL;
1c00b3d4:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c00b3d8:	c611                	beqz	a2,1c00b3e4 <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c00b3da:	42d8                	lw	a4,4(a3)
1c00b3dc:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c00b3de:	c2dc                	sw	a5,4(a3)
        end = 1;
1c00b3e0:	4785                	li	a5,1
1c00b3e2:	b71d                	j	1c00b308 <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c00b3e4:	00f02e23          	sw	a5,28(zero) # 1c <__rt_sched>
1c00b3e8:	bfdd                	j	1c00b3de <__rt_cluster_mount_step+0x11e>

1c00b3ea <pi_cluster_conf_init>:
  conf->id = 0;
1c00b3ea:	00052223          	sw	zero,4(a0)
}
1c00b3ee:	8082                	ret

1c00b3f0 <pi_cluster_open>:
{
1c00b3f0:	1101                	addi	sp,sp,-32
1c00b3f2:	ce06                	sw	ra,28(sp)
1c00b3f4:	cc22                	sw	s0,24(sp)
1c00b3f6:	ca26                	sw	s1,20(sp)
1c00b3f8:	c84a                	sw	s2,16(sp)
1c00b3fa:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b3fc:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c00b400:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00b404:	1c00f4b7          	lui	s1,0x1c00f
1c00b408:	02800793          	li	a5,40
  int cid = conf->id;
1c00b40c:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c00b410:	64848493          	addi	s1,s1,1608 # 1c00f648 <__rt_fc_cluster_data>
1c00b414:	42f704b3          	p.mac	s1,a4,a5
1c00b418:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00b41a:	928ff0ef          	jal	ra,1c00a542 <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00b41e:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b422:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00b426:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c00b42a:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c00b42c:	04e79563          	bne	a5,a4,1c00b476 <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c00b430:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c00b432:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c00b436:	d0c8                	sw	a0,36(s1)
1c00b438:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00b43a:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c00b43c:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c00b440:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00b442:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c00b444:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c00b446:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c00b448:	1c00b7b7          	lui	a5,0x1c00b
1c00b44c:	2c078793          	addi	a5,a5,704 # 1c00b2c0 <__rt_cluster_mount_step>
1c00b450:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c00b452:	4785                	li	a5,1
1c00b454:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c00b456:	8526                	mv	a0,s1
1c00b458:	e69ff0ef          	jal	ra,1c00b2c0 <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c00b45c:	8522                	mv	a0,s0
1c00b45e:	a36ff0ef          	jal	ra,1c00a694 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c00b462:	30091073          	csrw	mstatus,s2
}
1c00b466:	40f2                	lw	ra,28(sp)
1c00b468:	4462                	lw	s0,24(sp)
1c00b46a:	44d2                	lw	s1,20(sp)
1c00b46c:	4942                	lw	s2,16(sp)
1c00b46e:	49b2                	lw	s3,12(sp)
1c00b470:	4501                	li	a0,0
1c00b472:	6105                	addi	sp,sp,32
1c00b474:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c00b476:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c00b47a:	8526                	mv	a0,s1
1c00b47c:	d7fff0ef          	jal	ra,1c00b1fa <__rt_init_cluster_data>
1c00b480:	04048513          	addi	a0,s1,64
1c00b484:	002017b7          	lui	a5,0x201
1c00b488:	055a                	slli	a0,a0,0x16
1c00b48a:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00b48e:	577d                	li	a4,-1
1c00b490:	00e567a3          	p.sw	a4,a5(a0)
1c00b494:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00b498:	1c000737          	lui	a4,0x1c000
1c00b49c:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c00b4a0:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c00b4a4:	97aa                	add	a5,a5,a0
1c00b4a6:	ce073733          	p.bclr	a4,a4,7,0
1c00b4aa:	007250fb          	lp.setupi	x1,7,1c00b4b2 <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00b4ae:	00e7a22b          	p.sw	a4,4(a5!)
1c00b4b2:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c00b4b4:	002007b7          	lui	a5,0x200
1c00b4b8:	07a1                	addi	a5,a5,8
1c00b4ba:	577d                	li	a4,-1
1c00b4bc:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c00b4c0:	8522                	mv	a0,s0
1c00b4c2:	94aff0ef          	jal	ra,1c00a60c <rt_event_push>
1c00b4c6:	bf59                	j	1c00b45c <pi_cluster_open+0x6c>

1c00b4c8 <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00b4c8:	451c                	lw	a5,8(a0)
{
1c00b4ca:	1101                	addi	sp,sp,-32
1c00b4cc:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00b4ce:	5380                	lw	s0,32(a5)
1c00b4d0:	1c00f7b7          	lui	a5,0x1c00f
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00b4d4:	1207a783          	lw	a5,288(a5) # 1c00f120 <__rt_platform>
{
1c00b4d8:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00b4da:	0017a563          	p.beqimm	a5,1,1c00b4e4 <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c00b4de:	4505                	li	a0,1
1c00b4e0:	d11ff0ef          	jal	ra,1c00b1f0 <__rt_fll_deinit>
    int pending = 0;
1c00b4e4:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c00b4e6:	e409                	bnez	s0,1c00b4f0 <pi_cluster_close+0x28>
1c00b4e8:	006c                	addi	a1,sp,12
1c00b4ea:	4501                	li	a0,0
1c00b4ec:	915ff0ef          	jal	ra,1c00ae00 <__rt_pmu_cluster_power_down>
}
1c00b4f0:	40f2                	lw	ra,28(sp)
1c00b4f2:	4462                	lw	s0,24(sp)
1c00b4f4:	4501                	li	a0,0
1c00b4f6:	6105                	addi	sp,sp,32
1c00b4f8:	8082                	ret

1c00b4fa <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c00b4fa:	100006b7          	lui	a3,0x10000
1c00b4fe:	04068693          	addi	a3,a3,64 # 10000040 <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c00b502:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b506:	4709                	li	a4,2
1c00b508:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c00b50c:	4190                	lw	a2,0(a1)
1c00b50e:	05f62063          	p.beqimm	a2,-1,1c00b54e <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b512:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c00b516:	1c00f7b7          	lui	a5,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00b51a:	8715                	srai	a4,a4,0x5
1c00b51c:	f2673733          	p.bclr	a4,a4,25,6
1c00b520:	02800613          	li	a2,40
1c00b524:	64878793          	addi	a5,a5,1608 # 1c00f648 <__rt_fc_cluster_data>
1c00b528:	42c707b3          	p.mac	a5,a4,a2
1c00b52c:	4609                	li	a2,2
1c00b52e:	00204737          	lui	a4,0x204
1c00b532:	43cc                	lw	a1,4(a5)
1c00b534:	e585                	bnez	a1,1c00b55c <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c00b536:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c00b538:	1b2017b7          	lui	a5,0x1b201
1c00b53c:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ff9e4>
  *(volatile signed int *)addr = value;
1c00b540:	0006a023          	sw	zero,0(a3)
1c00b544:	002047b7          	lui	a5,0x204
1c00b548:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c00b54c:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b54e:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b552:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b556:	00e7a223          	sw	a4,4(a5)
1c00b55a:	bf4d                	j	1c00b50c <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b55c:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b560:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b564:	00c72223          	sw	a2,4(a4)
1c00b568:	b7e9                	j	1c00b532 <__rt_cluster_push_fc_event+0x38>

1c00b56a <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00b56a:	1c00b5b7          	lui	a1,0x1c00b
{
1c00b56e:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00b570:	4601                	li	a2,0
1c00b572:	25c58593          	addi	a1,a1,604 # 1c00b25c <__rt_cluster_init>
1c00b576:	4501                	li	a0,0
{
1c00b578:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00b57a:	ba7fe0ef          	jal	ra,1c00a120 <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c00b57e:	c10d                	beqz	a0,1c00b5a0 <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b580:	01402673          	csrr	a2,uhartid
1c00b584:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00b588:	40565593          	srai	a1,a2,0x5
1c00b58c:	f265b5b3          	p.bclr	a1,a1,25,6
1c00b590:	f4563633          	p.bclr	a2,a2,26,5
1c00b594:	d1c50513          	addi	a0,a0,-740 # 1c00ed1c <__himax_reg_init+0x1d0>
1c00b598:	09e020ef          	jal	ra,1c00d636 <printf>
1c00b59c:	01e020ef          	jal	ra,1c00d5ba <abort>
}
1c00b5a0:	40b2                	lw	ra,12(sp)
1c00b5a2:	0141                	addi	sp,sp,16
1c00b5a4:	8082                	ret

1c00b5a6 <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c00b5a6:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00b5a8:	45b1                	li	a1,12
1c00b5aa:	4505                	li	a0,1
{
1c00b5ac:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00b5ae:	9feff0ef          	jal	ra,1c00a7ac <rt_alloc>
1c00b5b2:	1c00f7b7          	lui	a5,0x1c00f
1c00b5b6:	5ea7a423          	sw	a0,1512(a5) # 1c00f5e8 <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c00b5ba:	e10d                	bnez	a0,1c00b5dc <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00b5bc:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c00b5c0:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00b5c4:	40565593          	srai	a1,a2,0x5
1c00b5c8:	f265b5b3          	p.bclr	a1,a1,25,6
1c00b5cc:	f4563633          	p.bclr	a2,a2,26,5
1c00b5d0:	d6450513          	addi	a0,a0,-668 # 1c00ed64 <__himax_reg_init+0x218>
1c00b5d4:	062020ef          	jal	ra,1c00d636 <printf>
1c00b5d8:	7e3010ef          	jal	ra,1c00d5ba <abort>
    return;
  }
}
1c00b5dc:	40b2                	lw	ra,12(sp)
1c00b5de:	0141                	addi	sp,sp,16
1c00b5e0:	8082                	ret

1c00b5e2 <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c00b5e2:	7139                	addi	sp,sp,-64
1c00b5e4:	d84a                	sw	s2,48(sp)
1c00b5e6:	4906                	lw	s2,64(sp)
1c00b5e8:	dc22                	sw	s0,56(sp)
1c00b5ea:	842e                	mv	s0,a1
1c00b5ec:	de06                	sw	ra,60(sp)
1c00b5ee:	da26                	sw	s1,52(sp)
1c00b5f0:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b5f2:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c00b5f6:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c00b5f8:	02091163          	bnez	s2,1c00b61a <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c00b5fc:	ce32                	sw	a2,28(sp)
1c00b5fe:	cc36                	sw	a3,24(sp)
1c00b600:	ca3a                	sw	a4,20(sp)
1c00b602:	c83e                	sw	a5,16(sp)
1c00b604:	c642                	sw	a6,12(sp)
1c00b606:	c446                	sw	a7,8(sp)
1c00b608:	f3bfe0ef          	jal	ra,1c00a542 <__rt_wait_event_prepare_blocking>
1c00b60c:	48a2                	lw	a7,8(sp)
1c00b60e:	4832                	lw	a6,12(sp)
1c00b610:	47c2                	lw	a5,16(sp)
1c00b612:	4752                	lw	a4,20(sp)
1c00b614:	46e2                	lw	a3,24(sp)
1c00b616:	4672                	lw	a2,28(sp)
1c00b618:	84aa                	mv	s1,a0
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c00b61a:	1c00f5b7          	lui	a1,0x1c00f
1c00b61e:	38c58513          	addi	a0,a1,908 # 1c00f38c <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c00b622:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00b624:	1c00f7b7          	lui	a5,0x1c00f
1c00b628:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c00b62a:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c00b62c:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c00b62e:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c00b632:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c00b636:	5e87a503          	lw	a0,1512(a5) # 1c00f5e8 <__rt_fc_cluster_device>
1c00b63a:	47b1                	li	a5,12
1c00b63c:	8626                	mv	a2,s1
1c00b63e:	42f40533          	p.mac	a0,s0,a5
1c00b642:	38c58593          	addi	a1,a1,908
1c00b646:	2061                	jal	1c00b6ce <pi_cluster_send_task_to_cl_async>
1c00b648:	842a                	mv	s0,a0
1c00b64a:	cd01                	beqz	a0,1c00b662 <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c00b64c:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c00b650:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c00b652:	8522                	mv	a0,s0
1c00b654:	50f2                	lw	ra,60(sp)
1c00b656:	5462                	lw	s0,56(sp)
1c00b658:	54d2                	lw	s1,52(sp)
1c00b65a:	5942                	lw	s2,48(sp)
1c00b65c:	59b2                	lw	s3,44(sp)
1c00b65e:	6121                	addi	sp,sp,64
1c00b660:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c00b662:	00091563          	bnez	s2,1c00b66c <rt_cluster_call+0x8a>
1c00b666:	8526                	mv	a0,s1
1c00b668:	82cff0ef          	jal	ra,1c00a694 <__rt_wait_event>
1c00b66c:	30099073          	csrw	mstatus,s3
  return 0;
1c00b670:	b7cd                	j	1c00b652 <rt_cluster_call+0x70>

1c00b672 <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c00b672:	7139                	addi	sp,sp,-64
1c00b674:	dc22                	sw	s0,56(sp)
1c00b676:	da26                	sw	s1,52(sp)
1c00b678:	d84a                	sw	s2,48(sp)
1c00b67a:	4431                	li	s0,12
1c00b67c:	1c00f4b7          	lui	s1,0x1c00f
1c00b680:	de06                	sw	ra,60(sp)
1c00b682:	d64e                	sw	s3,44(sp)
1c00b684:	8936                	mv	s2,a3
1c00b686:	02858433          	mul	s0,a1,s0
1c00b68a:	5e848493          	addi	s1,s1,1512 # 1c00f5e8 <__rt_fc_cluster_device>
  if (mount)
1c00b68e:	c91d                	beqz	a0,1c00b6c4 <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c00b690:	0028                	addi	a0,sp,8
1c00b692:	89ae                	mv	s3,a1
1c00b694:	d57ff0ef          	jal	ra,1c00b3ea <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c00b698:	4088                	lw	a0,0(s1)
1c00b69a:	002c                	addi	a1,sp,8
1c00b69c:	9522                	add	a0,a0,s0
1c00b69e:	913fe0ef          	jal	ra,1c009fb0 <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00b6a2:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c00b6a4:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c00b6a6:	9522                	add	a0,a0,s0
1c00b6a8:	d49ff0ef          	jal	ra,1c00b3f0 <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c00b6ac:	00090563          	beqz	s2,1c00b6b6 <rt_cluster_mount+0x44>
    rt_event_push(event);
1c00b6b0:	854a                	mv	a0,s2
1c00b6b2:	f5bfe0ef          	jal	ra,1c00a60c <rt_event_push>
}
1c00b6b6:	50f2                	lw	ra,60(sp)
1c00b6b8:	5462                	lw	s0,56(sp)
1c00b6ba:	54d2                	lw	s1,52(sp)
1c00b6bc:	5942                	lw	s2,48(sp)
1c00b6be:	59b2                	lw	s3,44(sp)
1c00b6c0:	6121                	addi	sp,sp,64
1c00b6c2:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c00b6c4:	4088                	lw	a0,0(s1)
1c00b6c6:	9522                	add	a0,a0,s0
1c00b6c8:	e01ff0ef          	jal	ra,1c00b4c8 <pi_cluster_close>
1c00b6cc:	b7c5                	j	1c00b6ac <rt_cluster_mount+0x3a>

1c00b6ce <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c00b6ce:	1101                	addi	sp,sp,-32
1c00b6d0:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c00b6d2:	4504                	lw	s1,8(a0)
{
1c00b6d4:	cc22                	sw	s0,24(sp)
1c00b6d6:	c256                	sw	s5,4(sp)
1c00b6d8:	842e                	mv	s0,a1
1c00b6da:	8ab2                	mv	s5,a2
1c00b6dc:	ce06                	sw	ra,28(sp)
1c00b6de:	c84a                	sw	s2,16(sp)
1c00b6e0:	c64e                	sw	s3,12(sp)
1c00b6e2:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b6e4:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c00b6e8:	4785                	li	a5,1
  task->done = 0;
1c00b6ea:	00060a23          	sb	zero,20(a2)
1c00b6ee:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c00b6f0:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c00b6f2:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c00b6f6:	e399                	bnez	a5,1c00b6fc <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c00b6f8:	47a1                	li	a5,8
1c00b6fa:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c00b6fc:	441c                	lw	a5,8(s0)
1c00b6fe:	ef85                	bnez	a5,1c00b736 <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c00b700:	445c                	lw	a5,12(s0)
1c00b702:	eb81                	bnez	a5,1c00b712 <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c00b704:	6785                	lui	a5,0x1
1c00b706:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c00b70a:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c00b70c:	40000793          	li	a5,1024
1c00b710:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c00b712:	481c                	lw	a5,16(s0)
1c00b714:	00c42903          	lw	s2,12(s0)
1c00b718:	e399                	bnez	a5,1c00b71e <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c00b71a:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00b71e:	485c                	lw	a5,20(s0)
1c00b720:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00b722:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c00b724:	17fd                	addi	a5,a5,-1
1c00b726:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c00b72a:	c9b5                	beqz	a1,1c00b79e <pi_cluster_send_task_to_cl_async+0xd0>
1c00b72c:	44d0                	lw	a2,12(s1)
1c00b72e:	05261f63          	bne	a2,s2,1c00b78c <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c00b732:	449c                	lw	a5,8(s1)
1c00b734:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00b736:	4858                	lw	a4,20(s0)
1c00b738:	4785                	li	a5,1
  task->completion_callback = async_task;
1c00b73a:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c00b73e:	00e797b3          	sll	a5,a5,a4
1c00b742:	17fd                	addi	a5,a5,-1
1c00b744:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c00b746:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c00b74a:	0089a783          	lw	a5,8(s3)
1c00b74e:	cbb5                	beqz	a5,1c00b7c2 <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c00b750:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c00b752:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c00b756:	0009a783          	lw	a5,0(s3)
1c00b75a:	e399                	bnez	a5,1c00b760 <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c00b75c:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00b760:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c00b762:	00201737          	lui	a4,0x201
1c00b766:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00b76a:	04078793          	addi	a5,a5,64
1c00b76e:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c00b770:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c00b774:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c00b778:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c00b77a:	40f2                	lw	ra,28(sp)
1c00b77c:	4462                	lw	s0,24(sp)
1c00b77e:	44d2                	lw	s1,20(sp)
1c00b780:	4942                	lw	s2,16(sp)
1c00b782:	49b2                	lw	s3,12(sp)
1c00b784:	4a22                	lw	s4,8(sp)
1c00b786:	4a92                	lw	s5,4(sp)
1c00b788:	6105                	addi	sp,sp,32
1c00b78a:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c00b78c:	509c                	lw	a5,32(s1)
1c00b78e:	1c00f737          	lui	a4,0x1c00f
1c00b792:	62872503          	lw	a0,1576(a4) # 1c00f628 <__rt_alloc_l1>
1c00b796:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c00b798:	953e                	add	a0,a0,a5
1c00b79a:	fc7fe0ef          	jal	ra,1c00a760 <rt_user_free>
1c00b79e:	509c                	lw	a5,32(s1)
1c00b7a0:	1c00f737          	lui	a4,0x1c00f
1c00b7a4:	62872503          	lw	a0,1576(a4) # 1c00f628 <__rt_alloc_l1>
1c00b7a8:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c00b7aa:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c00b7ae:	85ca                	mv	a1,s2
1c00b7b0:	953e                	add	a0,a0,a5
1c00b7b2:	f67fe0ef          	jal	ra,1c00a718 <rt_user_alloc>
1c00b7b6:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c00b7b8:	fd2d                	bnez	a0,1c00b732 <pi_cluster_send_task_to_cl_async+0x64>
1c00b7ba:	300a1073          	csrw	mstatus,s4
  return -1;
1c00b7be:	557d                	li	a0,-1
1c00b7c0:	bf6d                	j	1c00b77a <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c00b7c2:	0089a223          	sw	s0,4(s3)
1c00b7c6:	b771                	j	1c00b752 <pi_cluster_send_task_to_cl_async+0x84>

1c00b7c8 <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c00b7c8:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c00b7ca:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00b7cc:	860a                	mv	a2,sp
{
1c00b7ce:	c522                	sw	s0,136(sp)
1c00b7d0:	c706                	sw	ra,140(sp)
1c00b7d2:	c326                	sw	s1,132(sp)
1c00b7d4:	c14a                	sw	s2,128(sp)
1c00b7d6:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c00b7d8:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c00b7da:	d43e                	sw	a5,40(sp)
1c00b7dc:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00b7e0:	eefff0ef          	jal	ra,1c00b6ce <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c00b7e4:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c00b7e6:	e509                	bnez	a0,1c00b7f0 <pi_cluster_send_task_to_cl+0x28>
1c00b7e8:	842a                	mv	s0,a0
  while(!task->done)
1c00b7ea:	01410783          	lb	a5,20(sp)
1c00b7ee:	cb81                	beqz	a5,1c00b7fe <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c00b7f0:	8522                	mv	a0,s0
1c00b7f2:	40ba                	lw	ra,140(sp)
1c00b7f4:	442a                	lw	s0,136(sp)
1c00b7f6:	449a                	lw	s1,132(sp)
1c00b7f8:	490a                	lw	s2,128(sp)
1c00b7fa:	6149                	addi	sp,sp,144
1c00b7fc:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b7fe:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00b802:	4585                	li	a1,1
1c00b804:	01c00513          	li	a0,28
1c00b808:	e29fe0ef          	jal	ra,1c00a630 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00b80c:	30091073          	csrw	mstatus,s2
1c00b810:	bfe9                	j	1c00b7ea <pi_cluster_send_task_to_cl+0x22>

1c00b812 <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b812:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00b816:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00b81a:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00b81e:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c00b822:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00b824:	953e                	add	a0,a0,a5
1c00b826:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c00b828:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c00b82a:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c00b82c:	478d                	li	a5,3
1c00b82e:	00e797b3          	sll	a5,a5,a4
1c00b832:	fff7c793          	not	a5,a5
1c00b836:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c00b838:	00e595b3          	sll	a1,a1,a4
1c00b83c:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c00b83e:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c00b840:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c00b844:	8082                	ret

1c00b846 <pi_pad_init>:

void pi_pad_init(uint32_t pad_values[])
{
  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, pad_values[i]);
1c00b846:	4114                	lw	a3,0(a0)
1c00b848:	1a1047b7          	lui	a5,0x1a104
1c00b84c:	14078713          	addi	a4,a5,320 # 1a104140 <__l1_end+0xa1040fc>
1c00b850:	c314                	sw	a3,0(a4)
1c00b852:	4154                	lw	a3,4(a0)
1c00b854:	14478713          	addi	a4,a5,324
1c00b858:	14878793          	addi	a5,a5,328
1c00b85c:	c314                	sw	a3,0(a4)
1c00b85e:	4518                	lw	a4,8(a0)
1c00b860:	c398                	sw	a4,0(a5)
  }  
}
1c00b862:	8082                	ret

1c00b864 <l2_memcpy>:
  req = __pi_hyper_cluster_reqs_first;
  if (req)
  {
    __pi_hyper_cluster_req_exec(req);
  }
}
1c00b864:	87aa                	mv	a5,a0
1c00b866:	962e                	add	a2,a2,a1
1c00b868:	00c59363          	bne	a1,a2,1c00b86e <l2_memcpy+0xa>
1c00b86c:	8082                	ret
1c00b86e:	0015c70b          	p.lbu	a4,1(a1!)
1c00b872:	00e780ab          	p.sb	a4,1(a5!)
1c00b876:	bfcd                	j	1c00b868 <l2_memcpy+0x4>

1c00b878 <rt_event_enqueue>:
1c00b878:	300476f3          	csrrci	a3,mstatus,8
1c00b87c:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00b880:	00052023          	sw	zero,0(a0)
1c00b884:	01c00713          	li	a4,28
1c00b888:	c619                	beqz	a2,1c00b896 <rt_event_enqueue+0x1e>
1c00b88a:	435c                	lw	a5,4(a4)
1c00b88c:	c388                	sw	a0,0(a5)
1c00b88e:	c348                	sw	a0,4(a4)
1c00b890:	30069073          	csrw	mstatus,a3
1c00b894:	8082                	ret
1c00b896:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00b89a:	bfd5                	j	1c00b88e <rt_event_enqueue+0x16>

1c00b89c <pi_task_wait_on.isra.4>:
1c00b89c:	1141                	addi	sp,sp,-16
1c00b89e:	c422                	sw	s0,8(sp)
1c00b8a0:	c226                	sw	s1,4(sp)
1c00b8a2:	c606                	sw	ra,12(sp)
1c00b8a4:	c04a                	sw	s2,0(sp)
1c00b8a6:	842a                	mv	s0,a0
1c00b8a8:	00040783          	lb	a5,0(s0)
1c00b8ac:	c799                	beqz	a5,1c00b8ba <pi_task_wait_on.isra.4+0x1e>
1c00b8ae:	40b2                	lw	ra,12(sp)
1c00b8b0:	4422                	lw	s0,8(sp)
1c00b8b2:	4492                	lw	s1,4(sp)
1c00b8b4:	4902                	lw	s2,0(sp)
1c00b8b6:	0141                	addi	sp,sp,16
1c00b8b8:	8082                	ret
1c00b8ba:	30047973          	csrrci	s2,mstatus,8
1c00b8be:	4585                	li	a1,1
1c00b8c0:	01c00513          	li	a0,28
1c00b8c4:	d6dfe0ef          	jal	ra,1c00a630 <__rt_event_execute>
1c00b8c8:	30091073          	csrw	mstatus,s2
1c00b8cc:	bff1                	j	1c00b8a8 <pi_task_wait_on.isra.4+0xc>

1c00b8ce <__pi_hyper_pin_settings>:
1c00b8ce:	1141                	addi	sp,sp,-16
1c00b8d0:	c422                	sw	s0,8(sp)
1c00b8d2:	1c00f437          	lui	s0,0x1c00f
1c00b8d6:	db840413          	addi	s0,s0,-584 # 1c00edb8 <__hyper_pad>
1c00b8da:	c226                	sw	s1,4(sp)
1c00b8dc:	c606                	sw	ra,12(sp)
1c00b8de:	03440493          	addi	s1,s0,52
1c00b8e2:	0044250b          	p.lw	a0,4(s0!)
1c00b8e6:	458d                	li	a1,3
1c00b8e8:	f2bff0ef          	jal	ra,1c00b812 <pi_pad_set_function>
1c00b8ec:	fe941be3          	bne	s0,s1,1c00b8e2 <__pi_hyper_pin_settings+0x14>
1c00b8f0:	40b2                	lw	ra,12(sp)
1c00b8f2:	4422                	lw	s0,8(sp)
1c00b8f4:	4492                	lw	s1,4(sp)
1c00b8f6:	0141                	addi	sp,sp,16
1c00b8f8:	8082                	ret

1c00b8fa <__pi_hyper_pin_reset_settings>:
1c00b8fa:	1141                	addi	sp,sp,-16
1c00b8fc:	c422                	sw	s0,8(sp)
1c00b8fe:	1c00f437          	lui	s0,0x1c00f
1c00b902:	db840413          	addi	s0,s0,-584 # 1c00edb8 <__hyper_pad>
1c00b906:	c226                	sw	s1,4(sp)
1c00b908:	c606                	sw	ra,12(sp)
1c00b90a:	03440493          	addi	s1,s0,52
1c00b90e:	0044250b          	p.lw	a0,4(s0!)
1c00b912:	4581                	li	a1,0
1c00b914:	effff0ef          	jal	ra,1c00b812 <pi_pad_set_function>
1c00b918:	fe941be3          	bne	s0,s1,1c00b90e <__pi_hyper_pin_reset_settings+0x14>
1c00b91c:	40b2                	lw	ra,12(sp)
1c00b91e:	4422                	lw	s0,8(sp)
1c00b920:	4492                	lw	s1,4(sp)
1c00b922:	0141                	addi	sp,sp,16
1c00b924:	8082                	ret

1c00b926 <pi_hyper_conf_init>:
1c00b926:	57fd                	li	a5,-1
1c00b928:	00f50223          	sb	a5,4(a0)
1c00b92c:	4785                	li	a5,1
1c00b92e:	c55c                	sw	a5,12(a0)
1c00b930:	00052423          	sw	zero,8(a0)
1c00b934:	8082                	ret

1c00b936 <pi_hyper_open>:
1c00b936:	1141                	addi	sp,sp,-16
1c00b938:	c422                	sw	s0,8(sp)
1c00b93a:	c04a                	sw	s2,0(sp)
1c00b93c:	842a                	mv	s0,a0
1c00b93e:	00452903          	lw	s2,4(a0)
1c00b942:	4541                	li	a0,16
1c00b944:	c606                	sw	ra,12(sp)
1c00b946:	c226                	sw	s1,4(sp)
1c00b948:	f89fe0ef          	jal	ra,1c00a8d0 <pi_l2_malloc>
1c00b94c:	c115                	beqz	a0,1c00b970 <pi_hyper_open+0x3a>
1c00b94e:	00c92783          	lw	a5,12(s2)
1c00b952:	84aa                	mv	s1,a0
1c00b954:	0217b063          	p.bneimm	a5,1,1c00b974 <pi_hyper_open+0x3e>
1c00b958:	000f4637          	lui	a2,0xf4
1c00b95c:	24060613          	addi	a2,a2,576 # f4240 <__L2+0x74240>
1c00b960:	4581                	li	a1,0
1c00b962:	154010ef          	jal	ra,1c00cab6 <rt_extern_alloc_init>
1c00b966:	c519                	beqz	a0,1c00b974 <pi_hyper_open+0x3e>
1c00b968:	45c1                	li	a1,16
1c00b96a:	8526                	mv	a0,s1
1c00b96c:	f73fe0ef          	jal	ra,1c00a8de <pi_l2_free>
1c00b970:	557d                	li	a0,-1
1c00b972:	a0f1                	j	1c00ba3e <pi_hyper_open+0x108>
1c00b974:	478d                	li	a5,3
1c00b976:	c0dc                	sw	a5,4(s1)
1c00b978:	00892783          	lw	a5,8(s2)
1c00b97c:	c49c                	sw	a5,8(s1)
1c00b97e:	00c92783          	lw	a5,12(s2)
1c00b982:	c4dc                	sw	a5,12(s1)
1c00b984:	1c00f7b7          	lui	a5,0x1c00f
1c00b988:	5f078793          	addi	a5,a5,1520 # 1c00f5f0 <__rt_hyper_open_count>
1c00b98c:	4398                	lw	a4,0(a5)
1c00b98e:	00170693          	addi	a3,a4,1
1c00b992:	c394                	sw	a3,0(a5)
1c00b994:	e739                	bnez	a4,1c00b9e2 <pi_hyper_open+0xac>
1c00b996:	1a1067b7          	lui	a5,0x1a106
1c00b99a:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fc4>
1c00b99e:	c0673733          	p.bclr	a4,a4,0,6
1c00b9a2:	00e7a423          	sw	a4,8(a5)
1c00b9a6:	0087a703          	lw	a4,8(a5)
1c00b9aa:	c0773733          	p.bclr	a4,a4,0,7
1c00b9ae:	00e7a423          	sw	a4,8(a5)
1c00b9b2:	1a1027b7          	lui	a5,0x1a102
1c00b9b6:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10273c>
1c00b9ba:	4398                	lw	a4,0(a5)
1c00b9bc:	c0374733          	p.bset	a4,a4,0,3
1c00b9c0:	c398                	sw	a4,0(a5)
1c00b9c2:	1c0007b7          	lui	a5,0x1c000
1c00b9c6:	54878793          	addi	a5,a5,1352 # 1c000548 <__rt_hyper_handle_copy>
1c00b9ca:	10f02623          	sw	a5,268(zero) # 10c <_l1_preload_size+0xcc>
1c00b9ce:	0e002823          	sw	zero,240(zero) # f0 <_l1_preload_size+0xb0>
1c00b9d2:	12f02623          	sw	a5,300(zero) # 12c <_l1_preload_size+0xec>
1c00b9d6:	10002823          	sw	zero,272(zero) # 110 <_l1_preload_size+0xd0>
1c00b9da:	30f02423          	sw	a5,776(zero) # 308 <__rt_hyper_udma_handle>
1c00b9de:	ef1ff0ef          	jal	ra,1c00b8ce <__pi_hyper_pin_settings>
1c00b9e2:	00c92783          	lw	a5,12(s2)
1c00b9e6:	00892703          	lw	a4,8(s2)
1c00b9ea:	17fd                	addi	a5,a5,-1
1c00b9ec:	0017b793          	seqz	a5,a5
1c00b9f0:	078a                	slli	a5,a5,0x2
1c00b9f2:	ef21                	bnez	a4,1c00ba4a <pi_hyper_open+0x114>
1c00b9f4:	1a102737          	lui	a4,0x1a102
1c00b9f8:	1b470613          	addi	a2,a4,436 # 1a1021b4 <__l1_end+0xa102170>
1c00b9fc:	4214                	lw	a3,0(a2)
1c00b9fe:	6591                	lui	a1,0x4
1c00ba00:	fff58513          	addi	a0,a1,-1 # 3fff <__rt_stack_size+0x37ff>
1c00ba04:	73b6f693          	andi	a3,a3,1851
1c00ba08:	8fd5                	or	a5,a5,a3
1c00ba0a:	c21c                	sw	a5,0(a2)
1c00ba0c:	1a870793          	addi	a5,a4,424
1c00ba10:	4394                	lw	a3,0(a5)
1c00ba12:	f0058593          	addi	a1,a1,-256
1c00ba16:	8ee9                	and	a3,a3,a0
1c00ba18:	8eed                	and	a3,a3,a1
1c00ba1a:	1006c6b3          	p.exths	a3,a3
1c00ba1e:	c394                	sw	a3,0(a5)
1c00ba20:	4214                	lw	a3,0(a2)
1c00ba22:	7376f693          	andi	a3,a3,1847
1c00ba26:	c214                	sw	a3,0(a2)
1c00ba28:	4398                	lw	a4,0(a5)
1c00ba2a:	668d                	lui	a3,0x3
1c00ba2c:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00ba30:	8f69                	and	a4,a4,a0
1c00ba32:	8f75                	and	a4,a4,a3
1c00ba34:	c4874733          	p.bset	a4,a4,2,8
1c00ba38:	c398                	sw	a4,0(a5)
1c00ba3a:	c404                	sw	s1,8(s0)
1c00ba3c:	4501                	li	a0,0
1c00ba3e:	40b2                	lw	ra,12(sp)
1c00ba40:	4422                	lw	s0,8(sp)
1c00ba42:	4492                	lw	s1,4(sp)
1c00ba44:	4902                	lw	s2,0(sp)
1c00ba46:	0141                	addi	sp,sp,16
1c00ba48:	8082                	ret
1c00ba4a:	1a102737          	lui	a4,0x1a102
1c00ba4e:	1c470613          	addi	a2,a4,452 # 1a1021c4 <__l1_end+0xa102180>
1c00ba52:	4214                	lw	a3,0(a2)
1c00ba54:	1b870713          	addi	a4,a4,440
1c00ba58:	03b6f693          	andi	a3,a3,59
1c00ba5c:	8fd5                	or	a5,a5,a3
1c00ba5e:	c21c                	sw	a5,0(a2)
1c00ba60:	431c                	lw	a5,0(a4)
1c00ba62:	6691                	lui	a3,0x4
1c00ba64:	fff68593          	addi	a1,a3,-1 # 3fff <__rt_stack_size+0x37ff>
1c00ba68:	8fed                	and	a5,a5,a1
1c00ba6a:	f0068693          	addi	a3,a3,-256
1c00ba6e:	8ff5                	and	a5,a5,a3
1c00ba70:	c007c7b3          	p.bset	a5,a5,0,0
1c00ba74:	1007c7b3          	p.exths	a5,a5
1c00ba78:	c31c                	sw	a5,0(a4)
1c00ba7a:	4214                	lw	a3,0(a2)
1c00ba7c:	0376f693          	andi	a3,a3,55
1c00ba80:	c214                	sw	a3,0(a2)
1c00ba82:	431c                	lw	a5,0(a4)
1c00ba84:	668d                	lui	a3,0x3
1c00ba86:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c00ba8a:	8fed                	and	a5,a5,a1
1c00ba8c:	8ff5                	and	a5,a5,a3
1c00ba8e:	c487c7b3          	p.bset	a5,a5,2,8
1c00ba92:	c31c                	sw	a5,0(a4)
1c00ba94:	b75d                	j	1c00ba3a <pi_hyper_open+0x104>

1c00ba96 <pi_hyper_close>:
1c00ba96:	1c00f737          	lui	a4,0x1c00f
1c00ba9a:	5f070713          	addi	a4,a4,1520 # 1c00f5f0 <__rt_hyper_open_count>
1c00ba9e:	431c                	lw	a5,0(a4)
1c00baa0:	1141                	addi	sp,sp,-16
1c00baa2:	c422                	sw	s0,8(sp)
1c00baa4:	c606                	sw	ra,12(sp)
1c00baa6:	17fd                	addi	a5,a5,-1
1c00baa8:	c31c                	sw	a5,0(a4)
1c00baaa:	4500                	lw	s0,8(a0)
1c00baac:	e7ad                	bnez	a5,1c00bb16 <pi_hyper_close+0x80>
1c00baae:	404c                	lw	a1,4(s0)
1c00bab0:	47fd                	li	a5,31
1c00bab2:	00159693          	slli	a3,a1,0x1
1c00bab6:	06d7dd63          	ble	a3,a5,1c00bb30 <pi_hyper_close+0x9a>
1c00baba:	fe068513          	addi	a0,a3,-32
1c00babe:	4611                	li	a2,4
1c00bac0:	1a1067b7          	lui	a5,0x1a106
1c00bac4:	20c7f803          	p.lw	a6,a2(a5)
1c00bac8:	4705                	li	a4,1
1c00baca:	00a71733          	sll	a4,a4,a0
1c00bace:	01076733          	or	a4,a4,a6
1c00bad2:	00e7e623          	p.sw	a4,a2(a5)
1c00bad6:	00168713          	addi	a4,a3,1
1c00bada:	47fd                	li	a5,31
1c00badc:	4621                	li	a2,8
1c00bade:	00e7d563          	ble	a4,a5,1c00bae8 <pi_hyper_close+0x52>
1c00bae2:	fe168713          	addi	a4,a3,-31
1c00bae6:	4611                	li	a2,4
1c00bae8:	1a1066b7          	lui	a3,0x1a106
1c00baec:	20c6f503          	p.lw	a0,a2(a3)
1c00baf0:	4785                	li	a5,1
1c00baf2:	00e79733          	sll	a4,a5,a4
1c00baf6:	8f49                	or	a4,a4,a0
1c00baf8:	00e6e623          	p.sw	a4,a2(a3)
1c00bafc:	1a102737          	lui	a4,0x1a102
1c00bb00:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00bb04:	4314                	lw	a3,0(a4)
1c00bb06:	00b797b3          	sll	a5,a5,a1
1c00bb0a:	fff7c793          	not	a5,a5
1c00bb0e:	8ff5                	and	a5,a5,a3
1c00bb10:	c31c                	sw	a5,0(a4)
1c00bb12:	de9ff0ef          	jal	ra,1c00b8fa <__pi_hyper_pin_reset_settings>
1c00bb16:	445c                	lw	a5,12(s0)
1c00bb18:	0017b563          	p.bneimm	a5,1,1c00bb22 <pi_hyper_close+0x8c>
1c00bb1c:	8522                	mv	a0,s0
1c00bb1e:	7f1000ef          	jal	ra,1c00cb0e <rt_extern_alloc_deinit>
1c00bb22:	8522                	mv	a0,s0
1c00bb24:	4422                	lw	s0,8(sp)
1c00bb26:	40b2                	lw	ra,12(sp)
1c00bb28:	45c1                	li	a1,16
1c00bb2a:	0141                	addi	sp,sp,16
1c00bb2c:	db3fe06f          	j	1c00a8de <pi_l2_free>
1c00bb30:	8536                	mv	a0,a3
1c00bb32:	4621                	li	a2,8
1c00bb34:	b771                	j	1c00bac0 <pi_hyper_close+0x2a>

1c00bb36 <__pi_hyper_copy_aligned>:
1c00bb36:	40155793          	srai	a5,a0,0x1
1c00bb3a:	1a102837          	lui	a6,0x1a102
1c00bb3e:	079e                	slli	a5,a5,0x7
1c00bb40:	0512                	slli	a0,a0,0x4
1c00bb42:	97c2                	add	a5,a5,a6
1c00bb44:	8941                	andi	a0,a0,16
1c00bb46:	953e                	add	a0,a0,a5
1c00bb48:	20000813          	li	a6,512
1c00bb4c:	30800793          	li	a5,776
1c00bb50:	02d87c63          	bleu	a3,a6,1c00bb88 <__pi_hyper_copy_aligned+0x52>
1c00bb54:	cbd4                	sw	a3,20(a5)
1c00bb56:	1c0006b7          	lui	a3,0x1c000
1c00bb5a:	5e068693          	addi	a3,a3,1504 # 1c0005e0 <__rt_hyper_handle_burst>
1c00bb5e:	c394                	sw	a3,0(a5)
1c00bb60:	c3c8                	sw	a0,4(a5)
1c00bb62:	c790                	sw	a2,8(a5)
1c00bb64:	c7cc                	sw	a1,12(a5)
1c00bb66:	0107a823          	sw	a6,16(a5) # 1a106010 <__l1_end+0xa105fcc>
1c00bb6a:	20000693          	li	a3,512
1c00bb6e:	cf98                	sw	a4,24(a5)
1c00bb70:	1a1027b7          	lui	a5,0x1a102
1c00bb74:	1ac7a023          	sw	a2,416(a5) # 1a1021a0 <__l1_end+0xa10215c>
1c00bb78:	00b52023          	sw	a1,0(a0)
1c00bb7c:	00d52223          	sw	a3,4(a0)
1c00bb80:	47c1                	li	a5,16
1c00bb82:	00f52423          	sw	a5,8(a0)
1c00bb86:	8082                	ret
1c00bb88:	0007a823          	sw	zero,16(a5)
1c00bb8c:	b7cd                	j	1c00bb6e <__pi_hyper_copy_aligned+0x38>

1c00bb8e <__pi_hyper_copy_exec>:
1c00bb8e:	30800813          	li	a6,776
1c00bb92:	00e82e23          	sw	a4,28(a6) # 1a10201c <__l1_end+0xa101fd8>
1c00bb96:	fa25b833          	p.bclr	a6,a1,29,2
1c00bb9a:	30800793          	li	a5,776
1c00bb9e:	02081463          	bnez	a6,1c00bbc6 <__pi_hyper_copy_exec+0x38>
1c00bba2:	fc163833          	p.bclr	a6,a2,30,1
1c00bba6:	02081063          	bnez	a6,1c00bbc6 <__pi_hyper_copy_exec+0x38>
1c00bbaa:	fa26b833          	p.bclr	a6,a3,29,2
1c00bbae:	00080a63          	beqz	a6,1c00bbc2 <__pi_hyper_copy_exec+0x34>
1c00bbb2:	fc153833          	p.bclr	a6,a0,30,1
1c00bbb6:	00080863          	beqz	a6,1c00bbc6 <__pi_hyper_copy_exec+0x38>
1c00bbba:	fc16b833          	p.bclr	a6,a3,30,1
1c00bbbe:	00081463          	bnez	a6,1c00bbc6 <__pi_hyper_copy_exec+0x38>
1c00bbc2:	f75ff06f          	j	1c00bb36 <__pi_hyper_copy_aligned>
1c00bbc6:	d388                	sw	a0,32(a5)
1c00bbc8:	853a                	mv	a0,a4
1c00bbca:	d3d0                	sw	a2,36(a5)
1c00bbcc:	d78c                	sw	a1,40(a5)
1c00bbce:	d7d4                	sw	a3,44(a5)
1c00bbd0:	02078823          	sb	zero,48(a5)
1c00bbd4:	dbd8                	sw	a4,52(a5)
1c00bbd6:	aa31                	j	1c00bcf2 <__pi_hyper_copy_misaligned>

1c00bbd8 <__pi_hyper_copy>:
1c00bbd8:	1141                	addi	sp,sp,-16
1c00bbda:	c606                	sw	ra,12(sp)
1c00bbdc:	c422                	sw	s0,8(sp)
1c00bbde:	30047473          	csrrci	s0,mstatus,8
1c00bbe2:	c781                	beqz	a5,1c00bbea <__pi_hyper_copy+0x12>
1c00bbe4:	010007b7          	lui	a5,0x1000
1c00bbe8:	963e                	add	a2,a2,a5
1c00bbea:	30800813          	li	a6,776
1c00bbee:	01c82803          	lw	a6,28(a6)
1c00bbf2:	30800793          	li	a5,776
1c00bbf6:	02080963          	beqz	a6,1c00bc28 <__pi_hyper_copy+0x50>
1c00bbfa:	0387a803          	lw	a6,56(a5) # 1000038 <__L2+0xf80038>
1c00bbfe:	02080363          	beqz	a6,1c00bc24 <__pi_hyper_copy+0x4c>
1c00bc02:	03c7a803          	lw	a6,60(a5)
1c00bc06:	00e82e23          	sw	a4,28(a6)
1c00bc0a:	dfd8                	sw	a4,60(a5)
1c00bc0c:	00072e23          	sw	zero,28(a4)
1c00bc10:	df08                	sw	a0,56(a4)
1c00bc12:	df4c                	sw	a1,60(a4)
1c00bc14:	c330                	sw	a2,64(a4)
1c00bc16:	c374                	sw	a3,68(a4)
1c00bc18:	30041073          	csrw	mstatus,s0
1c00bc1c:	40b2                	lw	ra,12(sp)
1c00bc1e:	4422                	lw	s0,8(sp)
1c00bc20:	0141                	addi	sp,sp,16
1c00bc22:	8082                	ret
1c00bc24:	df98                	sw	a4,56(a5)
1c00bc26:	b7d5                	j	1c00bc0a <__pi_hyper_copy+0x32>
1c00bc28:	f67ff0ef          	jal	ra,1c00bb8e <__pi_hyper_copy_exec>
1c00bc2c:	b7f5                	j	1c00bc18 <__pi_hyper_copy+0x40>

1c00bc2e <pi_hyper_read_async>:
1c00bc2e:	451c                	lw	a5,8(a0)
1c00bc30:	00070a23          	sb	zero,20(a4)
1c00bc34:	8832                	mv	a6,a2
1c00bc36:	43c8                	lw	a0,4(a5)
1c00bc38:	479c                	lw	a5,8(a5)
1c00bc3a:	862e                	mv	a2,a1
1c00bc3c:	0506                	slli	a0,a0,0x1
1c00bc3e:	85c2                	mv	a1,a6
1c00bc40:	f99ff06f          	j	1c00bbd8 <__pi_hyper_copy>

1c00bc44 <pi_hyper_read>:
1c00bc44:	7175                	addi	sp,sp,-144
1c00bc46:	4785                	li	a5,1
1c00bc48:	870a                	mv	a4,sp
1c00bc4a:	c706                	sw	ra,140(sp)
1c00bc4c:	cc3e                	sw	a5,24(sp)
1c00bc4e:	d43e                	sw	a5,40(sp)
1c00bc50:	c202                	sw	zero,4(sp)
1c00bc52:	00010a23          	sb	zero,20(sp)
1c00bc56:	fd9ff0ef          	jal	ra,1c00bc2e <pi_hyper_read_async>
1c00bc5a:	0848                	addi	a0,sp,20
1c00bc5c:	c41ff0ef          	jal	ra,1c00b89c <pi_task_wait_on.isra.4>
1c00bc60:	40ba                	lw	ra,140(sp)
1c00bc62:	6149                	addi	sp,sp,144
1c00bc64:	8082                	ret

1c00bc66 <pi_hyper_write_async>:
1c00bc66:	451c                	lw	a5,8(a0)
1c00bc68:	00070a23          	sb	zero,20(a4)
1c00bc6c:	8832                	mv	a6,a2
1c00bc6e:	43c8                	lw	a0,4(a5)
1c00bc70:	479c                	lw	a5,8(a5)
1c00bc72:	862e                	mv	a2,a1
1c00bc74:	0506                	slli	a0,a0,0x1
1c00bc76:	85c2                	mv	a1,a6
1c00bc78:	0505                	addi	a0,a0,1
1c00bc7a:	f5fff06f          	j	1c00bbd8 <__pi_hyper_copy>

1c00bc7e <pi_hyper_write>:
1c00bc7e:	7175                	addi	sp,sp,-144
1c00bc80:	4785                	li	a5,1
1c00bc82:	870a                	mv	a4,sp
1c00bc84:	c706                	sw	ra,140(sp)
1c00bc86:	cc3e                	sw	a5,24(sp)
1c00bc88:	d43e                	sw	a5,40(sp)
1c00bc8a:	c202                	sw	zero,4(sp)
1c00bc8c:	00010a23          	sb	zero,20(sp)
1c00bc90:	fd7ff0ef          	jal	ra,1c00bc66 <pi_hyper_write_async>
1c00bc94:	0848                	addi	a0,sp,20
1c00bc96:	c07ff0ef          	jal	ra,1c00b89c <pi_task_wait_on.isra.4>
1c00bc9a:	40ba                	lw	ra,140(sp)
1c00bc9c:	6149                	addi	sp,sp,144
1c00bc9e:	8082                	ret

1c00bca0 <exec_pending_task>:
1c00bca0:	30800793          	li	a5,776
1c00bca4:	5f98                	lw	a4,56(a5)
1c00bca6:	c729                	beqz	a4,1c00bcf0 <exec_pending_task+0x50>
1c00bca8:	4f54                	lw	a3,28(a4)
1c00bcaa:	03872803          	lw	a6,56(a4)
1c00bcae:	5f4c                	lw	a1,60(a4)
1c00bcb0:	df94                	sw	a3,56(a5)
1c00bcb2:	ee883533          	p.bclr	a0,a6,23,8
1c00bcb6:	ce881833          	p.extractu	a6,a6,7,8
1c00bcba:	4330                	lw	a2,64(a4)
1c00bcbc:	4374                	lw	a3,68(a4)
1c00bcbe:	00081463          	bnez	a6,1c00bcc6 <exec_pending_task+0x26>
1c00bcc2:	ecdff06f          	j	1c00bb8e <__pi_hyper_copy_exec>
1c00bcc6:	04c72803          	lw	a6,76(a4)
1c00bcca:	04872883          	lw	a7,72(a4)
1c00bcce:	d388                	sw	a0,32(a5)
1c00bcd0:	d3d0                	sw	a2,36(a5)
1c00bcd2:	853a                	mv	a0,a4
1c00bcd4:	0506d633          	p.minu	a2,a3,a6
1c00bcd8:	cfd8                	sw	a4,28(a5)
1c00bcda:	d78c                	sw	a1,40(a5)
1c00bcdc:	d7d0                	sw	a2,44(a5)
1c00bcde:	02078823          	sb	zero,48(a5)
1c00bce2:	dbd8                	sw	a4,52(a5)
1c00bce4:	c3b4                	sw	a3,64(a5)
1c00bce6:	0507a223          	sw	a6,68(a5)
1c00bcea:	0517a423          	sw	a7,72(a5)
1c00bcee:	a011                	j	1c00bcf2 <__pi_hyper_copy_misaligned>
1c00bcf0:	8082                	ret

1c00bcf2 <__pi_hyper_copy_misaligned>:
1c00bcf2:	7179                	addi	sp,sp,-48
1c00bcf4:	d422                	sw	s0,40(sp)
1c00bcf6:	30800793          	li	a5,776
1c00bcfa:	ce4e                	sw	s3,28(sp)
1c00bcfc:	89aa                	mv	s3,a0
1c00bcfe:	5388                	lw	a0,32(a5)
1c00bd00:	d606                	sw	ra,44(sp)
1c00bd02:	d226                	sw	s1,36(sp)
1c00bd04:	d04a                	sw	s2,32(sp)
1c00bd06:	cc52                	sw	s4,24(sp)
1c00bd08:	ca56                	sw	s5,20(sp)
1c00bd0a:	c85a                	sw	s6,16(sp)
1c00bd0c:	c65e                	sw	s7,12(sp)
1c00bd0e:	c462                	sw	s8,8(sp)
1c00bd10:	fc1537b3          	p.bclr	a5,a0,30,1
1c00bd14:	30800413          	li	s0,776
1c00bd18:	e7a1                	bnez	a5,1c00bd60 <__pi_hyper_copy_misaligned+0x6e>
1c00bd1a:	1c00fc37          	lui	s8,0x1c00f
1c00bd1e:	3b8c0913          	addi	s2,s8,952 # 1c00f3b8 <__pi_hyper_temp_buffer>
1c00bd22:	4a0d                	li	s4,3
1c00bd24:	07c00a93          	li	s5,124
1c00bd28:	00190b13          	addi	s6,s2,1
1c00bd2c:	5408                	lw	a0,40(s0)
1c00bd2e:	5444                	lw	s1,44(s0)
1c00bd30:	5050                	lw	a2,36(s0)
1c00bd32:	00350793          	addi	a5,a0,3
1c00bd36:	c207b7b3          	p.bclr	a5,a5,1,0
1c00bd3a:	8f89                	sub	a5,a5,a0
1c00bd3c:	8bbe                	mv	s7,a5
1c00bd3e:	009a6363          	bltu	s4,s1,1c00bd44 <__pi_hyper_copy_misaligned+0x52>
1c00bd42:	8ba6                	mv	s7,s1
1c00bd44:	1c0b8663          	beqz	s7,1c00bf10 <__pi_hyper_copy_misaligned+0x21e>
1c00bd48:	03044783          	lbu	a5,48(s0)
1c00bd4c:	16079f63          	bnez	a5,1c00beca <__pi_hyper_copy_misaligned+0x1d8>
1c00bd50:	4701                	li	a4,0
1c00bd52:	4691                	li	a3,4
1c00bd54:	c0063633          	p.bclr	a2,a2,0,0
1c00bd58:	3b8c0593          	addi	a1,s8,952
1c00bd5c:	5008                	lw	a0,32(s0)
1c00bd5e:	a889                	j	1c00bdb0 <__pi_hyper_copy_misaligned+0xbe>
1c00bd60:	540c                	lw	a1,40(s0)
1c00bd62:	04442883          	lw	a7,68(s0)
1c00bd66:	04842303          	lw	t1,72(s0)
1c00bd6a:	00358793          	addi	a5,a1,3
1c00bd6e:	5050                	lw	a2,36(s0)
1c00bd70:	5454                	lw	a3,44(s0)
1c00bd72:	4038                	lw	a4,64(s0)
1c00bd74:	c207b7b3          	p.bclr	a5,a5,1,0
1c00bd78:	8f8d                	sub	a5,a5,a1
1c00bd7a:	41130333          	sub	t1,t1,a7
1c00bd7e:	4801                	li	a6,0
1c00bd80:	4e0d                	li	t3,3
1c00bd82:	84be                	mv	s1,a5
1c00bd84:	00de6363          	bltu	t3,a3,1c00bd8a <__pi_hyper_copy_misaligned+0x98>
1c00bd88:	84b6                	mv	s1,a3
1c00bd8a:	c4b5                	beqz	s1,1c00bdf6 <__pi_hyper_copy_misaligned+0x104>
1c00bd8c:	00080563          	beqz	a6,1c00bd96 <__pi_hyper_copy_misaligned+0xa4>
1c00bd90:	d050                	sw	a2,36(s0)
1c00bd92:	d454                	sw	a3,44(s0)
1c00bd94:	c038                	sw	a4,64(s0)
1c00bd96:	03044703          	lbu	a4,48(s0)
1c00bd9a:	1c00f937          	lui	s2,0x1c00f
1c00bd9e:	3b890793          	addi	a5,s2,952 # 1c00f3b8 <__pi_hyper_temp_buffer>
1c00bda2:	ef09                	bnez	a4,1c00bdbc <__pi_hyper_copy_misaligned+0xca>
1c00bda4:	4691                	li	a3,4
1c00bda6:	c0063633          	p.bclr	a2,a2,0,0
1c00bdaa:	3b890593          	addi	a1,s2,952
1c00bdae:	157d                	addi	a0,a0,-1
1c00bdb0:	d87ff0ef          	jal	ra,1c00bb36 <__pi_hyper_copy_aligned>
1c00bdb4:	4785                	li	a5,1
1c00bdb6:	02f40823          	sb	a5,48(s0)
1c00bdba:	aa3d                	j	1c00bef8 <__pi_hyper_copy_misaligned+0x206>
1c00bdbc:	fc163533          	p.bclr	a0,a2,30,1
1c00bdc0:	953e                	add	a0,a0,a5
1c00bdc2:	8626                	mv	a2,s1
1c00bdc4:	02040823          	sb	zero,48(s0)
1c00bdc8:	a9dff0ef          	jal	ra,1c00b864 <l2_memcpy>
1c00bdcc:	5050                	lw	a2,36(s0)
1c00bdce:	5008                	lw	a0,32(s0)
1c00bdd0:	4701                	li	a4,0
1c00bdd2:	4691                	li	a3,4
1c00bdd4:	c0063633          	p.bclr	a2,a2,0,0
1c00bdd8:	3b890593          	addi	a1,s2,952
1c00bddc:	d5bff0ef          	jal	ra,1c00bb36 <__pi_hyper_copy_aligned>
1c00bde0:	505c                	lw	a5,36(s0)
1c00bde2:	97a6                	add	a5,a5,s1
1c00bde4:	d05c                	sw	a5,36(s0)
1c00bde6:	541c                	lw	a5,40(s0)
1c00bde8:	97a6                	add	a5,a5,s1
1c00bdea:	d41c                	sw	a5,40(s0)
1c00bdec:	545c                	lw	a5,44(s0)
1c00bdee:	409784b3          	sub	s1,a5,s1
1c00bdf2:	d444                	sw	s1,44(s0)
1c00bdf4:	a211                	j	1c00bef8 <__pi_hyper_copy_misaligned+0x206>
1c00bdf6:	c2d1                	beqz	a3,1c00be7a <__pi_hyper_copy_misaligned+0x188>
1c00bdf8:	00080563          	beqz	a6,1c00be02 <__pi_hyper_copy_misaligned+0x110>
1c00bdfc:	d050                	sw	a2,36(s0)
1c00bdfe:	d454                	sw	a3,44(s0)
1c00be00:	c038                	sw	a4,64(s0)
1c00be02:	97b2                	add	a5,a5,a2
1c00be04:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00be08:	c206b4b3          	p.bclr	s1,a3,1,0
1c00be0c:	ef89                	bnez	a5,1c00be26 <__pi_hyper_copy_misaligned+0x134>
1c00be0e:	4701                	li	a4,0
1c00be10:	86a6                	mv	a3,s1
1c00be12:	d25ff0ef          	jal	ra,1c00bb36 <__pi_hyper_copy_aligned>
1c00be16:	505c                	lw	a5,36(s0)
1c00be18:	5454                	lw	a3,44(s0)
1c00be1a:	97a6                	add	a5,a5,s1
1c00be1c:	d05c                	sw	a5,36(s0)
1c00be1e:	541c                	lw	a5,40(s0)
1c00be20:	97a6                	add	a5,a5,s1
1c00be22:	d41c                	sw	a5,40(s0)
1c00be24:	a881                	j	1c00be74 <__pi_hyper_copy_misaligned+0x182>
1c00be26:	03044703          	lbu	a4,48(s0)
1c00be2a:	1c00f937          	lui	s2,0x1c00f
1c00be2e:	3b890793          	addi	a5,s2,952 # 1c00f3b8 <__pi_hyper_temp_buffer>
1c00be32:	db2d                	beqz	a4,1c00bda4 <__pi_hyper_copy_misaligned+0xb2>
1c00be34:	07c00693          	li	a3,124
1c00be38:	04d4d4b3          	p.minu	s1,s1,a3
1c00be3c:	00178513          	addi	a0,a5,1
1c00be40:	fff48613          	addi	a2,s1,-1
1c00be44:	02040823          	sb	zero,48(s0)
1c00be48:	a1dff0ef          	jal	ra,1c00b864 <l2_memcpy>
1c00be4c:	5050                	lw	a2,36(s0)
1c00be4e:	5008                	lw	a0,32(s0)
1c00be50:	86a6                	mv	a3,s1
1c00be52:	4701                	li	a4,0
1c00be54:	c0063633          	p.bclr	a2,a2,0,0
1c00be58:	3b890593          	addi	a1,s2,952
1c00be5c:	cdbff0ef          	jal	ra,1c00bb36 <__pi_hyper_copy_aligned>
1c00be60:	505c                	lw	a5,36(s0)
1c00be62:	5454                	lw	a3,44(s0)
1c00be64:	17fd                	addi	a5,a5,-1
1c00be66:	97a6                	add	a5,a5,s1
1c00be68:	d05c                	sw	a5,36(s0)
1c00be6a:	541c                	lw	a5,40(s0)
1c00be6c:	0685                	addi	a3,a3,1
1c00be6e:	17fd                	addi	a5,a5,-1
1c00be70:	97a6                	add	a5,a5,s1
1c00be72:	d41c                	sw	a5,40(s0)
1c00be74:	409684b3          	sub	s1,a3,s1
1c00be78:	bfad                	j	1c00bdf2 <__pi_hyper_copy_misaligned+0x100>
1c00be7a:	e719                	bnez	a4,1c00be88 <__pi_hyper_copy_misaligned+0x196>
1c00be7c:	00080c63          	beqz	a6,1c00be94 <__pi_hyper_copy_misaligned+0x1a2>
1c00be80:	d050                	sw	a2,36(s0)
1c00be82:	02042623          	sw	zero,44(s0)
1c00be86:	a029                	j	1c00be90 <__pi_hyper_copy_misaligned+0x19e>
1c00be88:	02e8ea63          	bltu	a7,a4,1c00bebc <__pi_hyper_copy_misaligned+0x1ca>
1c00be8c:	fe081ae3          	bnez	a6,1c00be80 <__pi_hyper_copy_misaligned+0x18e>
1c00be90:	04042023          	sw	zero,64(s0)
1c00be94:	854e                	mv	a0,s3
1c00be96:	02042a23          	sw	zero,52(s0)
1c00be9a:	00042e23          	sw	zero,28(s0)
1c00be9e:	9dbff0ef          	jal	ra,1c00b878 <rt_event_enqueue>
1c00bea2:	5422                	lw	s0,40(sp)
1c00bea4:	50b2                	lw	ra,44(sp)
1c00bea6:	5492                	lw	s1,36(sp)
1c00bea8:	5902                	lw	s2,32(sp)
1c00beaa:	49f2                	lw	s3,28(sp)
1c00beac:	4a62                	lw	s4,24(sp)
1c00beae:	4ad2                	lw	s5,20(sp)
1c00beb0:	4b42                	lw	s6,16(sp)
1c00beb2:	4bb2                	lw	s7,12(sp)
1c00beb4:	4c22                	lw	s8,8(sp)
1c00beb6:	6145                	addi	sp,sp,48
1c00beb8:	de9ff06f          	j	1c00bca0 <exec_pending_task>
1c00bebc:	41170733          	sub	a4,a4,a7
1c00bec0:	961a                	add	a2,a2,t1
1c00bec2:	4805                	li	a6,1
1c00bec4:	04e8d6b3          	p.minu	a3,a7,a4
1c00bec8:	bd6d                	j	1c00bd82 <__pi_hyper_copy_misaligned+0x90>
1c00beca:	fc1635b3          	p.bclr	a1,a2,30,1
1c00bece:	95ca                	add	a1,a1,s2
1c00bed0:	865e                	mv	a2,s7
1c00bed2:	02040823          	sb	zero,48(s0)
1c00bed6:	98fff0ef          	jal	ra,1c00b864 <l2_memcpy>
1c00beda:	505c                	lw	a5,36(s0)
1c00bedc:	97de                	add	a5,a5,s7
1c00bede:	d05c                	sw	a5,36(s0)
1c00bee0:	541c                	lw	a5,40(s0)
1c00bee2:	97de                	add	a5,a5,s7
1c00bee4:	d41c                	sw	a5,40(s0)
1c00bee6:	545c                	lw	a5,44(s0)
1c00bee8:	41778bb3          	sub	s7,a5,s7
1c00beec:	03742623          	sw	s7,44(s0)
1c00bef0:	e20b9ee3          	bnez	s7,1c00bd2c <__pi_hyper_copy_misaligned+0x3a>
1c00bef4:	545c                	lw	a5,44(s0)
1c00bef6:	c7a5                	beqz	a5,1c00bf5e <__pi_hyper_copy_misaligned+0x26c>
1c00bef8:	50b2                	lw	ra,44(sp)
1c00befa:	5422                	lw	s0,40(sp)
1c00befc:	5492                	lw	s1,36(sp)
1c00befe:	5902                	lw	s2,32(sp)
1c00bf00:	49f2                	lw	s3,28(sp)
1c00bf02:	4a62                	lw	s4,24(sp)
1c00bf04:	4ad2                	lw	s5,20(sp)
1c00bf06:	4b42                	lw	s6,16(sp)
1c00bf08:	4bb2                	lw	s7,12(sp)
1c00bf0a:	4c22                	lw	s8,8(sp)
1c00bf0c:	6145                	addi	sp,sp,48
1c00bf0e:	8082                	ret
1c00bf10:	d0f5                	beqz	s1,1c00bef4 <__pi_hyper_copy_misaligned+0x202>
1c00bf12:	97b2                	add	a5,a5,a2
1c00bf14:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00bf18:	c204b4b3          	p.bclr	s1,s1,1,0
1c00bf1c:	e791                	bnez	a5,1c00bf28 <__pi_hyper_copy_misaligned+0x236>
1c00bf1e:	85aa                	mv	a1,a0
1c00bf20:	4701                	li	a4,0
1c00bf22:	86a6                	mv	a3,s1
1c00bf24:	5008                	lw	a0,32(s0)
1c00bf26:	b5f5                	j	1c00be12 <__pi_hyper_copy_misaligned+0x120>
1c00bf28:	03044783          	lbu	a5,48(s0)
1c00bf2c:	0554d4b3          	p.minu	s1,s1,s5
1c00bf30:	e789                	bnez	a5,1c00bf3a <__pi_hyper_copy_misaligned+0x248>
1c00bf32:	4701                	li	a4,0
1c00bf34:	00448693          	addi	a3,s1,4
1c00bf38:	bd31                	j	1c00bd54 <__pi_hyper_copy_misaligned+0x62>
1c00bf3a:	8626                	mv	a2,s1
1c00bf3c:	85da                	mv	a1,s6
1c00bf3e:	02040823          	sb	zero,48(s0)
1c00bf42:	923ff0ef          	jal	ra,1c00b864 <l2_memcpy>
1c00bf46:	505c                	lw	a5,36(s0)
1c00bf48:	5454                	lw	a3,44(s0)
1c00bf4a:	97a6                	add	a5,a5,s1
1c00bf4c:	d05c                	sw	a5,36(s0)
1c00bf4e:	541c                	lw	a5,40(s0)
1c00bf50:	97a6                	add	a5,a5,s1
1c00bf52:	409684b3          	sub	s1,a3,s1
1c00bf56:	d41c                	sw	a5,40(s0)
1c00bf58:	d444                	sw	s1,44(s0)
1c00bf5a:	dcc9                	beqz	s1,1c00bef4 <__pi_hyper_copy_misaligned+0x202>
1c00bf5c:	bbc1                	j	1c00bd2c <__pi_hyper_copy_misaligned+0x3a>
1c00bf5e:	4038                	lw	a4,64(s0)
1c00bf60:	db15                	beqz	a4,1c00be94 <__pi_hyper_copy_misaligned+0x1a2>
1c00bf62:	407c                	lw	a5,68(s0)
1c00bf64:	00e7ff63          	bleu	a4,a5,1c00bf82 <__pi_hyper_copy_misaligned+0x290>
1c00bf68:	8f1d                	sub	a4,a4,a5
1c00bf6a:	c038                	sw	a4,64(s0)
1c00bf6c:	4034                	lw	a3,64(s0)
1c00bf6e:	d29d                	beqz	a3,1c00be94 <__pi_hyper_copy_misaligned+0x1a2>
1c00bf70:	5058                	lw	a4,36(s0)
1c00bf72:	4430                	lw	a2,72(s0)
1c00bf74:	9732                	add	a4,a4,a2
1c00bf76:	8f1d                	sub	a4,a4,a5
1c00bf78:	04d7d7b3          	p.minu	a5,a5,a3
1c00bf7c:	d058                	sw	a4,36(s0)
1c00bf7e:	d45c                	sw	a5,44(s0)
1c00bf80:	b375                	j	1c00bd2c <__pi_hyper_copy_misaligned+0x3a>
1c00bf82:	04042023          	sw	zero,64(s0)
1c00bf86:	b7dd                	j	1c00bf6c <__pi_hyper_copy_misaligned+0x27a>

1c00bf88 <__pi_hyper_copy_2d>:
1c00bf88:	1141                	addi	sp,sp,-16
1c00bf8a:	c606                	sw	ra,12(sp)
1c00bf8c:	c422                	sw	s0,8(sp)
1c00bf8e:	30047473          	csrrci	s0,mstatus,8
1c00bf92:	00088563          	beqz	a7,1c00bf9c <__pi_hyper_copy_2d+0x14>
1c00bf96:	010008b7          	lui	a7,0x1000
1c00bf9a:	9646                	add	a2,a2,a7
1c00bf9c:	30800893          	li	a7,776
1c00bfa0:	01c8ae03          	lw	t3,28(a7) # 100001c <__L2+0xf8001c>
1c00bfa4:	30800313          	li	t1,776
1c00bfa8:	040e0563          	beqz	t3,1c00bff2 <__pi_hyper_copy_2d+0x6a>
1c00bfac:	03832883          	lw	a7,56(t1) # 80000038 <pulp__FC+0x80000039>
1c00bfb0:	02088e63          	beqz	a7,1c00bfec <__pi_hyper_copy_2d+0x64>
1c00bfb4:	03c32883          	lw	a7,60(t1)
1c00bfb8:	0108ae23          	sw	a6,28(a7)
1c00bfbc:	c0854533          	p.bset	a0,a0,0,8
1c00bfc0:	03032e23          	sw	a6,60(t1)
1c00bfc4:	00082e23          	sw	zero,28(a6)
1c00bfc8:	02a82c23          	sw	a0,56(a6)
1c00bfcc:	02b82e23          	sw	a1,60(a6)
1c00bfd0:	04c82023          	sw	a2,64(a6)
1c00bfd4:	04d82223          	sw	a3,68(a6)
1c00bfd8:	04e82423          	sw	a4,72(a6)
1c00bfdc:	04f82623          	sw	a5,76(a6)
1c00bfe0:	30041073          	csrw	mstatus,s0
1c00bfe4:	40b2                	lw	ra,12(sp)
1c00bfe6:	4422                	lw	s0,8(sp)
1c00bfe8:	0141                	addi	sp,sp,16
1c00bfea:	8082                	ret
1c00bfec:	03032c23          	sw	a6,56(t1)
1c00bff0:	b7f1                	j	1c00bfbc <__pi_hyper_copy_2d+0x34>
1c00bff2:	02a8a023          	sw	a0,32(a7)
1c00bff6:	02c8a223          	sw	a2,36(a7)
1c00bffa:	8542                	mv	a0,a6
1c00bffc:	04f6d633          	p.minu	a2,a3,a5
1c00c000:	0108ae23          	sw	a6,28(a7)
1c00c004:	02b8a423          	sw	a1,40(a7)
1c00c008:	02c8a623          	sw	a2,44(a7)
1c00c00c:	02088823          	sb	zero,48(a7)
1c00c010:	0308aa23          	sw	a6,52(a7)
1c00c014:	04d8a023          	sw	a3,64(a7)
1c00c018:	04f8a223          	sw	a5,68(a7)
1c00c01c:	04e8a423          	sw	a4,72(a7)
1c00c020:	cd3ff0ef          	jal	ra,1c00bcf2 <__pi_hyper_copy_misaligned>
1c00c024:	bf75                	j	1c00bfe0 <__pi_hyper_copy_2d+0x58>

1c00c026 <pi_hyper_read_2d_async>:
1c00c026:	8332                	mv	t1,a2
1c00c028:	4510                	lw	a2,8(a0)
1c00c02a:	00080a23          	sb	zero,20(a6)
1c00c02e:	4248                	lw	a0,4(a2)
1c00c030:	00862883          	lw	a7,8(a2)
1c00c034:	862e                	mv	a2,a1
1c00c036:	0506                	slli	a0,a0,0x1
1c00c038:	859a                	mv	a1,t1
1c00c03a:	f4fff06f          	j	1c00bf88 <__pi_hyper_copy_2d>

1c00c03e <pi_hyper_write_2d_async>:
1c00c03e:	8332                	mv	t1,a2
1c00c040:	4510                	lw	a2,8(a0)
1c00c042:	00080a23          	sb	zero,20(a6)
1c00c046:	4248                	lw	a0,4(a2)
1c00c048:	00862883          	lw	a7,8(a2)
1c00c04c:	862e                	mv	a2,a1
1c00c04e:	0506                	slli	a0,a0,0x1
1c00c050:	859a                	mv	a1,t1
1c00c052:	0505                	addi	a0,a0,1
1c00c054:	f35ff06f          	j	1c00bf88 <__pi_hyper_copy_2d>

1c00c058 <__rt_hyper_resume_emu_task>:
  __pi_hyper_copy_misaligned(__rt_hyper_pending_emu_task);
1c00c058:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
1c00c05c:	c97ff06f          	j	1c00bcf2 <__pi_hyper_copy_misaligned>

1c00c060 <__rt_hyper_resume_copy>:
  exec_pending_task();
1c00c060:	c41ff06f          	j	1c00bca0 <exec_pending_task>

1c00c064 <__rt_hyper_init>:
  __pi_hyper_cluster_reqs_first = NULL;
1c00c064:	1c00f737          	lui	a4,0x1c00f
  __rt_hyper_end_task = NULL;
1c00c068:	30800793          	li	a5,776
  __pi_hyper_cluster_reqs_first = NULL;
1c00c06c:	5e072623          	sw	zero,1516(a4) # 1c00f5ec <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c00c070:	577d                	li	a4,-1
1c00c072:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c00c074:	1c00f737          	lui	a4,0x1c00f
  __rt_hyper_end_task = NULL;
1c00c078:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c00c07c:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c00c080:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c00c084:	5e072823          	sw	zero,1520(a4) # 1c00f5f0 <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c00c088:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c00c08c:	0407a023          	sw	zero,64(a5)
}
1c00c090:	8082                	ret

1c00c092 <pi_cpi_conf_init>:
1c00c092:	20000793          	li	a5,512
1c00c096:	00f51223          	sh	a5,4(a0)
1c00c09a:	8082                	ret

1c00c09c <pi_cpi_open>:
1c00c09c:	414c                	lw	a1,4(a0)
1c00c09e:	1c00f737          	lui	a4,0x1c00f
1c00c0a2:	43870713          	addi	a4,a4,1080 # 1c00f438 <__rt_cpi>
1c00c0a6:	0045c783          	lbu	a5,4(a1)
1c00c0aa:	00579693          	slli	a3,a5,0x5
1c00c0ae:	96ba                	add	a3,a3,a4
1c00c0b0:	c514                	sw	a3,8(a0)
1c00c0b2:	0796                	slli	a5,a5,0x5
1c00c0b4:	4525                	li	a0,9
1c00c0b6:	00a767a3          	p.sw	a0,a5(a4)
1c00c0ba:	42d8                	lw	a4,4(a3)
1c00c0bc:	00170793          	addi	a5,a4,1
1c00c0c0:	c2dc                	sw	a5,4(a3)
1c00c0c2:	1a1027b7          	lui	a5,0x1a102
1c00c0c6:	48078513          	addi	a0,a5,1152 # 1a102480 <__l1_end+0xa10243c>
1c00c0ca:	c688                	sw	a0,8(a3)
1c00c0cc:	0055c583          	lbu	a1,5(a1)
1c00c0d0:	00b68e23          	sb	a1,28(a3)
1c00c0d4:	e71d                	bnez	a4,1c00c102 <pi_cpi_open+0x66>
1c00c0d6:	1a106637          	lui	a2,0x1a106
1c00c0da:	00862703          	lw	a4,8(a2) # 1a106008 <__l1_end+0xa105fc4>
1c00c0de:	c1273733          	p.bclr	a4,a4,0,18
1c00c0e2:	00e62423          	sw	a4,8(a2)
1c00c0e6:	78078793          	addi	a5,a5,1920
1c00c0ea:	4398                	lw	a4,0(a5)
1c00c0ec:	c0974733          	p.bset	a4,a4,0,9
1c00c0f0:	c398                	sw	a4,0(a5)
1c00c0f2:	1c0007b7          	lui	a5,0x1c000
1c00c0f6:	52078793          	addi	a5,a5,1312 # 1c000520 <__rt_udma_handle_copy>
1c00c0fa:	28f02623          	sw	a5,652(zero) # 28c <__cluster_text_size+0x80>
1c00c0fe:	26d02823          	sw	a3,624(zero) # 270 <__cluster_text_size+0x64>
1c00c102:	4501                	li	a0,0
1c00c104:	8082                	ret

1c00c106 <pi_cpi_close>:
1c00c106:	4514                	lw	a3,8(a0)
1c00c108:	42d8                	lw	a4,4(a3)
1c00c10a:	4290                	lw	a2,0(a3)
1c00c10c:	177d                	addi	a4,a4,-1
1c00c10e:	c2d8                	sw	a4,4(a3)
1c00c110:	ef15                	bnez	a4,1c00c14c <pi_cpi_close+0x46>
1c00c112:	00161713          	slli	a4,a2,0x1
1c00c116:	47fd                	li	a5,31
1c00c118:	46a1                	li	a3,8
1c00c11a:	00e7d463          	ble	a4,a5,1c00c122 <pi_cpi_close+0x1c>
1c00c11e:	1701                	addi	a4,a4,-32
1c00c120:	4691                	li	a3,4
1c00c122:	1a1065b7          	lui	a1,0x1a106
1c00c126:	20d5f503          	p.lw	a0,a3(a1)
1c00c12a:	4785                	li	a5,1
1c00c12c:	00e79733          	sll	a4,a5,a4
1c00c130:	8f49                	or	a4,a4,a0
1c00c132:	00e5e6a3          	p.sw	a4,a3(a1)
1c00c136:	1a102737          	lui	a4,0x1a102
1c00c13a:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00c13e:	4314                	lw	a3,0(a4)
1c00c140:	00c797b3          	sll	a5,a5,a2
1c00c144:	fff7c793          	not	a5,a5
1c00c148:	8ff5                	and	a5,a5,a3
1c00c14a:	c31c                	sw	a5,0(a4)
1c00c14c:	8082                	ret

1c00c14e <pi_cpi_capture_async>:
1c00c14e:	8732                	mv	a4,a2
1c00c150:	4510                	lw	a2,8(a0)
1c00c152:	1141                	addi	sp,sp,-16
1c00c154:	8836                	mv	a6,a3
1c00c156:	c606                	sw	ra,12(sp)
1c00c158:	c422                	sw	s0,8(sp)
1c00c15a:	30047473          	csrrci	s0,mstatus,8
1c00c15e:	00068a23          	sb	zero,20(a3)
1c00c162:	00062883          	lw	a7,0(a2)
1c00c166:	01c64783          	lbu	a5,28(a2)
1c00c16a:	86ae                	mv	a3,a1
1c00c16c:	0631                	addi	a2,a2,12
1c00c16e:	00189593          	slli	a1,a7,0x1
1c00c172:	8542                	mv	a0,a6
1c00c174:	1a5000ef          	jal	ra,1c00cb18 <__rt_udma_copy_enqueue>
1c00c178:	30041073          	csrw	mstatus,s0
1c00c17c:	40b2                	lw	ra,12(sp)
1c00c17e:	4422                	lw	s0,8(sp)
1c00c180:	0141                	addi	sp,sp,16
1c00c182:	8082                	ret

1c00c184 <__rt_cpi_init>:

static void __attribute__((constructor)) __rt_cpi_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_CAM; i++)
  {
    __rt_cpi[i].open_count = 0;
1c00c184:	1c00f5b7          	lui	a1,0x1c00f
1c00c188:	43858593          	addi	a1,a1,1080 # 1c00f438 <__rt_cpi>
1c00c18c:	0005a223          	sw	zero,4(a1)
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_CAM_ID(0) + i), &__rt_cpi[i].channel);
1c00c190:	4549                	li	a0,18
1c00c192:	05b1                	addi	a1,a1,12
1c00c194:	1d90006f          	j	1c00cb6c <__rt_udma_channel_init>

1c00c198 <soc_eu_fcEventMask_setEvent>:
  unsigned int reg;
  if (evt >= 32) {
    reg = msbReg;
    evt -= 32;
  } else {
    reg = lsbReg;
1c00c198:	47fd                	li	a5,31
1c00c19a:	4721                	li	a4,8
1c00c19c:	00a7d463          	ble	a0,a5,1c00c1a4 <soc_eu_fcEventMask_setEvent+0xc>
1c00c1a0:	1501                	addi	a0,a0,-32
1c00c1a2:	4711                	li	a4,4
1c00c1a4:	1a1066b7          	lui	a3,0x1a106
1c00c1a8:	20e6f603          	p.lw	a2,a4(a3)
1c00c1ac:	4785                	li	a5,1
1c00c1ae:	00a79533          	sll	a0,a5,a0
1c00c1b2:	fff54513          	not	a0,a0
1c00c1b6:	8d71                	and	a0,a0,a2
1c00c1b8:	00a6e723          	p.sw	a0,a4(a3)
1c00c1bc:	8082                	ret

1c00c1be <pi_task_wait_on.isra.3>:
1c00c1be:	1141                	addi	sp,sp,-16
1c00c1c0:	c422                	sw	s0,8(sp)
1c00c1c2:	c226                	sw	s1,4(sp)
1c00c1c4:	c606                	sw	ra,12(sp)
1c00c1c6:	c04a                	sw	s2,0(sp)
1c00c1c8:	842a                	mv	s0,a0
1c00c1ca:	00040783          	lb	a5,0(s0)
1c00c1ce:	c799                	beqz	a5,1c00c1dc <pi_task_wait_on.isra.3+0x1e>
1c00c1d0:	40b2                	lw	ra,12(sp)
1c00c1d2:	4422                	lw	s0,8(sp)
1c00c1d4:	4492                	lw	s1,4(sp)
1c00c1d6:	4902                	lw	s2,0(sp)
1c00c1d8:	0141                	addi	sp,sp,16
1c00c1da:	8082                	ret
1c00c1dc:	30047973          	csrrci	s2,mstatus,8
1c00c1e0:	4585                	li	a1,1
1c00c1e2:	01c00513          	li	a0,28
1c00c1e6:	c4afe0ef          	jal	ra,1c00a630 <__rt_event_execute>
1c00c1ea:	30091073          	csrw	mstatus,s2
1c00c1ee:	bff1                	j	1c00c1ca <pi_task_wait_on.isra.3+0xc>

1c00c1f0 <pi_i2c_write_async>:
1c00c1f0:	30047873          	csrrci	a6,mstatus,8
1c00c1f4:	00070a23          	sb	zero,20(a4)
1c00c1f8:	451c                	lw	a5,8(a0)
1c00c1fa:	4388                	lw	a0,0(a5)
1c00c1fc:	c105                	beqz	a0,1c00c21c <pi_i2c_write_async+0x2c>
1c00c1fe:	c334                	sw	a3,64(a4)
1c00c200:	43d4                	lw	a3,4(a5)
1c00c202:	df0c                	sw	a1,56(a4)
1c00c204:	df50                	sw	a2,60(a4)
1c00c206:	ca89                	beqz	a3,1c00c218 <pi_i2c_write_async+0x28>
1c00c208:	4794                	lw	a3,8(a5)
1c00c20a:	ced8                	sw	a4,28(a3)
1c00c20c:	c798                	sw	a4,8(a5)
1c00c20e:	00072e23          	sw	zero,28(a4)
1c00c212:	30081073          	csrw	mstatus,a6
1c00c216:	8082                	ret
1c00c218:	c3d8                	sw	a4,4(a5)
1c00c21a:	bfcd                	j	1c00c20c <pi_i2c_write_async+0x1c>
1c00c21c:	c398                	sw	a4,0(a5)
1c00c21e:	1c000737          	lui	a4,0x1c000
1c00c222:	0ac70713          	addi	a4,a4,172 # 1c0000ac <__rt_i2c_step1>
1c00c226:	cf98                	sw	a4,24(a5)
1c00c228:	fc16b733          	p.bclr	a4,a3,30,1
1c00c22c:	c759                	beqz	a4,1c00c2ba <pi_i2c_write_async+0xca>
1c00c22e:	1c000737          	lui	a4,0x1c000
1c00c232:	0e070713          	addi	a4,a4,224 # 1c0000e0 <__rt_i2c_step3>
1c00c236:	cfd8                	sw	a4,28(a5)
1c00c238:	5701                	li	a4,-32
1c00c23a:	02e78223          	sb	a4,36(a5)
1c00c23e:	43b8                	lw	a4,64(a5)
1c00c240:	8a89                	andi	a3,a3,2
1c00c242:	00875513          	srli	a0,a4,0x8
1c00c246:	02a782a3          	sb	a0,37(a5)
1c00c24a:	02e78323          	sb	a4,38(a5)
1c00c24e:	450d                	li	a0,3
1c00c250:	ea89                	bnez	a3,1c00c262 <pi_i2c_write_async+0x72>
1c00c252:	7761                	lui	a4,0xffff8
1c00c254:	02e793a3          	sh	a4,39(a5)
1c00c258:	0397c703          	lbu	a4,57(a5)
1c00c25c:	4519                	li	a0,6
1c00c25e:	02e784a3          	sb	a4,41(a5)
1c00c262:	4705                	li	a4,1
1c00c264:	00c75c63          	ble	a2,a4,1c00c27c <pi_i2c_write_async+0x8c>
1c00c268:	00a78733          	add	a4,a5,a0
1c00c26c:	fc000693          	li	a3,-64
1c00c270:	02d70223          	sb	a3,36(a4) # ffff8024 <pulp__FC+0xffff8025>
1c00c274:	86b2                	mv	a3,a2
1c00c276:	02d702a3          	sb	a3,37(a4)
1c00c27a:	0509                	addi	a0,a0,2
1c00c27c:	00a78733          	add	a4,a5,a0
1c00c280:	f8000693          	li	a3,-128
1c00c284:	02d70223          	sb	a3,36(a4)
1c00c288:	5bd4                	lw	a3,52(a5)
1c00c28a:	1a1028b7          	lui	a7,0x1a102
1c00c28e:	cb8c                	sw	a1,16(a5)
1c00c290:	0685                	addi	a3,a3,1
1c00c292:	4016d713          	srai	a4,a3,0x1
1c00c296:	071e                	slli	a4,a4,0x7
1c00c298:	0692                	slli	a3,a3,0x4
1c00c29a:	9746                	add	a4,a4,a7
1c00c29c:	8ac1                	andi	a3,a3,16
1c00c29e:	9736                	add	a4,a4,a3
1c00c2a0:	c7d8                	sw	a4,12(a5)
1c00c2a2:	cbd0                	sw	a2,20(a5)
1c00c2a4:	02478793          	addi	a5,a5,36
1c00c2a8:	00f72023          	sw	a5,0(a4)
1c00c2ac:	0505                	addi	a0,a0,1
1c00c2ae:	00a72223          	sw	a0,4(a4)
1c00c2b2:	47c1                	li	a5,16
1c00c2b4:	00f72423          	sw	a5,8(a4)
1c00c2b8:	bfa9                	j	1c00c212 <pi_i2c_write_async+0x22>
1c00c2ba:	1c000737          	lui	a4,0x1c000
1c00c2be:	0c270713          	addi	a4,a4,194 # 1c0000c2 <__rt_i2c_step2>
1c00c2c2:	bf95                	j	1c00c236 <pi_i2c_write_async+0x46>

1c00c2c4 <pi_i2c_write>:
1c00c2c4:	7175                	addi	sp,sp,-144
1c00c2c6:	4785                	li	a5,1
1c00c2c8:	870a                	mv	a4,sp
1c00c2ca:	c706                	sw	ra,140(sp)
1c00c2cc:	cc3e                	sw	a5,24(sp)
1c00c2ce:	d43e                	sw	a5,40(sp)
1c00c2d0:	c202                	sw	zero,4(sp)
1c00c2d2:	00010a23          	sb	zero,20(sp)
1c00c2d6:	f1bff0ef          	jal	ra,1c00c1f0 <pi_i2c_write_async>
1c00c2da:	0848                	addi	a0,sp,20
1c00c2dc:	ee3ff0ef          	jal	ra,1c00c1be <pi_task_wait_on.isra.3>
1c00c2e0:	40ba                	lw	ra,140(sp)
1c00c2e2:	4501                	li	a0,0
1c00c2e4:	6149                	addi	sp,sp,144
1c00c2e6:	8082                	ret

1c00c2e8 <pi_i2c_read_async>:
1c00c2e8:	300478f3          	csrrci	a7,mstatus,8
1c00c2ec:	00070a23          	sb	zero,20(a4)
1c00c2f0:	451c                	lw	a5,8(a0)
1c00c2f2:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00c2f6:	c398                	sw	a4,0(a5)
1c00c2f8:	1c000737          	lui	a4,0x1c000
1c00c2fc:	4fc70713          	addi	a4,a4,1276 # 1c0004fc <udma_event_handler_end>
1c00c300:	cf98                	sw	a4,24(a5)
1c00c302:	5701                	li	a4,-32
1c00c304:	02e78223          	sb	a4,36(a5)
1c00c308:	43b8                	lw	a4,64(a5)
1c00c30a:	00875513          	srli	a0,a4,0x8
1c00c30e:	02e78323          	sb	a4,38(a5)
1c00c312:	7761                	lui	a4,0xffff8
1c00c314:	02e793a3          	sh	a4,39(a5)
1c00c318:	0397c703          	lbu	a4,57(a5)
1c00c31c:	02a782a3          	sb	a0,37(a5)
1c00c320:	c0074733          	p.bset	a4,a4,0,0
1c00c324:	02e784a3          	sb	a4,41(a5)
1c00c328:	4505                	li	a0,1
1c00c32a:	4719                	li	a4,6
1c00c32c:	00c55f63          	ble	a2,a0,1c00c34a <pi_i2c_read_async+0x62>
1c00c330:	fc000713          	li	a4,-64
1c00c334:	02e78523          	sb	a4,42(a5)
1c00c338:	fff60713          	addi	a4,a2,-1
1c00c33c:	02e785a3          	sb	a4,43(a5)
1c00c340:	04000713          	li	a4,64
1c00c344:	02e78623          	sb	a4,44(a5)
1c00c348:	4725                	li	a4,9
1c00c34a:	00e78833          	add	a6,a5,a4
1c00c34e:	06000313          	li	t1,96
1c00c352:	02680223          	sb	t1,36(a6)
1c00c356:	00170513          	addi	a0,a4,1 # ffff8001 <pulp__FC+0xffff8002>
1c00c35a:	ea81                	bnez	a3,1c00c36a <pi_i2c_read_async+0x82>
1c00c35c:	953e                	add	a0,a0,a5
1c00c35e:	02000693          	li	a3,32
1c00c362:	02d50223          	sb	a3,36(a0)
1c00c366:	00270513          	addi	a0,a4,2
1c00c36a:	5bd4                	lw	a3,52(a5)
1c00c36c:	1a102837          	lui	a6,0x1a102
1c00c370:	4016d713          	srai	a4,a3,0x1
1c00c374:	071e                	slli	a4,a4,0x7
1c00c376:	0692                	slli	a3,a3,0x4
1c00c378:	9742                	add	a4,a4,a6
1c00c37a:	8ac1                	andi	a3,a3,16
1c00c37c:	9736                	add	a4,a4,a3
1c00c37e:	00b72023          	sw	a1,0(a4)
1c00c382:	00c72223          	sw	a2,4(a4)
1c00c386:	46c1                	li	a3,16
1c00c388:	00d72423          	sw	a3,8(a4)
1c00c38c:	0741                	addi	a4,a4,16
1c00c38e:	02478793          	addi	a5,a5,36
1c00c392:	00f72023          	sw	a5,0(a4)
1c00c396:	00a72223          	sw	a0,4(a4)
1c00c39a:	00d72423          	sw	a3,8(a4)
1c00c39e:	30089073          	csrw	mstatus,a7
1c00c3a2:	8082                	ret

1c00c3a4 <pi_i2c_read>:
1c00c3a4:	7175                	addi	sp,sp,-144
1c00c3a6:	4785                	li	a5,1
1c00c3a8:	870a                	mv	a4,sp
1c00c3aa:	c706                	sw	ra,140(sp)
1c00c3ac:	cc3e                	sw	a5,24(sp)
1c00c3ae:	d43e                	sw	a5,40(sp)
1c00c3b0:	c202                	sw	zero,4(sp)
1c00c3b2:	00010a23          	sb	zero,20(sp)
1c00c3b6:	f33ff0ef          	jal	ra,1c00c2e8 <pi_i2c_read_async>
1c00c3ba:	0848                	addi	a0,sp,20
1c00c3bc:	e03ff0ef          	jal	ra,1c00c1be <pi_task_wait_on.isra.3>
1c00c3c0:	40ba                	lw	ra,140(sp)
1c00c3c2:	4501                	li	a0,0
1c00c3c4:	6149                	addi	sp,sp,144
1c00c3c6:	8082                	ret

1c00c3c8 <pi_i2c_open>:
1c00c3c8:	7179                	addi	sp,sp,-48
1c00c3ca:	d606                	sw	ra,44(sp)
1c00c3cc:	d422                	sw	s0,40(sp)
1c00c3ce:	d226                	sw	s1,36(sp)
1c00c3d0:	d04a                	sw	s2,32(sp)
1c00c3d2:	ce4e                	sw	s3,28(sp)
1c00c3d4:	cc52                	sw	s4,24(sp)
1c00c3d6:	ca56                	sw	s5,20(sp)
1c00c3d8:	c85a                	sw	s6,16(sp)
1c00c3da:	c65e                	sw	s7,12(sp)
1c00c3dc:	c462                	sw	s8,8(sp)
1c00c3de:	30047b73          	csrrci	s6,mstatus,8
1c00c3e2:	00452b83          	lw	s7,4(a0)
1c00c3e6:	1c00f9b7          	lui	s3,0x1c00f
1c00c3ea:	16498913          	addi	s2,s3,356 # 1c00f164 <__rt_i2c>
1c00c3ee:	004bca03          	lbu	s4,4(s7)
1c00c3f2:	16498993          	addi	s3,s3,356
1c00c3f6:	100a57b3          	p.exthz	a5,s4
1c00c3fa:	00479413          	slli	s0,a5,0x4
1c00c3fe:	943e                	add	s0,s0,a5
1c00c400:	040a                	slli	s0,s0,0x2
1c00c402:	04400793          	li	a5,68
1c00c406:	944a                	add	s0,s0,s2
1c00c408:	42fa0933          	p.mac	s2,s4,a5
1c00c40c:	c500                	sw	s0,8(a0)
1c00c40e:	005a0493          	addi	s1,s4,5
1c00c412:	00149c13          	slli	s8,s1,0x1
1c00c416:	03894783          	lbu	a5,56(s2)
1c00c41a:	0785                	addi	a5,a5,1
1c00c41c:	0ff7f793          	andi	a5,a5,255
1c00c420:	02f90c23          	sb	a5,56(s2)
1c00c424:	0417bb63          	p.bneimm	a5,1,1c00c47a <pi_i2c_open+0xb2>
1c00c428:	1a102737          	lui	a4,0x1a102
1c00c42c:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00c430:	4314                	lw	a3,0(a4)
1c00c432:	009797b3          	sll	a5,a5,s1
1c00c436:	8562                	mv	a0,s8
1c00c438:	8fd5                	or	a5,a5,a3
1c00c43a:	c31c                	sw	a5,0(a4)
1c00c43c:	d5dff0ef          	jal	ra,1c00c198 <soc_eu_fcEventMask_setEvent>
1c00c440:	001c0a93          	addi	s5,s8,1
1c00c444:	8556                	mv	a0,s5
1c00c446:	d53ff0ef          	jal	ra,1c00c198 <soc_eu_fcEventMask_setEvent>
1c00c44a:	e3ff4517          	auipc	a0,0xe3ff4
1c00c44e:	be650513          	addi	a0,a0,-1050 # 30 <periph_channels>
1c00c452:	049a                	slli	s1,s1,0x6
1c00c454:	1c0007b7          	lui	a5,0x1c000
1c00c458:	94aa                	add	s1,s1,a0
1c00c45a:	0ee78793          	addi	a5,a5,238 # 1c0000ee <__rt_i2c_handle_rx_copy>
1c00c45e:	ccdc                	sw	a5,28(s1)
1c00c460:	0a96                	slli	s5,s5,0x5
1c00c462:	1c0007b7          	lui	a5,0x1c000
1c00c466:	c080                	sw	s0,0(s1)
1c00c468:	9556                	add	a0,a0,s5
1c00c46a:	0a078793          	addi	a5,a5,160 # 1c0000a0 <__rt_i2c_handle_tx_copy>
1c00c46e:	cd5c                	sw	a5,28(a0)
1c00c470:	c100                	sw	s0,0(a0)
1c00c472:	00092023          	sw	zero,0(s2)
1c00c476:	00092223          	sw	zero,4(s2)
1c00c47a:	04400793          	li	a5,68
1c00c47e:	874e                	mv	a4,s3
1c00c480:	42fa0733          	p.mac	a4,s4,a5
1c00c484:	4685                	li	a3,1
1c00c486:	87ba                	mv	a5,a4
1c00c488:	03872a23          	sw	s8,52(a4)
1c00c48c:	006bd703          	lhu	a4,6(s7)
1c00c490:	02e78ca3          	sb	a4,57(a5)
1c00c494:	00cba703          	lw	a4,12(s7)
1c00c498:	dfd8                	sw	a4,60(a5)
1c00c49a:	1c00f7b7          	lui	a5,0x1c00f
1c00c49e:	6387a783          	lw	a5,1592(a5) # 1c00f638 <__rt_freq_domains>
1c00c4a2:	17fd                	addi	a5,a5,-1
1c00c4a4:	97ba                	add	a5,a5,a4
1c00c4a6:	070a                	slli	a4,a4,0x2
1c00c4a8:	02e7d7b3          	divu	a5,a5,a4
1c00c4ac:	4701                	li	a4,0
1c00c4ae:	00f6d463          	ble	a5,a3,1c00c4b6 <pi_i2c_open+0xee>
1c00c4b2:	fff78713          	addi	a4,a5,-1
1c00c4b6:	04400793          	li	a5,68
1c00c4ba:	42fa09b3          	p.mac	s3,s4,a5
1c00c4be:	04e9a023          	sw	a4,64(s3)
1c00c4c2:	300b1073          	csrw	mstatus,s6
1c00c4c6:	50b2                	lw	ra,44(sp)
1c00c4c8:	5422                	lw	s0,40(sp)
1c00c4ca:	5492                	lw	s1,36(sp)
1c00c4cc:	5902                	lw	s2,32(sp)
1c00c4ce:	49f2                	lw	s3,28(sp)
1c00c4d0:	4a62                	lw	s4,24(sp)
1c00c4d2:	4ad2                	lw	s5,20(sp)
1c00c4d4:	4b42                	lw	s6,16(sp)
1c00c4d6:	4bb2                	lw	s7,12(sp)
1c00c4d8:	4c22                	lw	s8,8(sp)
1c00c4da:	4501                	li	a0,0
1c00c4dc:	6145                	addi	sp,sp,48
1c00c4de:	8082                	ret

1c00c4e0 <pi_i2c_conf_init>:


void pi_i2c_conf_init(pi_i2c_conf_t *conf)
{
  conf->cs = 0;
  conf->max_baudrate = 200000;
1c00c4e0:	000317b7          	lui	a5,0x31
1c00c4e4:	d4078793          	addi	a5,a5,-704 # 30d40 <__L1Cl+0x20d40>
  conf->cs = 0;
1c00c4e8:	00051323          	sh	zero,6(a0)
  conf->max_baudrate = 200000;
1c00c4ec:	c55c                	sw	a5,12(a0)
  conf->itf = 0;
1c00c4ee:	00050223          	sb	zero,4(a0)
}
1c00c4f2:	8082                	ret

1c00c4f4 <__rt_i2c_init>:

static void __attribute__((constructor)) __rt_i2c_init()
{
1c00c4f4:	1141                	addi	sp,sp,-16
1c00c4f6:	c226                	sw	s1,4(sp)
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c00c4f8:	1c00f4b7          	lui	s1,0x1c00f
{
1c00c4fc:	c606                	sw	ra,12(sp)
1c00c4fe:	c422                	sw	s0,8(sp)
1c00c500:	c04a                	sw	s2,0(sp)
    __rt_i2c[i].open_count = 0;
1c00c502:	16448413          	addi	s0,s1,356 # 1c00f164 <__rt_i2c>
    __rt_i2c[i].udma_stop_cmd = I2C_CMD_STOP;
1c00c506:	02000913          	li	s2,32
1c00c50a:	03242023          	sw	s2,32(s0)
    __rt_i2c[i].open_count = 0;
1c00c50e:	02040c23          	sb	zero,56(s0)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c00c512:	16448593          	addi	a1,s1,356
1c00c516:	4529                	li	a0,10
1c00c518:	25b5                	jal	1c00cb84 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c00c51a:	16448593          	addi	a1,s1,356
1c00c51e:	452d                	li	a0,11
1c00c520:	2595                	jal	1c00cb84 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c00c522:	04440413          	addi	s0,s0,68
    __rt_i2c[i].udma_stop_cmd = I2C_CMD_STOP;
1c00c526:	03242023          	sw	s2,32(s0)
    __rt_i2c[i].open_count = 0;
1c00c52a:	02040c23          	sb	zero,56(s0)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i), &__rt_i2c[i]);
1c00c52e:	4531                	li	a0,12
1c00c530:	85a2                	mv	a1,s0
1c00c532:	2d89                	jal	1c00cb84 <__rt_udma_channel_reg_data>
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c00c534:	85a2                	mv	a1,s0
  }
}
1c00c536:	4422                	lw	s0,8(sp)
1c00c538:	40b2                	lw	ra,12(sp)
1c00c53a:	4492                	lw	s1,4(sp)
1c00c53c:	4902                	lw	s2,0(sp)
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c00c53e:	4535                	li	a0,13
}
1c00c540:	0141                	addi	sp,sp,16
    __rt_udma_channel_reg_data(UDMA_EVENT_ID(ARCHI_UDMA_I2C_ID(0) + i)+1, &__rt_i2c[i]);
1c00c542:	a589                	j	1c00cb84 <__rt_udma_channel_reg_data>

1c00c544 <__pi_uart_flow_control_enable>:
}

static inline void plp_uart_tx_enable(int channel)
{
  unsigned int setup = plp_uart_reg_read(channel, UART_SETUP_OFFSET);
  setup |= UART_TX_ENA;
1c00c544:	7179                	addi	sp,sp,-48
1c00c546:	d422                	sw	s0,40(sp)
1c00c548:	d04a                	sw	s2,32(sp)
1c00c54a:	03850413          	addi	s0,a0,56
1c00c54e:	892a                	mv	s2,a0
1c00c550:	0808                	addi	a0,sp,16
1c00c552:	d606                	sw	ra,44(sp)
1c00c554:	d226                	sw	s1,36(sp)
1c00c556:	c802                	sw	zero,16(sp)
1c00c558:	ca02                	sw	zero,20(sp)
1c00c55a:	cc02                	sw	zero,24(sp)
1c00c55c:	00011e23          	sh	zero,28(sp)
1c00c560:	00010f23          	sb	zero,30(sp)
1c00c564:	2535                	jal	1c00cb90 <pi_pwm_conf_init>
1c00c566:	4789                	li	a5,2
1c00c568:	00f12aa3          	sw	a5,21(sp)
1c00c56c:	080c                	addi	a1,sp,16
1c00c56e:	40000793          	li	a5,1024
1c00c572:	8522                	mv	a0,s0
1c00c574:	00f12d23          	sw	a5,26(sp)
1c00c578:	00010a23          	sb	zero,20(sp)
1c00c57c:	a35fd0ef          	jal	ra,1c009fb0 <pi_open_from_conf>
1c00c580:	8522                	mv	a0,s0
1c00c582:	2d31                	jal	1c00cb9e <pi_pwm_open>
1c00c584:	84aa                	mv	s1,a0
1c00c586:	c105                	beqz	a0,1c00c5a6 <__pi_uart_flow_control_enable+0x62>
1c00c588:	85aa                	mv	a1,a0
1c00c58a:	1c00f537          	lui	a0,0x1c00f
1c00c58e:	dec50513          	addi	a0,a0,-532 # 1c00edec <__hyper_pad+0x34>
1c00c592:	0a4010ef          	jal	ra,1c00d636 <printf>
1c00c596:	54d5                	li	s1,-11
1c00c598:	50b2                	lw	ra,44(sp)
1c00c59a:	5422                	lw	s0,40(sp)
1c00c59c:	8526                	mv	a0,s1
1c00c59e:	5902                	lw	s2,32(sp)
1c00c5a0:	5492                	lw	s1,36(sp)
1c00c5a2:	6145                	addi	sp,sp,48
1c00c5a4:	8082                	ret
1c00c5a6:	4601                	li	a2,0
1c00c5a8:	4589                	li	a1,2
1c00c5aa:	8522                	mv	a0,s0
1c00c5ac:	2551                	jal	1c00cc30 <pi_pwm_ioctl>
1c00c5ae:	57fd                	li	a5,-1
1c00c5b0:	00f11223          	sh	a5,4(sp)
1c00c5b4:	01512783          	lw	a5,21(sp)
1c00c5b8:	0050                	addi	a2,sp,4
1c00c5ba:	458d                	li	a1,3
1c00c5bc:	8522                	mv	a0,s0
1c00c5be:	00f12323          	sw	a5,6(sp)
1c00c5c2:	00012523          	sw	zero,10(sp)
1c00c5c6:	25ad                	jal	1c00cc30 <pi_pwm_ioctl>
1c00c5c8:	4611                	li	a2,4
1c00c5ca:	4581                	li	a1,0
1c00c5cc:	8522                	mv	a0,s0
1c00c5ce:	258d                	jal	1c00cc30 <pi_pwm_ioctl>
1c00c5d0:	4641                	li	a2,16
1c00c5d2:	4581                	li	a1,0
1c00c5d4:	8522                	mv	a0,s0
1c00c5d6:	2da9                	jal	1c00cc30 <pi_pwm_ioctl>
1c00c5d8:	4605                	li	a2,1
1c00c5da:	4581                	li	a1,0
1c00c5dc:	8522                	mv	a0,s0
1c00c5de:	2d89                	jal	1c00cc30 <pi_pwm_ioctl>
1c00c5e0:	4581                	li	a1,0
1c00c5e2:	4565                	li	a0,25
1c00c5e4:	a2eff0ef          	jal	ra,1c00b812 <pi_pad_set_function>
1c00c5e8:	800005b7          	lui	a1,0x80000
1c00c5ec:	4601                	li	a2,0
1c00c5ee:	10158593          	addi	a1,a1,257 # 80000101 <pulp__FC+0x80000102>
1c00c5f2:	4501                	li	a0,0
1c00c5f4:	7a6000ef          	jal	ra,1c00cd9a <pi_gpio_pin_configure>
1c00c5f8:	4601                	li	a2,0
1c00c5fa:	800005b7          	lui	a1,0x80000
1c00c5fe:	4501                	li	a0,0
1c00c600:	79a000ef          	jal	ra,1c00cd9a <pi_gpio_pin_configure>
1c00c604:	4785                	li	a5,1
1c00c606:	00f90b23          	sb	a5,22(s2)
1c00c60a:	b779                	j	1c00c598 <__pi_uart_flow_control_enable+0x54>

1c00c60c <__rt_uart_setup>:
1c00c60c:	01254783          	lbu	a5,18(a0)
1c00c610:	01054683          	lbu	a3,16(a0)
1c00c614:	01154703          	lbu	a4,17(a0)
1c00c618:	4550                	lw	a2,12(a0)
1c00c61a:	068e                	slli	a3,a3,0x3
1c00c61c:	0786                	slli	a5,a5,0x1
1c00c61e:	8fd5                	or	a5,a5,a3
1c00c620:	8fd9                	or	a5,a5,a4
1c00c622:	4709                	li	a4,2
1c00c624:	02e64733          	div	a4,a2,a4
1c00c628:	01454683          	lbu	a3,20(a0)
1c00c62c:	06a2                	slli	a3,a3,0x8
1c00c62e:	8fd5                	or	a5,a5,a3
1c00c630:	01354683          	lbu	a3,19(a0)
1c00c634:	06a6                	slli	a3,a3,0x9
1c00c636:	8fd5                	or	a5,a5,a3
1c00c638:	1c00f6b7          	lui	a3,0x1c00f
1c00c63c:	6386a683          	lw	a3,1592(a3) # 1c00f638 <__rt_freq_domains>
1c00c640:	9736                	add	a4,a4,a3
1c00c642:	02c75733          	divu	a4,a4,a2
1c00c646:	177d                	addi	a4,a4,-1
1c00c648:	0742                	slli	a4,a4,0x10
1c00c64a:	8fd9                	or	a5,a5,a4
1c00c64c:	1a102737          	lui	a4,0x1a102
1c00c650:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00c654:	8082                	ret

1c00c656 <__rt_uart_setfreq_after>:
1c00c656:	1c00f537          	lui	a0,0x1c00f
1c00c65a:	1ec52783          	lw	a5,492(a0) # 1c00f1ec <__rt_uart>
1c00c65e:	cb99                	beqz	a5,1c00c674 <__rt_uart_setfreq_after+0x1e>
1c00c660:	1141                	addi	sp,sp,-16
1c00c662:	1ec50513          	addi	a0,a0,492
1c00c666:	c606                	sw	ra,12(sp)
1c00c668:	fa5ff0ef          	jal	ra,1c00c60c <__rt_uart_setup>
1c00c66c:	40b2                	lw	ra,12(sp)
1c00c66e:	4501                	li	a0,0
1c00c670:	0141                	addi	sp,sp,16
1c00c672:	8082                	ret
1c00c674:	4501                	li	a0,0
1c00c676:	8082                	ret

1c00c678 <__pi_uart_copy_enqueue_exec_flow_control>:
1c00c678:	7179                	addi	sp,sp,-48
1c00c67a:	ce4e                	sw	s3,28(sp)
1c00c67c:	45bc                	lw	a5,72(a1)
1c00c67e:	0385a983          	lw	s3,56(a1) # 80000038 <pulp__FC+0x80000039>
1c00c682:	d422                	sw	s0,40(sp)
1c00c684:	d04a                	sw	s2,32(sp)
1c00c686:	cc52                	sw	s4,24(sp)
1c00c688:	d606                	sw	ra,44(sp)
1c00c68a:	d226                	sw	s1,36(sp)
1c00c68c:	842a                	mv	s0,a0
1c00c68e:	0405a903          	lw	s2,64(a1)
1c00c692:	99be                	add	s3,s3,a5
1c00c694:	04c5aa03          	lw	s4,76(a1)
1c00c698:	45bc                	lw	a5,72(a1)
1c00c69a:	0785                	addi	a5,a5,1
1c00c69c:	c5bc                	sw	a5,72(a1)
1c00c69e:	41fc                	lw	a5,68(a1)
1c00c6a0:	17fd                	addi	a5,a5,-1
1c00c6a2:	c1fc                	sw	a5,68(a1)
1c00c6a4:	021a3063          	p.bneimm	s4,1,1c00c6c4 <__pi_uart_copy_enqueue_exec_flow_control+0x4c>
1c00c6a8:	800004b7          	lui	s1,0x80000
1c00c6ac:	10148593          	addi	a1,s1,257 # 80000101 <pulp__FC+0x80000102>
1c00c6b0:	0070                	addi	a2,sp,12
1c00c6b2:	4501                	li	a0,0
1c00c6b4:	c602                	sw	zero,12(sp)
1c00c6b6:	2db1                	jal	1c00cd12 <pi_gpio_pin_read>
1c00c6b8:	c62a                	sw	a0,12(sp)
1c00c6ba:	10148493          	addi	s1,s1,257
1c00c6be:	47b2                	lw	a5,12(sp)
1c00c6c0:	0217ae63          	p.beqimm	a5,1,1c00c6fc <__pi_uart_copy_enqueue_exec_flow_control+0x84>
1c00c6c4:	01392023          	sw	s3,0(s2)
1c00c6c8:	4785                	li	a5,1
1c00c6ca:	00f92223          	sw	a5,4(s2)
1c00c6ce:	47c1                	li	a5,16
1c00c6d0:	00f92423          	sw	a5,8(s2)
1c00c6d4:	000a1c63          	bnez	s4,1c00c6ec <__pi_uart_copy_enqueue_exec_flow_control+0x74>
1c00c6d8:	03840413          	addi	s0,s0,56
1c00c6dc:	4609                	li	a2,2
1c00c6de:	4581                	li	a1,0
1c00c6e0:	8522                	mv	a0,s0
1c00c6e2:	23b9                	jal	1c00cc30 <pi_pwm_ioctl>
1c00c6e4:	4605                	li	a2,1
1c00c6e6:	4581                	li	a1,0
1c00c6e8:	8522                	mv	a0,s0
1c00c6ea:	2399                	jal	1c00cc30 <pi_pwm_ioctl>
1c00c6ec:	50b2                	lw	ra,44(sp)
1c00c6ee:	5422                	lw	s0,40(sp)
1c00c6f0:	5492                	lw	s1,36(sp)
1c00c6f2:	5902                	lw	s2,32(sp)
1c00c6f4:	49f2                	lw	s3,28(sp)
1c00c6f6:	4a62                	lw	s4,24(sp)
1c00c6f8:	6145                	addi	sp,sp,48
1c00c6fa:	8082                	ret
1c00c6fc:	0070                	addi	a2,sp,12
1c00c6fe:	85a6                	mv	a1,s1
1c00c700:	4501                	li	a0,0
1c00c702:	2d01                	jal	1c00cd12 <pi_gpio_pin_read>
1c00c704:	c62a                	sw	a0,12(sp)
1c00c706:	bf65                	j	1c00c6be <__pi_uart_copy_enqueue_exec_flow_control+0x46>

1c00c708 <__pi_uart_copy_enqueue_exec.isra.14>:
1c00c708:	5d58                	lw	a4,60(a0)
1c00c70a:	000206b7          	lui	a3,0x20
1c00c70e:	16ed                	addi	a3,a3,-5
1c00c710:	413c                	lw	a5,64(a0)
1c00c712:	5d10                	lw	a2,56(a0)
1c00c714:	04d75733          	p.minu	a4,a4,a3
1c00c718:	5d14                	lw	a3,56(a0)
1c00c71a:	96ba                	add	a3,a3,a4
1c00c71c:	dd14                	sw	a3,56(a0)
1c00c71e:	5d54                	lw	a3,60(a0)
1c00c720:	8e99                	sub	a3,a3,a4
1c00c722:	c174                	sw	a3,68(a0)
1c00c724:	dd54                	sw	a3,60(a0)
1c00c726:	00c7a023          	sw	a2,0(a5)
1c00c72a:	00e7a223          	sw	a4,4(a5)
1c00c72e:	4741                	li	a4,16
1c00c730:	00e7a423          	sw	a4,8(a5)
1c00c734:	8082                	ret

1c00c736 <__pi_uart_copy_enqueue>:
1c00c736:	1141                	addi	sp,sp,-16
1c00c738:	c606                	sw	ra,12(sp)
1c00c73a:	c422                	sw	s0,8(sp)
1c00c73c:	30047473          	csrrci	s0,mstatus,8
1c00c740:	df0c                	sw	a1,56(a4)
1c00c742:	01654803          	lbu	a6,22(a0)
1c00c746:	4785                	li	a5,1
1c00c748:	00081363          	bnez	a6,1c00c74e <__pi_uart_copy_enqueue+0x18>
1c00c74c:	87b2                	mv	a5,a2
1c00c74e:	df5c                	sw	a5,60(a4)
1c00c750:	415c                	lw	a5,4(a0)
1c00c752:	1a1028b7          	lui	a7,0x1a102
1c00c756:	97b6                	add	a5,a5,a3
1c00c758:	4017d593          	srai	a1,a5,0x1
1c00c75c:	059e                	slli	a1,a1,0x7
1c00c75e:	0792                	slli	a5,a5,0x4
1c00c760:	95c6                	add	a1,a1,a7
1c00c762:	8bc1                	andi	a5,a5,16
1c00c764:	97ae                	add	a5,a5,a1
1c00c766:	c33c                	sw	a5,64(a4)
1c00c768:	00081363          	bnez	a6,1c00c76e <__pi_uart_copy_enqueue+0x38>
1c00c76c:	4601                	li	a2,0
1c00c76e:	c370                	sw	a2,68(a4)
1c00c770:	04072423          	sw	zero,72(a4)
1c00c774:	c774                	sw	a3,76(a4)
1c00c776:	00072e23          	sw	zero,28(a4)
1c00c77a:	01850793          	addi	a5,a0,24
1c00c77e:	c299                	beqz	a3,1c00c784 <__pi_uart_copy_enqueue+0x4e>
1c00c780:	02850793          	addi	a5,a0,40
1c00c784:	4394                	lw	a3,0(a5)
1c00c786:	e295                	bnez	a3,1c00c7aa <__pi_uart_copy_enqueue+0x74>
1c00c788:	c398                	sw	a4,0(a5)
1c00c78a:	01654783          	lbu	a5,22(a0)
1c00c78e:	cb91                	beqz	a5,1c00c7a2 <__pi_uart_copy_enqueue+0x6c>
1c00c790:	85ba                	mv	a1,a4
1c00c792:	ee7ff0ef          	jal	ra,1c00c678 <__pi_uart_copy_enqueue_exec_flow_control>
1c00c796:	30041073          	csrw	mstatus,s0
1c00c79a:	40b2                	lw	ra,12(sp)
1c00c79c:	4422                	lw	s0,8(sp)
1c00c79e:	0141                	addi	sp,sp,16
1c00c7a0:	8082                	ret
1c00c7a2:	853a                	mv	a0,a4
1c00c7a4:	f65ff0ef          	jal	ra,1c00c708 <__pi_uart_copy_enqueue_exec.isra.14>
1c00c7a8:	b7fd                	j	1c00c796 <__pi_uart_copy_enqueue+0x60>
1c00c7aa:	4794                	lw	a3,8(a5)
1c00c7ac:	e681                	bnez	a3,1c00c7b4 <__pi_uart_copy_enqueue+0x7e>
1c00c7ae:	c798                	sw	a4,8(a5)
1c00c7b0:	c7d8                	sw	a4,12(a5)
1c00c7b2:	b7d5                	j	1c00c796 <__pi_uart_copy_enqueue+0x60>
1c00c7b4:	47d4                	lw	a3,12(a5)
1c00c7b6:	ced8                	sw	a4,28(a3)
1c00c7b8:	bfe5                	j	1c00c7b0 <__pi_uart_copy_enqueue+0x7a>

1c00c7ba <__rt_uart_wait_tx_done.isra.17>:
1c00c7ba:	1a102737          	lui	a4,0x1a102
1c00c7be:	1141                	addi	sp,sp,-16
1c00c7c0:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021d4>
1c00c7c4:	002046b7          	lui	a3,0x204
1c00c7c8:	431c                	lw	a5,0(a4)
1c00c7ca:	8bc1                	andi	a5,a5,16
1c00c7cc:	e38d                	bnez	a5,1c00c7ee <__rt_uart_wait_tx_done.isra.17+0x34>
1c00c7ce:	1a102737          	lui	a4,0x1a102
1c00c7d2:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021dc>
1c00c7d6:	431c                	lw	a5,0(a4)
1c00c7d8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00c7dc:	ffed                	bnez	a5,1c00c7d6 <__rt_uart_wait_tx_done.isra.17+0x1c>
1c00c7de:	c602                	sw	zero,12(sp)
1c00c7e0:	7cf00713          	li	a4,1999
1c00c7e4:	47b2                	lw	a5,12(sp)
1c00c7e6:	00f75763          	ble	a5,a4,1c00c7f4 <__rt_uart_wait_tx_done.isra.17+0x3a>
1c00c7ea:	0141                	addi	sp,sp,16
1c00c7ec:	8082                	ret
1c00c7ee:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00c7f2:	bfd9                	j	1c00c7c8 <__rt_uart_wait_tx_done.isra.17+0xe>
1c00c7f4:	47b2                	lw	a5,12(sp)
1c00c7f6:	0785                	addi	a5,a5,1
1c00c7f8:	c63e                	sw	a5,12(sp)
1c00c7fa:	b7ed                	j	1c00c7e4 <__rt_uart_wait_tx_done.isra.17+0x2a>

1c00c7fc <__rt_uart_setfreq_before>:
1c00c7fc:	1c00f7b7          	lui	a5,0x1c00f
1c00c800:	1ec7a783          	lw	a5,492(a5) # 1c00f1ec <__rt_uart>
1c00c804:	c385                	beqz	a5,1c00c824 <__rt_uart_setfreq_before+0x28>
1c00c806:	1141                	addi	sp,sp,-16
1c00c808:	c606                	sw	ra,12(sp)
1c00c80a:	fb1ff0ef          	jal	ra,1c00c7ba <__rt_uart_wait_tx_done.isra.17>
1c00c80e:	40b2                	lw	ra,12(sp)
1c00c810:	005007b7          	lui	a5,0x500
1c00c814:	1a102737          	lui	a4,0x1a102
1c00c818:	0799                	addi	a5,a5,6
1c00c81a:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00c81e:	4501                	li	a0,0
1c00c820:	0141                	addi	sp,sp,16
1c00c822:	8082                	ret
1c00c824:	4501                	li	a0,0
1c00c826:	8082                	ret

1c00c828 <pi_task_wait_on.isra.20>:
1c00c828:	1141                	addi	sp,sp,-16
1c00c82a:	c422                	sw	s0,8(sp)
1c00c82c:	c226                	sw	s1,4(sp)
1c00c82e:	c606                	sw	ra,12(sp)
1c00c830:	c04a                	sw	s2,0(sp)
1c00c832:	842a                	mv	s0,a0
1c00c834:	00040783          	lb	a5,0(s0)
1c00c838:	c799                	beqz	a5,1c00c846 <pi_task_wait_on.isra.20+0x1e>
1c00c83a:	40b2                	lw	ra,12(sp)
1c00c83c:	4422                	lw	s0,8(sp)
1c00c83e:	4492                	lw	s1,4(sp)
1c00c840:	4902                	lw	s2,0(sp)
1c00c842:	0141                	addi	sp,sp,16
1c00c844:	8082                	ret
1c00c846:	30047973          	csrrci	s2,mstatus,8
1c00c84a:	4585                	li	a1,1
1c00c84c:	01c00513          	li	a0,28
1c00c850:	de1fd0ef          	jal	ra,1c00a630 <__rt_event_execute>
1c00c854:	30091073          	csrw	mstatus,s2
1c00c858:	bff1                	j	1c00c834 <pi_task_wait_on.isra.20+0xc>

1c00c85a <__pi_uart_handle_copy>:
1c00c85a:	fc153533          	p.bclr	a0,a0,30,1
1c00c85e:	872e                	mv	a4,a1
1c00c860:	01858793          	addi	a5,a1,24
1c00c864:	c119                	beqz	a0,1c00c86a <__pi_uart_handle_copy+0x10>
1c00c866:	02858793          	addi	a5,a1,40
1c00c86a:	438c                	lw	a1,0(a5)
1c00c86c:	41f4                	lw	a3,68(a1)
1c00c86e:	c699                	beqz	a3,1c00c87c <__pi_uart_handle_copy+0x22>
1c00c870:	01674783          	lbu	a5,22(a4)
1c00c874:	c3a1                	beqz	a5,1c00c8b4 <__pi_uart_handle_copy+0x5a>
1c00c876:	853a                	mv	a0,a4
1c00c878:	e01ff06f          	j	1c00c678 <__pi_uart_copy_enqueue_exec_flow_control>
1c00c87c:	30047573          	csrrci	a0,mstatus,8
1c00c880:	01c02803          	lw	a6,28(zero) # 1c <__rt_sched>
1c00c884:	0005a023          	sw	zero,0(a1)
1c00c888:	01c00613          	li	a2,28
1c00c88c:	02080163          	beqz	a6,1c00c8ae <__pi_uart_handle_copy+0x54>
1c00c890:	4254                	lw	a3,4(a2)
1c00c892:	c28c                	sw	a1,0(a3)
1c00c894:	c24c                	sw	a1,4(a2)
1c00c896:	30051073          	csrw	mstatus,a0
1c00c89a:	478c                	lw	a1,8(a5)
1c00c89c:	c38c                	sw	a1,0(a5)
1c00c89e:	cd91                	beqz	a1,1c00c8ba <__pi_uart_handle_copy+0x60>
1c00c8a0:	4794                	lw	a3,8(a5)
1c00c8a2:	4ed4                	lw	a3,28(a3)
1c00c8a4:	c794                	sw	a3,8(a5)
1c00c8a6:	f6e9                	bnez	a3,1c00c870 <__pi_uart_handle_copy+0x16>
1c00c8a8:	0007a623          	sw	zero,12(a5) # 50000c <__L2+0x48000c>
1c00c8ac:	b7d1                	j	1c00c870 <__pi_uart_handle_copy+0x16>
1c00c8ae:	00b02e23          	sw	a1,28(zero) # 1c <__rt_sched>
1c00c8b2:	b7cd                	j	1c00c894 <__pi_uart_handle_copy+0x3a>
1c00c8b4:	852e                	mv	a0,a1
1c00c8b6:	e53ff06f          	j	1c00c708 <__pi_uart_copy_enqueue_exec.isra.14>
1c00c8ba:	8082                	ret

1c00c8bc <pi_uart_conf_init>:
1c00c8bc:	67f1                	lui	a5,0x1c
1c00c8be:	20078793          	addi	a5,a5,512 # 1c200 <__L1Cl+0xc200>
1c00c8c2:	c11c                	sw	a5,0(a0)
1c00c8c4:	010307b7          	lui	a5,0x1030
1c00c8c8:	c15c                	sw	a5,4(a0)
1c00c8ca:	4785                	li	a5,1
1c00c8cc:	00f51423          	sh	a5,8(a0)
1c00c8d0:	00050523          	sb	zero,10(a0)
1c00c8d4:	8082                	ret

1c00c8d6 <pi_uart_open>:
1c00c8d6:	1101                	addi	sp,sp,-32
1c00c8d8:	ce06                	sw	ra,28(sp)
1c00c8da:	cc22                	sw	s0,24(sp)
1c00c8dc:	ca26                	sw	s1,20(sp)
1c00c8de:	c84a                	sw	s2,16(sp)
1c00c8e0:	c64e                	sw	s3,12(sp)
1c00c8e2:	30047973          	csrrci	s2,mstatus,8
1c00c8e6:	4158                	lw	a4,4(a0)
1c00c8e8:	04400593          	li	a1,68
1c00c8ec:	00974603          	lbu	a2,9(a4)
1c00c8f0:	100657b3          	p.exthz	a5,a2
1c00c8f4:	00479693          	slli	a3,a5,0x4
1c00c8f8:	96be                	add	a3,a3,a5
1c00c8fa:	1c00f7b7          	lui	a5,0x1c00f
1c00c8fe:	1ec78793          	addi	a5,a5,492 # 1c00f1ec <__rt_uart>
1c00c902:	843e                	mv	s0,a5
1c00c904:	42b60433          	p.mac	s0,a2,a1
1c00c908:	068a                	slli	a3,a3,0x2
1c00c90a:	00d784b3          	add	s1,a5,a3
1c00c90e:	c504                	sw	s1,8(a0)
1c00c910:	00042983          	lw	s3,0(s0)
1c00c914:	0a099863          	bnez	s3,1c00c9c4 <pi_uart_open+0xee>
1c00c918:	4605                	li	a2,1
1c00c91a:	c010                	sw	a2,0(s0)
1c00c91c:	0047260b          	p.lw	a2,4(a4!)
1c00c920:	06b1                	addi	a3,a3,12
1c00c922:	97b6                	add	a5,a5,a3
1c00c924:	00c7a22b          	p.sw	a2,4(a5!)
1c00c928:	0047268b          	p.lw	a3,4(a4!)
1c00c92c:	00d7a22b          	p.sw	a3,4(a5!)
1c00c930:	4318                	lw	a4,0(a4)
1c00c932:	c398                	sw	a4,0(a5)
1c00c934:	47a1                	li	a5,8
1c00c936:	c05c                	sw	a5,4(s0)
1c00c938:	1a1027b7          	lui	a5,0x1a102
1c00c93c:	02042423          	sw	zero,40(s0)
1c00c940:	02042623          	sw	zero,44(s0)
1c00c944:	02042823          	sw	zero,48(s0)
1c00c948:	02042a23          	sw	zero,52(s0)
1c00c94c:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10273c>
1c00c950:	4398                	lw	a4,0(a5)
1c00c952:	c0474733          	p.bset	a4,a4,0,4
1c00c956:	c398                	sw	a4,0(a5)
1c00c958:	1a1067b7          	lui	a5,0x1a106
1c00c95c:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fc4>
1c00c960:	c0873733          	p.bclr	a4,a4,0,8
1c00c964:	00e7a423          	sw	a4,8(a5)
1c00c968:	0087a703          	lw	a4,8(a5)
1c00c96c:	c0973733          	p.bclr	a4,a4,0,9
1c00c970:	00e7a423          	sw	a4,8(a5)
1c00c974:	1c0007b7          	lui	a5,0x1c000
1c00c978:	65a78793          	addi	a5,a5,1626 # 1c00065a <__pi_uart_handle_copy_asm>
1c00c97c:	8526                	mv	a0,s1
1c00c97e:	14f02623          	sw	a5,332(zero) # 14c <_l1_preload_size+0x10c>
1c00c982:	16f02623          	sw	a5,364(zero) # 16c <_l1_preload_size+0x12c>
1c00c986:	12902823          	sw	s1,304(zero) # 130 <_l1_preload_size+0xf0>
1c00c98a:	14902823          	sw	s1,336(zero) # 150 <_l1_preload_size+0x110>
1c00c98e:	c7fff0ef          	jal	ra,1c00c60c <__rt_uart_setup>
1c00c992:	01644783          	lbu	a5,22(s0)
1c00c996:	c785                	beqz	a5,1c00c9be <pi_uart_open+0xe8>
1c00c998:	8526                	mv	a0,s1
1c00c99a:	babff0ef          	jal	ra,1c00c544 <__pi_uart_flow_control_enable>
1c00c99e:	c105                	beqz	a0,1c00c9be <pi_uart_open+0xe8>
1c00c9a0:	1c00f537          	lui	a0,0x1c00f
1c00c9a4:	e5450513          	addi	a0,a0,-428 # 1c00ee54 <__hyper_pad+0x9c>
1c00c9a8:	2f9000ef          	jal	ra,1c00d4a0 <puts>
1c00c9ac:	59f9                	li	s3,-2
1c00c9ae:	40f2                	lw	ra,28(sp)
1c00c9b0:	4462                	lw	s0,24(sp)
1c00c9b2:	854e                	mv	a0,s3
1c00c9b4:	44d2                	lw	s1,20(sp)
1c00c9b6:	4942                	lw	s2,16(sp)
1c00c9b8:	49b2                	lw	s3,12(sp)
1c00c9ba:	6105                	addi	sp,sp,32
1c00c9bc:	8082                	ret
1c00c9be:	30091073          	csrw	mstatus,s2
1c00c9c2:	b7f5                	j	1c00c9ae <pi_uart_open+0xd8>
1c00c9c4:	59fd                	li	s3,-1
1c00c9c6:	b7e5                	j	1c00c9ae <pi_uart_open+0xd8>

1c00c9c8 <pi_uart_write_async>:
1c00c9c8:	1141                	addi	sp,sp,-16
1c00c9ca:	c606                	sw	ra,12(sp)
1c00c9cc:	00068a23          	sb	zero,20(a3)
1c00c9d0:	4508                	lw	a0,8(a0)
1c00c9d2:	8736                	mv	a4,a3
1c00c9d4:	4685                	li	a3,1
1c00c9d6:	d61ff0ef          	jal	ra,1c00c736 <__pi_uart_copy_enqueue>
1c00c9da:	40b2                	lw	ra,12(sp)
1c00c9dc:	4501                	li	a0,0
1c00c9de:	0141                	addi	sp,sp,16
1c00c9e0:	8082                	ret

1c00c9e2 <pi_uart_write>:
1c00c9e2:	7175                	addi	sp,sp,-144
1c00c9e4:	4785                	li	a5,1
1c00c9e6:	868a                	mv	a3,sp
1c00c9e8:	c522                	sw	s0,136(sp)
1c00c9ea:	c706                	sw	ra,140(sp)
1c00c9ec:	cc3e                	sw	a5,24(sp)
1c00c9ee:	c202                	sw	zero,4(sp)
1c00c9f0:	d43e                	sw	a5,40(sp)
1c00c9f2:	00010a23          	sb	zero,20(sp)
1c00c9f6:	fd3ff0ef          	jal	ra,1c00c9c8 <pi_uart_write_async>
1c00c9fa:	547d                	li	s0,-1
1c00c9fc:	e509                	bnez	a0,1c00ca06 <pi_uart_write+0x24>
1c00c9fe:	842a                	mv	s0,a0
1c00ca00:	0848                	addi	a0,sp,20
1c00ca02:	e27ff0ef          	jal	ra,1c00c828 <pi_task_wait_on.isra.20>
1c00ca06:	8522                	mv	a0,s0
1c00ca08:	40ba                	lw	ra,140(sp)
1c00ca0a:	442a                	lw	s0,136(sp)
1c00ca0c:	6149                	addi	sp,sp,144
1c00ca0e:	8082                	ret

1c00ca10 <__pi_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00ca10:	1c00c5b7          	lui	a1,0x1c00c
{
1c00ca14:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00ca16:	4601                	li	a2,0
1c00ca18:	7fc58593          	addi	a1,a1,2044 # 1c00c7fc <__rt_uart_setfreq_before>
1c00ca1c:	4511                	li	a0,4
{
1c00ca1e:	c606                	sw	ra,12(sp)
1c00ca20:	c422                	sw	s0,8(sp)
1c00ca22:	c226                	sw	s1,4(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00ca24:	efcfd0ef          	jal	ra,1c00a120 <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00ca28:	1c00c5b7          	lui	a1,0x1c00c
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00ca2c:	84aa                	mv	s1,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00ca2e:	4601                	li	a2,0
1c00ca30:	65658593          	addi	a1,a1,1622 # 1c00c656 <__rt_uart_setfreq_after>
1c00ca34:	4515                	li	a0,5


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00ca36:	1c00f437          	lui	s0,0x1c00f
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00ca3a:	ee6fd0ef          	jal	ra,1c00a120 <__rt_cbsys_add>
    __rt_uart[i].open_count = 0;
1c00ca3e:	1ec40413          	addi	s0,s0,492 # 1c00f1ec <__rt_uart>
1c00ca42:	85a2                	mv	a1,s0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00ca44:	8cc9                	or	s1,s1,a0
    __rt_uart[i].open_count = 0;
1c00ca46:	0205a42b          	p.sw	zero,40(a1!)
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_UART_ID(i))+1, &__rt_uart[i].tx_channel);
1c00ca4a:	4525                	li	a0,9
1c00ca4c:	2205                	jal	1c00cb6c <__rt_udma_channel_init>
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_UART_ID(i)), &__rt_uart[i].rx_channel);
1c00ca4e:	01840593          	addi	a1,s0,24
1c00ca52:	4521                	li	a0,8
1c00ca54:	2a21                	jal	1c00cb6c <__rt_udma_channel_init>
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00ca56:	c08d                	beqz	s1,1c00ca78 <__pi_uart_init+0x68>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ca58:	01402673          	csrr	a2,uhartid
1c00ca5c:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00ca60:	40565593          	srai	a1,a2,0x5
1c00ca64:	f265b5b3          	p.bclr	a1,a1,25,6
1c00ca68:	f4563633          	p.bclr	a2,a2,26,5
1c00ca6c:	e0c50513          	addi	a0,a0,-500 # 1c00ee0c <__hyper_pad+0x54>
1c00ca70:	3c7000ef          	jal	ra,1c00d636 <printf>
1c00ca74:	347000ef          	jal	ra,1c00d5ba <abort>
}
1c00ca78:	40b2                	lw	ra,12(sp)
1c00ca7a:	4422                	lw	s0,8(sp)
1c00ca7c:	4492                	lw	s1,4(sp)
1c00ca7e:	0141                	addi	sp,sp,16
1c00ca80:	8082                	ret

1c00ca82 <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ca82:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c00ca86:	4158                	lw	a4,4(a0)
1c00ca88:	1a1047b7          	lui	a5,0x1a104
1c00ca8c:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa1040fc>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c00ca90:	430c                	lw	a1,0(a4)
1c00ca92:	c20c                	sw	a1,0(a2)
1c00ca94:	434c                	lw	a1,4(a4)
1c00ca96:	14478613          	addi	a2,a5,324
1c00ca9a:	14878793          	addi	a5,a5,328
1c00ca9e:	c20c                	sw	a1,0(a2)
1c00caa0:	4718                	lw	a4,8(a4)
1c00caa2:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c00caa4:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c00caa8:	8082                	ret

1c00caaa <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c00caaa:	1c00f537          	lui	a0,0x1c00f
1c00caae:	03850513          	addi	a0,a0,56 # 1c00f038 <__rt_padframe_profiles>
1c00cab2:	fd1ff06f          	j	1c00ca82 <rt_padframe_set>

1c00cab6 <rt_extern_alloc_init>:
  }
  printf("=============================================\n");
}

int rt_extern_alloc_init(rt_extern_alloc_t *a, void *addr, int size)
{
1c00cab6:	1101                	addi	sp,sp,-32
1c00cab8:	c84a                	sw	s2,16(sp)
1c00caba:	ce06                	sw	ra,28(sp)
1c00cabc:	cc22                	sw	s0,24(sp)
1c00cabe:	ca26                	sw	s1,20(sp)
1c00cac0:	892a                	mv	s2,a0
  if (size)
1c00cac2:	c229                	beqz	a2,1c00cb04 <rt_extern_alloc_init+0x4e>
  {
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00cac4:	00758493          	addi	s1,a1,7
1c00cac8:	842e                	mv	s0,a1
  return (rt_alloc_chunk_extern_t *)rt_alloc(RT_ALLOC_FC_DATA, sizeof(rt_alloc_chunk_extern_t));
1c00caca:	4505                	li	a0,1
1c00cacc:	45b1                	li	a1,12
1c00cace:	c632                	sw	a2,12(sp)
1c00cad0:	cddfd0ef          	jal	ra,1c00a7ac <rt_alloc>
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00cad4:	c404b4b3          	p.bclr	s1,s1,2,0
    rt_alloc_chunk_extern_t *chunk = __rt_alloc_chunk();
    if (chunk == NULL) return -1;
1c00cad8:	4632                	lw	a2,12(sp)
1c00cada:	c905                	beqz	a0,1c00cb0a <rt_extern_alloc_init+0x54>
    size = size - (start_addr - (unsigned int)addr);
1c00cadc:	9432                	add	s0,s0,a2
1c00cade:	8c05                	sub	s0,s0,s1
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c00cae0:	4601                	li	a2,0
    if (size > 0) {
1c00cae2:	00805a63          	blez	s0,1c00caf6 <rt_extern_alloc_init+0x40>
      a->first_free = chunk;
1c00cae6:	00a92023          	sw	a0,0(s2)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c00caea:	c4043433          	p.bclr	s0,s0,2,0
1c00caee:	c100                	sw	s0,0(a0)
      chunk->next = NULL;
1c00caf0:	00052223          	sw	zero,4(a0)
      chunk->addr = start_addr;
1c00caf4:	c504                	sw	s1,8(a0)
}
1c00caf6:	40f2                	lw	ra,28(sp)
1c00caf8:	4462                	lw	s0,24(sp)
1c00cafa:	44d2                	lw	s1,20(sp)
1c00cafc:	4942                	lw	s2,16(sp)
1c00cafe:	8532                	mv	a0,a2
1c00cb00:	6105                	addi	sp,sp,32
1c00cb02:	8082                	ret
    a->first_free = NULL;
1c00cb04:	00052023          	sw	zero,0(a0)
1c00cb08:	b7fd                	j	1c00caf6 <rt_extern_alloc_init+0x40>
    if (chunk == NULL) return -1;
1c00cb0a:	567d                	li	a2,-1
1c00cb0c:	b7ed                	j	1c00caf6 <rt_extern_alloc_init+0x40>

1c00cb0e <rt_extern_alloc_deinit>:
  rt_free(RT_ALLOC_FC_DATA, (void *)pt, sizeof(rt_alloc_chunk_extern_t));
1c00cb0e:	410c                	lw	a1,0(a0)
1c00cb10:	4631                	li	a2,12
1c00cb12:	4505                	li	a0,1
1c00cb14:	cc9fd06f          	j	1c00a7dc <rt_free>

1c00cb18 <__rt_udma_copy_enqueue>:
1c00cb18:	4015d813          	srai	a6,a1,0x1
1c00cb1c:	081e                	slli	a6,a6,0x7
1c00cb1e:	1a1028b7          	lui	a7,0x1a102
1c00cb22:	0592                	slli	a1,a1,0x4
1c00cb24:	9846                	add	a6,a6,a7
1c00cb26:	89c1                	andi	a1,a1,16
1c00cb28:	95c2                	add	a1,a1,a6
{
  unsigned int base = hal_udma_channel_base(channel_id);

  // A UDMA channel has 2 slots, enqueue the copy to the UDMA if one of them is available, otherwise
  // put the transfer on hold.
  if (channel->pendings[0] == NULL)
1c00cb2a:	00062803          	lw	a6,0(a2)
1c00cb2e:	00081c63          	bnez	a6,1c00cb46 <__rt_udma_copy_enqueue+0x2e>
  {
    channel->pendings[0] = task;
1c00cb32:	c208                	sw	a0,0(a2)
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_SADDR_OFFSET, l2Addr);
1c00cb34:	00d5a023          	sw	a3,0(a1)
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_SIZE_OFFSET, size);
1c00cb38:	00e5a223          	sw	a4,4(a1)
    plp_udma_enqueue(base, buffer, size, UDMA_CHANNEL_CFG_EN | cfg);
  }
  else if (channel->pendings[1] == NULL)
  {
    channel->pendings[1] = task;
    plp_udma_enqueue(base, buffer, size, UDMA_CHANNEL_CFG_EN | cfg);
1c00cb3c:	c047c7b3          	p.bset	a5,a5,0,4
  ARCHI_WRITE(channelBase, UDMA_CHANNEL_CFG_OFFSET, cfg | UDMA_CHANNEL_CFG_EN);
1c00cb40:	00f5a423          	sw	a5,8(a1)
1c00cb44:	8082                	ret
  else if (channel->pendings[1] == NULL)
1c00cb46:	00462803          	lw	a6,4(a2)
1c00cb4a:	00081463          	bnez	a6,1c00cb52 <__rt_udma_copy_enqueue+0x3a>
    channel->pendings[1] = task;
1c00cb4e:	c248                	sw	a0,4(a2)
1c00cb50:	b7d5                	j	1c00cb34 <__rt_udma_copy_enqueue+0x1c>
  }
  else
  {
    task->implem.data[0] = buffer;
    task->implem.data[1] = size;
    task->implem.data[2] = cfg;
1c00cb52:	c13c                	sw	a5,64(a0)

    if (channel->waitings_first == NULL)
1c00cb54:	461c                	lw	a5,8(a2)
    task->implem.data[0] = buffer;
1c00cb56:	dd14                	sw	a3,56(a0)
    task->implem.data[1] = size;
1c00cb58:	dd58                	sw	a4,60(a0)
    if (channel->waitings_first == NULL)
1c00cb5a:	e791                	bnez	a5,1c00cb66 <__rt_udma_copy_enqueue+0x4e>
      channel->waitings_first = task;
1c00cb5c:	c608                	sw	a0,8(a2)
    else
      channel->waitings_last->implem.next = task;

    channel->waitings_last = task;
1c00cb5e:	c648                	sw	a0,12(a2)
    task->implem.next = NULL;
1c00cb60:	00052e23          	sw	zero,28(a0)
  }
}
1c00cb64:	8082                	ret
      channel->waitings_last->implem.next = task;
1c00cb66:	465c                	lw	a5,12(a2)
1c00cb68:	cfc8                	sw	a0,28(a5)
1c00cb6a:	bfd5                	j	1c00cb5e <__rt_udma_copy_enqueue+0x46>

1c00cb6c <__rt_udma_channel_init>:



void __rt_udma_channel_init(int channel_id, rt_udma_channel_t *channel)
{
  channel->pendings[0] = NULL;
1c00cb6c:	0005a023          	sw	zero,0(a1)
  channel->pendings[1] = NULL;
1c00cb70:	0005a223          	sw	zero,4(a1)
  channel->waitings_first = NULL;
1c00cb74:	0005a423          	sw	zero,8(a1)
  __rt_udma_channels[channel_id] = channel;
1c00cb78:	050a                	slli	a0,a0,0x2
1c00cb7a:	35400793          	li	a5,852
1c00cb7e:	00b7e523          	p.sw	a1,a0(a5)
}
1c00cb82:	8082                	ret

1c00cb84 <__rt_udma_channel_reg_data>:

#ifndef __ZEPHYR__

void __rt_udma_channel_reg_data(int channel_id, void *data)
{
  __rt_udma_channels[channel_id] = data;
1c00cb84:	050a                	slli	a0,a0,0x2
1c00cb86:	35400793          	li	a5,852
1c00cb8a:	00b7e523          	p.sw	a1,a0(a5)
}
1c00cb8e:	8082                	ret

1c00cb90 <pi_pwm_conf_init>:
    {
        th_timer = 0;
    }
    else if (duty_cycle != 100)
    {
        th_timer = (th_hi * (100 - duty_cycle)) / 100;
1c00cb90:	479d                	li	a5,7
1c00cb92:	c11c                	sw	a5,0(a0)
1c00cb94:	00050223          	sb	zero,4(a0)
1c00cb98:	000522a3          	sw	zero,5(a0)
1c00cb9c:	8082                	ret

1c00cb9e <pi_pwm_open>:
1c00cb9e:	30047873          	csrrci	a6,mstatus,8
1c00cba2:	414c                	lw	a1,4(a0)
1c00cba4:	1c00f6b7          	lui	a3,0x1c00f
1c00cba8:	45868693          	addi	a3,a3,1112 # 1c00f458 <__pos_pwm>
1c00cbac:	0045c783          	lbu	a5,4(a1)
1c00cbb0:	0027d613          	srli	a2,a5,0x2
1c00cbb4:	fa27b7b3          	p.bclr	a5,a5,29,2
1c00cbb8:	1007d8b3          	p.exthz	a7,a5
1c00cbbc:	00289713          	slli	a4,a7,0x2
1c00cbc0:	9746                	add	a4,a4,a7
1c00cbc2:	070a                	slli	a4,a4,0x2
1c00cbc4:	05800893          	li	a7,88
1c00cbc8:	43160733          	p.mac	a4,a2,a7
1c00cbcc:	0711                	addi	a4,a4,4
1c00cbce:	9736                	add	a4,a4,a3
1c00cbd0:	c518                	sw	a4,8(a0)
1c00cbd2:	05800713          	li	a4,88
1c00cbd6:	02e60633          	mul	a2,a2,a4
1c00cbda:	4751                	li	a4,20
1c00cbdc:	8532                	mv	a0,a2
1c00cbde:	42e78533          	p.mac	a0,a5,a4
1c00cbe2:	00a68733          	add	a4,a3,a0
1c00cbe6:	4b08                	lw	a0,16(a4)
1c00cbe8:	00150893          	addi	a7,a0,1
1c00cbec:	01172823          	sw	a7,16(a4)
1c00cbf0:	ed05                	bnez	a0,1c00cc28 <pi_pwm_open+0x8a>
1c00cbf2:	96b2                	add	a3,a3,a2
1c00cbf4:	4af0                	lw	a2,84(a3)
1c00cbf6:	0605                	addi	a2,a2,1
1c00cbf8:	caf0                	sw	a2,84(a3)
1c00cbfa:	1a105637          	lui	a2,0x1a105
1c00cbfe:	10462503          	lw	a0,260(a2) # 1a105104 <__l1_end+0xa1050c0>
1c00cc02:	4685                	li	a3,1
1c00cc04:	00f696b3          	sll	a3,a3,a5
1c00cc08:	8ec9                	or	a3,a3,a0
1c00cc0a:	10d62223          	sw	a3,260(a2)
1c00cc0e:	006846b7          	lui	a3,0x684
1c00cc12:	14068693          	addi	a3,a3,320 # 684140 <__L2+0x604140>
1c00cc16:	97b6                	add	a5,a5,a3
1c00cc18:	0055a683          	lw	a3,5(a1)
1c00cc1c:	079a                	slli	a5,a5,0x6
1c00cc1e:	cb5c                	sw	a5,20(a4)
1c00cc20:	c754                	sw	a3,12(a4)
1c00cc22:	6705                	lui	a4,0x1
1c00cc24:	00e7a223          	sw	a4,4(a5)
1c00cc28:	30081073          	csrw	mstatus,a6
1c00cc2c:	4501                	li	a0,0
1c00cc2e:	8082                	ret

1c00cc30 <pi_pwm_ioctl>:
1c00cc30:	451c                	lw	a5,8(a0)
1c00cc32:	0025aa63          	p.beqimm	a1,2,1c00cc46 <pi_pwm_ioctl+0x16>
1c00cc36:	0035ac63          	p.beqimm	a1,3,1c00cc4e <pi_pwm_ioctl+0x1e>
1c00cc3a:	e19d                	bnez	a1,1c00cc60 <pi_pwm_ioctl+0x30>
1c00cc3c:	4b9c                	lw	a5,16(a5)
1c00cc3e:	00c7a023          	sw	a2,0(a5)
1c00cc42:	4501                	li	a0,0
1c00cc44:	8082                	ret
1c00cc46:	4b9c                	lw	a5,16(a5)
1c00cc48:	00c7a423          	sw	a2,8(a5)
1c00cc4c:	bfdd                	j	1c00cc42 <pi_pwm_ioctl+0x12>
1c00cc4e:	4b94                	lw	a3,16(a5)
1c00cc50:	479c                	lw	a5,8(a5)
1c00cc52:	6741                	lui	a4,0x10
1c00cc54:	177d                	addi	a4,a4,-1
1c00cc56:	078d                	addi	a5,a5,3
1c00cc58:	078a                	slli	a5,a5,0x2
1c00cc5a:	00e6e7a3          	p.sw	a4,a5(a3)
1c00cc5e:	b7d5                	j	1c00cc42 <pi_pwm_ioctl+0x12>
1c00cc60:	557d                	li	a0,-1
1c00cc62:	8082                	ret

1c00cc64 <__pos_pwm_init>:
static void __attribute__((constructor)) __pos_pwm_init()
{
    for (int i=0; i<ARCHI_PWM_NB; i++)
    {
        pos_pwm_t *pwm = &__pos_pwm[i];
        pwm->open_count = 0;
1c00cc64:	1c00f737          	lui	a4,0x1c00f
1c00cc68:	45870793          	addi	a5,a4,1112 # 1c00f458 <__pos_pwm>
1c00cc6c:	0407aa23          	sw	zero,84(a5)
        pwm->id = i;

        for (int j=0; j<ARCHI_PWM_NB_TIMERS; j++)
1c00cc70:	4601                	li	a2,0
        pwm->id = i;
1c00cc72:	0007a22b          	p.sw	zero,4(a5!)
1c00cc76:	45870713          	addi	a4,a4,1112
1c00cc7a:	0043d0fb          	lp.setupi	x1,4,1c00cc88 <__pos_pwm_init+0x24>
        {
            pos_pwm_timer_t *timer = &pwm->timers[j];
            timer->open_count = 0;
            timer->pwm = pwm;
            timer->id = j;
1c00cc7e:	c3d0                	sw	a2,4(a5)
            timer->open_count = 0;
1c00cc80:	0007a623          	sw	zero,12(a5)
            timer->pwm = pwm;
1c00cc84:	c398                	sw	a4,0(a5)
        for (int j=0; j<ARCHI_PWM_NB_TIMERS; j++)
1c00cc86:	0605                	addi	a2,a2,1
1c00cc88:	07d1                	addi	a5,a5,20
        }
    }
}
1c00cc8a:	8082                	ret

1c00cc8c <__pi_gpio_handler>:
  pin = (pin & PI_GPIO_NUM_MASK);
  uint32_t mask = (1 << pin);

  gpio->event_task[pin] = NULL;
  return 0;
}
1c00cc8c:	1141                	addi	sp,sp,-16
1c00cc8e:	1a1017b7          	lui	a5,0x1a101
1c00cc92:	1c00f6b7          	lui	a3,0x1c00f
1c00cc96:	c422                	sw	s0,8(sp)
1c00cc98:	4f80                	lw	s0,24(a5)
1c00cc9a:	4b068793          	addi	a5,a3,1200 # 1c00f4b0 <__rt_gpio>
1c00cc9e:	c226                	sw	s1,4(sp)
1c00cca0:	4bc4                	lw	s1,20(a5)
1c00cca2:	c606                	sw	ra,12(sp)
1c00cca4:	c780                	sw	s0,8(a5)
1c00cca6:	cc91                	beqz	s1,1c00ccc2 <__pi_gpio_handler+0x36>
1c00cca8:	409c                	lw	a5,0(s1)
1c00ccaa:	8fe1                	and	a5,a5,s0
1c00ccac:	c781                	beqz	a5,1c00ccb4 <__pi_gpio_handler+0x28>
1c00ccae:	40dc                	lw	a5,4(s1)
1c00ccb0:	4488                	lw	a0,8(s1)
1c00ccb2:	9782                	jalr	a5
1c00ccb4:	44c4                	lw	s1,12(s1)
1c00ccb6:	f8ed                	bnez	s1,1c00cca8 <__pi_gpio_handler+0x1c>
1c00ccb8:	40b2                	lw	ra,12(sp)
1c00ccba:	4422                	lw	s0,8(sp)
1c00ccbc:	4492                	lw	s1,4(sp)
1c00ccbe:	0141                	addi	sp,sp,16
1c00ccc0:	8082                	ret
1c00ccc2:	4b068693          	addi	a3,a3,1200
1c00ccc6:	46dc                	lw	a5,12(a3)
1c00ccc8:	4701                	li	a4,0
1c00ccca:	8fe1                	and	a5,a5,s0
1c00cccc:	01c00513          	li	a0,28
1c00ccd0:	d7e5                	beqz	a5,1c00ccb8 <__pi_gpio_handler+0x2c>
1c00ccd2:	fc17b633          	p.bclr	a2,a5,30,1
1c00ccd6:	c615                	beqz	a2,1c00cd02 <__pi_gpio_handler+0x76>
1c00ccd8:	00470613          	addi	a2,a4,4
1c00ccdc:	060a                	slli	a2,a2,0x2
1c00ccde:	9636                	add	a2,a2,a3
1c00cce0:	4610                	lw	a2,8(a2)
1c00cce2:	c205                	beqz	a2,1c00cd02 <__pi_gpio_handler+0x76>
1c00cce4:	30047873          	csrrci	a6,mstatus,8
1c00cce8:	01c02883          	lw	a7,28(zero) # 1c <__rt_sched>
1c00ccec:	00062023          	sw	zero,0(a2)
1c00ccf0:	00088e63          	beqz	a7,1c00cd0c <__pi_gpio_handler+0x80>
1c00ccf4:	00452883          	lw	a7,4(a0)
1c00ccf8:	00c8a023          	sw	a2,0(a7) # 1a102000 <__l1_end+0xa101fbc>
1c00ccfc:	c150                	sw	a2,4(a0)
1c00ccfe:	30081073          	csrw	mstatus,a6
1c00cd02:	0705                	addi	a4,a4,1
1c00cd04:	8385                	srli	a5,a5,0x1
1c00cd06:	0ff77713          	andi	a4,a4,255
1c00cd0a:	b7d9                	j	1c00ccd0 <__pi_gpio_handler+0x44>
1c00cd0c:	00c02e23          	sw	a2,28(zero) # 1c <__rt_sched>
1c00cd10:	b7f5                	j	1c00ccfc <__pi_gpio_handler+0x70>

1c00cd12 <pi_gpio_pin_read>:
1c00cd12:	4508                	lw	a0,8(a0)
1c00cd14:	0ff5f693          	andi	a3,a1,255
1c00cd18:	4785                	li	a5,1
1c00cd1a:	4558                	lw	a4,12(a0)
1c00cd1c:	00d797b3          	sll	a5,a5,a3
1c00cd20:	8f7d                	and	a4,a4,a5
1c00cd22:	00f70763          	beq	a4,a5,1c00cd30 <pi_gpio_pin_read+0x1e>
1c00cd26:	490c                	lw	a1,16(a0)
1c00cd28:	5555                	li	a0,-11
1c00cd2a:	8dfd                	and	a1,a1,a5
1c00cd2c:	00f59c63          	bne	a1,a5,1c00cd44 <pi_gpio_pin_read+0x32>
1c00cd30:	1a1017b7          	lui	a5,0x1a101
1c00cd34:	cb09                	beqz	a4,1c00cd46 <pi_gpio_pin_read+0x34>
1c00cd36:	43cc                	lw	a1,4(a5)
1c00cd38:	00d5d5b3          	srl	a1,a1,a3
1c00cd3c:	fc15b5b3          	p.bclr	a1,a1,30,1
1c00cd40:	c20c                	sw	a1,0(a2)
1c00cd42:	4501                	li	a0,0
1c00cd44:	8082                	ret
1c00cd46:	438c                	lw	a1,0(a5)
1c00cd48:	bfc5                	j	1c00cd38 <pi_gpio_pin_read+0x26>

1c00cd4a <pi_gpio_mask_configure>:
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR, value);
}

static inline unsigned int hal_gpio_paddir_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR);
1c00cd4a:	1a1017b7          	lui	a5,0x1a101
1c00cd4e:	439c                	lw	a5,0(a5)
1c00cd50:	fff5c713          	not	a4,a1

int pi_gpio_mask_configure(struct pi_device *device, uint32_t mask, pi_gpio_flags_e flags)
{
  pi_gpio_t *gpio = (pi_gpio_t *) device->data;
  int is_out = flags & PI_GPIO_OUTPUT;
1c00cd54:	8a11                	andi	a2,a2,4
  pi_gpio_t *gpio = (pi_gpio_t *) device->data;
1c00cd56:	4514                	lw	a3,8(a0)
  {
    current |= mask;
  }
  else
  {
    current &= ~mask;
1c00cd58:	00f77533          	and	a0,a4,a5
  if (is_out)
1c00cd5c:	c219                	beqz	a2,1c00cd62 <pi_gpio_mask_configure+0x18>
    current |= mask;
1c00cd5e:	00f5e533          	or	a0,a1,a5
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR, value);
1c00cd62:	1a1017b7          	lui	a5,0x1a101
1c00cd66:	c388                	sw	a0,0(a5)
1c00cd68:	0106a803          	lw	a6,16(a3)
1c00cd6c:	46c8                	lw	a0,12(a3)
  hal_gpio_set_dir(mask, is_out);

  if (is_out)
1c00cd6e:	ce01                	beqz	a2,1c00cd86 <pi_gpio_mask_configure+0x3c>
  {
    gpio->input_mask &= ~mask;
    gpio->output_mask |= mask;
1c00cd70:	0105e5b3          	or	a1,a1,a6
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN);
1c00cd74:	07f1                	addi	a5,a5,28
1c00cd76:	ca8c                	sw	a1,16(a3)
1c00cd78:	438c                	lw	a1,0(a5)
    gpio->input_mask &= ~mask;
1c00cd7a:	8d79                	and	a0,a0,a4
1c00cd7c:	c6c8                	sw	a0,12(a3)
    hal_gpio_en_set(hal_gpio_en_get() & ~mask);
1c00cd7e:	8f6d                	and	a4,a4,a1
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN, value);
1c00cd80:	c398                	sw	a4,0(a5)
    gpio->output_mask &= ~mask;
    hal_gpio_en_set(hal_gpio_en_get() | mask);
  }

  return 0;
}
1c00cd82:	4501                	li	a0,0
1c00cd84:	8082                	ret
    gpio->output_mask &= ~mask;
1c00cd86:	01077733          	and	a4,a4,a6
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN);
1c00cd8a:	07f1                	addi	a5,a5,28
1c00cd8c:	ca98                	sw	a4,16(a3)
1c00cd8e:	4398                	lw	a4,0(a5)
    gpio->input_mask |= mask;
1c00cd90:	8d4d                	or	a0,a0,a1
1c00cd92:	c6c8                	sw	a0,12(a3)
    hal_gpio_en_set(hal_gpio_en_get() | mask);
1c00cd94:	8dd9                	or	a1,a1,a4
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN, value);
1c00cd96:	c38c                	sw	a1,0(a5)
1c00cd98:	b7ed                	j	1c00cd82 <pi_gpio_mask_configure+0x38>

1c00cd9a <pi_gpio_pin_configure>:
{
1c00cd9a:	1101                	addi	sp,sp,-32
1c00cd9c:	cc22                	sw	s0,24(sp)
1c00cd9e:	ca26                	sw	s1,20(sp)
1c00cda0:	ce06                	sw	ra,28(sp)
1c00cda2:	84aa                	mv	s1,a0
1c00cda4:	842e                	mv	s0,a1
  if (pin & PI_GPIO_IS_GPIO_MASK)
1c00cda6:	0005db63          	bgez	a1,1c00cdbc <pi_gpio_pin_configure+0x22>
    pi_pad_e pad = ((pin & PI_GPIO_PAD_MASK) >> PI_GPIO_PAD_SHIFT);
1c00cdaa:	4085d513          	srai	a0,a1,0x8
    pi_pad_set_function(pad, PI_PAD_FUNC1);
1c00cdae:	0ff57513          	andi	a0,a0,255
1c00cdb2:	4585                	li	a1,1
1c00cdb4:	c632                	sw	a2,12(sp)
1c00cdb6:	a5dfe0ef          	jal	ra,1c00b812 <pi_pad_set_function>
1c00cdba:	4632                	lw	a2,12(sp)
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c00cdbc:	4585                	li	a1,1
1c00cdbe:	008595b3          	sll	a1,a1,s0
}
1c00cdc2:	4462                	lw	s0,24(sp)
1c00cdc4:	40f2                	lw	ra,28(sp)
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c00cdc6:	8526                	mv	a0,s1
}
1c00cdc8:	44d2                	lw	s1,20(sp)
1c00cdca:	6105                	addi	sp,sp,32
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c00cdcc:	f7fff06f          	j	1c00cd4a <pi_gpio_mask_configure>

1c00cdd0 <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c00cdd0:	1c00f7b7          	lui	a5,0x1c00f
1c00cdd4:	4d18                	lw	a4,24(a0)
1c00cdd6:	6387a783          	lw	a5,1592(a5) # 1c00f638 <__rt_freq_domains>
1c00cdda:	068416b7          	lui	a3,0x6841
1c00cdde:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00cde2:	02e7c7b3          	div	a5,a5,a4
1c00cde6:	02954703          	lbu	a4,41(a0)
1c00cdea:	177d                	addi	a4,a4,-1
1c00cdec:	c0874733          	p.bset	a4,a4,0,8
1c00cdf0:	17fd                	addi	a5,a5,-1
1c00cdf2:	8785                	srai	a5,a5,0x1
1c00cdf4:	07c2                	slli	a5,a5,0x10
1c00cdf6:	8fd9                	or	a5,a5,a4
1c00cdf8:	02554703          	lbu	a4,37(a0)
1c00cdfc:	9736                	add	a4,a4,a3
1c00cdfe:	070a                	slli	a4,a4,0x2
1c00ce00:	c31c                	sw	a5,0(a4)
1c00ce02:	8082                	ret

1c00ce04 <__rt_i2s_setfreq_after>:
1c00ce04:	1141                	addi	sp,sp,-16
1c00ce06:	1c00f7b7          	lui	a5,0x1c00f
1c00ce0a:	c422                	sw	s0,8(sp)
1c00ce0c:	5f47a403          	lw	s0,1524(a5) # 1c00f5f4 <__rt_i2s_first>
1c00ce10:	c606                	sw	ra,12(sp)
1c00ce12:	e411                	bnez	s0,1c00ce1e <__rt_i2s_setfreq_after+0x1a>
1c00ce14:	40b2                	lw	ra,12(sp)
1c00ce16:	4422                	lw	s0,8(sp)
1c00ce18:	4501                	li	a0,0
1c00ce1a:	0141                	addi	sp,sp,16
1c00ce1c:	8082                	ret
1c00ce1e:	02844783          	lbu	a5,40(s0)
1c00ce22:	c781                	beqz	a5,1c00ce2a <__rt_i2s_setfreq_after+0x26>
1c00ce24:	8522                	mv	a0,s0
1c00ce26:	fabff0ef          	jal	ra,1c00cdd0 <__rt_i2s_resume>
1c00ce2a:	4c40                	lw	s0,28(s0)
1c00ce2c:	b7dd                	j	1c00ce12 <__rt_i2s_setfreq_after+0xe>

1c00ce2e <__rt_i2s_setfreq_before>:
1c00ce2e:	1c00f7b7          	lui	a5,0x1c00f
1c00ce32:	5f47a783          	lw	a5,1524(a5) # 1c00f5f4 <__rt_i2s_first>
1c00ce36:	068416b7          	lui	a3,0x6841
1c00ce3a:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00ce3e:	e399                	bnez	a5,1c00ce44 <__rt_i2s_setfreq_before+0x16>
1c00ce40:	4501                	li	a0,0
1c00ce42:	8082                	ret
1c00ce44:	0287c703          	lbu	a4,40(a5)
1c00ce48:	c719                	beqz	a4,1c00ce56 <__rt_i2s_setfreq_before+0x28>
1c00ce4a:	0257c703          	lbu	a4,37(a5)
1c00ce4e:	9736                	add	a4,a4,a3
1c00ce50:	070a                	slli	a4,a4,0x2
1c00ce52:	00072023          	sw	zero,0(a4)
1c00ce56:	4fdc                	lw	a5,28(a5)
1c00ce58:	b7dd                	j	1c00ce3e <__rt_i2s_setfreq_before+0x10>

1c00ce5a <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00ce5a:	1c00d5b7          	lui	a1,0x1c00d
{
1c00ce5e:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00ce60:	4601                	li	a2,0
1c00ce62:	e2e58593          	addi	a1,a1,-466 # 1c00ce2e <__rt_i2s_setfreq_before>
1c00ce66:	4511                	li	a0,4
{
1c00ce68:	c606                	sw	ra,12(sp)
1c00ce6a:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00ce6c:	ab4fd0ef          	jal	ra,1c00a120 <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00ce70:	1c00d5b7          	lui	a1,0x1c00d
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00ce74:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00ce76:	4601                	li	a2,0
1c00ce78:	e0458593          	addi	a1,a1,-508 # 1c00ce04 <__rt_i2s_setfreq_after>
1c00ce7c:	4515                	li	a0,5
1c00ce7e:	aa2fd0ef          	jal	ra,1c00a120 <__rt_cbsys_add>
1c00ce82:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c00ce84:	c10d                	beqz	a0,1c00cea6 <__rt_i2s_init+0x4c>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ce86:	01402673          	csrr	a2,uhartid
1c00ce8a:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00ce8e:	40565593          	srai	a1,a2,0x5
1c00ce92:	f265b5b3          	p.bclr	a1,a1,25,6
1c00ce96:	f4563633          	p.bclr	a2,a2,26,5
1c00ce9a:	e8c50513          	addi	a0,a0,-372 # 1c00ee8c <__hyper_pad+0xd4>
1c00ce9e:	798000ef          	jal	ra,1c00d636 <printf>
1c00cea2:	718000ef          	jal	ra,1c00d5ba <abort>
}
1c00cea6:	40b2                	lw	ra,12(sp)
1c00cea8:	4422                	lw	s0,8(sp)
1c00ceaa:	0141                	addi	sp,sp,16
1c00ceac:	8082                	ret

1c00ceae <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c00ceae:	1b0017b7          	lui	a5,0x1b001
1c00ceb2:	c0078423          	sb	zero,-1016(a5) # 1b000c08 <camera_isAwaked>
}
1c00ceb6:	8082                	ret

1c00ceb8 <__rt_i2c_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_i2c_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_I2C; i++)
  {
    __rt_i2c[i].open_count = 0;
1c00ceb8:	1c00f7b7          	lui	a5,0x1c00f
1c00cebc:	23078793          	addi	a5,a5,560 # 1c00f230 <__rt_i2c>
1c00cec0:	00078223          	sb	zero,4(a5)
1c00cec4:	00078a23          	sb	zero,20(a5)
  }
}
1c00cec8:	8082                	ret

1c00ceca <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c00ceca:	3a800793          	li	a5,936
1c00cece:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c00ced2:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c00ced6:	0207aa23          	sw	zero,52(a5)
}
1c00ceda:	8082                	ret

1c00cedc <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c00cedc:	1c00f7b7          	lui	a5,0x1c00f
1c00cee0:	5f878793          	addi	a5,a5,1528 # 1c00f5f8 <__rt_spim_open_count>
1c00cee4:	0007a023          	sw	zero,0(a5)
1c00cee8:	0007a223          	sw	zero,4(a5)
  }
}
1c00ceec:	8082                	ret

1c00ceee <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c00ceee:	1c00f7b7          	lui	a5,0x1c00f
1c00cef2:	6007a223          	sw	zero,1540(a5) # 1c00f604 <__rt_io_pending_flush>
1c00cef6:	00052c23          	sw	zero,24(a0)
1c00cefa:	8082                	ret

1c00cefc <__rt_io_uart_wait_req>:
1c00cefc:	1141                	addi	sp,sp,-16
1c00cefe:	c226                	sw	s1,4(sp)
1c00cf00:	84aa                	mv	s1,a0
1c00cf02:	c606                	sw	ra,12(sp)
1c00cf04:	c422                	sw	s0,8(sp)
1c00cf06:	c04a                	sw	s2,0(sp)
1c00cf08:	30047973          	csrrci	s2,mstatus,8
1c00cf0c:	1c00f437          	lui	s0,0x1c00f
1c00cf10:	60040413          	addi	s0,s0,1536 # 1c00f600 <__rt_io_event_current>
1c00cf14:	4008                	lw	a0,0(s0)
1c00cf16:	c509                	beqz	a0,1c00cf20 <__rt_io_uart_wait_req+0x24>
1c00cf18:	fa8fd0ef          	jal	ra,1c00a6c0 <rt_event_wait>
1c00cf1c:	00042023          	sw	zero,0(s0)
1c00cf20:	4785                	li	a5,1
1c00cf22:	08f48023          	sb	a5,128(s1)
1c00cf26:	0814c783          	lbu	a5,129(s1)
1c00cf2a:	00201737          	lui	a4,0x201
1c00cf2e:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00cf32:	04078793          	addi	a5,a5,64
1c00cf36:	07da                	slli	a5,a5,0x16
1c00cf38:	0007e723          	p.sw	zero,a4(a5)
1c00cf3c:	30091073          	csrw	mstatus,s2
1c00cf40:	40b2                	lw	ra,12(sp)
1c00cf42:	4422                	lw	s0,8(sp)
1c00cf44:	4492                	lw	s1,4(sp)
1c00cf46:	4902                	lw	s2,0(sp)
1c00cf48:	0141                	addi	sp,sp,16
1c00cf4a:	8082                	ret

1c00cf4c <__rt_do_putc_host>:
1c00cf4c:	1c00f737          	lui	a4,0x1c00f
1c00cf50:	60870793          	addi	a5,a4,1544 # 1c00f608 <__rt_putc_host_buffer_index>
1c00cf54:	4390                	lw	a2,0(a5)
1c00cf56:	60870713          	addi	a4,a4,1544
1c00cf5a:	00160693          	addi	a3,a2,1
1c00cf5e:	c394                	sw	a3,0(a5)
1c00cf60:	1c00f7b7          	lui	a5,0x1c00f
1c00cf64:	25078593          	addi	a1,a5,592 # 1c00f250 <__rt_putc_host_buffer>
1c00cf68:	00a5c623          	p.sb	a0,a2(a1)
1c00cf6c:	07f00593          	li	a1,127
1c00cf70:	25078613          	addi	a2,a5,592
1c00cf74:	00b68463          	beq	a3,a1,1c00cf7c <__rt_do_putc_host+0x30>
1c00cf78:	00a53a63          	p.bneimm	a0,10,1c00cf8c <__rt_do_putc_host+0x40>
1c00cf7c:	25078513          	addi	a0,a5,592
1c00cf80:	000646a3          	p.sb	zero,a3(a2)
1c00cf84:	00072023          	sw	zero,0(a4)
1c00cf88:	d37fc06f          	j	1c009cbe <semihost_write0>
1c00cf8c:	8082                	ret

1c00cf8e <__rt_io_start>:
1c00cf8e:	1101                	addi	sp,sp,-32
1c00cf90:	0028                	addi	a0,sp,8
1c00cf92:	ce06                	sw	ra,28(sp)
1c00cf94:	cc22                	sw	s0,24(sp)
1c00cf96:	3ee010ef          	jal	ra,1c00e384 <rt_uart_conf_init>
1c00cf9a:	4585                	li	a1,1
1c00cf9c:	4501                	li	a0,0
1c00cf9e:	dbcfd0ef          	jal	ra,1c00a55a <rt_event_alloc>
1c00cfa2:	547d                	li	s0,-1
1c00cfa4:	ed0d                	bnez	a0,1c00cfde <__rt_io_start+0x50>
1c00cfa6:	1c00f7b7          	lui	a5,0x1c00f
1c00cfaa:	11c7a783          	lw	a5,284(a5) # 1c00f11c <__rt_iodev_uart_baudrate>
1c00cfae:	842a                	mv	s0,a0
1c00cfb0:	1c00f537          	lui	a0,0x1c00f
1c00cfb4:	01c00593          	li	a1,28
1c00cfb8:	54850513          	addi	a0,a0,1352 # 1c00f548 <__rt_io_event>
1c00cfbc:	c43e                	sw	a5,8(sp)
1c00cfbe:	d5cfd0ef          	jal	ra,1c00a51a <__rt_event_init>
1c00cfc2:	1c00f7b7          	lui	a5,0x1c00f
1c00cfc6:	5dc7a503          	lw	a0,1500(a5) # 1c00f5dc <__rt_iodev_uart_channel>
1c00cfca:	4681                	li	a3,0
1c00cfcc:	4601                	li	a2,0
1c00cfce:	002c                	addi	a1,sp,8
1c00cfd0:	0511                	addi	a0,a0,4
1c00cfd2:	3c2010ef          	jal	ra,1c00e394 <__rt_uart_open>
1c00cfd6:	1c00f7b7          	lui	a5,0x1c00f
1c00cfda:	60a7a623          	sw	a0,1548(a5) # 1c00f60c <_rt_io_uart>
1c00cfde:	8522                	mv	a0,s0
1c00cfe0:	40f2                	lw	ra,28(sp)
1c00cfe2:	4462                	lw	s0,24(sp)
1c00cfe4:	6105                	addi	sp,sp,32
1c00cfe6:	8082                	ret

1c00cfe8 <rt_event_execute.isra.4.constprop.12>:
1c00cfe8:	1141                	addi	sp,sp,-16
1c00cfea:	c606                	sw	ra,12(sp)
1c00cfec:	c422                	sw	s0,8(sp)
1c00cfee:	30047473          	csrrci	s0,mstatus,8
1c00cff2:	4585                	li	a1,1
1c00cff4:	01c00513          	li	a0,28
1c00cff8:	e38fd0ef          	jal	ra,1c00a630 <__rt_event_execute>
1c00cffc:	30041073          	csrw	mstatus,s0
1c00d000:	40b2                	lw	ra,12(sp)
1c00d002:	4422                	lw	s0,8(sp)
1c00d004:	0141                	addi	sp,sp,16
1c00d006:	8082                	ret

1c00d008 <__rt_io_lock>:
1c00d008:	1c00f7b7          	lui	a5,0x1c00f
1c00d00c:	0607a783          	lw	a5,96(a5) # 1c00f060 <__hal_debug_struct+0x10>
1c00d010:	cf81                	beqz	a5,1c00d028 <__rt_io_lock+0x20>
1c00d012:	1c00f7b7          	lui	a5,0x1c00f
1c00d016:	60c7a783          	lw	a5,1548(a5) # 1c00f60c <_rt_io_uart>
1c00d01a:	e799                	bnez	a5,1c00d028 <__rt_io_lock+0x20>
1c00d01c:	1c00f7b7          	lui	a5,0x1c00f
1c00d020:	1187a783          	lw	a5,280(a5) # 1c00f118 <__rt_iodev>
1c00d024:	0427b963          	p.bneimm	a5,2,1c00d076 <__rt_io_lock+0x6e>
1c00d028:	7135                	addi	sp,sp,-160
1c00d02a:	014027f3          	csrr	a5,uhartid
1c00d02e:	cf06                	sw	ra,156(sp)
1c00d030:	ca5797b3          	p.extractu	a5,a5,5,5
1c00d034:	02000713          	li	a4,32
1c00d038:	1b001537          	lui	a0,0x1b001
1c00d03c:	00e79963          	bne	a5,a4,1c00d04e <__rt_io_lock+0x46>
1c00d040:	c0c50513          	addi	a0,a0,-1012 # 1b000c0c <__rt_io_fc_lock>
1c00d044:	96cfd0ef          	jal	ra,1c00a1b0 <__rt_fc_lock>
1c00d048:	40fa                	lw	ra,156(sp)
1c00d04a:	610d                	addi	sp,sp,160
1c00d04c:	8082                	ret
1c00d04e:	004c                	addi	a1,sp,4
1c00d050:	c0c50513          	addi	a0,a0,-1012
1c00d054:	9c2fd0ef          	jal	ra,1c00a216 <__rt_fc_cluster_lock>
1c00d058:	4689                	li	a3,2
1c00d05a:	00204737          	lui	a4,0x204
1c00d05e:	08c14783          	lbu	a5,140(sp)
1c00d062:	0ff7f793          	andi	a5,a5,255
1c00d066:	f3ed                	bnez	a5,1c00d048 <__rt_io_lock+0x40>
1c00d068:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00d06c:	03c76783          	p.elw	a5,60(a4)
1c00d070:	00d72223          	sw	a3,4(a4)
1c00d074:	b7ed                	j	1c00d05e <__rt_io_lock+0x56>
1c00d076:	8082                	ret

1c00d078 <__rt_putc_host_cluster_req>:
1c00d078:	1141                	addi	sp,sp,-16
1c00d07a:	c422                	sw	s0,8(sp)
1c00d07c:	c606                	sw	ra,12(sp)
1c00d07e:	842a                	mv	s0,a0
1c00d080:	08954503          	lbu	a0,137(a0)
1c00d084:	ec9ff0ef          	jal	ra,1c00cf4c <__rt_do_putc_host>
1c00d088:	08844783          	lbu	a5,136(s0)
1c00d08c:	4705                	li	a4,1
1c00d08e:	08e42223          	sw	a4,132(s0)
1c00d092:	00201737          	lui	a4,0x201
1c00d096:	40b2                	lw	ra,12(sp)
1c00d098:	4422                	lw	s0,8(sp)
1c00d09a:	04078793          	addi	a5,a5,64
1c00d09e:	07da                	slli	a5,a5,0x16
1c00d0a0:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00d0a4:	0007e723          	p.sw	zero,a4(a5)
1c00d0a8:	0141                	addi	sp,sp,16
1c00d0aa:	8082                	ret

1c00d0ac <__rt_io_unlock>:
1c00d0ac:	1c00f7b7          	lui	a5,0x1c00f
1c00d0b0:	0607a783          	lw	a5,96(a5) # 1c00f060 <__hal_debug_struct+0x10>
1c00d0b4:	cf81                	beqz	a5,1c00d0cc <__rt_io_unlock+0x20>
1c00d0b6:	1c00f7b7          	lui	a5,0x1c00f
1c00d0ba:	60c7a783          	lw	a5,1548(a5) # 1c00f60c <_rt_io_uart>
1c00d0be:	e799                	bnez	a5,1c00d0cc <__rt_io_unlock+0x20>
1c00d0c0:	1c00f7b7          	lui	a5,0x1c00f
1c00d0c4:	1187a783          	lw	a5,280(a5) # 1c00f118 <__rt_iodev>
1c00d0c8:	0427b963          	p.bneimm	a5,2,1c00d11a <__rt_io_unlock+0x6e>
1c00d0cc:	7135                	addi	sp,sp,-160
1c00d0ce:	014027f3          	csrr	a5,uhartid
1c00d0d2:	cf06                	sw	ra,156(sp)
1c00d0d4:	ca5797b3          	p.extractu	a5,a5,5,5
1c00d0d8:	02000713          	li	a4,32
1c00d0dc:	1b001537          	lui	a0,0x1b001
1c00d0e0:	00e79963          	bne	a5,a4,1c00d0f2 <__rt_io_unlock+0x46>
1c00d0e4:	c0c50513          	addi	a0,a0,-1012 # 1b000c0c <__rt_io_fc_lock>
1c00d0e8:	8fafd0ef          	jal	ra,1c00a1e2 <__rt_fc_unlock>
1c00d0ec:	40fa                	lw	ra,156(sp)
1c00d0ee:	610d                	addi	sp,sp,160
1c00d0f0:	8082                	ret
1c00d0f2:	004c                	addi	a1,sp,4
1c00d0f4:	c0c50513          	addi	a0,a0,-1012
1c00d0f8:	956fd0ef          	jal	ra,1c00a24e <__rt_fc_cluster_unlock>
1c00d0fc:	4689                	li	a3,2
1c00d0fe:	00204737          	lui	a4,0x204
1c00d102:	08c14783          	lbu	a5,140(sp)
1c00d106:	0ff7f793          	andi	a5,a5,255
1c00d10a:	f3ed                	bnez	a5,1c00d0ec <__rt_io_unlock+0x40>
1c00d10c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00d110:	03c76783          	p.elw	a5,60(a4)
1c00d114:	00d72223          	sw	a3,4(a4)
1c00d118:	b7ed                	j	1c00d102 <__rt_io_unlock+0x56>
1c00d11a:	8082                	ret

1c00d11c <__rt_io_uart_flush.constprop.11>:
1c00d11c:	7171                	addi	sp,sp,-176
1c00d11e:	d522                	sw	s0,168(sp)
1c00d120:	d706                	sw	ra,172(sp)
1c00d122:	d326                	sw	s1,164(sp)
1c00d124:	d14a                	sw	s2,160(sp)
1c00d126:	cf4e                	sw	s3,156(sp)
1c00d128:	cd52                	sw	s4,152(sp)
1c00d12a:	1c00f437          	lui	s0,0x1c00f
1c00d12e:	60442783          	lw	a5,1540(s0) # 1c00f604 <__rt_io_pending_flush>
1c00d132:	60440993          	addi	s3,s0,1540
1c00d136:	efad                	bnez	a5,1c00d1b0 <__rt_io_uart_flush.constprop.11+0x94>
1c00d138:	1c00f637          	lui	a2,0x1c00f
1c00d13c:	05060793          	addi	a5,a2,80 # 1c00f050 <__hal_debug_struct>
1c00d140:	4f80                	lw	s0,24(a5)
1c00d142:	05060a13          	addi	s4,a2,80
1c00d146:	cc29                	beqz	s0,1c00d1a0 <__rt_io_uart_flush.constprop.11+0x84>
1c00d148:	1c00f737          	lui	a4,0x1c00f
1c00d14c:	014027f3          	csrr	a5,uhartid
1c00d150:	60c72483          	lw	s1,1548(a4) # 1c00f60c <_rt_io_uart>
1c00d154:	ca5797b3          	p.extractu	a5,a5,5,5
1c00d158:	02000713          	li	a4,32
1c00d15c:	1c00f937          	lui	s2,0x1c00f
1c00d160:	06e79263          	bne	a5,a4,1c00d1c4 <__rt_io_uart_flush.constprop.11+0xa8>
1c00d164:	1c00d5b7          	lui	a1,0x1c00d
1c00d168:	4785                	li	a5,1
1c00d16a:	05060613          	addi	a2,a2,80
1c00d16e:	eee58593          	addi	a1,a1,-274 # 1c00ceee <__rt_io_end_of_flush>
1c00d172:	4501                	li	a0,0
1c00d174:	00f9a023          	sw	a5,0(s3)
1c00d178:	c58fd0ef          	jal	ra,1c00a5d0 <rt_event_get>
1c00d17c:	40cc                	lw	a1,4(s1)
1c00d17e:	87aa                	mv	a5,a0
1c00d180:	4701                	li	a4,0
1c00d182:	0586                	slli	a1,a1,0x1
1c00d184:	86a2                	mv	a3,s0
1c00d186:	06c90613          	addi	a2,s2,108 # 1c00f06c <__hal_debug_struct+0x1c>
1c00d18a:	0585                	addi	a1,a1,1
1c00d18c:	4501                	li	a0,0
1c00d18e:	9b1fd0ef          	jal	ra,1c00ab3e <rt_periph_copy>
1c00d192:	f1bff0ef          	jal	ra,1c00d0ac <__rt_io_unlock>
1c00d196:	0009a783          	lw	a5,0(s3)
1c00d19a:	e395                	bnez	a5,1c00d1be <__rt_io_uart_flush.constprop.11+0xa2>
1c00d19c:	e6dff0ef          	jal	ra,1c00d008 <__rt_io_lock>
1c00d1a0:	50ba                	lw	ra,172(sp)
1c00d1a2:	542a                	lw	s0,168(sp)
1c00d1a4:	549a                	lw	s1,164(sp)
1c00d1a6:	590a                	lw	s2,160(sp)
1c00d1a8:	49fa                	lw	s3,156(sp)
1c00d1aa:	4a6a                	lw	s4,152(sp)
1c00d1ac:	614d                	addi	sp,sp,176
1c00d1ae:	8082                	ret
1c00d1b0:	efdff0ef          	jal	ra,1c00d0ac <__rt_io_unlock>
1c00d1b4:	e35ff0ef          	jal	ra,1c00cfe8 <rt_event_execute.isra.4.constprop.12>
1c00d1b8:	e51ff0ef          	jal	ra,1c00d008 <__rt_io_lock>
1c00d1bc:	bf8d                	j	1c00d12e <__rt_io_uart_flush.constprop.11+0x12>
1c00d1be:	e2bff0ef          	jal	ra,1c00cfe8 <rt_event_execute.isra.4.constprop.12>
1c00d1c2:	bfd1                	j	1c00d196 <__rt_io_uart_flush.constprop.11+0x7a>
1c00d1c4:	868a                	mv	a3,sp
1c00d1c6:	8622                	mv	a2,s0
1c00d1c8:	06c90593          	addi	a1,s2,108
1c00d1cc:	8526                	mv	a0,s1
1c00d1ce:	2a2010ef          	jal	ra,1c00e470 <rt_uart_cluster_write>
1c00d1d2:	4689                	li	a3,2
1c00d1d4:	00204737          	lui	a4,0x204
1c00d1d8:	08c14783          	lbu	a5,140(sp)
1c00d1dc:	0ff7f793          	andi	a5,a5,255
1c00d1e0:	c781                	beqz	a5,1c00d1e8 <__rt_io_uart_flush.constprop.11+0xcc>
1c00d1e2:	000a2c23          	sw	zero,24(s4)
1c00d1e6:	bf6d                	j	1c00d1a0 <__rt_io_uart_flush.constprop.11+0x84>
1c00d1e8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00d1ec:	03c76783          	p.elw	a5,60(a4)
1c00d1f0:	00d72223          	sw	a3,4(a4)
1c00d1f4:	b7d5                	j	1c00d1d8 <__rt_io_uart_flush.constprop.11+0xbc>

1c00d1f6 <__rt_io_uart_wait_pending>:
1c00d1f6:	7135                	addi	sp,sp,-160
1c00d1f8:	cd22                	sw	s0,152(sp)
1c00d1fa:	cf06                	sw	ra,156(sp)
1c00d1fc:	1c00f437          	lui	s0,0x1c00f
1c00d200:	60442783          	lw	a5,1540(s0) # 1c00f604 <__rt_io_pending_flush>
1c00d204:	eb85                	bnez	a5,1c00d234 <__rt_io_uart_wait_pending+0x3e>
1c00d206:	1c00f437          	lui	s0,0x1c00f
1c00d20a:	60040413          	addi	s0,s0,1536 # 1c00f600 <__rt_io_event_current>
1c00d20e:	4008                	lw	a0,0(s0)
1c00d210:	cd11                	beqz	a0,1c00d22c <__rt_io_uart_wait_pending+0x36>
1c00d212:	014027f3          	csrr	a5,uhartid
1c00d216:	8795                	srai	a5,a5,0x5
1c00d218:	f267b7b3          	p.bclr	a5,a5,25,6
1c00d21c:	02000713          	li	a4,32
1c00d220:	02e79163          	bne	a5,a4,1c00d242 <__rt_io_uart_wait_pending+0x4c>
1c00d224:	c9cfd0ef          	jal	ra,1c00a6c0 <rt_event_wait>
1c00d228:	00042023          	sw	zero,0(s0)
1c00d22c:	40fa                	lw	ra,156(sp)
1c00d22e:	446a                	lw	s0,152(sp)
1c00d230:	610d                	addi	sp,sp,160
1c00d232:	8082                	ret
1c00d234:	e79ff0ef          	jal	ra,1c00d0ac <__rt_io_unlock>
1c00d238:	db1ff0ef          	jal	ra,1c00cfe8 <rt_event_execute.isra.4.constprop.12>
1c00d23c:	dcdff0ef          	jal	ra,1c00d008 <__rt_io_lock>
1c00d240:	b7c1                	j	1c00d200 <__rt_io_uart_wait_pending+0xa>
1c00d242:	08f106a3          	sb	a5,141(sp)
1c00d246:	1c00d7b7          	lui	a5,0x1c00d
1c00d24a:	efc78793          	addi	a5,a5,-260 # 1c00cefc <__rt_io_uart_wait_req>
1c00d24e:	4705                	li	a4,1
1c00d250:	c83e                	sw	a5,16(sp)
1c00d252:	0068                	addi	a0,sp,12
1c00d254:	1c00f7b7          	lui	a5,0x1c00f
1c00d258:	56e7a623          	sw	a4,1388(a5) # 1c00f56c <__rt_io_event+0x24>
1c00d25c:	08010623          	sb	zero,140(sp)
1c00d260:	d802                	sw	zero,48(sp)
1c00d262:	da02                	sw	zero,52(sp)
1c00d264:	ca2a                	sw	a0,20(sp)
1c00d266:	a94fe0ef          	jal	ra,1c00b4fa <__rt_cluster_push_fc_event>
1c00d26a:	4689                	li	a3,2
1c00d26c:	00204737          	lui	a4,0x204
1c00d270:	08c14783          	lbu	a5,140(sp)
1c00d274:	0ff7f793          	andi	a5,a5,255
1c00d278:	fbd5                	bnez	a5,1c00d22c <__rt_io_uart_wait_pending+0x36>
1c00d27a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00d27e:	03c76783          	p.elw	a5,60(a4)
1c00d282:	00d72223          	sw	a3,4(a4)
1c00d286:	b7ed                	j	1c00d270 <__rt_io_uart_wait_pending+0x7a>

1c00d288 <__rt_io_stop>:
1c00d288:	1141                	addi	sp,sp,-16
1c00d28a:	c422                	sw	s0,8(sp)
1c00d28c:	1c00f437          	lui	s0,0x1c00f
1c00d290:	c606                	sw	ra,12(sp)
1c00d292:	60c40413          	addi	s0,s0,1548 # 1c00f60c <_rt_io_uart>
1c00d296:	f61ff0ef          	jal	ra,1c00d1f6 <__rt_io_uart_wait_pending>
1c00d29a:	4008                	lw	a0,0(s0)
1c00d29c:	4581                	li	a1,0
1c00d29e:	184010ef          	jal	ra,1c00e422 <rt_uart_close>
1c00d2a2:	40b2                	lw	ra,12(sp)
1c00d2a4:	00042023          	sw	zero,0(s0)
1c00d2a8:	4422                	lw	s0,8(sp)
1c00d2aa:	4501                	li	a0,0
1c00d2ac:	0141                	addi	sp,sp,16
1c00d2ae:	8082                	ret

1c00d2b0 <strcmp>:
1c00d2b0:	0015478b          	p.lbu	a5,1(a0!)
1c00d2b4:	0015c70b          	p.lbu	a4,1(a1!)
1c00d2b8:	c399                	beqz	a5,1c00d2be <strcmp+0xe>
1c00d2ba:	fee78be3          	beq	a5,a4,1c00d2b0 <strcmp>
1c00d2be:	40e78533          	sub	a0,a5,a4
1c00d2c2:	8082                	ret

1c00d2c4 <strncmp>:
1c00d2c4:	ce11                	beqz	a2,1c00d2e0 <strncmp+0x1c>
1c00d2c6:	962a                	add	a2,a2,a0
1c00d2c8:	0015478b          	p.lbu	a5,1(a0!)
1c00d2cc:	0015c70b          	p.lbu	a4,1(a1!)
1c00d2d0:	00e79563          	bne	a5,a4,1c00d2da <strncmp+0x16>
1c00d2d4:	00c50363          	beq	a0,a2,1c00d2da <strncmp+0x16>
1c00d2d8:	fbe5                	bnez	a5,1c00d2c8 <strncmp+0x4>
1c00d2da:	40e78533          	sub	a0,a5,a4
1c00d2de:	8082                	ret
1c00d2e0:	4501                	li	a0,0
1c00d2e2:	8082                	ret

1c00d2e4 <strlen>:
1c00d2e4:	87aa                	mv	a5,a0
1c00d2e6:	0007c703          	lbu	a4,0(a5)
1c00d2ea:	00178693          	addi	a3,a5,1
1c00d2ee:	e701                	bnez	a4,1c00d2f6 <strlen+0x12>
1c00d2f0:	40a78533          	sub	a0,a5,a0
1c00d2f4:	8082                	ret
1c00d2f6:	87b6                	mv	a5,a3
1c00d2f8:	b7fd                	j	1c00d2e6 <strlen+0x2>

1c00d2fa <memset>:
1c00d2fa:	962a                	add	a2,a2,a0
1c00d2fc:	87aa                	mv	a5,a0
1c00d2fe:	00c79363          	bne	a5,a2,1c00d304 <memset+0xa>
1c00d302:	8082                	ret
1c00d304:	00b780ab          	p.sb	a1,1(a5!)
1c00d308:	bfdd                	j	1c00d2fe <memset+0x4>

1c00d30a <memcpy>:
1c00d30a:	00a5e733          	or	a4,a1,a0
1c00d30e:	fa273733          	p.bclr	a4,a4,29,2
1c00d312:	87aa                	mv	a5,a0
1c00d314:	c709                	beqz	a4,1c00d31e <memcpy+0x14>
1c00d316:	962e                	add	a2,a2,a1
1c00d318:	00c59f63          	bne	a1,a2,1c00d336 <memcpy+0x2c>
1c00d31c:	8082                	ret
1c00d31e:	fa263733          	p.bclr	a4,a2,29,2
1c00d322:	fb75                	bnez	a4,1c00d316 <memcpy+0xc>
1c00d324:	962e                	add	a2,a2,a1
1c00d326:	00c59363          	bne	a1,a2,1c00d32c <memcpy+0x22>
1c00d32a:	8082                	ret
1c00d32c:	0045a70b          	p.lw	a4,4(a1!)
1c00d330:	00e7a22b          	p.sw	a4,4(a5!)
1c00d334:	bfcd                	j	1c00d326 <memcpy+0x1c>
1c00d336:	0015c70b          	p.lbu	a4,1(a1!)
1c00d33a:	00e780ab          	p.sb	a4,1(a5!)
1c00d33e:	bfe9                	j	1c00d318 <memcpy+0xe>

1c00d340 <strchr>:
1c00d340:	0ff5f593          	andi	a1,a1,255
1c00d344:	00054703          	lbu	a4,0(a0)
1c00d348:	87aa                	mv	a5,a0
1c00d34a:	0505                	addi	a0,a0,1
1c00d34c:	00b70563          	beq	a4,a1,1c00d356 <strchr+0x16>
1c00d350:	fb75                	bnez	a4,1c00d344 <strchr+0x4>
1c00d352:	c191                	beqz	a1,1c00d356 <strchr+0x16>
1c00d354:	4781                	li	a5,0
1c00d356:	853e                	mv	a0,a5
1c00d358:	8082                	ret

1c00d35a <__rt_putc_debug_bridge>:
1c00d35a:	1141                	addi	sp,sp,-16
1c00d35c:	c422                	sw	s0,8(sp)
1c00d35e:	1c00f437          	lui	s0,0x1c00f
1c00d362:	c226                	sw	s1,4(sp)
1c00d364:	c606                	sw	ra,12(sp)
1c00d366:	84aa                	mv	s1,a0
1c00d368:	05040413          	addi	s0,s0,80 # 1c00f050 <__hal_debug_struct>
1c00d36c:	485c                	lw	a5,20(s0)
1c00d36e:	c791                	beqz	a5,1c00d37a <__rt_putc_debug_bridge+0x20>
1c00d370:	06400513          	li	a0,100
1c00d374:	e24fd0ef          	jal	ra,1c00a998 <rt_time_wait_us>
1c00d378:	bfd5                	j	1c00d36c <__rt_putc_debug_bridge+0x12>
1c00d37a:	4c1c                	lw	a5,24(s0)
1c00d37c:	00178713          	addi	a4,a5,1
1c00d380:	97a2                	add	a5,a5,s0
1c00d382:	00978e23          	sb	s1,28(a5)
1c00d386:	cc18                	sw	a4,24(s0)
1c00d388:	4c14                	lw	a3,24(s0)
1c00d38a:	08000793          	li	a5,128
1c00d38e:	00f68463          	beq	a3,a5,1c00d396 <__rt_putc_debug_bridge+0x3c>
1c00d392:	00a4b663          	p.bneimm	s1,10,1c00d39e <__rt_putc_debug_bridge+0x44>
1c00d396:	c701                	beqz	a4,1c00d39e <__rt_putc_debug_bridge+0x44>
1c00d398:	c858                	sw	a4,20(s0)
1c00d39a:	00042c23          	sw	zero,24(s0)
1c00d39e:	4c1c                	lw	a5,24(s0)
1c00d3a0:	e799                	bnez	a5,1c00d3ae <__rt_putc_debug_bridge+0x54>
1c00d3a2:	4422                	lw	s0,8(sp)
1c00d3a4:	40b2                	lw	ra,12(sp)
1c00d3a6:	4492                	lw	s1,4(sp)
1c00d3a8:	0141                	addi	sp,sp,16
1c00d3aa:	882fd06f          	j	1c00a42c <__rt_bridge_printf_flush>
1c00d3ae:	40b2                	lw	ra,12(sp)
1c00d3b0:	4422                	lw	s0,8(sp)
1c00d3b2:	4492                	lw	s1,4(sp)
1c00d3b4:	0141                	addi	sp,sp,16
1c00d3b6:	8082                	ret

1c00d3b8 <__rt_putc_uart>:
1c00d3b8:	1101                	addi	sp,sp,-32
1c00d3ba:	c62a                	sw	a0,12(sp)
1c00d3bc:	ce06                	sw	ra,28(sp)
1c00d3be:	e39ff0ef          	jal	ra,1c00d1f6 <__rt_io_uart_wait_pending>
1c00d3c2:	1c00f7b7          	lui	a5,0x1c00f
1c00d3c6:	05078793          	addi	a5,a5,80 # 1c00f050 <__hal_debug_struct>
1c00d3ca:	4f94                	lw	a3,24(a5)
1c00d3cc:	4532                	lw	a0,12(sp)
1c00d3ce:	00168713          	addi	a4,a3,1
1c00d3d2:	cf98                	sw	a4,24(a5)
1c00d3d4:	97b6                	add	a5,a5,a3
1c00d3d6:	00a78e23          	sb	a0,28(a5)
1c00d3da:	08000793          	li	a5,128
1c00d3de:	00f70463          	beq	a4,a5,1c00d3e6 <__rt_putc_uart+0x2e>
1c00d3e2:	00a53663          	p.bneimm	a0,10,1c00d3ee <__rt_putc_uart+0x36>
1c00d3e6:	40f2                	lw	ra,28(sp)
1c00d3e8:	6105                	addi	sp,sp,32
1c00d3ea:	d33ff06f          	j	1c00d11c <__rt_io_uart_flush.constprop.11>
1c00d3ee:	40f2                	lw	ra,28(sp)
1c00d3f0:	6105                	addi	sp,sp,32
1c00d3f2:	8082                	ret

1c00d3f4 <tfp_putc.isra.9>:
1c00d3f4:	1c00f7b7          	lui	a5,0x1c00f
1c00d3f8:	1187a783          	lw	a5,280(a5) # 1c00f118 <__rt_iodev>
1c00d3fc:	7135                	addi	sp,sp,-160
1c00d3fe:	cf06                	sw	ra,156(sp)
1c00d400:	0427bf63          	p.bneimm	a5,2,1c00d45e <tfp_putc.isra.9+0x6a>
1c00d404:	014027f3          	csrr	a5,uhartid
1c00d408:	8795                	srai	a5,a5,0x5
1c00d40a:	f267b7b3          	p.bclr	a5,a5,25,6
1c00d40e:	02000713          	li	a4,32
1c00d412:	00e79763          	bne	a5,a4,1c00d420 <tfp_putc.isra.9+0x2c>
1c00d416:	b37ff0ef          	jal	ra,1c00cf4c <__rt_do_putc_host>
1c00d41a:	40fa                	lw	ra,156(sp)
1c00d41c:	610d                	addi	sp,sp,160
1c00d41e:	8082                	ret
1c00d420:	08f10623          	sb	a5,140(sp)
1c00d424:	1c00d7b7          	lui	a5,0x1c00d
1c00d428:	4705                	li	a4,1
1c00d42a:	07878793          	addi	a5,a5,120 # 1c00d078 <__rt_putc_host_cluster_req>
1c00d42e:	08a106a3          	sb	a0,141(sp)
1c00d432:	0048                	addi	a0,sp,4
1c00d434:	d63a                	sw	a4,44(sp)
1c00d436:	c43e                	sw	a5,8(sp)
1c00d438:	c502                	sw	zero,136(sp)
1c00d43a:	ce02                	sw	zero,28(sp)
1c00d43c:	c62a                	sw	a0,12(sp)
1c00d43e:	00010c23          	sb	zero,24(sp)
1c00d442:	8b8fe0ef          	jal	ra,1c00b4fa <__rt_cluster_push_fc_event>
1c00d446:	4709                	li	a4,2
1c00d448:	002047b7          	lui	a5,0x204
1c00d44c:	46aa                	lw	a3,136(sp)
1c00d44e:	f6f1                	bnez	a3,1c00d41a <tfp_putc.isra.9+0x26>
1c00d450:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00d454:	03c7e683          	p.elw	a3,60(a5)
1c00d458:	00e7a223          	sw	a4,4(a5)
1c00d45c:	bfc5                	j	1c00d44c <tfp_putc.isra.9+0x58>
1c00d45e:	1c00f7b7          	lui	a5,0x1c00f
1c00d462:	60c7a783          	lw	a5,1548(a5) # 1c00f60c <_rt_io_uart>
1c00d466:	c781                	beqz	a5,1c00d46e <tfp_putc.isra.9+0x7a>
1c00d468:	f51ff0ef          	jal	ra,1c00d3b8 <__rt_putc_uart>
1c00d46c:	b77d                	j	1c00d41a <tfp_putc.isra.9+0x26>
1c00d46e:	1c00f7b7          	lui	a5,0x1c00f
1c00d472:	0607a783          	lw	a5,96(a5) # 1c00f060 <__hal_debug_struct+0x10>
1c00d476:	c395                	beqz	a5,1c00d49a <tfp_putc.isra.9+0xa6>
1c00d478:	014027f3          	csrr	a5,uhartid
1c00d47c:	00379713          	slli	a4,a5,0x3
1c00d480:	1a1106b7          	lui	a3,0x1a110
1c00d484:	ee873733          	p.bclr	a4,a4,23,8
1c00d488:	9736                	add	a4,a4,a3
1c00d48a:	6689                	lui	a3,0x2
1c00d48c:	078a                	slli	a5,a5,0x2
1c00d48e:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c00d492:	8ff5                	and	a5,a5,a3
1c00d494:	00a767a3          	p.sw	a0,a5(a4)
1c00d498:	b749                	j	1c00d41a <tfp_putc.isra.9+0x26>
1c00d49a:	ec1ff0ef          	jal	ra,1c00d35a <__rt_putc_debug_bridge>
1c00d49e:	bfb5                	j	1c00d41a <tfp_putc.isra.9+0x26>

1c00d4a0 <puts>:
1c00d4a0:	1141                	addi	sp,sp,-16
1c00d4a2:	c422                	sw	s0,8(sp)
1c00d4a4:	c606                	sw	ra,12(sp)
1c00d4a6:	842a                	mv	s0,a0
1c00d4a8:	b61ff0ef          	jal	ra,1c00d008 <__rt_io_lock>
1c00d4ac:	0014450b          	p.lbu	a0,1(s0!)
1c00d4b0:	c501                	beqz	a0,1c00d4b8 <puts+0x18>
1c00d4b2:	f43ff0ef          	jal	ra,1c00d3f4 <tfp_putc.isra.9>
1c00d4b6:	bfdd                	j	1c00d4ac <puts+0xc>
1c00d4b8:	4529                	li	a0,10
1c00d4ba:	f3bff0ef          	jal	ra,1c00d3f4 <tfp_putc.isra.9>
1c00d4be:	befff0ef          	jal	ra,1c00d0ac <__rt_io_unlock>
1c00d4c2:	40b2                	lw	ra,12(sp)
1c00d4c4:	4422                	lw	s0,8(sp)
1c00d4c6:	4501                	li	a0,0
1c00d4c8:	0141                	addi	sp,sp,16
1c00d4ca:	8082                	ret

1c00d4cc <fputc_locked>:
1c00d4cc:	1141                	addi	sp,sp,-16
1c00d4ce:	c422                	sw	s0,8(sp)
1c00d4d0:	842a                	mv	s0,a0
1c00d4d2:	0ff57513          	andi	a0,a0,255
1c00d4d6:	c606                	sw	ra,12(sp)
1c00d4d8:	f1dff0ef          	jal	ra,1c00d3f4 <tfp_putc.isra.9>
1c00d4dc:	8522                	mv	a0,s0
1c00d4de:	40b2                	lw	ra,12(sp)
1c00d4e0:	4422                	lw	s0,8(sp)
1c00d4e2:	0141                	addi	sp,sp,16
1c00d4e4:	8082                	ret

1c00d4e6 <fputc>:
1c00d4e6:	1141                	addi	sp,sp,-16
1c00d4e8:	c606                	sw	ra,12(sp)
1c00d4ea:	c422                	sw	s0,8(sp)
1c00d4ec:	842a                	mv	s0,a0
1c00d4ee:	b1bff0ef          	jal	ra,1c00d008 <__rt_io_lock>
1c00d4f2:	0ff47513          	andi	a0,s0,255
1c00d4f6:	effff0ef          	jal	ra,1c00d3f4 <tfp_putc.isra.9>
1c00d4fa:	1c00f7b7          	lui	a5,0x1c00f
1c00d4fe:	0607a783          	lw	a5,96(a5) # 1c00f060 <__hal_debug_struct+0x10>
1c00d502:	e399                	bnez	a5,1c00d508 <fputc+0x22>
1c00d504:	f29fc0ef          	jal	ra,1c00a42c <__rt_bridge_printf_flush>
1c00d508:	ba5ff0ef          	jal	ra,1c00d0ac <__rt_io_unlock>
1c00d50c:	8522                	mv	a0,s0
1c00d50e:	40b2                	lw	ra,12(sp)
1c00d510:	4422                	lw	s0,8(sp)
1c00d512:	0141                	addi	sp,sp,16
1c00d514:	8082                	ret

1c00d516 <putchar>:
1c00d516:	4589                	li	a1,2
1c00d518:	fcfff06f          	j	1c00d4e6 <fputc>

1c00d51c <_prf_locked>:
1c00d51c:	1101                	addi	sp,sp,-32
1c00d51e:	ce06                	sw	ra,28(sp)
1c00d520:	c02a                	sw	a0,0(sp)
1c00d522:	c62e                	sw	a1,12(sp)
1c00d524:	c432                	sw	a2,8(sp)
1c00d526:	c236                	sw	a3,4(sp)
1c00d528:	ae1ff0ef          	jal	ra,1c00d008 <__rt_io_lock>
1c00d52c:	4692                	lw	a3,4(sp)
1c00d52e:	4622                	lw	a2,8(sp)
1c00d530:	45b2                	lw	a1,12(sp)
1c00d532:	4502                	lw	a0,0(sp)
1c00d534:	2ca1                	jal	1c00d78c <_prf>
1c00d536:	c02a                	sw	a0,0(sp)
1c00d538:	b75ff0ef          	jal	ra,1c00d0ac <__rt_io_unlock>
1c00d53c:	40f2                	lw	ra,28(sp)
1c00d53e:	4502                	lw	a0,0(sp)
1c00d540:	6105                	addi	sp,sp,32
1c00d542:	8082                	ret

1c00d544 <exit>:
1c00d544:	1101                	addi	sp,sp,-32
1c00d546:	cc22                	sw	s0,24(sp)
1c00d548:	c84a                	sw	s2,16(sp)
1c00d54a:	c62a                	sw	a0,12(sp)
1c00d54c:	ce06                	sw	ra,28(sp)
1c00d54e:	ca26                	sw	s1,20(sp)
1c00d550:	a39fc0ef          	jal	ra,1c009f88 <__rt_deinit>
1c00d554:	4532                	lw	a0,12(sp)
1c00d556:	1a104437          	lui	s0,0x1a104
1c00d55a:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa10405c>
1c00d55e:	c1f54933          	p.bset	s2,a0,0,31
1c00d562:	0127a023          	sw	s2,0(a5)
1c00d566:	1c00f7b7          	lui	a5,0x1c00f
1c00d56a:	1187a783          	lw	a5,280(a5) # 1c00f118 <__rt_iodev>
1c00d56e:	0027bf63          	p.bneimm	a5,2,1c00d58c <exit+0x48>
1c00d572:	c901                	beqz	a0,1c00d582 <exit+0x3e>
1c00d574:	00020537          	lui	a0,0x20
1c00d578:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c00d57c:	fcefc0ef          	jal	ra,1c009d4a <semihost_exit>
1c00d580:	a001                	j	1c00d580 <exit+0x3c>
1c00d582:	00020537          	lui	a0,0x20
1c00d586:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c00d58a:	bfcd                	j	1c00d57c <exit+0x38>
1c00d58c:	1c00f4b7          	lui	s1,0x1c00f
1c00d590:	05048493          	addi	s1,s1,80 # 1c00f050 <__hal_debug_struct>
1c00d594:	e99fc0ef          	jal	ra,1c00a42c <__rt_bridge_printf_flush>
1c00d598:	0124a623          	sw	s2,12(s1)
1c00d59c:	e4dfc0ef          	jal	ra,1c00a3e8 <__rt_bridge_send_notif>
1c00d5a0:	449c                	lw	a5,8(s1)
1c00d5a2:	dff9                	beqz	a5,1c00d580 <exit+0x3c>
1c00d5a4:	07440413          	addi	s0,s0,116
1c00d5a8:	401c                	lw	a5,0(s0)
1c00d5aa:	83a5                	srli	a5,a5,0x9
1c00d5ac:	f837b7b3          	p.bclr	a5,a5,28,3
1c00d5b0:	fe77bce3          	p.bneimm	a5,7,1c00d5a8 <exit+0x64>
1c00d5b4:	e57fc0ef          	jal	ra,1c00a40a <__rt_bridge_clear_notif>
1c00d5b8:	b7e1                	j	1c00d580 <exit+0x3c>

1c00d5ba <abort>:
1c00d5ba:	1141                	addi	sp,sp,-16
1c00d5bc:	557d                	li	a0,-1
1c00d5be:	c606                	sw	ra,12(sp)
1c00d5c0:	f85ff0ef          	jal	ra,1c00d544 <exit>

1c00d5c4 <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c00d5c4:	1c00f7b7          	lui	a5,0x1c00f
1c00d5c8:	6007a423          	sw	zero,1544(a5) # 1c00f608 <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c00d5cc:	1b0017b7          	lui	a5,0x1b001
1c00d5d0:	c0c78793          	addi	a5,a5,-1012 # 1b000c0c <__rt_io_fc_lock>
1c00d5d4:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c00d5d8:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c00d5dc:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c00d5e0:	1c00f7b7          	lui	a5,0x1c00f
1c00d5e4:	6007a623          	sw	zero,1548(a5) # 1c00f60c <_rt_io_uart>
  __rt_io_event_current = NULL;
1c00d5e8:	1c00f7b7          	lui	a5,0x1c00f
1c00d5ec:	6007a023          	sw	zero,1536(a5) # 1c00f600 <__rt_io_event_current>
  return __rt_iodev;
1c00d5f0:	1c00f7b7          	lui	a5,0x1c00f

  if (rt_iodev() == RT_IODEV_UART)
1c00d5f4:	1187a783          	lw	a5,280(a5) # 1c00f118 <__rt_iodev>
1c00d5f8:	0217be63          	p.bneimm	a5,1,1c00d634 <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00d5fc:	1c00d5b7          	lui	a1,0x1c00d
{
1c00d600:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00d602:	4601                	li	a2,0
1c00d604:	f8e58593          	addi	a1,a1,-114 # 1c00cf8e <__rt_io_start>
1c00d608:	4501                	li	a0,0
{
1c00d60a:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00d60c:	b15fc0ef          	jal	ra,1c00a120 <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c00d610:	1c00d5b7          	lui	a1,0x1c00d
1c00d614:	28858593          	addi	a1,a1,648 # 1c00d288 <__rt_io_stop>
1c00d618:	4601                	li	a2,0
1c00d61a:	4505                	li	a0,1
1c00d61c:	b05fc0ef          	jal	ra,1c00a120 <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c00d620:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c00d622:	1c00f7b7          	lui	a5,0x1c00f
1c00d626:	6007a223          	sw	zero,1540(a5) # 1c00f604 <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c00d62a:	4585                	li	a1,1
1c00d62c:	4501                	li	a0,0
}
1c00d62e:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c00d630:	f2bfc06f          	j	1c00a55a <rt_event_alloc>
1c00d634:	8082                	ret

1c00d636 <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c00d636:	7139                	addi	sp,sp,-64
1c00d638:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00d63a:	862a                	mv	a2,a0
1c00d63c:	1c00d537          	lui	a0,0x1c00d
{
1c00d640:	d22e                	sw	a1,36(sp)
1c00d642:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00d644:	4589                	li	a1,2
	va_start(vargs, format);
1c00d646:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00d648:	4cc50513          	addi	a0,a0,1228 # 1c00d4cc <fputc_locked>
{
1c00d64c:	ce06                	sw	ra,28(sp)
1c00d64e:	d83a                	sw	a4,48(sp)
1c00d650:	da3e                	sw	a5,52(sp)
1c00d652:	dc42                	sw	a6,56(sp)
1c00d654:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c00d656:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00d658:	ec5ff0ef          	jal	ra,1c00d51c <_prf_locked>
	va_end(vargs);

	return r;
}
1c00d65c:	40f2                	lw	ra,28(sp)
1c00d65e:	6121                	addi	sp,sp,64
1c00d660:	8082                	ret

1c00d662 <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c00d662:	7179                	addi	sp,sp,-48
1c00d664:	d422                	sw	s0,40(sp)
1c00d666:	d226                	sw	s1,36(sp)
1c00d668:	ce4e                	sw	s3,28(sp)
1c00d66a:	cc52                	sw	s4,24(sp)
1c00d66c:	ca56                	sw	s5,20(sp)
1c00d66e:	c85a                	sw	s6,16(sp)
1c00d670:	d606                	sw	ra,44(sp)
1c00d672:	d04a                	sw	s2,32(sp)
1c00d674:	c65e                	sw	s7,12(sp)
1c00d676:	84aa                	mv	s1,a0
1c00d678:	89ae                	mv	s3,a1
1c00d67a:	8a32                	mv	s4,a2
1c00d67c:	8ab6                	mv	s5,a3
1c00d67e:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00d680:	4b25                	li	s6,9
		unsigned int d = n % base;
1c00d682:	8656                	mv	a2,s5
1c00d684:	4681                	li	a3,0
1c00d686:	854e                	mv	a0,s3
1c00d688:	85d2                	mv	a1,s4
1c00d68a:	b3cf30ef          	jal	ra,1c0009c6 <__umoddi3>
		n /= base;
1c00d68e:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c00d690:	892a                	mv	s2,a0
		n /= base;
1c00d692:	8656                	mv	a2,s5
1c00d694:	854e                	mv	a0,s3
1c00d696:	4681                	li	a3,0
1c00d698:	ff3f20ef          	jal	ra,1c00068a <__udivdi3>
1c00d69c:	89aa                	mv	s3,a0
1c00d69e:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00d6a0:	02700713          	li	a4,39
1c00d6a4:	012b6363          	bltu	s6,s2,1c00d6aa <_to_x+0x48>
1c00d6a8:	4701                	li	a4,0
1c00d6aa:	03090913          	addi	s2,s2,48
1c00d6ae:	974a                	add	a4,a4,s2
1c00d6b0:	00e40023          	sb	a4,0(s0)
	} while (n);
1c00d6b4:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00d6b6:	00140793          	addi	a5,s0,1
	} while (n);
1c00d6ba:	e195                	bnez	a1,1c00d6de <_to_x+0x7c>

	*buf = 0;
1c00d6bc:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c00d6c0:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c00d6c4:	0084ef63          	bltu	s1,s0,1c00d6e2 <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c00d6c8:	50b2                	lw	ra,44(sp)
1c00d6ca:	5422                	lw	s0,40(sp)
1c00d6cc:	5492                	lw	s1,36(sp)
1c00d6ce:	5902                	lw	s2,32(sp)
1c00d6d0:	49f2                	lw	s3,28(sp)
1c00d6d2:	4a62                	lw	s4,24(sp)
1c00d6d4:	4ad2                	lw	s5,20(sp)
1c00d6d6:	4b42                	lw	s6,16(sp)
1c00d6d8:	4bb2                	lw	s7,12(sp)
1c00d6da:	6145                	addi	sp,sp,48
1c00d6dc:	8082                	ret
1c00d6de:	843e                	mv	s0,a5
1c00d6e0:	b74d                	j	1c00d682 <_to_x+0x20>
		*buf = *start;
1c00d6e2:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c00d6e6:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c00d6ea:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c00d6ee:	00f480ab          	p.sb	a5,1(s1!)
1c00d6f2:	bfc9                	j	1c00d6c4 <_to_x+0x62>

1c00d6f4 <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c00d6f4:	411c                	lw	a5,0(a0)
1c00d6f6:	4154                	lw	a3,4(a0)
1c00d6f8:	fc17b733          	p.bclr	a4,a5,30,1
1c00d6fc:	01f69613          	slli	a2,a3,0x1f
1c00d700:	8385                	srli	a5,a5,0x1
1c00d702:	8fd1                	or	a5,a5,a2
1c00d704:	97ba                	add	a5,a5,a4
1c00d706:	8285                	srli	a3,a3,0x1
1c00d708:	00e7b733          	sltu	a4,a5,a4
1c00d70c:	9736                	add	a4,a4,a3
1c00d70e:	c11c                	sw	a5,0(a0)
1c00d710:	c158                	sw	a4,4(a0)
}
1c00d712:	8082                	ret

1c00d714 <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c00d714:	4118                	lw	a4,0(a0)
1c00d716:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00d718:	4615                	li	a2,5
	rem += 2U;
1c00d71a:	00270793          	addi	a5,a4,2
1c00d71e:	00e7b733          	sltu	a4,a5,a4
1c00d722:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00d724:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c00d728:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c00d72c:	01d71693          	slli	a3,a4,0x1d
1c00d730:	0037d713          	srli	a4,a5,0x3
1c00d734:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00d736:	02c75733          	divu	a4,a4,a2
1c00d73a:	01d75693          	srli	a3,a4,0x1d
1c00d73e:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c00d740:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c00d744:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00d746:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c00d74a:	973e                	add	a4,a4,a5
1c00d74c:	00f737b3          	sltu	a5,a4,a5
1c00d750:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c00d752:	c118                	sw	a4,0(a0)
1c00d754:	c15c                	sw	a5,4(a0)
}
1c00d756:	8082                	ret

1c00d758 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c00d758:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c00d75a:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c00d75e:	02f05563          	blez	a5,1c00d788 <_get_digit+0x30>
		*digit_count -= 1;
1c00d762:	17fd                	addi	a5,a5,-1
1c00d764:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c00d766:	411c                	lw	a5,0(a0)
1c00d768:	4729                	li	a4,10
1c00d76a:	4150                	lw	a2,4(a0)
1c00d76c:	02f706b3          	mul	a3,a4,a5
1c00d770:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00d774:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c00d776:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c00d77a:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00d77e:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c00d782:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00d786:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c00d788:	853a                	mv	a0,a4
1c00d78a:	8082                	ret

1c00d78c <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c00d78c:	7135                	addi	sp,sp,-160
1c00d78e:	c94a                	sw	s2,144(sp)
1c00d790:	c74e                	sw	s3,140(sp)
1c00d792:	c15a                	sw	s6,128(sp)
1c00d794:	dede                	sw	s7,124(sp)
1c00d796:	cf06                	sw	ra,156(sp)
1c00d798:	cd22                	sw	s0,152(sp)
1c00d79a:	cb26                	sw	s1,148(sp)
1c00d79c:	c552                	sw	s4,136(sp)
1c00d79e:	c356                	sw	s5,132(sp)
1c00d7a0:	dce2                	sw	s8,120(sp)
1c00d7a2:	dae6                	sw	s9,116(sp)
1c00d7a4:	d8ea                	sw	s10,112(sp)
1c00d7a6:	d6ee                	sw	s11,108(sp)
1c00d7a8:	8b2a                	mv	s6,a0
1c00d7aa:	8bae                	mv	s7,a1
1c00d7ac:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c00d7ae:	4981                	li	s3,0

	while ((c = *format++)) {
1c00d7b0:	00064503          	lbu	a0,0(a2)
1c00d7b4:	00160c13          	addi	s8,a2,1
1c00d7b8:	c911                	beqz	a0,1c00d7cc <_prf+0x40>
		if (c != '%') {
1c00d7ba:	02500793          	li	a5,37
1c00d7be:	14f50563          	beq	a0,a5,1c00d908 <_prf+0x17c>
			PUTC(c);
1c00d7c2:	85de                	mv	a1,s7
1c00d7c4:	9b02                	jalr	s6
1c00d7c6:	13f53fe3          	p.bneimm	a0,-1,1c00e104 <_prf+0x978>
1c00d7ca:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c00d7cc:	40fa                	lw	ra,156(sp)
1c00d7ce:	446a                	lw	s0,152(sp)
1c00d7d0:	854e                	mv	a0,s3
1c00d7d2:	44da                	lw	s1,148(sp)
1c00d7d4:	494a                	lw	s2,144(sp)
1c00d7d6:	49ba                	lw	s3,140(sp)
1c00d7d8:	4a2a                	lw	s4,136(sp)
1c00d7da:	4a9a                	lw	s5,132(sp)
1c00d7dc:	4b0a                	lw	s6,128(sp)
1c00d7de:	5bf6                	lw	s7,124(sp)
1c00d7e0:	5c66                	lw	s8,120(sp)
1c00d7e2:	5cd6                	lw	s9,116(sp)
1c00d7e4:	5d46                	lw	s10,112(sp)
1c00d7e6:	5db6                	lw	s11,108(sp)
1c00d7e8:	610d                	addi	sp,sp,160
1c00d7ea:	8082                	ret
				switch (c) {
1c00d7ec:	108d8663          	beq	s11,s0,1c00d8f8 <_prf+0x16c>
1c00d7f0:	0fb46863          	bltu	s0,s11,1c00d8e0 <_prf+0x154>
1c00d7f4:	fc0d8ce3          	beqz	s11,1c00d7cc <_prf+0x40>
1c00d7f8:	0ecd8d63          	beq	s11,a2,1c00d8f2 <_prf+0x166>
					fplus = true;
1c00d7fc:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c00d7fe:	000c4d83          	lbu	s11,0(s8)
1c00d802:	1c00f737          	lui	a4,0x1c00f
1c00d806:	ed470513          	addi	a0,a4,-300 # 1c00eed4 <__hyper_pad+0x11c>
1c00d80a:	85ee                	mv	a1,s11
1c00d80c:	c232                	sw	a2,4(sp)
1c00d80e:	b33ff0ef          	jal	ra,1c00d340 <strchr>
1c00d812:	001c0a13          	addi	s4,s8,1
1c00d816:	4612                	lw	a2,4(sp)
1c00d818:	f971                	bnez	a0,1c00d7ec <_prf+0x60>
			if (c == '*') {
1c00d81a:	02a00713          	li	a4,42
1c00d81e:	10ed9563          	bne	s11,a4,1c00d928 <_prf+0x19c>
				width = va_arg(vargs, int);
1c00d822:	00092c83          	lw	s9,0(s2)
1c00d826:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c00d82a:	000cd663          	bgez	s9,1c00d836 <_prf+0xaa>
					fminus = true;
1c00d82e:	4785                	li	a5,1
					width = -width;
1c00d830:	41900cb3          	neg	s9,s9
					fminus = true;
1c00d834:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c00d836:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c00d83a:	893a                	mv	s2,a4
				c = *format++;
1c00d83c:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c00d840:	02e00713          	li	a4,46
			precision = -1;
1c00d844:	547d                	li	s0,-1
			if (c == '.') {
1c00d846:	00ed9f63          	bne	s11,a4,1c00d864 <_prf+0xd8>
				if (c == '*') {
1c00d84a:	000a4703          	lbu	a4,0(s4)
1c00d84e:	02a00793          	li	a5,42
1c00d852:	10f71e63          	bne	a4,a5,1c00d96e <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c00d856:	00092403          	lw	s0,0(s2)
				c = *format++;
1c00d85a:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c00d85c:	0911                	addi	s2,s2,4
				c = *format++;
1c00d85e:	000a4d83          	lbu	s11,0(s4)
1c00d862:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c00d864:	1c00f737          	lui	a4,0x1c00f
1c00d868:	85ee                	mv	a1,s11
1c00d86a:	edc70513          	addi	a0,a4,-292 # 1c00eedc <__hyper_pad+0x124>
1c00d86e:	84ee                	mv	s1,s11
1c00d870:	ad1ff0ef          	jal	ra,1c00d340 <strchr>
1c00d874:	10050e63          	beqz	a0,1c00d990 <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c00d878:	06c00693          	li	a3,108
				c = *format++;
1c00d87c:	001a0c13          	addi	s8,s4,1
1c00d880:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c00d884:	0ed49963          	bne	s1,a3,1c00d976 <_prf+0x1ea>
1c00d888:	009d9863          	bne	s11,s1,1c00d898 <_prf+0x10c>
					c = *format++;
1c00d88c:	001a4d83          	lbu	s11,1(s4)
1c00d890:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c00d894:	04c00493          	li	s1,76
			switch (c) {
1c00d898:	06700693          	li	a3,103
1c00d89c:	17b6e263          	bltu	a3,s11,1c00da00 <_prf+0x274>
1c00d8a0:	06500693          	li	a3,101
1c00d8a4:	32ddfc63          	bleu	a3,s11,1c00dbdc <_prf+0x450>
1c00d8a8:	04700693          	li	a3,71
1c00d8ac:	0fb6e563          	bltu	a3,s11,1c00d996 <_prf+0x20a>
1c00d8b0:	04500713          	li	a4,69
1c00d8b4:	32edf463          	bleu	a4,s11,1c00dbdc <_prf+0x450>
1c00d8b8:	f00d8ae3          	beqz	s11,1c00d7cc <_prf+0x40>
1c00d8bc:	02500713          	li	a4,37
1c00d8c0:	02ed8de3          	beq	s11,a4,1c00e0fa <_prf+0x96e>
				PUTC('%');
1c00d8c4:	85de                	mv	a1,s7
1c00d8c6:	02500513          	li	a0,37
1c00d8ca:	9b02                	jalr	s6
1c00d8cc:	eff52fe3          	p.beqimm	a0,-1,1c00d7ca <_prf+0x3e>
				PUTC(c);
1c00d8d0:	85de                	mv	a1,s7
1c00d8d2:	856e                	mv	a0,s11
1c00d8d4:	9b02                	jalr	s6
1c00d8d6:	eff52ae3          	p.beqimm	a0,-1,1c00d7ca <_prf+0x3e>
				count += 2;
1c00d8da:	0989                	addi	s3,s3,2
1c00d8dc:	02b0006f          	j	1c00e106 <_prf+0x97a>
				switch (c) {
1c00d8e0:	039d8163          	beq	s11,s9,1c00d902 <_prf+0x176>
1c00d8e4:	009d8c63          	beq	s11,s1,1c00d8fc <_prf+0x170>
1c00d8e8:	f1ad9ae3          	bne	s11,s10,1c00d7fc <_prf+0x70>
					fplus = true;
1c00d8ec:	4705                	li	a4,1
1c00d8ee:	c63a                	sw	a4,12(sp)
					break;
1c00d8f0:	b731                	j	1c00d7fc <_prf+0x70>
					fspace = true;
1c00d8f2:	4785                	li	a5,1
1c00d8f4:	c83e                	sw	a5,16(sp)
					break;
1c00d8f6:	b719                	j	1c00d7fc <_prf+0x70>
					falt = true;
1c00d8f8:	4a85                	li	s5,1
					break;
1c00d8fa:	b709                	j	1c00d7fc <_prf+0x70>
					fzero = true;
1c00d8fc:	4705                	li	a4,1
1c00d8fe:	ce3a                	sw	a4,28(sp)
					break;
1c00d900:	bdf5                	j	1c00d7fc <_prf+0x70>
					fminus = true;
1c00d902:	4785                	li	a5,1
1c00d904:	cc3e                	sw	a5,24(sp)
1c00d906:	bddd                	j	1c00d7fc <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c00d908:	ce02                	sw	zero,28(sp)
1c00d90a:	c802                	sw	zero,16(sp)
1c00d90c:	c602                	sw	zero,12(sp)
1c00d90e:	cc02                	sw	zero,24(sp)
1c00d910:	4a81                	li	s5,0
				switch (c) {
1c00d912:	02300413          	li	s0,35
1c00d916:	02d00c93          	li	s9,45
1c00d91a:	03000493          	li	s1,48
1c00d91e:	02b00d13          	li	s10,43
1c00d922:	02000613          	li	a2,32
1c00d926:	bde1                	j	1c00d7fe <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c00d928:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c00d92c:	46a5                	li	a3,9
				width = 0;
1c00d92e:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c00d930:	f0e6e8e3          	bltu	a3,a4,1c00d840 <_prf+0xb4>
	while (isdigit(*p)) {
1c00d934:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c00d936:	4629                	li	a2,10
	while (isdigit(*p)) {
1c00d938:	8a62                	mv	s4,s8
1c00d93a:	001a4d8b          	p.lbu	s11,1(s4!)
1c00d93e:	fd0d8693          	addi	a3,s11,-48
1c00d942:	eed76fe3          	bltu	a4,a3,1c00d840 <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c00d946:	87ee                	mv	a5,s11
1c00d948:	42cc87b3          	p.mac	a5,s9,a2
1c00d94c:	8c52                	mv	s8,s4
1c00d94e:	fd078c93          	addi	s9,a5,-48
1c00d952:	b7dd                	j	1c00d938 <_prf+0x1ac>
1c00d954:	42b407b3          	p.mac	a5,s0,a1
1c00d958:	8a3a                	mv	s4,a4
1c00d95a:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c00d95e:	8752                	mv	a4,s4
1c00d960:	0017478b          	p.lbu	a5,1(a4!)
1c00d964:	fd078613          	addi	a2,a5,-48
1c00d968:	fec6f6e3          	bleu	a2,a3,1c00d954 <_prf+0x1c8>
1c00d96c:	bdcd                	j	1c00d85e <_prf+0xd2>
	int i = 0;
1c00d96e:	4401                	li	s0,0
	while (isdigit(*p)) {
1c00d970:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c00d972:	45a9                	li	a1,10
1c00d974:	b7ed                	j	1c00d95e <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c00d976:	06800693          	li	a3,104
1c00d97a:	f0d49fe3          	bne	s1,a3,1c00d898 <_prf+0x10c>
1c00d97e:	f09d9de3          	bne	s11,s1,1c00d898 <_prf+0x10c>
					c = *format++;
1c00d982:	002a0c13          	addi	s8,s4,2
1c00d986:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c00d98a:	04800493          	li	s1,72
1c00d98e:	b729                	j	1c00d898 <_prf+0x10c>
1c00d990:	8c52                	mv	s8,s4
			i = 0;
1c00d992:	4481                	li	s1,0
1c00d994:	b711                	j	1c00d898 <_prf+0x10c>
			switch (c) {
1c00d996:	06300693          	li	a3,99
1c00d99a:	12dd8a63          	beq	s11,a3,1c00dace <_prf+0x342>
1c00d99e:	09b6e163          	bltu	a3,s11,1c00da20 <_prf+0x294>
1c00d9a2:	05800693          	li	a3,88
1c00d9a6:	f0dd9fe3          	bne	s11,a3,1c00d8c4 <_prf+0x138>
				switch (i) {
1c00d9aa:	06c00693          	li	a3,108
1c00d9ae:	6cd48363          	beq	s1,a3,1c00e074 <_prf+0x8e8>
1c00d9b2:	07a00693          	li	a3,122
1c00d9b6:	6ad48f63          	beq	s1,a3,1c00e074 <_prf+0x8e8>
1c00d9ba:	04c00693          	li	a3,76
1c00d9be:	6ad49b63          	bne	s1,a3,1c00e074 <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c00d9c2:	091d                	addi	s2,s2,7
1c00d9c4:	c4093933          	p.bclr	s2,s2,2,0
1c00d9c8:	00092583          	lw	a1,0(s2)
1c00d9cc:	00492603          	lw	a2,4(s2)
1c00d9d0:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c00d9d4:	06f00713          	li	a4,111
1c00d9d8:	00c4                	addi	s1,sp,68
1c00d9da:	6aed9d63          	bne	s11,a4,1c00e094 <_prf+0x908>
	if (alt_form) {
1c00d9de:	6a0a8163          	beqz	s5,1c00e080 <_prf+0x8f4>
		*buf++ = '0';
1c00d9e2:	03000793          	li	a5,48
1c00d9e6:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c00d9ea:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c00d9ee:	04510513          	addi	a0,sp,69
		if (!value) {
1c00d9f2:	68079863          	bnez	a5,1c00e082 <_prf+0x8f6>
			*buf++ = 0;
1c00d9f6:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c00d9fa:	4901                	li	s2,0
			return 1;
1c00d9fc:	4d85                	li	s11,1
1c00d9fe:	a069                	j	1c00da88 <_prf+0x2fc>
			switch (c) {
1c00da00:	07000693          	li	a3,112
1c00da04:	62dd8f63          	beq	s11,a3,1c00e042 <_prf+0x8b6>
1c00da08:	09b6e663          	bltu	a3,s11,1c00da94 <_prf+0x308>
1c00da0c:	06e00693          	li	a3,110
1c00da10:	5edd8463          	beq	s11,a3,1c00dff8 <_prf+0x86c>
1c00da14:	f9b6ebe3          	bltu	a3,s11,1c00d9aa <_prf+0x21e>
1c00da18:	06900693          	li	a3,105
1c00da1c:	eadd94e3          	bne	s11,a3,1c00d8c4 <_prf+0x138>
				switch (i) {
1c00da20:	06c00793          	li	a5,108
1c00da24:	18f48563          	beq	s1,a5,1c00dbae <_prf+0x422>
1c00da28:	07a00793          	li	a5,122
1c00da2c:	18f48163          	beq	s1,a5,1c00dbae <_prf+0x422>
1c00da30:	04c00793          	li	a5,76
1c00da34:	16f49d63          	bne	s1,a5,1c00dbae <_prf+0x422>
					val = va_arg(vargs, long long);
1c00da38:	091d                	addi	s2,s2,7
1c00da3a:	c4093933          	p.bclr	s2,s2,2,0
1c00da3e:	00092583          	lw	a1,0(s2)
1c00da42:	00492a83          	lw	s5,4(s2)
1c00da46:	00890a13          	addi	s4,s2,8
1c00da4a:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c00da4e:	160ad763          	bgez	s5,1c00dbbc <_prf+0x430>
		*buf++ = '-';
1c00da52:	02d00793          	li	a5,45
		value = -value;
1c00da56:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c00da5a:	04f10223          	sb	a5,68(sp)
		value = -value;
1c00da5e:	41500633          	neg	a2,s5
1c00da62:	00b037b3          	snez	a5,a1
1c00da66:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c00da68:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c00da6c:	854a                	mv	a0,s2
1c00da6e:	46a9                	li	a3,10
1c00da70:	bf3ff0ef          	jal	ra,1c00d662 <_to_x>
				if (fplus || fspace || val < 0) {
1c00da74:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c00da76:	954a                	add	a0,a0,s2
1c00da78:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c00da7c:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c00da7e:	e789                	bnez	a5,1c00da88 <_prf+0x2fc>
1c00da80:	4742                	lw	a4,16(sp)
1c00da82:	e319                	bnez	a4,1c00da88 <_prf+0x2fc>
1c00da84:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c00da88:	04045c63          	bgez	s0,1c00dae0 <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c00da8c:	4401                	li	s0,0
1c00da8e:	4a81                	li	s5,0
1c00da90:	4681                	li	a3,0
1c00da92:	a401                	j	1c00dc92 <_prf+0x506>
			switch (c) {
1c00da94:	07500693          	li	a3,117
1c00da98:	f0dd89e3          	beq	s11,a3,1c00d9aa <_prf+0x21e>
1c00da9c:	07800693          	li	a3,120
1c00daa0:	f0dd85e3          	beq	s11,a3,1c00d9aa <_prf+0x21e>
1c00daa4:	07300713          	li	a4,115
1c00daa8:	e0ed9ee3          	bne	s11,a4,1c00d8c4 <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c00daac:	00490a13          	addi	s4,s2,4
1c00dab0:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c00dab4:	00045663          	bgez	s0,1c00dac0 <_prf+0x334>
					precision = INT_MAX;
1c00dab8:	80000737          	lui	a4,0x80000
1c00dabc:	fff74413          	not	s0,a4
1c00dac0:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c00dac2:	4d81                	li	s11,0
1c00dac4:	5bb41263          	bne	s0,s11,1c00e068 <_prf+0x8dc>
1c00dac8:	4901                	li	s2,0
1c00daca:	4401                	li	s0,0
1c00dacc:	a819                	j	1c00dae2 <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c00dace:	00092783          	lw	a5,0(s2)
1c00dad2:	00490a13          	addi	s4,s2,4
				clen = 1;
1c00dad6:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c00dad8:	04f10223          	sb	a5,68(sp)
				break;
1c00dadc:	4901                	li	s2,0
1c00dade:	4401                	li	s0,0
1c00dae0:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c00dae2:	41b40d33          	sub	s10,s0,s11
1c00dae6:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00dae8:	4401                	li	s0,0
1c00daea:	4a81                	li	s5,0
1c00daec:	4681                	li	a3,0
1c00daee:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c00daf2:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c00daf4:	01bd0633          	add	a2,s10,s11
1c00daf8:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c00dafc:	e701                	bnez	a4,1c00db04 <_prf+0x378>
1c00dafe:	84e6                	mv	s1,s9
1c00db00:	63904263          	bgtz	s9,1c00e124 <_prf+0x998>
1c00db04:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c00db08:	62979463          	bne	a5,s1,1c00e130 <_prf+0x9a4>
1c00db0c:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c00db0e:	14fd                	addi	s1,s1,-1
1c00db10:	63f4bc63          	p.bneimm	s1,-1,1c00e148 <_prf+0x9bc>
			clen -= prefix;
1c00db14:	412d84b3          	sub	s1,s11,s2
1c00db18:	8726                	mv	a4,s1
			if (zero.predot) {
1c00db1a:	c295                	beqz	a3,1c00db3e <_prf+0x3b2>
				c = *cptr;
1c00db1c:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c00db20:	8dbe                	mv	s11,a5
1c00db22:	00978833          	add	a6,a5,s1
1c00db26:	4625                	li	a2,9
1c00db28:	fd050593          	addi	a1,a0,-48
1c00db2c:	41b80733          	sub	a4,a6,s11
1c00db30:	62b67863          	bleu	a1,a2,1c00e160 <_prf+0x9d4>
1c00db34:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c00db36:	64061363          	bnez	a2,1c00e17c <_prf+0x9f0>
				clen -= zero.predot;
1c00db3a:	8f15                	sub	a4,a4,a3
1c00db3c:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c00db3e:	020a8e63          	beqz	s5,1c00db7a <_prf+0x3ee>
1c00db42:	8dbe                	mv	s11,a5
1c00db44:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c00db48:	02e00613          	li	a2,46
					c = *cptr++;
1c00db4c:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c00db50:	85de                	mv	a1,s7
1c00db52:	c232                	sw	a2,4(sp)
1c00db54:	8536                	mv	a0,a3
1c00db56:	c036                	sw	a3,0(sp)
1c00db58:	c442                	sw	a6,8(sp)
1c00db5a:	9b02                	jalr	s6
1c00db5c:	4612                	lw	a2,4(sp)
1c00db5e:	4682                	lw	a3,0(sp)
1c00db60:	4822                	lw	a6,8(sp)
1c00db62:	c7f524e3          	p.beqimm	a0,-1,1c00d7ca <_prf+0x3e>
1c00db66:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c00db6a:	fec691e3          	bne	a3,a2,1c00db4c <_prf+0x3c0>
1c00db6e:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c00db70:	62d04563          	bgtz	a3,1c00e19a <_prf+0xa0e>
				clen -= zero.postdot;
1c00db74:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c00db78:	87ee                	mv	a5,s11
			if (zero.trail) {
1c00db7a:	c415                	beqz	s0,1c00dba6 <_prf+0x41a>
				c = *cptr;
1c00db7c:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c00db80:	8dbe                	mv	s11,a5
1c00db82:	973e                	add	a4,a4,a5
1c00db84:	4625                	li	a2,9
1c00db86:	02e00693          	li	a3,46
1c00db8a:	fd050593          	addi	a1,a0,-48
1c00db8e:	41b70ab3          	sub	s5,a4,s11
1c00db92:	62b67163          	bleu	a1,a2,1c00e1b4 <_prf+0xa28>
1c00db96:	60d50f63          	beq	a0,a3,1c00e1b4 <_prf+0xa28>
1c00db9a:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c00db9c:	62e04a63          	bgtz	a4,1c00e1d0 <_prf+0xa44>
				clen -= zero.trail;
1c00dba0:	408a8733          	sub	a4,s5,s0
1c00dba4:	87ee                	mv	a5,s11
1c00dba6:	843e                	mv	s0,a5
1c00dba8:	00e78ab3          	add	s5,a5,a4
1c00dbac:	a599                	j	1c00e1f2 <_prf+0xa66>
					val = va_arg(vargs, int);
1c00dbae:	00092583          	lw	a1,0(s2)
1c00dbb2:	00490a13          	addi	s4,s2,4
1c00dbb6:	41f5da93          	srai	s5,a1,0x1f
					break;
1c00dbba:	bd41                	j	1c00da4a <_prf+0x2be>
	} else if (fplus) {
1c00dbbc:	47b2                	lw	a5,12(sp)
1c00dbbe:	c799                	beqz	a5,1c00dbcc <_prf+0x440>
		*buf++ = '+';
1c00dbc0:	02b00793          	li	a5,43
		*buf++ = ' ';
1c00dbc4:	04f10223          	sb	a5,68(sp)
1c00dbc8:	8656                	mv	a2,s5
1c00dbca:	bd79                	j	1c00da68 <_prf+0x2dc>
	} else if (fspace) {
1c00dbcc:	4742                	lw	a4,16(sp)
1c00dbce:	c701                	beqz	a4,1c00dbd6 <_prf+0x44a>
		*buf++ = ' ';
1c00dbd0:	02000793          	li	a5,32
1c00dbd4:	bfc5                	j	1c00dbc4 <_prf+0x438>
	} else if (fspace) {
1c00dbd6:	8656                	mv	a2,s5
1c00dbd8:	896e                	mv	s2,s11
1c00dbda:	bd49                	j	1c00da6c <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c00dbdc:	091d                	addi	s2,s2,7
1c00dbde:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c00dbe2:	00092583          	lw	a1,0(s2)
1c00dbe6:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00dbea:	800007b7          	lui	a5,0x80000
1c00dbee:	0155d613          	srli	a2,a1,0x15
1c00dbf2:	00b69713          	slli	a4,a3,0xb
1c00dbf6:	8f51                	or	a4,a4,a2
1c00dbf8:	fff7c793          	not	a5,a5
1c00dbfc:	05ae                	slli	a1,a1,0xb
1c00dbfe:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c00dc00:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00dc04:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00dc06:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00dc0a:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00dc0c:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c00dc10:	0806d863          	bgez	a3,1c00dca0 <_prf+0x514>
		*buf++ = '-';
1c00dc14:	02d00693          	li	a3,45
		*buf++ = ' ';
1c00dc18:	04d10223          	sb	a3,68(sp)
1c00dc1c:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c00dc20:	7ff00693          	li	a3,2047
1c00dc24:	0cd91363          	bne	s2,a3,1c00dcea <_prf+0x55e>
		if (!fract) {
1c00dc28:	8f4d                	or	a4,a4,a1
1c00dc2a:	fbfd8793          	addi	a5,s11,-65
1c00dc2e:	00348513          	addi	a0,s1,3
1c00dc32:	eb49                	bnez	a4,1c00dcc4 <_prf+0x538>
			if (isupper(c)) {
1c00dc34:	4765                	li	a4,25
1c00dc36:	06f76f63          	bltu	a4,a5,1c00dcb4 <_prf+0x528>
				*buf++ = 'I';
1c00dc3a:	6795                	lui	a5,0x5
1c00dc3c:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c00dc40:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c00dc44:	04600793          	li	a5,70
		return buf - start;
1c00dc48:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c00dc4c:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c00dc50:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c00dc54:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00dc58:	4401                	li	s0,0
1c00dc5a:	4a81                	li	s5,0
1c00dc5c:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c00dc5e:	4732                	lw	a4,12(sp)
					prefix = 1;
1c00dc60:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c00dc62:	eb09                	bnez	a4,1c00dc74 <_prf+0x4e8>
1c00dc64:	47c2                	lw	a5,16(sp)
1c00dc66:	e799                	bnez	a5,1c00dc74 <_prf+0x4e8>
1c00dc68:	04414903          	lbu	s2,68(sp)
1c00dc6c:	fd390913          	addi	s2,s2,-45
1c00dc70:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c00dc74:	1098                	addi	a4,sp,96
1c00dc76:	012707b3          	add	a5,a4,s2
1c00dc7a:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c00dc7e:	015684b3          	add	s1,a3,s5
1c00dc82:	94a2                	add	s1,s1,s0
1c00dc84:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c00dc88:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c00dc8a:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c00dc8e:	46f66e63          	bltu	a2,a5,1c00e10a <_prf+0x97e>
			} else if (fzero) {
1c00dc92:	47f2                	lw	a5,28(sp)
1c00dc94:	46078b63          	beqz	a5,1c00e10a <_prf+0x97e>
				zero_head = width - clen;
1c00dc98:	41bc8d33          	sub	s10,s9,s11
1c00dc9c:	00dc                	addi	a5,sp,68
1c00dc9e:	bd81                	j	1c00daee <_prf+0x362>
	} else if (fplus) {
1c00dca0:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c00dca2:	02b00693          	li	a3,43
	} else if (fplus) {
1c00dca6:	fbad                	bnez	a5,1c00dc18 <_prf+0x48c>
	} else if (fspace) {
1c00dca8:	47c2                	lw	a5,16(sp)
1c00dcaa:	00c4                	addi	s1,sp,68
1c00dcac:	dbb5                	beqz	a5,1c00dc20 <_prf+0x494>
		*buf++ = ' ';
1c00dcae:	02000693          	li	a3,32
1c00dcb2:	b79d                	j	1c00dc18 <_prf+0x48c>
				*buf++ = 'i';
1c00dcb4:	679d                	lui	a5,0x7
1c00dcb6:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c00dcba:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c00dcbe:	06600793          	li	a5,102
1c00dcc2:	b759                	j	1c00dc48 <_prf+0x4bc>
			if (isupper(c)) {
1c00dcc4:	4765                	li	a4,25
1c00dcc6:	00f76a63          	bltu	a4,a5,1c00dcda <_prf+0x54e>
				*buf++ = 'N';
1c00dcca:	6791                	lui	a5,0x4
1c00dccc:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c00dcd0:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c00dcd4:	04e00793          	li	a5,78
1c00dcd8:	bf85                	j	1c00dc48 <_prf+0x4bc>
				*buf++ = 'n';
1c00dcda:	6799                	lui	a5,0x6
1c00dcdc:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c00dce0:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c00dce4:	06e00793          	li	a5,110
1c00dce8:	b785                	j	1c00dc48 <_prf+0x4bc>
	if (c == 'F') {
1c00dcea:	04600693          	li	a3,70
1c00dcee:	00dd9463          	bne	s11,a3,1c00dcf6 <_prf+0x56a>
		c = 'f';
1c00dcf2:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c00dcf6:	41f95613          	srai	a2,s2,0x1f
1c00dcfa:	00b966b3          	or	a3,s2,a1
1c00dcfe:	8e59                	or	a2,a2,a4
1c00dd00:	8ed1                	or	a3,a3,a2
1c00dd02:	1c068263          	beqz	a3,1c00dec6 <_prf+0x73a>
		if (exp == 0) {
1c00dd06:	10090d63          	beqz	s2,1c00de20 <_prf+0x694>
		fract |= HIGHBIT64;
1c00dd0a:	5752                	lw	a4,52(sp)
1c00dd0c:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c00dd10:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c00dd14:	8f5d                	or	a4,a4,a5
1c00dd16:	da3a                	sw	a4,52(sp)
1c00dd18:	4d01                	li	s10,0
	while (exp <= -3) {
1c00dd1a:	5779                	li	a4,-2
1c00dd1c:	10e94f63          	blt	s2,a4,1c00de3a <_prf+0x6ae>
	while (exp > 0) {
1c00dd20:	17204663          	bgtz	s2,1c00de8c <_prf+0x700>
		_rlrshift(&fract);
1c00dd24:	1808                	addi	a0,sp,48
		exp++;
1c00dd26:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c00dd28:	9cdff0ef          	jal	ra,1c00d6f4 <_rlrshift>
	while (exp < (0 + 4)) {
1c00dd2c:	fe493ce3          	p.bneimm	s2,4,1c00dd24 <_prf+0x598>
	if (precision < 0) {
1c00dd30:	00045363          	bgez	s0,1c00dd36 <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c00dd34:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c00dd36:	0dfdf713          	andi	a4,s11,223
1c00dd3a:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00dd3e:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c00dd40:	02d71563          	bne	a4,a3,1c00dd6a <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c00dd44:	5775                	li	a4,-3
1c00dd46:	00ed4463          	blt	s10,a4,1c00dd4e <_prf+0x5c2>
1c00dd4a:	19a45163          	ble	s10,s0,1c00decc <_prf+0x740>
			c += 'e' - 'g';
1c00dd4e:	ffed8793          	addi	a5,s11,-2
1c00dd52:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c00dd56:	4c040e63          	beqz	s0,1c00e232 <_prf+0xaa6>
				precision--;
1c00dd5a:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c00dd5c:	4c0a9b63          	bnez	s5,1c00e232 <_prf+0xaa6>
1c00dd60:	00802933          	sgtz	s2,s0
1c00dd64:	0ff97913          	andi	s2,s2,255
1c00dd68:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c00dd6a:	06600713          	li	a4,102
1c00dd6e:	4ced9363          	bne	s11,a4,1c00e234 <_prf+0xaa8>
		exp = precision + decexp;
1c00dd72:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c00dd76:	06600d93          	li	s11,102
1c00dd7a:	4a075f63          	bgez	a4,1c00e238 <_prf+0xaac>
	digit_count = 16;
1c00dd7e:	4741                	li	a4,16
1c00dd80:	d63a                	sw	a4,44(sp)
			exp = 0;
1c00dd82:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c00dd84:	4601                	li	a2,0
1c00dd86:	080006b7          	lui	a3,0x8000
1c00dd8a:	dc32                	sw	a2,56(sp)
1c00dd8c:	de36                	sw	a3,60(sp)
	while (exp--) {
1c00dd8e:	197d                	addi	s2,s2,-1
1c00dd90:	15f93563          	p.bneimm	s2,-1,1c00deda <_prf+0x74e>
	fract += ltemp;
1c00dd94:	5742                	lw	a4,48(sp)
1c00dd96:	56e2                	lw	a3,56(sp)
1c00dd98:	5652                	lw	a2,52(sp)
1c00dd9a:	55f2                	lw	a1,60(sp)
1c00dd9c:	96ba                	add	a3,a3,a4
1c00dd9e:	00e6b733          	sltu	a4,a3,a4
1c00dda2:	962e                	add	a2,a2,a1
1c00dda4:	9732                	add	a4,a4,a2
1c00dda6:	da3a                	sw	a4,52(sp)
1c00dda8:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c00ddaa:	f6073733          	p.bclr	a4,a4,27,0
1c00ddae:	cb01                	beqz	a4,1c00ddbe <_prf+0x632>
		_ldiv5(&fract);
1c00ddb0:	1808                	addi	a0,sp,48
1c00ddb2:	963ff0ef          	jal	ra,1c00d714 <_ldiv5>
		_rlrshift(&fract);
1c00ddb6:	1808                	addi	a0,sp,48
1c00ddb8:	93dff0ef          	jal	ra,1c00d6f4 <_rlrshift>
		decexp++;
1c00ddbc:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c00ddbe:	06600713          	li	a4,102
1c00ddc2:	16ed9163          	bne	s11,a4,1c00df24 <_prf+0x798>
		if (decexp > 0) {
1c00ddc6:	8926                	mv	s2,s1
1c00ddc8:	13a04963          	bgtz	s10,1c00defa <_prf+0x76e>
			*buf++ = '0';
1c00ddcc:	03000713          	li	a4,48
1c00ddd0:	00e48023          	sb	a4,0(s1)
1c00ddd4:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c00ddd8:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c00ddda:	120a8763          	beqz	s5,1c00df08 <_prf+0x77c>
			*buf++ = '.';
1c00ddde:	02e00593          	li	a1,46
1c00dde2:	00b90023          	sb	a1,0(s2)
1c00dde6:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c00ddea:	440d0263          	beqz	s10,1c00e22e <_prf+0xaa2>
1c00ddee:	12805863          	blez	s0,1c00df1e <_prf+0x792>
			zp->postdot = -decexp;
1c00ddf2:	41a00ab3          	neg	s5,s10
1c00ddf6:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c00ddfa:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c00ddfe:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c00de00:	10805763          	blez	s0,1c00df0e <_prf+0x782>
1c00de04:	5732                	lw	a4,44(sp)
1c00de06:	10e05463          	blez	a4,1c00df0e <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c00de0a:	106c                	addi	a1,sp,44
1c00de0c:	1808                	addi	a0,sp,48
1c00de0e:	c036                	sw	a3,0(sp)
1c00de10:	949ff0ef          	jal	ra,1c00d758 <_get_digit>
1c00de14:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00de18:	147d                	addi	s0,s0,-1
1c00de1a:	4682                	lw	a3,0(sp)
1c00de1c:	b7d5                	j	1c00de00 <_prf+0x674>
				exp--;
1c00de1e:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c00de20:	01f5d693          	srli	a3,a1,0x1f
1c00de24:	0706                	slli	a4,a4,0x1
1c00de26:	8f55                	or	a4,a4,a3
1c00de28:	0586                	slli	a1,a1,0x1
1c00de2a:	fe075ae3          	bgez	a4,1c00de1e <_prf+0x692>
1c00de2e:	d82e                	sw	a1,48(sp)
1c00de30:	da3a                	sw	a4,52(sp)
1c00de32:	bde1                	j	1c00dd0a <_prf+0x57e>
			_rlrshift(&fract);
1c00de34:	1808                	addi	a0,sp,48
1c00de36:	8bfff0ef          	jal	ra,1c00d6f4 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c00de3a:	55d2                	lw	a1,52(sp)
1c00de3c:	33333737          	lui	a4,0x33333
1c00de40:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x17323c82>
1c00de44:	5642                	lw	a2,48(sp)
1c00de46:	0905                	addi	s2,s2,1
1c00de48:	feb766e3          	bltu	a4,a1,1c00de34 <_prf+0x6a8>
		fract *= 5U;
1c00de4c:	4695                	li	a3,5
1c00de4e:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c00de52:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c00de54:	02c68633          	mul	a2,a3,a2
1c00de58:	42b68733          	p.mac	a4,a3,a1
1c00de5c:	d832                	sw	a2,48(sp)
		decexp--;
1c00de5e:	4681                	li	a3,0
		fract *= 5U;
1c00de60:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00de62:	800007b7          	lui	a5,0x80000
1c00de66:	fff7c793          	not	a5,a5
1c00de6a:	00e7f763          	bleu	a4,a5,1c00de78 <_prf+0x6ec>
1c00de6e:	ea0686e3          	beqz	a3,1c00dd1a <_prf+0x58e>
1c00de72:	d832                	sw	a2,48(sp)
1c00de74:	da3a                	sw	a4,52(sp)
1c00de76:	b555                	j	1c00dd1a <_prf+0x58e>
			fract <<= 1;
1c00de78:	01f65593          	srli	a1,a2,0x1f
1c00de7c:	00171693          	slli	a3,a4,0x1
1c00de80:	00d5e733          	or	a4,a1,a3
1c00de84:	0606                	slli	a2,a2,0x1
			exp--;
1c00de86:	197d                	addi	s2,s2,-1
1c00de88:	4685                	li	a3,1
1c00de8a:	bfe1                	j	1c00de62 <_prf+0x6d6>
		_ldiv5(&fract);
1c00de8c:	1808                	addi	a0,sp,48
1c00de8e:	887ff0ef          	jal	ra,1c00d714 <_ldiv5>
1c00de92:	5642                	lw	a2,48(sp)
1c00de94:	5752                	lw	a4,52(sp)
		exp--;
1c00de96:	197d                	addi	s2,s2,-1
		decexp++;
1c00de98:	0d05                	addi	s10,s10,1
1c00de9a:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00de9c:	800007b7          	lui	a5,0x80000
1c00dea0:	fff7c793          	not	a5,a5
1c00dea4:	00e7f763          	bleu	a4,a5,1c00deb2 <_prf+0x726>
1c00dea8:	e6068ce3          	beqz	a3,1c00dd20 <_prf+0x594>
1c00deac:	d832                	sw	a2,48(sp)
1c00deae:	da3a                	sw	a4,52(sp)
1c00deb0:	bd85                	j	1c00dd20 <_prf+0x594>
			fract <<= 1;
1c00deb2:	01f65593          	srli	a1,a2,0x1f
1c00deb6:	00171693          	slli	a3,a4,0x1
1c00deba:	00d5e733          	or	a4,a1,a3
1c00debe:	0606                	slli	a2,a2,0x1
			exp--;
1c00dec0:	197d                	addi	s2,s2,-1
1c00dec2:	4685                	li	a3,1
1c00dec4:	bfe1                	j	1c00de9c <_prf+0x710>
	if ((exp | fract) != 0) {
1c00dec6:	4d01                	li	s10,0
1c00dec8:	4901                	li	s2,0
1c00deca:	bda9                	j	1c00dd24 <_prf+0x598>
			precision -= decexp;
1c00decc:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c00ded0:	ea0a91e3          	bnez	s5,1c00dd72 <_prf+0x5e6>
			c = 'f';
1c00ded4:	06600d93          	li	s11,102
1c00ded8:	b561                	j	1c00dd60 <_prf+0x5d4>
		_ldiv5(&ltemp);
1c00deda:	1828                	addi	a0,sp,56
1c00dedc:	839ff0ef          	jal	ra,1c00d714 <_ldiv5>
		_rlrshift(&ltemp);
1c00dee0:	1828                	addi	a0,sp,56
1c00dee2:	813ff0ef          	jal	ra,1c00d6f4 <_rlrshift>
1c00dee6:	b565                	j	1c00dd8e <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c00dee8:	106c                	addi	a1,sp,44
1c00deea:	1808                	addi	a0,sp,48
1c00deec:	86dff0ef          	jal	ra,1c00d758 <_get_digit>
1c00def0:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c00def4:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c00def6:	000d0563          	beqz	s10,1c00df00 <_prf+0x774>
1c00defa:	5732                	lw	a4,44(sp)
1c00defc:	fee046e3          	bgtz	a4,1c00dee8 <_prf+0x75c>
		if (falt || (precision > 0)) {
1c00df00:	300a9f63          	bnez	s5,1c00e21e <_prf+0xa92>
			zp->predot = decexp;
1c00df04:	86ea                	mv	a3,s10
			decexp = 0;
1c00df06:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00df08:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c00df0a:	ec804ae3          	bgtz	s0,1c00ddde <_prf+0x652>
	if (prune_zero) {
1c00df0e:	4752                	lw	a4,20(sp)
1c00df10:	eb31                	bnez	a4,1c00df64 <_prf+0x7d8>
	return buf - start;
1c00df12:	00c8                	addi	a0,sp,68
	*buf = 0;
1c00df14:	00090023          	sb	zero,0(s2)
	return buf - start;
1c00df18:	40a90533          	sub	a0,s2,a0
1c00df1c:	b389                	j	1c00dc5e <_prf+0x4d2>
			*buf++ = '.';
1c00df1e:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c00df20:	4a81                	li	s5,0
1c00df22:	b7f5                	j	1c00df0e <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c00df24:	106c                	addi	a1,sp,44
1c00df26:	1808                	addi	a0,sp,48
1c00df28:	831ff0ef          	jal	ra,1c00d758 <_get_digit>
1c00df2c:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c00df30:	03000713          	li	a4,48
1c00df34:	00e50363          	beq	a0,a4,1c00df3a <_prf+0x7ae>
			decexp--;
1c00df38:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c00df3a:	000a9663          	bnez	s5,1c00df46 <_prf+0x7ba>
		if (*buf++ != '0') {
1c00df3e:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c00df42:	00805d63          	blez	s0,1c00df5c <_prf+0x7d0>
			*buf++ = '.';
1c00df46:	02e00713          	li	a4,46
1c00df4a:	00248913          	addi	s2,s1,2
1c00df4e:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c00df52:	00805563          	blez	s0,1c00df5c <_prf+0x7d0>
1c00df56:	5732                	lw	a4,44(sp)
1c00df58:	08e04663          	bgtz	a4,1c00dfe4 <_prf+0x858>
	if (prune_zero) {
1c00df5c:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c00df5e:	4a81                	li	s5,0
1c00df60:	4681                	li	a3,0
	if (prune_zero) {
1c00df62:	cf99                	beqz	a5,1c00df80 <_prf+0x7f4>
		while (*--buf == '0')
1c00df64:	03000513          	li	a0,48
1c00df68:	fff90713          	addi	a4,s2,-1
1c00df6c:	00074583          	lbu	a1,0(a4)
1c00df70:	08a58263          	beq	a1,a0,1c00dff4 <_prf+0x868>
		if (*buf != '.') {
1c00df74:	02e00513          	li	a0,46
		zp->trail = 0;
1c00df78:	4401                	li	s0,0
		if (*buf != '.') {
1c00df7a:	00a59363          	bne	a1,a0,1c00df80 <_prf+0x7f4>
		while (*--buf == '0')
1c00df7e:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c00df80:	0dfdf713          	andi	a4,s11,223
1c00df84:	04500593          	li	a1,69
1c00df88:	f8b715e3          	bne	a4,a1,1c00df12 <_prf+0x786>
		*buf++ = c;
1c00df8c:	85ca                	mv	a1,s2
1c00df8e:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c00df92:	02b00793          	li	a5,43
		if (decexp < 0) {
1c00df96:	000d5663          	bgez	s10,1c00dfa2 <_prf+0x816>
			decexp = -decexp;
1c00df9a:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c00df9e:	02d00793          	li	a5,45
			*buf++ = '+';
1c00dfa2:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c00dfa6:	06300793          	li	a5,99
1c00dfaa:	01a7de63          	ble	s10,a5,1c00dfc6 <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c00dfae:	06400713          	li	a4,100
1c00dfb2:	02ed47b3          	div	a5,s10,a4
1c00dfb6:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c00dfba:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c00dfbe:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c00dfc2:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c00dfc6:	47a9                	li	a5,10
1c00dfc8:	892e                	mv	s2,a1
1c00dfca:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c00dfce:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c00dfd2:	03070713          	addi	a4,a4,48
1c00dfd6:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c00dfda:	03088893          	addi	a7,a7,48
1c00dfde:	011580a3          	sb	a7,1(a1)
1c00dfe2:	bf05                	j	1c00df12 <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c00dfe4:	106c                	addi	a1,sp,44
1c00dfe6:	1808                	addi	a0,sp,48
1c00dfe8:	f70ff0ef          	jal	ra,1c00d758 <_get_digit>
1c00dfec:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00dff0:	147d                	addi	s0,s0,-1
1c00dff2:	b785                	j	1c00df52 <_prf+0x7c6>
		while (*--buf == '0')
1c00dff4:	893a                	mv	s2,a4
1c00dff6:	bf8d                	j	1c00df68 <_prf+0x7dc>
1c00dff8:	8a4a                	mv	s4,s2
				switch (i) {
1c00dffa:	04c00693          	li	a3,76
1c00dffe:	004a278b          	p.lw	a5,4(s4!)
1c00e002:	02d48a63          	beq	s1,a3,1c00e036 <_prf+0x8aa>
1c00e006:	0096c963          	blt	a3,s1,1c00e018 <_prf+0x88c>
1c00e00a:	04800693          	li	a3,72
1c00e00e:	02d48063          	beq	s1,a3,1c00e02e <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c00e012:	0137a023          	sw	s3,0(a5)
					break;
1c00e016:	a801                	j	1c00e026 <_prf+0x89a>
				switch (i) {
1c00e018:	06800693          	li	a3,104
1c00e01c:	fed49be3          	bne	s1,a3,1c00e012 <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c00e020:	874e                	mv	a4,s3
1c00e022:	00e79023          	sh	a4,0(a5)
				continue;
1c00e026:	8952                	mv	s2,s4
1c00e028:	8662                	mv	a2,s8
1c00e02a:	f86ff06f          	j	1c00d7b0 <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c00e02e:	874e                	mv	a4,s3
1c00e030:	00e78023          	sb	a4,0(a5)
					break;
1c00e034:	bfcd                	j	1c00e026 <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c00e036:	41f9d713          	srai	a4,s3,0x1f
1c00e03a:	0137a023          	sw	s3,0(a5)
1c00e03e:	c3d8                	sw	a4,4(a5)
					break;
1c00e040:	b7dd                	j	1c00e026 <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c00e042:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c00e046:	77e1                	lui	a5,0xffff8
1c00e048:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c00e04c:	46c1                	li	a3,16
1c00e04e:	4601                	li	a2,0
1c00e050:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c00e054:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c00e058:	e0aff0ef          	jal	ra,1c00d662 <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c00e05c:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c00e060:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c00e064:	4909                	li	s2,2
				break;
1c00e066:	b40d                	j	1c00da88 <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c00e068:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c00e06c:	a4060ee3          	beqz	a2,1c00dac8 <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c00e070:	0d85                	addi	s11,s11,1
1c00e072:	bc89                	j	1c00dac4 <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c00e074:	00490a13          	addi	s4,s2,4
1c00e078:	00092583          	lw	a1,0(s2)
1c00e07c:	4601                	li	a2,0
					break;
1c00e07e:	ba99                	j	1c00d9d4 <_prf+0x248>
	if (alt_form) {
1c00e080:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c00e082:	46a1                	li	a3,8
1c00e084:	409504b3          	sub	s1,a0,s1
1c00e088:	ddaff0ef          	jal	ra,1c00d662 <_to_x>
1c00e08c:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c00e090:	4901                	li	s2,0
1c00e092:	badd                	j	1c00da88 <_prf+0x2fc>
				} else if (c == 'u') {
1c00e094:	07500713          	li	a4,117
1c00e098:	00ed9863          	bne	s11,a4,1c00e0a8 <_prf+0x91c>
	return _to_x(buf, value, 10);
1c00e09c:	46a9                	li	a3,10
1c00e09e:	8526                	mv	a0,s1
1c00e0a0:	dc2ff0ef          	jal	ra,1c00d662 <_to_x>
1c00e0a4:	8daa                	mv	s11,a0
1c00e0a6:	b7ed                	j	1c00e090 <_prf+0x904>
	if (alt_form) {
1c00e0a8:	8d26                	mv	s10,s1
1c00e0aa:	000a8963          	beqz	s5,1c00e0bc <_prf+0x930>
		*buf++ = '0';
1c00e0ae:	7761                	lui	a4,0xffff8
1c00e0b0:	83074713          	xori	a4,a4,-2000
1c00e0b4:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c00e0b8:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c00e0bc:	46c1                	li	a3,16
1c00e0be:	856a                	mv	a0,s10
1c00e0c0:	da2ff0ef          	jal	ra,1c00d662 <_to_x>
	if (prefix == 'X') {
1c00e0c4:	05800713          	li	a4,88
1c00e0c8:	02ed9263          	bne	s11,a4,1c00e0ec <_prf+0x960>
1c00e0cc:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c00e0ce:	45e5                	li	a1,25
1c00e0d0:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c00e0d4:	f9f68613          	addi	a2,a3,-97
1c00e0d8:	0ff67613          	andi	a2,a2,255
1c00e0dc:	00c5e563          	bltu	a1,a2,1c00e0e6 <_prf+0x95a>
			*buf += 'A' - 'a';
1c00e0e0:	1681                	addi	a3,a3,-32
1c00e0e2:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c00e0e6:	fff7c703          	lbu	a4,-1(a5)
1c00e0ea:	f37d                	bnez	a4,1c00e0d0 <_prf+0x944>
	return len + (buf - buf0);
1c00e0ec:	409d0733          	sub	a4,s10,s1
1c00e0f0:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c00e0f4:	001a9913          	slli	s2,s5,0x1
1c00e0f8:	ba41                	j	1c00da88 <_prf+0x2fc>
				PUTC('%');
1c00e0fa:	85de                	mv	a1,s7
1c00e0fc:	02500513          	li	a0,37
1c00e100:	ec4ff06f          	j	1c00d7c4 <_prf+0x38>
				count++;
1c00e104:	0985                	addi	s3,s3,1
				continue;
1c00e106:	8a4a                	mv	s4,s2
1c00e108:	bf39                	j	1c00e026 <_prf+0x89a>
1c00e10a:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c00e10c:	4d01                	li	s10,0
1c00e10e:	b2d5                	j	1c00daf2 <_prf+0x366>
					PUTC(' ');
1c00e110:	85de                	mv	a1,s7
1c00e112:	02000513          	li	a0,32
1c00e116:	c036                	sw	a3,0(sp)
1c00e118:	c43e                	sw	a5,8(sp)
1c00e11a:	9b02                	jalr	s6
1c00e11c:	4682                	lw	a3,0(sp)
1c00e11e:	47a2                	lw	a5,8(sp)
1c00e120:	ebf52563          	p.beqimm	a0,-1,1c00d7ca <_prf+0x3e>
				while (width-- > 0) {
1c00e124:	14fd                	addi	s1,s1,-1
1c00e126:	fff4b5e3          	p.bneimm	s1,-1,1c00e110 <_prf+0x984>
				count += width;
1c00e12a:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00e12c:	5cfd                	li	s9,-1
1c00e12e:	bad9                	j	1c00db04 <_prf+0x378>
				PUTC(*cptr++);
1c00e130:	0017c50b          	p.lbu	a0,1(a5!)
1c00e134:	85de                	mv	a1,s7
1c00e136:	c036                	sw	a3,0(sp)
1c00e138:	c43e                	sw	a5,8(sp)
1c00e13a:	9b02                	jalr	s6
1c00e13c:	4682                	lw	a3,0(sp)
1c00e13e:	47a2                	lw	a5,8(sp)
1c00e140:	9df534e3          	p.bneimm	a0,-1,1c00db08 <_prf+0x37c>
1c00e144:	e86ff06f          	j	1c00d7ca <_prf+0x3e>
				PUTC('0');
1c00e148:	85de                	mv	a1,s7
1c00e14a:	03000513          	li	a0,48
1c00e14e:	c036                	sw	a3,0(sp)
1c00e150:	c43e                	sw	a5,8(sp)
1c00e152:	9b02                	jalr	s6
1c00e154:	4682                	lw	a3,0(sp)
1c00e156:	47a2                	lw	a5,8(sp)
1c00e158:	9bf53be3          	p.bneimm	a0,-1,1c00db0e <_prf+0x382>
1c00e15c:	e6eff06f          	j	1c00d7ca <_prf+0x3e>
					PUTC(c);
1c00e160:	85de                	mv	a1,s7
1c00e162:	c232                	sw	a2,4(sp)
1c00e164:	c036                	sw	a3,0(sp)
1c00e166:	c442                	sw	a6,8(sp)
1c00e168:	9b02                	jalr	s6
1c00e16a:	4612                	lw	a2,4(sp)
1c00e16c:	4682                	lw	a3,0(sp)
1c00e16e:	4822                	lw	a6,8(sp)
1c00e170:	e5f52d63          	p.beqimm	a0,-1,1c00d7ca <_prf+0x3e>
					c = *++cptr;
1c00e174:	0d85                	addi	s11,s11,1
1c00e176:	000dc503          	lbu	a0,0(s11)
1c00e17a:	b27d                	j	1c00db28 <_prf+0x39c>
					PUTC('0');
1c00e17c:	85de                	mv	a1,s7
1c00e17e:	03000513          	li	a0,48
1c00e182:	c232                	sw	a2,4(sp)
1c00e184:	c036                	sw	a3,0(sp)
1c00e186:	c43a                	sw	a4,8(sp)
1c00e188:	9b02                	jalr	s6
1c00e18a:	4612                	lw	a2,4(sp)
1c00e18c:	4682                	lw	a3,0(sp)
1c00e18e:	4722                	lw	a4,8(sp)
1c00e190:	167d                	addi	a2,a2,-1
1c00e192:	9bf532e3          	p.bneimm	a0,-1,1c00db36 <_prf+0x3aa>
1c00e196:	e34ff06f          	j	1c00d7ca <_prf+0x3e>
					PUTC('0');
1c00e19a:	85de                	mv	a1,s7
1c00e19c:	03000513          	li	a0,48
1c00e1a0:	c036                	sw	a3,0(sp)
1c00e1a2:	c43a                	sw	a4,8(sp)
1c00e1a4:	9b02                	jalr	s6
1c00e1a6:	4682                	lw	a3,0(sp)
1c00e1a8:	4722                	lw	a4,8(sp)
1c00e1aa:	16fd                	addi	a3,a3,-1
1c00e1ac:	9df532e3          	p.bneimm	a0,-1,1c00db70 <_prf+0x3e4>
1c00e1b0:	e1aff06f          	j	1c00d7ca <_prf+0x3e>
					PUTC(c);
1c00e1b4:	85de                	mv	a1,s7
1c00e1b6:	c232                	sw	a2,4(sp)
1c00e1b8:	c036                	sw	a3,0(sp)
1c00e1ba:	c43a                	sw	a4,8(sp)
1c00e1bc:	9b02                	jalr	s6
1c00e1be:	4612                	lw	a2,4(sp)
1c00e1c0:	4682                	lw	a3,0(sp)
1c00e1c2:	4722                	lw	a4,8(sp)
1c00e1c4:	e1f52363          	p.beqimm	a0,-1,1c00d7ca <_prf+0x3e>
					c = *++cptr;
1c00e1c8:	0d85                	addi	s11,s11,1
1c00e1ca:	000dc503          	lbu	a0,0(s11)
1c00e1ce:	ba75                	j	1c00db8a <_prf+0x3fe>
					PUTC('0');
1c00e1d0:	85de                	mv	a1,s7
1c00e1d2:	03000513          	li	a0,48
1c00e1d6:	c43a                	sw	a4,8(sp)
1c00e1d8:	9b02                	jalr	s6
1c00e1da:	4722                	lw	a4,8(sp)
1c00e1dc:	177d                	addi	a4,a4,-1
1c00e1de:	9bf53fe3          	p.bneimm	a0,-1,1c00db9c <_prf+0x410>
1c00e1e2:	de8ff06f          	j	1c00d7ca <_prf+0x3e>
				PUTC(*cptr++);
1c00e1e6:	0014450b          	p.lbu	a0,1(s0!)
1c00e1ea:	85de                	mv	a1,s7
1c00e1ec:	9b02                	jalr	s6
1c00e1ee:	ddf52e63          	p.beqimm	a0,-1,1c00d7ca <_prf+0x3e>
1c00e1f2:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c00e1f6:	fef048e3          	bgtz	a5,1c00e1e6 <_prf+0xa5a>
			count += prefix;
1c00e1fa:	994e                	add	s2,s2,s3
			count += zero_head;
1c00e1fc:	012d09b3          	add	s3,s10,s2
			count += clen;
1c00e200:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c00e202:	e39052e3          	blez	s9,1c00e026 <_prf+0x89a>
				count += width;
1c00e206:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00e208:	1cfd                	addi	s9,s9,-1
1c00e20a:	e1fcaee3          	p.beqimm	s9,-1,1c00e026 <_prf+0x89a>
					PUTC(' ');
1c00e20e:	85de                	mv	a1,s7
1c00e210:	02000513          	li	a0,32
1c00e214:	9b02                	jalr	s6
1c00e216:	fff539e3          	p.bneimm	a0,-1,1c00e208 <_prf+0xa7c>
1c00e21a:	db0ff06f          	j	1c00d7ca <_prf+0x3e>
			*buf++ = '.';
1c00e21e:	02e00693          	li	a3,46
1c00e222:	00d90023          	sb	a3,0(s2)
1c00e226:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c00e22a:	86ea                	mv	a3,s10
			decexp = 0;
1c00e22c:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00e22e:	4a81                	li	s5,0
1c00e230:	b6f9                	j	1c00ddfe <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00e232:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c00e234:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c00e238:	46c1                	li	a3,16
1c00e23a:	d636                	sw	a3,44(sp)
1c00e23c:	04d74933          	p.min	s2,a4,a3
1c00e240:	b691                	j	1c00dd84 <_prf+0x5f8>

1c00e242 <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c00e242:	300476f3          	csrrci	a3,mstatus,8
1c00e246:	4785                	li	a5,1
1c00e248:	08f50623          	sb	a5,140(a0)
1c00e24c:	08d54783          	lbu	a5,141(a0)
1c00e250:	00201737          	lui	a4,0x201
1c00e254:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00e258:	04078793          	addi	a5,a5,64
1c00e25c:	07da                	slli	a5,a5,0x16
1c00e25e:	0007e723          	p.sw	zero,a4(a5)
1c00e262:	30069073          	csrw	mstatus,a3
1c00e266:	8082                	ret

1c00e268 <__rt_uart_setup.isra.5>:
1c00e268:	1c00f737          	lui	a4,0x1c00f
1c00e26c:	63872703          	lw	a4,1592(a4) # 1c00f638 <__rt_freq_domains>
1c00e270:	00155793          	srli	a5,a0,0x1
1c00e274:	97ba                	add	a5,a5,a4
1c00e276:	02a7d7b3          	divu	a5,a5,a0
1c00e27a:	1a102737          	lui	a4,0x1a102
1c00e27e:	17fd                	addi	a5,a5,-1
1c00e280:	07c2                	slli	a5,a5,0x10
1c00e282:	3067e793          	ori	a5,a5,774
1c00e286:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00e28a:	8082                	ret

1c00e28c <__rt_uart_setfreq_after>:
1c00e28c:	1c00f7b7          	lui	a5,0x1c00f
1c00e290:	5c878793          	addi	a5,a5,1480 # 1c00f5c8 <__rt_uart>
1c00e294:	4398                	lw	a4,0(a5)
1c00e296:	cb11                	beqz	a4,1c00e2aa <__rt_uart_setfreq_after+0x1e>
1c00e298:	4788                	lw	a0,8(a5)
1c00e29a:	1141                	addi	sp,sp,-16
1c00e29c:	c606                	sw	ra,12(sp)
1c00e29e:	fcbff0ef          	jal	ra,1c00e268 <__rt_uart_setup.isra.5>
1c00e2a2:	40b2                	lw	ra,12(sp)
1c00e2a4:	4501                	li	a0,0
1c00e2a6:	0141                	addi	sp,sp,16
1c00e2a8:	8082                	ret
1c00e2aa:	4501                	li	a0,0
1c00e2ac:	8082                	ret

1c00e2ae <__rt_uart_wait_tx_done.isra.6>:
1c00e2ae:	1a102737          	lui	a4,0x1a102
1c00e2b2:	1141                	addi	sp,sp,-16
1c00e2b4:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021d4>
1c00e2b8:	002046b7          	lui	a3,0x204
1c00e2bc:	431c                	lw	a5,0(a4)
1c00e2be:	8bc1                	andi	a5,a5,16
1c00e2c0:	e38d                	bnez	a5,1c00e2e2 <__rt_uart_wait_tx_done.isra.6+0x34>
1c00e2c2:	1a102737          	lui	a4,0x1a102
1c00e2c6:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021dc>
1c00e2ca:	431c                	lw	a5,0(a4)
1c00e2cc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00e2d0:	ffed                	bnez	a5,1c00e2ca <__rt_uart_wait_tx_done.isra.6+0x1c>
1c00e2d2:	c602                	sw	zero,12(sp)
1c00e2d4:	7cf00713          	li	a4,1999
1c00e2d8:	47b2                	lw	a5,12(sp)
1c00e2da:	00f75763          	ble	a5,a4,1c00e2e8 <__rt_uart_wait_tx_done.isra.6+0x3a>
1c00e2de:	0141                	addi	sp,sp,16
1c00e2e0:	8082                	ret
1c00e2e2:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00e2e6:	bfd9                	j	1c00e2bc <__rt_uart_wait_tx_done.isra.6+0xe>
1c00e2e8:	47b2                	lw	a5,12(sp)
1c00e2ea:	0785                	addi	a5,a5,1
1c00e2ec:	c63e                	sw	a5,12(sp)
1c00e2ee:	b7ed                	j	1c00e2d8 <__rt_uart_wait_tx_done.isra.6+0x2a>

1c00e2f0 <__rt_uart_setfreq_before>:
1c00e2f0:	1c00f7b7          	lui	a5,0x1c00f
1c00e2f4:	5c87a783          	lw	a5,1480(a5) # 1c00f5c8 <__rt_uart>
1c00e2f8:	c385                	beqz	a5,1c00e318 <__rt_uart_setfreq_before+0x28>
1c00e2fa:	1141                	addi	sp,sp,-16
1c00e2fc:	c606                	sw	ra,12(sp)
1c00e2fe:	fb1ff0ef          	jal	ra,1c00e2ae <__rt_uart_wait_tx_done.isra.6>
1c00e302:	40b2                	lw	ra,12(sp)
1c00e304:	005007b7          	lui	a5,0x500
1c00e308:	1a102737          	lui	a4,0x1a102
1c00e30c:	0799                	addi	a5,a5,6
1c00e30e:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021e0>
1c00e312:	4501                	li	a0,0
1c00e314:	0141                	addi	sp,sp,16
1c00e316:	8082                	ret
1c00e318:	4501                	li	a0,0
1c00e31a:	8082                	ret

1c00e31c <__rt_uart_cluster_req>:
1c00e31c:	1141                	addi	sp,sp,-16
1c00e31e:	c606                	sw	ra,12(sp)
1c00e320:	c422                	sw	s0,8(sp)
1c00e322:	30047473          	csrrci	s0,mstatus,8
1c00e326:	1c00e7b7          	lui	a5,0x1c00e
1c00e32a:	24278793          	addi	a5,a5,578 # 1c00e242 <__rt_uart_cluster_req_done>
1c00e32e:	c91c                	sw	a5,16(a0)
1c00e330:	4785                	li	a5,1
1c00e332:	d91c                	sw	a5,48(a0)
1c00e334:	411c                	lw	a5,0(a0)
1c00e336:	02052a23          	sw	zero,52(a0)
1c00e33a:	c948                	sw	a0,20(a0)
1c00e33c:	43cc                	lw	a1,4(a5)
1c00e33e:	4514                	lw	a3,8(a0)
1c00e340:	4150                	lw	a2,4(a0)
1c00e342:	0586                	slli	a1,a1,0x1
1c00e344:	00c50793          	addi	a5,a0,12
1c00e348:	4701                	li	a4,0
1c00e34a:	0585                	addi	a1,a1,1
1c00e34c:	4501                	li	a0,0
1c00e34e:	ff0fc0ef          	jal	ra,1c00ab3e <rt_periph_copy>
1c00e352:	30041073          	csrw	mstatus,s0
1c00e356:	40b2                	lw	ra,12(sp)
1c00e358:	4422                	lw	s0,8(sp)
1c00e35a:	0141                	addi	sp,sp,16
1c00e35c:	8082                	ret

1c00e35e <soc_eu_fcEventMask_setEvent>:
1c00e35e:	47fd                	li	a5,31
1c00e360:	4721                	li	a4,8
1c00e362:	00a7d463          	ble	a0,a5,1c00e36a <soc_eu_fcEventMask_setEvent+0xc>
1c00e366:	1501                	addi	a0,a0,-32
1c00e368:	4711                	li	a4,4
1c00e36a:	1a1066b7          	lui	a3,0x1a106
1c00e36e:	20e6f603          	p.lw	a2,a4(a3)
1c00e372:	4785                	li	a5,1
1c00e374:	00a79533          	sll	a0,a5,a0
1c00e378:	fff54513          	not	a0,a0
1c00e37c:	8d71                	and	a0,a0,a2
1c00e37e:	00a6e723          	p.sw	a0,a4(a3)
1c00e382:	8082                	ret

1c00e384 <rt_uart_conf_init>:
1c00e384:	000997b7          	lui	a5,0x99
1c00e388:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c00e38c:	c11c                	sw	a5,0(a0)
1c00e38e:	57fd                	li	a5,-1
1c00e390:	c15c                	sw	a5,4(a0)
1c00e392:	8082                	ret

1c00e394 <__rt_uart_open>:
1c00e394:	1141                	addi	sp,sp,-16
1c00e396:	c606                	sw	ra,12(sp)
1c00e398:	c422                	sw	s0,8(sp)
1c00e39a:	c226                	sw	s1,4(sp)
1c00e39c:	c04a                	sw	s2,0(sp)
1c00e39e:	30047973          	csrrci	s2,mstatus,8
1c00e3a2:	cd8d                	beqz	a1,1c00e3dc <__rt_uart_open+0x48>
1c00e3a4:	4198                	lw	a4,0(a1)
1c00e3a6:	1c00f6b7          	lui	a3,0x1c00f
1c00e3aa:	ffc50793          	addi	a5,a0,-4
1c00e3ae:	5c868413          	addi	s0,a3,1480 # 1c00f5c8 <__rt_uart>
1c00e3b2:	0792                	slli	a5,a5,0x4
1c00e3b4:	943e                	add	s0,s0,a5
1c00e3b6:	4010                	lw	a2,0(s0)
1c00e3b8:	5c868693          	addi	a3,a3,1480
1c00e3bc:	c60d                	beqz	a2,1c00e3e6 <__rt_uart_open+0x52>
1c00e3be:	c589                	beqz	a1,1c00e3c8 <__rt_uart_open+0x34>
1c00e3c0:	418c                	lw	a1,0(a1)
1c00e3c2:	4418                	lw	a4,8(s0)
1c00e3c4:	04e59d63          	bne	a1,a4,1c00e41e <__rt_uart_open+0x8a>
1c00e3c8:	0605                	addi	a2,a2,1
1c00e3ca:	00c6e7a3          	p.sw	a2,a5(a3)
1c00e3ce:	8522                	mv	a0,s0
1c00e3d0:	40b2                	lw	ra,12(sp)
1c00e3d2:	4422                	lw	s0,8(sp)
1c00e3d4:	4492                	lw	s1,4(sp)
1c00e3d6:	4902                	lw	s2,0(sp)
1c00e3d8:	0141                	addi	sp,sp,16
1c00e3da:	8082                	ret
1c00e3dc:	00099737          	lui	a4,0x99
1c00e3e0:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c00e3e4:	b7c9                	j	1c00e3a6 <__rt_uart_open+0x12>
1c00e3e6:	c418                	sw	a4,8(s0)
1c00e3e8:	4785                	li	a5,1
1c00e3ea:	1a102737          	lui	a4,0x1a102
1c00e3ee:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10273c>
1c00e3f2:	c01c                	sw	a5,0(s0)
1c00e3f4:	c048                	sw	a0,4(s0)
1c00e3f6:	4314                	lw	a3,0(a4)
1c00e3f8:	00a797b3          	sll	a5,a5,a0
1c00e3fc:	00151493          	slli	s1,a0,0x1
1c00e400:	8fd5                	or	a5,a5,a3
1c00e402:	c31c                	sw	a5,0(a4)
1c00e404:	8526                	mv	a0,s1
1c00e406:	f59ff0ef          	jal	ra,1c00e35e <soc_eu_fcEventMask_setEvent>
1c00e40a:	00148513          	addi	a0,s1,1
1c00e40e:	f51ff0ef          	jal	ra,1c00e35e <soc_eu_fcEventMask_setEvent>
1c00e412:	4408                	lw	a0,8(s0)
1c00e414:	e55ff0ef          	jal	ra,1c00e268 <__rt_uart_setup.isra.5>
1c00e418:	30091073          	csrw	mstatus,s2
1c00e41c:	bf4d                	j	1c00e3ce <__rt_uart_open+0x3a>
1c00e41e:	4401                	li	s0,0
1c00e420:	b77d                	j	1c00e3ce <__rt_uart_open+0x3a>

1c00e422 <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c00e422:	1141                	addi	sp,sp,-16
1c00e424:	c606                	sw	ra,12(sp)
1c00e426:	c422                	sw	s0,8(sp)
1c00e428:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00e42a:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c00e42e:	411c                	lw	a5,0(a0)
1c00e430:	17fd                	addi	a5,a5,-1
1c00e432:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c00e434:	e79d                	bnez	a5,1c00e462 <rt_uart_close+0x40>
1c00e436:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c00e438:	e77ff0ef          	jal	ra,1c00e2ae <__rt_uart_wait_tx_done.isra.6>
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c00e43c:	1a102737          	lui	a4,0x1a102
1c00e440:	005007b7          	lui	a5,0x500
1c00e444:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa1021e0>
1c00e448:	0799                	addi	a5,a5,6
1c00e44a:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c00e44c:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c00e44e:	78070713          	addi	a4,a4,1920
1c00e452:	4314                	lw	a3,0(a4)
1c00e454:	4785                	li	a5,1
1c00e456:	00c797b3          	sll	a5,a5,a2
1c00e45a:	fff7c793          	not	a5,a5
1c00e45e:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c00e460:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c00e462:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c00e466:	40b2                	lw	ra,12(sp)
1c00e468:	4422                	lw	s0,8(sp)
1c00e46a:	4492                	lw	s1,4(sp)
1c00e46c:	0141                	addi	sp,sp,16
1c00e46e:	8082                	ret

1c00e470 <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00e470:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00e474:	8795                	srai	a5,a5,0x5
1c00e476:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c00e47a:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c00e47e:	1c00e7b7          	lui	a5,0x1c00e
1c00e482:	31c78793          	addi	a5,a5,796 # 1c00e31c <__rt_uart_cluster_req>
1c00e486:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c00e488:	4785                	li	a5,1
  req->uart = handle;
1c00e48a:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c00e48c:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c00e48e:	c690                	sw	a2,8(a3)
  req->done = 0;
1c00e490:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c00e494:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c00e498:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c00e49a:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c00e49c:	00c68513          	addi	a0,a3,12
1c00e4a0:	85afd06f          	j	1c00b4fa <__rt_cluster_push_fc_event>

1c00e4a4 <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e4a4:	1c00e5b7          	lui	a1,0x1c00e
{
1c00e4a8:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e4aa:	4601                	li	a2,0
1c00e4ac:	2f058593          	addi	a1,a1,752 # 1c00e2f0 <__rt_uart_setfreq_before>
1c00e4b0:	4511                	li	a0,4
{
1c00e4b2:	c606                	sw	ra,12(sp)
1c00e4b4:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e4b6:	c6bfb0ef          	jal	ra,1c00a120 <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e4ba:	1c00e5b7          	lui	a1,0x1c00e
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00e4be:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e4c0:	4601                	li	a2,0
1c00e4c2:	28c58593          	addi	a1,a1,652 # 1c00e28c <__rt_uart_setfreq_after>
1c00e4c6:	4515                	li	a0,5
1c00e4c8:	c59fb0ef          	jal	ra,1c00a120 <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00e4cc:	1c00f7b7          	lui	a5,0x1c00f
1c00e4d0:	5c07a423          	sw	zero,1480(a5) # 1c00f5c8 <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00e4d4:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00e4d6:	c10d                	beqz	a0,1c00e4f8 <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00e4d8:	01402673          	csrr	a2,uhartid
1c00e4dc:	1c00f537          	lui	a0,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00e4e0:	40565593          	srai	a1,a2,0x5
1c00e4e4:	f265b5b3          	p.bclr	a1,a1,25,6
1c00e4e8:	f4563633          	p.bclr	a2,a2,26,5
1c00e4ec:	e0c50513          	addi	a0,a0,-500 # 1c00ee0c <__hyper_pad+0x54>
1c00e4f0:	946ff0ef          	jal	ra,1c00d636 <printf>
1c00e4f4:	8c6ff0ef          	jal	ra,1c00d5ba <abort>
}
1c00e4f8:	40b2                	lw	ra,12(sp)
1c00e4fa:	4422                	lw	s0,8(sp)
1c00e4fc:	0141                	addi	sp,sp,16
1c00e4fe:	8082                	ret

1c00e500 <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c00e500:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c00e504:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c00e508:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c00e50a:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00e50e:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c00e512:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c00e516:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c00e51a:	10059063          	bnez	a1,1c00e61a <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c00e51e:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00e522:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c00e526:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c00e52a:	e3ff2417          	auipc	s0,0xe3ff2
1c00e52e:	ada40413          	addi	s0,s0,-1318 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c00e532:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c00e536:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c00e538:	00000a97          	auipc	s5,0x0
1c00e53c:	038a8a93          	addi	s5,s5,56 # 1c00e570 <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c00e540:	00001b97          	auipc	s7,0x1
1c00e544:	108b8b93          	addi	s7,s7,264 # 1c00f648 <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00e548:	02800393          	li	t2,40
    mul     t2, t2, a0
1c00e54c:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c00e550:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c00e552:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c00e554:	1b201cb7          	lui	s9,0x1b201
1c00e558:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ff9e4>
    li      s8, 1
1c00e55c:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c00e55e:	00000d17          	auipc	s10,0x0
1c00e562:	0fad0d13          	addi	s10,s10,250 # 1c00e658 <__rt_set_slave_stack>
    ori     s10, s10, 1
1c00e566:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c00e56a:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c00e56e:	a819                	j	1c00e584 <__rt_master_loop>

1c00e570 <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c00e570:	000b0a63          	beqz	s6,1c00e584 <__rt_master_loop>

1c00e574 <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c00e574:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c00e578:	08029a63          	bnez	t0,1c00e60c <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c00e57c:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c00e580:	018ca023          	sw	s8,0(s9)

1c00e584 <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c00e584:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c00e588:	060e0b63          	beqz	t3,1c00e5fe <__rt_master_sleep>

1c00e58c <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c00e58c:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c00e590:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c00e594:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c00e598:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c00e59c:	ffee98e3          	bne	t4,t5,1c00e58c <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00e5a0:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c00e5a4:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c00e5a8:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c00e5ac:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c00e5b0:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c00e5b4:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c00e5b8:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c00e5bc:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c00e5c0:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c00e5c4:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c00e5c6:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c00e5c8:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c00e5cc:	00030a63          	beqz	t1,1c00e5e0 <__rt_no_stack_check>
    sub     t4, sp, t1
1c00e5d0:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c00e5d4:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00e5d8:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00e5dc:	7d00d073          	csrwi	0x7d0,1

1c00e5e0 <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c00e5e0:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c00e5e4:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c00e5e8:	21e9a623          	sw	t5,524(s3)

1c00e5ec <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c00e5ec:	000f2863          	p.beqimm	t5,0,1c00e5fc <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00e5f0:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00e5f4:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00e5f8:	0829a023          	sw	sp,128(s3)

1c00e5fc <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c00e5fc:	8282                	jr	t0

1c00e5fe <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c00e5fe:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00e602:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00e606:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c00e60a:	bfad                	j	1c00e584 <__rt_master_loop>

1c00e60c <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c00e60c:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00e610:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00e614:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c00e618:	bfb1                	j	1c00e574 <__rt_push_event_to_fc_retry>

1c00e61a <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c00e61a:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c00e61e:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c00e622:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c00e626:	00000a17          	auipc	s4,0x0
1c00e62a:	012a0a13          	addi	s4,s4,18 # 1c00e638 <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c00e62e:	00000a97          	auipc	s5,0x0
1c00e632:	00ea8a93          	addi	s5,s5,14 # 1c00e63c <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c00e636:	a019                	j	1c00e63c <__rt_wait_for_dispatch>

1c00e638 <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c00e638:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c00e63c <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00e63c:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00e640:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c00e644:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c00e648:	00031563          	bnez	t1,1c00e652 <__rt_other_entry>

1c00e64c <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c00e64c:	000a00b3          	add	ra,s4,zero
    jr      t0
1c00e650:	8282                	jr	t0

1c00e652 <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c00e652:	000a80b3          	add	ra,s5,zero
    jr      t0
1c00e656:	8282                	jr	t0

1c00e658 <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00e658:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00e65c:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c00e660:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c00e664:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c00e668:	c909                	beqz	a0,1c00e67a <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c00e66a:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c00e66e:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00e672:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00e676:	7d00d073          	csrwi	0x7d0,1

1c00e67a <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c00e67a:	8082                	ret

1c00e67c <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c00e67c:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c00e680:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00e684:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c00e688:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00e68c:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c00e690:	00204637          	lui	a2,0x204
1c00e694:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c00e698:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c00e69c:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00e69e:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c00e6a0:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c00e6a4:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00e6a6:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c00e6a8:	c131                	beqz	a0,1c00e6ec <__rt_dma_2d_done>

1c00e6aa <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c00e6aa:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c00e6ac:	00a5c363          	blt	a1,a0,1c00e6b2 <__rt_dma_2d_not_last>
    mv  a1, a0
1c00e6b0:	85aa                	mv	a1,a0

1c00e6b2 <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c00e6b2:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c00e6b4:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00e6b6:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c00e6b8:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c00e6bc:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c00e6be:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00e6c0:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00e6c2:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c00e6c4:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00e6c6:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00e6c8:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00e6ca:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c00e6cc:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c00e6ce:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00e6d0:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00e6d2:	cc08                	sw	a0,24(s0)

1c00e6d4 <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c00e6d4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c00e6d8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c00e6dc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c00e6e0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00e6e4:	fec12603          	lw	a2,-20(sp)

    mret
1c00e6e8:	30200073          	mret

1c00e6ec <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00e6ec:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c00e6f0:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c00e6f2:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c00e6f6:	00204437          	lui	s0,0x204
1c00e6fa:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c00e6fe:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c00e702:	d8e9                	beqz	s1,1c00e6d4 <__rt_dma_2d_exit>

    mv  x8, x9
1c00e704:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00e706:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00e708:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c00e70a:	b745                	j	1c00e6aa <__rt_dma_2d_redo>
